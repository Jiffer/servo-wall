   1               		.file	"xgrid.cpp"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
 637               		.section	.text._ZN5XgridC2Ev,"ax",@progbits
 640               	.global	_ZN5XgridC2Ev
 642               	_ZN5XgridC2Ev:
   1:xgrid.cpp     **** /************************************************************************/
   2:xgrid.cpp     **** /* xgrid                                                                */
   3:xgrid.cpp     **** /*                                                                      */
   4:xgrid.cpp     **** /* xgrid.cpp                                                            */
   5:xgrid.cpp     **** /*                                                                      */
   6:xgrid.cpp     **** /* Alex Forencich <alex@alexforencich.com>                              */
   7:xgrid.cpp     **** /*                                                                      */
   8:xgrid.cpp     **** /* Copyright (c) 2011 Alex Forencich                                    */
   9:xgrid.cpp     **** /*                                                                      */
  10:xgrid.cpp     **** /* Permission is hereby granted, free of charge, to any person          */
  11:xgrid.cpp     **** /* obtaining a copy of this software and associated documentation       */
  12:xgrid.cpp     **** /* files(the "Software"), to deal in the Software without restriction,  */
  13:xgrid.cpp     **** /* including without limitation the rights to use, copy, modify, merge, */
  14:xgrid.cpp     **** /* publish, distribute, sublicense, and/or sell copies of the Software, */
  15:xgrid.cpp     **** /* and to permit persons to whom the Software is furnished to do so,    */
  16:xgrid.cpp     **** /* subject to the following conditions:                                 */
  17:xgrid.cpp     **** /*                                                                      */
  18:xgrid.cpp     **** /* The above copyright notice and this permission notice shall be       */
  19:xgrid.cpp     **** /* included in all copies or substantial portions of the Software.      */
  20:xgrid.cpp     **** /*                                                                      */
  21:xgrid.cpp     **** /* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,      */
  22:xgrid.cpp     **** /* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF   */
  23:xgrid.cpp     **** /* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                */
  24:xgrid.cpp     **** /* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS  */
  25:xgrid.cpp     **** /* BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN   */
  26:xgrid.cpp     **** /* ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN    */
  27:xgrid.cpp     **** /* CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE     */
  28:xgrid.cpp     **** /* SOFTWARE.                                                            */
  29:xgrid.cpp     **** /*                                                                      */
  30:xgrid.cpp     **** /************************************************************************/
  31:xgrid.cpp     **** 
  32:xgrid.cpp     **** #include "xgrid.h"
  33:xgrid.cpp     **** 
  34:xgrid.cpp     **** #include <avr/pgmspace.h>
  35:xgrid.cpp     **** #include <util/crc16.h>
  36:xgrid.cpp     **** #include <string.h>
  37:xgrid.cpp     **** 
  38:xgrid.cpp     **** #if PROGMEM_SIZE > 0x010000
  39:xgrid.cpp     **** #define PGM_READ_BYTE pgm_read_byte_far
  40:xgrid.cpp     **** #define PGM_READ_WORD pgm_read_word_far
  41:xgrid.cpp     **** #define PGM_READ_DWORD pgm_read_dword_far
  42:xgrid.cpp     **** #else
  43:xgrid.cpp     **** #define PGM_READ_BYTE pgm_read_byte_near
  44:xgrid.cpp     **** #define PGM_READ_WORD pgm_read_word_near
  45:xgrid.cpp     **** #define PGM_READ_DWORD pgm_read_dword_near
  46:xgrid.cpp     **** #endif
  47:xgrid.cpp     **** 
  48:xgrid.cpp     **** Xgrid::Xgrid() :
 644               	.LM0:
 645               	.LFBB1:
 646 0000 CF93      		push r28
 647 0002 DF93      		push r29
 648               	/* prologue: function */
 649               	/* frame size = 0 */
 650               	/* stack size = 2 */
 651               	.L__stack_usage = 2
 652 0004 EC01      		movw r28,r24
 653               	.LBB13:
  49:xgrid.cpp     ****         cur_seq(0),
  50:xgrid.cpp     ****         timeout(0),
  51:xgrid.cpp     ****         state(XGRID_STATE_INIT),
  52:xgrid.cpp     ****         firmware_offset(0),
  53:xgrid.cpp     ****         firmware_updated(0),
  54:xgrid.cpp     ****         node_cnt(0),
  55:xgrid.cpp     ****         compare_buffer_ptr(0),
  56:xgrid.cpp     ****         rx_pkt(0)
 655               	.LM1:
 656 0006 1A82      		std Y+2,__zero_reg__
 657 0008 1986      		std Y+9,__zero_reg__
 658 000a 1A86      		std Y+10,__zero_reg__
 659 000c 81E0      		ldi r24,lo8(1)
 660 000e 8F87      		std Y+15,r24
 661 0010 188E      		std Y+24,__zero_reg__
 662 0012 198E      		std Y+25,__zero_reg__
 663 0014 1A8E      		std Y+26,__zero_reg__
 664 0016 1B8E      		std Y+27,__zero_reg__
 665 0018 1C8E      		std Y+28,__zero_reg__
 666 001a FE01      		movw r30,r28
 667 001c E358      		subi r30,lo8(-(125))
 668 001e FF4F      		sbci r31,hi8(-(125))
 669 0020 1082      		st Z,__zero_reg__
 670 0022 FE01      		movw r30,r28
 671 0024 E254      		subi r30,lo8(-(190))
 672 0026 FF4F      		sbci r31,hi8(-(190))
 673 0028 1082      		st Z,__zero_reg__
 674 002a FE01      		movw r30,r28
 675 002c E95F      		subi r30,lo8(-(1543))
 676 002e F94F      		sbci r31,hi8(-(1543))
 677 0030 1082      		st Z,__zero_reg__
 678 0032 1182      		std Z+1,__zero_reg__
 679               	.LBB14:
  57:xgrid.cpp     **** {
  58:xgrid.cpp     ****         uint8_t b;
  59:xgrid.cpp     ****         uint16_t crc = 0;
  60:xgrid.cpp     ****         
  61:xgrid.cpp     ****         // zero compare buffer
  62:xgrid.cpp     ****         memset(compare_buffer, 0, sizeof(xgrid_header_minimal_t) * XGRID_COMPARE_BUFFER_SIZE);
 681               	.LM2:
 682 0034 CE01      		movw r24,r28
 683 0036 8258      		subi r24,lo8(-(126))
 684 0038 9F4F      		sbci r25,hi8(-(126))
 685 003a FC01      		movw r30,r24
 686 003c 80E4      		ldi r24,lo8(64)
 687 003e DF01      		movw r26,r30
 688 0040 1D92      		st X+,__zero_reg__
 689 0042 8A95      	        dec r24
 690 0044 01F4      		brne .-6
 691 0046 9E01      		movw r18,r28
  63:xgrid.cpp     ****         
  64:xgrid.cpp     ****         // init packet buffers
  65:xgrid.cpp     ****         for (int i = 0; i < XGRID_SM_BUFFER_COUNT; i++)
 693               	.LM3:
 694 0048 40E0      		ldi r20,lo8(0)
 695 004a 50E0      		ldi r21,hi8(0)
 696               	.LBB15:
  66:xgrid.cpp     ****         {
  67:xgrid.cpp     ****                 pkt_buffer[i].buffer = pkt_buffer_sm[i];
  68:xgrid.cpp     ****                 pkt_buffer[i].buffer_len = XGRID_SM_BUFFER_SIZE;
 698               	.LM4:
 699 004c 60E4      		ldi r22,lo8(64)
 700 004e 70E0      		ldi r23,hi8(64)
 701               	.L2:
  48:xgrid.cpp     **** Xgrid::Xgrid() :
 703               	.LM5:
 704 0050 F901      		movw r30,r18
 705 0052 E65B      		subi r30,lo8(-(1354))
 706 0054 FA4F      		sbci r31,hi8(-(1354))
  67:xgrid.cpp     ****                 pkt_buffer[i].buffer = pkt_buffer_sm[i];
 708               	.LM6:
 709 0056 CA01      		movw r24,r20
 710 0058 A6E0      		ldi r26,6
 711 005a 880F      	1:	lsl r24
 712 005c 991F      		rol r25
 713 005e AA95      		dec r26
 714 0060 01F4      		brne 1b
 715 0062 8154      		subi r24,lo8(-(191))
 716 0064 9F4F      		sbci r25,hi8(-(191))
 717 0066 8C0F      		add r24,r28
 718 0068 9D1F      		adc r25,r29
 719 006a 8083      		st Z,r24
 720 006c 9183      		std Z+1,r25
  48:xgrid.cpp     **** Xgrid::Xgrid() :
 722               	.LM7:
 723 006e F901      		movw r30,r18
 724 0070 E45B      		subi r30,lo8(-(1356))
 725 0072 FA4F      		sbci r31,hi8(-(1356))
 727               	.LM8:
 728 0074 6083      		st Z,r22
 729 0076 7183      		std Z+1,r23
  48:xgrid.cpp     **** Xgrid::Xgrid() :
 731               	.LM9:
 732 0078 F901      		movw r30,r18
 733 007a EE5A      		subi r30,lo8(-(1362))
 734 007c FA4F      		sbci r31,hi8(-(1362))
  69:xgrid.cpp     ****                 pkt_buffer[i].flags = 0;
 736               	.LM10:
 737 007e 1082      		st Z,__zero_reg__
  65:xgrid.cpp     ****         for (int i = 0; i < XGRID_SM_BUFFER_COUNT; i++)
 739               	.LM11:
 740 0080 4F5F      		subi r20,lo8(-(1))
 741 0082 5F4F      		sbci r21,hi8(-(1))
 742 0084 2E5E      		subi r18,lo8(-(18))
 743 0086 3F4F      		sbci r19,hi8(-(18))
 744 0088 4A30      		cpi r20,10
 745 008a 5105      		cpc r21,__zero_reg__
 746 008c 01F4      		brne .L2
 747               	.LBE15:
 748               	.LBB16:
  70:xgrid.cpp     ****         }
  71:xgrid.cpp     ****         
  72:xgrid.cpp     ****         for (int i = 0; i < XGRID_LG_BUFFER_COUNT; i++)
  73:xgrid.cpp     ****         {
  74:xgrid.cpp     ****                 pkt_buffer[XGRID_SM_BUFFER_COUNT+i].buffer = pkt_buffer_lg[i];
 750               	.LM12:
 751 008e FE01      		movw r30,r28
 752 0090 E250      		subi r30,lo8(-(1534))
 753 0092 FA4F      		sbci r31,hi8(-(1534))
 754 0094 CE01      		movw r24,r28
 755 0096 815C      		subi r24,lo8(-(831))
 756 0098 9C4F      		sbci r25,hi8(-(831))
 757 009a 8083      		st Z,r24
 758 009c 9183      		std Z+1,r25
  75:xgrid.cpp     ****                 pkt_buffer[XGRID_SM_BUFFER_COUNT+i].buffer_len = XGRID_LG_BUFFER_SIZE;
 760               	.LM13:
 761 009e FE01      		movw r30,r28
 762 00a0 E050      		subi r30,lo8(-(1536))
 763 00a2 FA4F      		sbci r31,hi8(-(1536))
 764 00a4 82E0      		ldi r24,lo8(514)
 765 00a6 92E0      		ldi r25,hi8(514)
 766 00a8 8083      		st Z,r24
 767 00aa 9183      		std Z+1,r25
  76:xgrid.cpp     ****                 pkt_buffer[XGRID_SM_BUFFER_COUNT+i].flags = 0;
 769               	.LM14:
 770 00ac FE01      		movw r30,r28
 771 00ae EA5F      		subi r30,lo8(-(1542))
 772 00b0 F94F      		sbci r31,hi8(-(1542))
 773 00b2 1082      		st Z,__zero_reg__
 774               	.LBE16:
  77:xgrid.cpp     ****         }
  78:xgrid.cpp     ****         
  79:xgrid.cpp     ****         // calculate local id
  80:xgrid.cpp     ****         // simply crc of user sig row
  81:xgrid.cpp     ****         // likely to be unique and constant for each chip
  82:xgrid.cpp     ****         NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
 776               	.LM15:
 777 00b4 82E0      		ldi r24,lo8(2)
 778 00b6 8093 CA01 		sts 458,r24
  83:xgrid.cpp     ****         
  84:xgrid.cpp     ****         for (uint32_t i = 0x08; i <= 0x15; i++)
 780               	.LM16:
 781 00ba 48E0      		ldi r20,lo8(8)
 782 00bc 50E0      		ldi r21,hi8(8)
 783 00be 60E0      		ldi r22,hlo8(8)
 784 00c0 70E0      		ldi r23,hhi8(8)
  59:xgrid.cpp     ****         uint16_t crc = 0;
 786               	.LM17:
 787 00c2 80E0      		ldi r24,lo8(0)
 788 00c4 90E0      		ldi r25,hi8(0)
 789               	.L3:
 790               	.LBB17:
 791               	.LBB18:
  85:xgrid.cpp     ****         {
  86:xgrid.cpp     ****                 b = PGM_READ_BYTE(i);
 793               	.LM18:
 794               	/* #APP */
 795               	 ;  86 "xgrid.cpp" 1
 796 00c6 6BBF      		out 59, r22
 797 00c8 FA01      		movw r30, r20
 798 00ca 2791      		elpm r18, Z+
 799               		
 800               	 ;  0 "" 2
 801               	/* #NOAPP */
 802               	.LBE18:
 803               	.LBB19:
 804               	.LBB20:
 806               	.Ltext1:
   1:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** /* Copyright (c) 2002, 2003, 2004  Marek Michalkiewicz
   2:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h ****    Copyright (c) 2005, 2007 Joerg Wunsch
   3:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h ****    All rights reserved.
   4:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 
   5:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 
   8:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 
  11:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h ****    * Redistributions in binary form must reproduce the above copyright
  12:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h ****      notice, this list of conditions and the following disclaimer in
  13:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h ****      the documentation and/or other materials provided with the
  14:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h ****      distribution.
  15:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 
  16:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h ****    * Neither the name of the copyright holders nor the names of
  17:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h ****      contributors may be used to endorse or promote products derived
  18:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h ****      from this software without specific prior written permission.
  19:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 
  20:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 
  32:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** /* $Id: crc16.h 2136 2010-06-08 12:03:38Z joerg_wunsch $ */
  33:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 
  34:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** #ifndef _UTIL_CRC16_H_
  35:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** #define _UTIL_CRC16_H_
  36:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 
  37:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** #include <stdint.h>
  38:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 
  39:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** /** \file */
  40:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** /** \defgroup util_crc <util/crc16.h>: CRC Computations
  41:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h ****     \code#include <util/crc16.h>\endcode
  42:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 
  43:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h ****     This header file provides a optimized inline functions for calculating
  44:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h ****     cyclic redundancy checks (CRC) using common polynomials.
  45:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 
  46:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h ****     \par References:
  47:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 
  48:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h ****     \par
  49:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 
  50:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h ****     See the Dallas Semiconductor app note 27 for 8051 assembler example and
  51:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h ****     general CRC optimization suggestions. The table on the last page of the
  52:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h ****     app note is the key to understanding these implementations.
  53:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 
  54:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h ****     \par
  55:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 
  56:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h ****     Jack Crenshaw's "Implementing CRCs" article in the January 1992 isue of \e
  57:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h ****     Embedded \e Systems \e Programming. This may be difficult to find, but it
  58:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h ****     explains CRC's in very clear and concise terms. Well worth the effort to
  59:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h ****     obtain a copy.
  60:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 
  61:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h ****     A typical application would look like:
  62:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 
  63:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h ****     \code
  64:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h ****     // Dallas iButton test vector.
  65:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h ****     uint8_t serno[] = { 0x02, 0x1c, 0xb8, 0x01, 0, 0, 0, 0xa2 };
  66:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 
  67:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h ****     int
  68:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h ****     checkcrc(void)
  69:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h ****     {
  70:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 	uint8_t crc = 0, i;
  71:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 
  72:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 	for (i = 0; i < sizeof serno / sizeof serno[0]; i++)
  73:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 	    crc = _crc_ibutton_update(crc, serno[i]);
  74:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 
  75:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 	return crc; // must be 0
  76:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h ****     }
  77:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h ****     \endcode
  78:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** */
  79:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 
  80:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** /** \ingroup util_crc
  81:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h ****     Optimized CRC-16 calculation.
  82:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 
  83:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h ****     Polynomial: x^16 + x^15 + x^2 + 1 (0xa001)<br>
  84:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h ****     Initial value: 0xffff
  85:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 
  86:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h ****     This CRC is normally used in disk-drive controllers.
  87:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 
  88:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h ****     The following is the equivalent functionality written in C.
  89:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 
  90:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h ****     \code
  91:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h ****     uint16_t
  92:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h ****     crc16_update(uint16_t crc, uint8_t a)
  93:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h ****     {
  94:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 	int i;
  95:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 
  96:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 	crc ^= a;
  97:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 	for (i = 0; i < 8; ++i)
  98:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 	{
  99:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 	    if (crc & 1)
 100:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 		crc = (crc >> 1) ^ 0xA001;
 101:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 	    else
 102:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 		crc = (crc >> 1);
 103:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 	}
 104:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 
 105:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 	return crc;
 106:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h ****     }
 107:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 
 108:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h ****     \endcode */
 109:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 
 110:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** static __inline__ uint16_t
 111:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** _crc16_update(uint16_t __crc, uint8_t __data)
 112:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** {
 113:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 	uint8_t __tmp;
 114:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 	uint16_t __ret;
 115:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 
 116:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 	__asm__ __volatile__ (
 117:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 		"eor %A0,%2" "\n\t"
 118:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 		"mov %1,%A0" "\n\t"
 119:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 		"swap %1" "\n\t"
 120:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 		"eor %1,%A0" "\n\t"
 121:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 		"mov __tmp_reg__,%1" "\n\t"
 122:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 		"lsr %1" "\n\t"
 123:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 		"lsr %1" "\n\t"
 124:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 		"eor %1,__tmp_reg__" "\n\t"
 125:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 		"mov __tmp_reg__,%1" "\n\t"
 126:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 		"lsr %1" "\n\t"
 127:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 		"eor %1,__tmp_reg__" "\n\t"
 128:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 		"andi %1,0x07" "\n\t"
 129:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 		"mov __tmp_reg__,%A0" "\n\t"
 130:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 		"mov %A0,%B0" "\n\t"
 131:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 		"lsr %1" "\n\t"
 132:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 		"ror __tmp_reg__" "\n\t"
 133:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 		"ror %1" "\n\t"
 134:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 		"mov %B0,__tmp_reg__" "\n\t"
 135:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 		"eor %A0,%1" "\n\t"
 136:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 		"lsr __tmp_reg__" "\n\t"
 137:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 		"ror %1" "\n\t"
 138:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 		"eor %B0,__tmp_reg__" "\n\t"
 139:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 		"eor %A0,%1"
 140:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 		: "=r" (__ret), "=d" (__tmp)
 141:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 		: "r" (__data), "0" (__crc)
 142:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 		: "r0"
 143:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h **** 	);
 808               	.LM19:
 809               	/* #APP */
 810               	 ;  143 "/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/crc16.h" 
 811 00cc 8227      		eor r24,r18
 812 00ce 282F      		mov r18,r24
 813 00d0 2295      		swap r18
 814 00d2 2827      		eor r18,r24
 815 00d4 022E      		mov __tmp_reg__,r18
 816 00d6 2695      		lsr r18
 817 00d8 2695      		lsr r18
 818 00da 2025      		eor r18,__tmp_reg__
 819 00dc 022E      		mov __tmp_reg__,r18
 820 00de 2695      		lsr r18
 821 00e0 2025      		eor r18,__tmp_reg__
 822 00e2 2770      		andi r18,0x07
 823 00e4 082E      		mov __tmp_reg__,r24
 824 00e6 892F      		mov r24,r25
 825 00e8 2695      		lsr r18
 826 00ea 0794      		ror __tmp_reg__
 827 00ec 2795      		ror r18
 828 00ee 902D      		mov r25,__tmp_reg__
 829 00f0 8227      		eor r24,r18
 830 00f2 0694      		lsr __tmp_reg__
 831 00f4 2795      		ror r18
 832 00f6 9025      		eor r25,__tmp_reg__
 833 00f8 8227      		eor r24,r18
 834               	 ;  0 "" 2
 835               	/* #NOAPP */
 836               	.LBE20:
 837               	.LBE19:
 839               	.Ltext2:
  84:xgrid.cpp     ****         for (uint32_t i = 0x08; i <= 0x15; i++)
 841               	.LM20:
 842 00fa 4F5F      		subi r20,lo8(-(1))
 843 00fc 5F4F      		sbci r21,hi8(-(1))
 844 00fe 6F4F      		sbci r22,hlo8(-(1))
 845 0100 7F4F      		sbci r23,hhi8(-(1))
 846 0102 4631      		cpi r20,lo8(22)
 847 0104 5105      		cpc r21,__zero_reg__
 848 0106 6105      		cpc r22,__zero_reg__
 849 0108 7105      		cpc r23,__zero_reg__
 850 010a 01F4      		brne .L3
 851               	.LBE17:
  87:xgrid.cpp     ****                 crc = _crc16_update(crc, b);
  88:xgrid.cpp     ****         }
  89:xgrid.cpp     ****         
  90:xgrid.cpp     ****         my_id = crc;
 853               	.LM21:
 854 010c 8883      		st Y,r24
 855 010e 9983      		std Y+1,r25
  91:xgrid.cpp     ****         
  92:xgrid.cpp     ****         NVM_CMD = NVM_CMD_NO_OPERATION_gc;
 857               	.LM22:
 858 0110 1092 CA01 		sts 458,__zero_reg__
  93:xgrid.cpp     ****         
  94:xgrid.cpp     ****         // set initial delay
  95:xgrid.cpp     ****         // add some entropy
  96:xgrid.cpp     ****         delay = (3 * 1000) + (my_id & 0x03FF);
 860               	.LM23:
 861 0114 8881      		ld r24,Y
 862 0116 9981      		ldd r25,Y+1
 863 0118 9370      		andi r25,hi8(1023)
 864 011a 8854      		subi r24,lo8(-(3000))
 865 011c 944F      		sbci r25,hi8(-(3000))
 866 011e A0E0      		ldi r26,lo8(0)
 867 0120 B0E0      		ldi r27,hi8(0)
 868 0122 8B87      		std Y+11,r24
 869 0124 9C87      		std Y+12,r25
 870 0126 AD87      		std Y+13,r26
 871 0128 BE87      		std Y+14,r27
  97:xgrid.cpp     ****         
  98:xgrid.cpp     ****         xboot_app_crc16(&firmware_crc);
 873               	.LM24:
 874 012a CE01      		movw r24,r28
 875 012c 0396      		adiw r24,3
 876 012e 0E94 0000 		call xboot_app_crc16
  99:xgrid.cpp     ****         
 100:xgrid.cpp     ****         build_number = (uint32_t) &__BUILD_NUMBER;
 878               	.LM25:
 879 0132 80E0      		ldi r24,lo8(__BUILD_NUMBER)
 880 0134 90E0      		ldi r25,hi8(__BUILD_NUMBER)
 881 0136 AA27      		clr r26
 882 0138 97FD      		sbrc r25,7
 883 013a A095      		com r26
 884 013c BA2F      		mov r27,r26
 885 013e 8D83      		std Y+5,r24
 886 0140 9E83      		std Y+6,r25
 887 0142 AF83      		std Y+7,r26
 888 0144 B887      		std Y+8,r27
 889               	/* epilogue start */
 890               	.LBE14:
 891               	.LBE13:
 101:xgrid.cpp     **** }
 893               	.LM26:
 894 0146 DF91      		pop r29
 895 0148 CF91      		pop r28
 896 014a 0895      		ret
 907               	.Lscope1:
 908               		.section	.text._ZN5XgridD2Ev,"ax",@progbits
 911               	.global	_ZN5XgridD2Ev
 913               	_ZN5XgridD2Ev:
 102:xgrid.cpp     **** 
 103:xgrid.cpp     **** 
 104:xgrid.cpp     **** Xgrid::~Xgrid()
 915               	.LM27:
 916               	.LFBB2:
 917               	/* prologue: function */
 918               	/* frame size = 0 */
 919               	/* stack size = 0 */
 920               	.L__stack_usage = 0
 921               	/* epilogue start */
 105:xgrid.cpp     **** {
 106:xgrid.cpp     ****         
 107:xgrid.cpp     **** }
 923               	.LM28:
 924 0000 0895      		ret
 926               	.Lscope2:
 927               		.section	.text._ZN5Xgrid6get_idEv,"ax",@progbits
 930               	.global	_ZN5Xgrid6get_idEv
 932               	_ZN5Xgrid6get_idEv:
 108:xgrid.cpp     **** 
 109:xgrid.cpp     **** 
 110:xgrid.cpp     **** uint16_t Xgrid::get_id()
 111:xgrid.cpp     **** {
 934               	.LM29:
 935               	.LFBB3:
 936               	/* prologue: function */
 937               	/* frame size = 0 */
 938               	/* stack size = 0 */
 939               	.L__stack_usage = 0
 940 0000 FC01      		movw r30,r24
 112:xgrid.cpp     ****         return my_id;
 113:xgrid.cpp     **** }
 942               	.LM30:
 943 0002 8081      		ld r24,Z
 944 0004 9181      		ldd r25,Z+1
 945               	/* epilogue start */
 946 0006 0895      		ret
 948               	.Lscope3:
 949               		.section	.text._ZN5Xgrid8add_nodeEP8IOStream,"ax",@progbits
 953               	.global	_ZN5Xgrid8add_nodeEP8IOStream
 955               	_ZN5Xgrid8add_nodeEP8IOStream:
 114:xgrid.cpp     **** 
 115:xgrid.cpp     **** 
 116:xgrid.cpp     **** int8_t Xgrid::add_node(IOStream *stream)
 117:xgrid.cpp     **** {
 957               	.LM31:
 958               	.LFBB4:
 959               	/* prologue: function */
 960               	/* frame size = 0 */
 961               	/* stack size = 0 */
 962               	.L__stack_usage = 0
 963 0000 9C01      		movw r18,r24
 118:xgrid.cpp     ****         if (node_cnt < XGRID_MAX_NODES)
 965               	.LM32:
 966 0002 DC01      		movw r26,r24
 967 0004 A358      		subi r26,lo8(-(125))
 968 0006 BF4F      		sbci r27,hi8(-(125))
 969 0008 8C91      		ld r24,X
 970 000a 8830      		cpi r24,lo8(8)
 971 000c 04F4      		brge .L11
 119:xgrid.cpp     ****         {
 120:xgrid.cpp     ****                 nodes[node_cnt].stream = stream;
 973               	.LM33:
 974 000e 482F      		mov r20,r24
 975 0010 5527      		clr r21
 976 0012 47FD      		sbrc r20,7
 977 0014 5095      		com r21
 978 0016 FA01      		movw r30,r20
 979 0018 EE0F      		lsl r30
 980 001a FF1F      		rol r31
 981 001c E40F      		add r30,r20
 982 001e F51F      		adc r31,r21
 983 0020 EE0F      		lsl r30
 984 0022 FF1F      		rol r31
 985 0024 EE0F      		lsl r30
 986 0026 FF1F      		rol r31
 987 0028 E20F      		add r30,r18
 988 002a F31F      		adc r31,r19
 989 002c 658F      		std Z+29,r22
 990 002e 768F      		std Z+30,r23
 121:xgrid.cpp     ****                 nodes[node_cnt].tx_buffer = -1;
 992               	.LM34:
 993 0030 9FEF      		ldi r25,lo8(-1)
 994 0032 90A3      		std Z+32,r25
 122:xgrid.cpp     ****                 nodes[node_cnt].rx_buffer = -1;
 996               	.LM35:
 997 0034 978F      		std Z+31,r25
 123:xgrid.cpp     ****                 nodes[node_cnt].drop_chars = 0;
 999               	.LM36:
 1000 0036 11A2      		std Z+33,__zero_reg__
 1001 0038 12A2      		std Z+34,__zero_reg__
 124:xgrid.cpp     ****                 nodes[node_cnt].build = 0;
 1003               	.LM37:
 1004 003a 13A2      		std Z+35,__zero_reg__
 1005 003c 14A2      		std Z+36,__zero_reg__
 1006 003e 15A2      		std Z+37,__zero_reg__
 1007 0040 16A2      		std Z+38,__zero_reg__
 125:xgrid.cpp     ****                 nodes[node_cnt].crc = 0;
 1009               	.LM38:
 1010 0042 17A2      		std Z+39,__zero_reg__
 1011 0044 10A6      		std Z+40,__zero_reg__
 126:xgrid.cpp     ****                 return node_cnt++;
 1013               	.LM39:
 1014 0046 982F      		mov r25,r24
 1015 0048 9F5F      		subi r25,lo8(-(1))
 1016 004a 9C93      		st X,r25
 1017 004c 0895      		ret
 1018               	.L11:
 127:xgrid.cpp     ****         }
 128:xgrid.cpp     ****         
 129:xgrid.cpp     ****         return -1;
 1020               	.LM40:
 1021 004e 8FEF      		ldi r24,lo8(-1)
 130:xgrid.cpp     **** }
 1023               	.LM41:
 1024 0050 0895      		ret
 1026               	.Lscope4:
 1027               		.section	.text._ZN5Xgrid15populate_packetEPNS_6PacketEPh,"ax",@progbits
 1032               	.global	_ZN5Xgrid15populate_packetEPNS_6PacketEPh
 1034               	_ZN5Xgrid15populate_packetEPNS_6PacketEPh:
 131:xgrid.cpp     **** 
 132:xgrid.cpp     **** 
 133:xgrid.cpp     **** void Xgrid::populate_packet(Packet *pkt, uint8_t *buffer)
 134:xgrid.cpp     **** {
 1036               	.LM42:
 1037               	.LFBB5:
 1038               	/* prologue: function */
 1039               	/* frame size = 0 */
 1040               	/* stack size = 0 */
 1041               	.L__stack_usage = 0
 1042 0000 FB01      		movw r30,r22
 1043 0002 DA01      		movw r26,r20
 1044               	.LBB21:
 135:xgrid.cpp     ****         xgrid_header_t *hdr = (xgrid_header_t *)buffer;
 136:xgrid.cpp     ****         
 137:xgrid.cpp     ****         hdr->identifier = XGRID_IDENTIFIER;
 1046               	.LM43:
 1047 0004 8AE5      		ldi r24,lo8(90)
 1048 0006 8C93      		st X,r24
 138:xgrid.cpp     ****         hdr->size = pkt->data_len + sizeof(xgrid_header_short_t);
 1050               	.LM44:
 1051 0008 8085      		ldd r24,Z+8
 1052 000a 9185      		ldd r25,Z+9
 1053 000c 0696      		adiw r24,6
 1054 000e 1196      		adiw r26,1
 1055 0010 8D93      		st X+,r24
 1056 0012 9C93      		st X,r25
 1057 0014 1297      		sbiw r26,1+1
 139:xgrid.cpp     ****         hdr->source_id = pkt->source_id;
 1059               	.LM45:
 1060 0016 8081      		ld r24,Z
 1061 0018 9181      		ldd r25,Z+1
 1062 001a 1396      		adiw r26,3
 1063 001c 8D93      		st X+,r24
 1064 001e 9C93      		st X,r25
 1065 0020 1497      		sbiw r26,3+1
 140:xgrid.cpp     ****         hdr->type = pkt->type;
 1067               	.LM46:
 1068 0022 8281      		ldd r24,Z+2
 1069 0024 1596      		adiw r26,5
 1070 0026 8C93      		st X,r24
 1071 0028 1597      		sbiw r26,5
 141:xgrid.cpp     ****         hdr->seq = pkt->seq;
 1073               	.LM47:
 1074 002a 8381      		ldd r24,Z+3
 1075 002c 1696      		adiw r26,6
 1076 002e 8C93      		st X,r24
 1077 0030 1697      		sbiw r26,6
 142:xgrid.cpp     ****         hdr->flags = pkt->flags;
 1079               	.LM48:
 1080 0032 8481      		ldd r24,Z+4
 1081 0034 1796      		adiw r26,7
 1082 0036 8C93      		st X,r24
 1083 0038 1797      		sbiw r26,7
 143:xgrid.cpp     ****         hdr->radius = pkt->radius;
 1085               	.LM49:
 1086 003a 8581      		ldd r24,Z+5
 1087 003c 1896      		adiw r26,8
 1088 003e 8C93      		st X,r24
 1089 0040 1897      		sbiw r26,8
 1090               	/* epilogue start */
 1091               	.LBE21:
 144:xgrid.cpp     **** }
 1093               	.LM50:
 1094 0042 0895      		ret
 1096               	.Lscope5:
 1097               		.section	.text._ZN5Xgrid9is_uniqueEPNS_6PacketE,"ax",@progbits
 1100               	.global	_ZN5Xgrid9is_uniqueEPNS_6PacketE
 1102               	_ZN5Xgrid9is_uniqueEPNS_6PacketE:
 145:xgrid.cpp     **** 
 146:xgrid.cpp     **** 
 147:xgrid.cpp     **** uint8_t Xgrid::is_unique(Packet *pkt)
 148:xgrid.cpp     **** {
 1104               	.LM51:
 1105               	.LFBB6:
 1106               	/* prologue: function */
 1107               	/* frame size = 0 */
 1108               	/* stack size = 0 */
 1109               	.L__stack_usage = 0
 1110 0000 FB01      		movw r30,r22
 1111               	.LBB22:
 149:xgrid.cpp     ****         for (uint8_t i = 0; i < XGRID_COMPARE_BUFFER_SIZE; i++)
 150:xgrid.cpp     ****         {
 151:xgrid.cpp     ****                 if (compare_buffer[i].seq == pkt->seq &&
 1113               	.LM52:
 1114 0002 6381      		ldd r22,Z+3
 1115 0004 AC01      		movw r20,r24
 149:xgrid.cpp     ****         for (uint8_t i = 0; i < XGRID_COMPARE_BUFFER_SIZE; i++)
 1117               	.LM53:
 1118 0006 70E0      		ldi r23,lo8(0)
 1119               	.L16:
 147:xgrid.cpp     **** uint8_t Xgrid::is_unique(Packet *pkt)
 1121               	.LM54:
 1122 0008 DA01      		movw r26,r20
 1123 000a AF57      		subi r26,lo8(-(129))
 1124 000c BF4F      		sbci r27,hi8(-(129))
 1126               	.LM55:
 1127 000e 8C91      		ld r24,X
 1128 0010 8617      		cp r24,r22
 1129 0012 01F4      		brne .L14
 147:xgrid.cpp     **** uint8_t Xgrid::is_unique(Packet *pkt)
 1131               	.LM56:
 1132 0014 DA01      		movw r26,r20
 1133 0016 A258      		subi r26,lo8(-(126))
 1134 0018 BF4F      		sbci r27,hi8(-(126))
 1136               	.LM57:
 1137 001a 2D91      		ld r18,X+
 1138 001c 3C91      		ld r19,X
 1139 001e 1197      		sbiw r26,1
 1140 0020 8081      		ld r24,Z
 1141 0022 9181      		ldd r25,Z+1
 1142 0024 2817      		cp r18,r24
 1143 0026 3907      		cpc r19,r25
 1144 0028 01F4      		brne .L14
 147:xgrid.cpp     **** uint8_t Xgrid::is_unique(Packet *pkt)
 1146               	.LM58:
 1147 002a DA01      		movw r26,r20
 1148 002c A058      		subi r26,lo8(-(128))
 1149 002e BF4F      		sbci r27,hi8(-(128))
 1151               	.LM59:
 1152 0030 9C91      		ld r25,X
 1153 0032 8281      		ldd r24,Z+2
 1154 0034 9817      		cp r25,r24
 1155 0036 01F0      		breq .L17
 1156               	.L14:
 149:xgrid.cpp     ****         for (uint8_t i = 0; i < XGRID_COMPARE_BUFFER_SIZE; i++)
 1158               	.LM60:
 1159 0038 7F5F      		subi r23,lo8(-(1))
 1160 003a 4C5F      		subi r20,lo8(-(4))
 1161 003c 5F4F      		sbci r21,hi8(-(4))
 1162 003e 7031      		cpi r23,lo8(16)
 1163 0040 01F4      		brne .L16
 152:xgrid.cpp     ****                         compare_buffer[i].source_id == pkt->source_id &&
 153:xgrid.cpp     ****                         compare_buffer[i].type == pkt->type)
 154:xgrid.cpp     ****                         
 155:xgrid.cpp     ****                         return 0;
 156:xgrid.cpp     ****         }
 157:xgrid.cpp     ****         
 158:xgrid.cpp     ****         return 1;
 1165               	.LM61:
 1166 0042 81E0      		ldi r24,lo8(1)
 1167 0044 0895      		ret
 1168               	.L17:
 155:xgrid.cpp     ****                         return 0;
 1170               	.LM62:
 1171 0046 80E0      		ldi r24,lo8(0)
 1172               	.LBE22:
 159:xgrid.cpp     **** }
 1174               	.LM63:
 1175 0048 0895      		ret
 1180               	.Lscope6:
 1181               		.section	.text._ZN5Xgrid12check_uniqueEPNS_6PacketE,"ax",@progbits
 1185               	.global	_ZN5Xgrid12check_uniqueEPNS_6PacketE
 1187               	_ZN5Xgrid12check_uniqueEPNS_6PacketE:
 160:xgrid.cpp     **** 
 161:xgrid.cpp     **** 
 162:xgrid.cpp     **** uint8_t Xgrid::check_unique(Packet *pkt)
 163:xgrid.cpp     **** {
 1189               	.LM64:
 1190               	.LFBB7:
 1191 0000 EF92      		push r14
 1192 0002 FF92      		push r15
 1193 0004 0F93      		push r16
 1194 0006 1F93      		push r17
 1195 0008 CF93      		push r28
 1196 000a DF93      		push r29
 1197               	/* prologue: function */
 1198               	/* frame size = 0 */
 1199               	/* stack size = 6 */
 1200               	.L__stack_usage = 6
 1201 000c EC01      		movw r28,r24
 1202 000e 8B01      		movw r16,r22
 1203               	.LBB27:
 164:xgrid.cpp     ****         uint8_t ret = is_unique(pkt);
 1205               	.LM65:
 1206 0010 0E94 0000 		call _ZN5Xgrid9is_uniqueEPNS_6PacketE
 165:xgrid.cpp     ****         
 166:xgrid.cpp     ****         if (ret)
 1208               	.LM66:
 1209 0014 8823      		tst r24
 1210 0016 01F0      		breq .L20
 1211               	.LBE27:
 1212               	.LBB28:
 1213               	.LBB29:
 167:xgrid.cpp     ****         {
 168:xgrid.cpp     ****                 compare_buffer[compare_buffer_ptr].source_id = pkt->source_id;
 1215               	.LM67:
 1216 0018 DE01      		movw r26,r28
 1217 001a A254      		subi r26,lo8(-(190))
 1218 001c BF4F      		sbci r27,hi8(-(190))
 1219 001e 9C91      		ld r25,X
 1220 0020 492F      		mov r20,r25
 1221 0022 5527      		clr r21
 1222 0024 47FD      		sbrc r20,7
 1223 0026 5095      		com r21
 1224 0028 9A01      		movw r18,r20
 1225 002a 220F      		lsl r18
 1226 002c 331F      		rol r19
 1227 002e 220F      		lsl r18
 1228 0030 331F      		rol r19
 1229 0032 2C0F      		add r18,r28
 1230 0034 3D1F      		adc r19,r29
 1231 0036 7EE7      		ldi r23,lo8(126)
 1232 0038 E72E      		mov r14,r23
 1233 003a F12C      		mov r15,__zero_reg__
 1234 003c E20E      		add r14,r18
 1235 003e F31E      		adc r15,r19
 1236 0040 F801      		movw r30,r16
 1237 0042 6081      		ld r22,Z
 1238 0044 7181      		ldd r23,Z+1
 1239 0046 F701      		movw r30,r14
 1240 0048 6083      		st Z,r22
 1241 004a 7183      		std Z+1,r23
 169:xgrid.cpp     ****                 compare_buffer[compare_buffer_ptr].type = pkt->type;
 1243               	.LM68:
 1244 004c F801      		movw r30,r16
 1245 004e 6281      		ldd r22,Z+2
 1246 0050 FA01      		movw r30,r20
 1247 0052 B096      		adiw r30,32
 1248 0054 EE0F      		lsl r30
 1249 0056 FF1F      		rol r31
 1250 0058 EE0F      		lsl r30
 1251 005a FF1F      		rol r31
 1252 005c EC0F      		add r30,r28
 1253 005e FD1F      		adc r31,r29
 1254 0060 6083      		st Z,r22
 170:xgrid.cpp     ****                 compare_buffer[compare_buffer_ptr].seq = pkt->seq;
 1256               	.LM69:
 1257 0062 F801      		movw r30,r16
 1258 0064 4381      		ldd r20,Z+3
 1259 0066 2F57      		subi r18,lo8(-(129))
 1260 0068 3F4F      		sbci r19,hi8(-(129))
 1261 006a F901      		movw r30,r18
 1262 006c 4083      		st Z,r20
 171:xgrid.cpp     ****                 
 172:xgrid.cpp     ****                 compare_buffer_ptr++;
 1264               	.LM70:
 1265 006e 9F5F      		subi r25,lo8(-(1))
 1266 0070 9C93      		st X,r25
 173:xgrid.cpp     ****                 if (compare_buffer_ptr >= XGRID_COMPARE_BUFFER_SIZE)
 1268               	.LM71:
 1269 0072 9031      		cpi r25,lo8(16)
 1270 0074 04F0      		brlt .L20
 174:xgrid.cpp     ****                         compare_buffer_ptr = 0;
 1272               	.LM72:
 1273 0076 1C92      		st X,__zero_reg__
 1274               	.L20:
 1275               	/* epilogue start */
 1276               	.LBE29:
 1277               	.LBE28:
 175:xgrid.cpp     ****         }
 176:xgrid.cpp     ****         
 177:xgrid.cpp     ****         return ret;
 178:xgrid.cpp     **** }
 1279               	.LM73:
 1280 0078 DF91      		pop r29
 1281 007a CF91      		pop r28
 1282 007c 1F91      		pop r17
 1283 007e 0F91      		pop r16
 1284 0080 FF90      		pop r15
 1285 0082 EF90      		pop r14
 1286 0084 0895      		ret
 1291               	.Lscope7:
 1292               		.section	.text._ZN5Xgrid15get_free_bufferEj,"ax",@progbits
 1295               	.global	_ZN5Xgrid15get_free_bufferEj
 1297               	_ZN5Xgrid15get_free_bufferEj:
 179:xgrid.cpp     **** 
 180:xgrid.cpp     **** 
 181:xgrid.cpp     **** int8_t Xgrid::get_free_buffer(uint16_t data_size)
 182:xgrid.cpp     **** {
 1299               	.LM74:
 1300               	.LFBB8:
 1301               	/* prologue: function */
 1302               	/* frame size = 0 */
 1303               	/* stack size = 0 */
 1304               	.L__stack_usage = 0
 1305               	.LBB30:
 183:xgrid.cpp     ****         for (int i = 0; i < XGRID_BUFFER_COUNT; i++)
 184:xgrid.cpp     ****         {
 185:xgrid.cpp     ****                 if ((pkt_buffer[i].flags & XGRID_BUFFER_IN_USE) == 0 && pkt_buffer[i].buffer_len >=
 186:xgrid.cpp     ****                         return i;
 187:xgrid.cpp     ****         }
 188:xgrid.cpp     ****         return -1;
 1307               	.LM75:
 1308 0000 9C01      		movw r18,r24
 1309               	.LBE30:
 183:xgrid.cpp     ****         for (int i = 0; i < XGRID_BUFFER_COUNT; i++)
 1311               	.LM76:
 1312 0002 40E0      		ldi r20,lo8(0)
 1313 0004 50E0      		ldi r21,hi8(0)
 1314               	.L24:
 1315               	.LBB31:
 181:xgrid.cpp     **** int8_t Xgrid::get_free_buffer(uint16_t data_size)
 1317               	.LM77:
 1318 0006 F901      		movw r30,r18
 1319 0008 EE5A      		subi r30,lo8(-(1362))
 1320 000a FA4F      		sbci r31,hi8(-(1362))
 185:xgrid.cpp     ****                 if ((pkt_buffer[i].flags & XGRID_BUFFER_IN_USE) == 0 && pkt_buffer[i].buffer_len >=
 1322               	.LM78:
 1323 000c 8081      		ld r24,Z
 1324 000e 90E0      		ldi r25,lo8(0)
 1325 0010 8370      		andi r24,lo8(3)
 1326 0012 9070      		andi r25,hi8(3)
 1327 0014 0097      		sbiw r24,0
 1328 0016 01F4      		brne .L22
 181:xgrid.cpp     **** int8_t Xgrid::get_free_buffer(uint16_t data_size)
 1330               	.LM79:
 1331 0018 F901      		movw r30,r18
 1332 001a E45B      		subi r30,lo8(-(1356))
 1333 001c FA4F      		sbci r31,hi8(-(1356))
 185:xgrid.cpp     ****                 if ((pkt_buffer[i].flags & XGRID_BUFFER_IN_USE) == 0 && pkt_buffer[i].buffer_len >=
 1335               	.LM80:
 1336 001e 8081      		ld r24,Z
 1337 0020 9181      		ldd r25,Z+1
 1338 0022 8617      		cp r24,r22
 1339 0024 9707      		cpc r25,r23
 1340 0026 00F0      		brlo .L22
 186:xgrid.cpp     ****                         return i;
 1342               	.LM81:
 1343 0028 842F      		mov r24,r20
 1344 002a 0895      		ret
 1345               	.L22:
 183:xgrid.cpp     ****         for (int i = 0; i < XGRID_BUFFER_COUNT; i++)
 1347               	.LM82:
 1348 002c 4F5F      		subi r20,lo8(-(1))
 1349 002e 5F4F      		sbci r21,hi8(-(1))
 1350 0030 2E5E      		subi r18,lo8(-(18))
 1351 0032 3F4F      		sbci r19,hi8(-(18))
 1352 0034 4B30      		cpi r20,11
 1353 0036 5105      		cpc r21,__zero_reg__
 1354 0038 01F4      		brne .L24
 1356               	.LM83:
 1357 003a 8FEF      		ldi r24,lo8(-1)
 1358               	.LBE31:
 189:xgrid.cpp     **** }
 1360               	.LM84:
 1361 003c 0895      		ret
 1369               	.Lscope8:
 1370               		.section	.text._ZN5Xgrid15send_raw_packetEPNS_6PacketEj,"ax",@progbits
 1375               	.global	_ZN5Xgrid15send_raw_packetEPNS_6PacketEj
 1377               	_ZN5Xgrid15send_raw_packetEPNS_6PacketEj:
 190:xgrid.cpp     **** 
 191:xgrid.cpp     **** 
 192:xgrid.cpp     **** void Xgrid::send_packet(Packet *pkt, uint16_t mask)
 193:xgrid.cpp     **** {
 194:xgrid.cpp     ****         pkt->source_id = my_id;
 195:xgrid.cpp     ****         pkt->seq = cur_seq++;
 196:xgrid.cpp     ****         pkt->rx_node = 0xFF;
 197:xgrid.cpp     ****         
 198:xgrid.cpp     ****         send_raw_packet(pkt, mask);
 199:xgrid.cpp     **** }
 200:xgrid.cpp     **** 
 201:xgrid.cpp     **** 
 202:xgrid.cpp     **** void Xgrid::send_raw_packet(Packet *pkt, uint16_t mask)
 203:xgrid.cpp     **** {
 1379               	.LM85:
 1380               	.LFBB9:
 1381 0000 DF92      		push r13
 1382 0002 EF92      		push r14
 1383 0004 FF92      		push r15
 1384 0006 0F93      		push r16
 1385 0008 1F93      		push r17
 1386 000a CF93      		push r28
 1387 000c DF93      		push r29
 1388               	/* prologue: function */
 1389               	/* frame size = 0 */
 1390               	/* stack size = 7 */
 1391               	.L__stack_usage = 7
 1392 000e 8C01      		movw r16,r24
 1393 0010 EB01      		movw r28,r22
 1394 0012 7A01      		movw r14,r20
 1395               	.LBB32:
 204:xgrid.cpp     ****         uint8_t saved_status = SREG;
 1397               	.LM86:
 1398 0014 DFB6      		in r13,__SREG__
 205:xgrid.cpp     ****         cli();
 1400               	.LM87:
 1401               	/* #APP */
 1402               	 ;  205 "xgrid.cpp" 1
 1403 0016 F894      		cli
 1404               	 ;  0 "" 2
 206:xgrid.cpp     ****         
 207:xgrid.cpp     ****         // drop packet if not firmware releated during update cycle
 208:xgrid.cpp     ****         if (state == XGRID_STATE_FW_RX && ((pkt->type & 0xF0) != 0xF0))
 1406               	.LM88:
 1407               	/* #NOAPP */
 1408 0018 FC01      		movw r30,r24
 1409 001a 8785      		ldd r24,Z+15
 1410 001c 8832      		cpi r24,lo8(40)
 1411 001e 01F4      		brne .L27
 1413               	.LM89:
 1414 0020 8A81      		ldd r24,Y+2
 1415 0022 807F      		andi r24,lo8(-16)
 1416 0024 803F      		cpi r24,lo8(-16)
 1417 0026 01F0      		breq .+2
 1418 0028 00C0      		rjmp .L33
 1419 002a 00C0      		rjmp .L28
 1420               	.L27:
 209:xgrid.cpp     ****         {
 210:xgrid.cpp     ****                 SREG = saved_status;
 211:xgrid.cpp     ****                 return;
 212:xgrid.cpp     ****         }
 213:xgrid.cpp     ****         // don't send extra packets to the node we're updating
 214:xgrid.cpp     ****         if (state == XGRID_STATE_FW_TX && ((pkt->type & 0xF0) != 0xF0))
 1422               	.LM90:
 1423 002c 8032      		cpi r24,lo8(32)
 1424 002e 01F4      		brne .L28
 1426               	.LM91:
 1427 0030 8A81      		ldd r24,Y+2
 1428 0032 807F      		andi r24,lo8(-16)
 1429 0034 803F      		cpi r24,lo8(-16)
 1430 0036 01F0      		breq .L28
 215:xgrid.cpp     ****                 mask &= ~ update_node_mask;
 1432               	.LM92:
 1433 0038 F801      		movw r30,r16
 1434 003a 8089      		ldd r24,Z+16
 1435 003c 9189      		ldd r25,Z+17
 1436 003e 8095      		com r24
 1437 0040 9095      		com r25
 1438 0042 E822      		and r14,r24
 1439 0044 F922      		and r15,r25
 1440               	.L28:
 216:xgrid.cpp     ****         
 217:xgrid.cpp     ****         // get buffer index
 218:xgrid.cpp     ****         int8_t bi = get_free_buffer(pkt->data_len);
 1442               	.LM93:
 1443 0046 6885      		ldd r22,Y+8
 1444 0048 7985      		ldd r23,Y+9
 1445 004a C801      		movw r24,r16
 1446 004c 0E94 0000 		call _ZN5Xgrid15get_free_bufferEj
 219:xgrid.cpp     ****         
 220:xgrid.cpp     ****         if (bi < 0)
 1448               	.LM94:
 1449 0050 87FD      		sbrc r24,7
 1450 0052 00C0      		rjmp .L33
 1451               	.L30:
 221:xgrid.cpp     ****         {
 222:xgrid.cpp     ****                 SREG = saved_status;
 223:xgrid.cpp     ****                 return;
 224:xgrid.cpp     ****         }
 225:xgrid.cpp     ****         
 226:xgrid.cpp     ****         xgrid_buffer_t *buffer = &(pkt_buffer[bi]);
 1453               	.LM95:
 1454 0054 9927      		clr r25
 1455 0056 87FD      		sbrc r24,7
 1456 0058 9095      		com r25
 1457 005a 880F      		lsl r24
 1458 005c 991F      		rol r25
 1459 005e FC01      		movw r30,r24
 1460 0060 33E0      		ldi r19,3
 1461 0062 EE0F      	1:	lsl r30
 1462 0064 FF1F      		rol r31
 1463 0066 3A95      		dec r19
 1464 0068 01F4      		brne 1b
 1465 006a E80F      		add r30,r24
 1466 006c F91F      		adc r31,r25
 1467 006e EF5B      		subi r30,lo8(-(1345))
 1468 0070 FA4F      		sbci r31,hi8(-(1345))
 1469 0072 E00F      		add r30,r16
 1470 0074 F11F      		adc r31,r17
 227:xgrid.cpp     ****         
 228:xgrid.cpp     ****         // flag it for use
 229:xgrid.cpp     ****         buffer->flags |= XGRID_BUFFER_IN_USE_TX;
 1472               	.LM96:
 1473 0076 8189      		ldd r24,Z+17
 1474 0078 8160      		ori r24,lo8(1)
 1475 007a 818B      		std Z+17,r24
 230:xgrid.cpp     ****         
 231:xgrid.cpp     ****         xgrid_header_t *hdr = &(buffer->hdr);
 232:xgrid.cpp     ****         
 233:xgrid.cpp     ****         // packet header information
 234:xgrid.cpp     ****         hdr->identifier = XGRID_IDENTIFIER;
 1477               	.LM97:
 1478 007c 8AE5      		ldi r24,lo8(90)
 1479 007e 8083      		st Z,r24
 235:xgrid.cpp     ****         hdr->size = pkt->data_len + sizeof(xgrid_header_short_t);
 1481               	.LM98:
 1482 0080 8885      		ldd r24,Y+8
 1483 0082 9985      		ldd r25,Y+9
 1484 0084 0696      		adiw r24,6
 1485 0086 8183      		std Z+1,r24
 1486 0088 9283      		std Z+2,r25
 236:xgrid.cpp     ****         hdr->source_id = pkt->source_id;
 1488               	.LM99:
 1489 008a 8881      		ld r24,Y
 1490 008c 9981      		ldd r25,Y+1
 1491 008e 8383      		std Z+3,r24
 1492 0090 9483      		std Z+4,r25
 237:xgrid.cpp     ****         hdr->type = pkt->type;
 1494               	.LM100:
 1495 0092 8A81      		ldd r24,Y+2
 1496 0094 8583      		std Z+5,r24
 238:xgrid.cpp     ****         hdr->seq = pkt->seq;
 1498               	.LM101:
 1499 0096 8B81      		ldd r24,Y+3
 1500 0098 8683      		std Z+6,r24
 239:xgrid.cpp     ****         hdr->flags = pkt->flags;
 1502               	.LM102:
 1503 009a 8C81      		ldd r24,Y+4
 1504 009c 8783      		std Z+7,r24
 240:xgrid.cpp     ****         hdr->radius = pkt->radius;
 1506               	.LM103:
 1507 009e 8D81      		ldd r24,Y+5
 1508 00a0 8087      		std Z+8,r24
 241:xgrid.cpp     ****         
 242:xgrid.cpp     ****         buffer->mask = mask;
 1510               	.LM104:
 1511 00a2 E786      		std Z+15,r14
 1512 00a4 F08A      		std Z+16,r15
 1513               	.LBB33:
 243:xgrid.cpp     ****         
 244:xgrid.cpp     ****         // copy in data
 245:xgrid.cpp     ****         for (uint16_t i = 0; i < pkt->data_len; i++)
 1515               	.LM105:
 1516 00a6 20E0      		ldi r18,lo8(0)
 1517 00a8 30E0      		ldi r19,hi8(0)
 1518 00aa 00C0      		rjmp .L31
 1519               	.L32:
 246:xgrid.cpp     ****         {
 247:xgrid.cpp     ****                 buffer->buffer[i] = pkt->data[i];
 1521               	.LM106:
 1522 00ac AE81      		ldd r26,Y+6
 1523 00ae BF81      		ldd r27,Y+7
 1524 00b0 A20F      		add r26,r18
 1525 00b2 B31F      		adc r27,r19
 1526 00b4 8C91      		ld r24,X
 1527 00b6 A185      		ldd r26,Z+9
 1528 00b8 B285      		ldd r27,Z+10
 1529 00ba A20F      		add r26,r18
 1530 00bc B31F      		adc r27,r19
 1531 00be 8C93      		st X,r24
 245:xgrid.cpp     ****         for (uint16_t i = 0; i < pkt->data_len; i++)
 1533               	.LM107:
 1534 00c0 2F5F      		subi r18,lo8(-(1))
 1535 00c2 3F4F      		sbci r19,hi8(-(1))
 1536               	.L31:
 245:xgrid.cpp     ****         for (uint16_t i = 0; i < pkt->data_len; i++)
 1538               	.LM108:
 1539 00c4 8885      		ldd r24,Y+8
 1540 00c6 9985      		ldd r25,Y+9
 1541 00c8 2817      		cp r18,r24
 1542 00ca 3907      		cpc r19,r25
 1543 00cc 00F0      		brlo .L32
 1544               	.LBE33:
 248:xgrid.cpp     ****         }
 249:xgrid.cpp     ****         
 250:xgrid.cpp     ****         // start at zero
 251:xgrid.cpp     ****         buffer->ptr = 0;
 1546               	.LM109:
 1547 00ce 1586      		std Z+13,__zero_reg__
 1548 00d0 1686      		std Z+14,__zero_reg__
 1549               	.L33:
 252:xgrid.cpp     ****         
 253:xgrid.cpp     ****         SREG = saved_status;
 1551               	.LM110:
 1552 00d2 DFBE      		out __SREG__,r13
 1553               	/* epilogue start */
 1554               	.LBE32:
 254:xgrid.cpp     **** }
 1556               	.LM111:
 1557 00d4 DF91      		pop r29
 1558 00d6 CF91      		pop r28
 1559 00d8 1F91      		pop r17
 1560 00da 0F91      		pop r16
 1561 00dc FF90      		pop r15
 1562 00de EF90      		pop r14
 1563 00e0 DF90      		pop r13
 1564 00e2 0895      		ret
 1574               	.Lscope9:
 1575               		.section	.text._ZN5Xgrid11send_packetEPNS_6PacketEj,"ax",@progbits
 1580               	.global	_ZN5Xgrid11send_packetEPNS_6PacketEj
 1582               	_ZN5Xgrid11send_packetEPNS_6PacketEj:
 193:xgrid.cpp     **** {
 1584               	.LM112:
 1585               	.LFBB10:
 1586               	/* prologue: function */
 1587               	/* frame size = 0 */
 1588               	/* stack size = 0 */
 1589               	.L__stack_usage = 0
 194:xgrid.cpp     ****         pkt->source_id = my_id;
 1591               	.LM113:
 1592 0000 FC01      		movw r30,r24
 1593 0002 2081      		ld r18,Z
 1594 0004 3181      		ldd r19,Z+1
 1595 0006 FB01      		movw r30,r22
 1596 0008 2083      		st Z,r18
 1597 000a 3183      		std Z+1,r19
 195:xgrid.cpp     ****         pkt->seq = cur_seq++;
 1599               	.LM114:
 1600 000c FC01      		movw r30,r24
 1601 000e 2281      		ldd r18,Z+2
 1602 0010 FB01      		movw r30,r22
 1603 0012 2383      		std Z+3,r18
 1604 0014 2F5F      		subi r18,lo8(-(1))
 1605 0016 FC01      		movw r30,r24
 1606 0018 2283      		std Z+2,r18
 196:xgrid.cpp     ****         pkt->rx_node = 0xFF;
 1608               	.LM115:
 1609 001a 2FEF      		ldi r18,lo8(-1)
 1610 001c FB01      		movw r30,r22
 1611 001e 2287      		std Z+10,r18
 198:xgrid.cpp     ****         send_raw_packet(pkt, mask);
 1613               	.LM116:
 1614 0020 0E94 0000 		call _ZN5Xgrid15send_raw_packetEPNS_6PacketEj
 1615               	/* epilogue start */
 199:xgrid.cpp     **** }
 1617               	.LM117:
 1618 0024 0895      		ret
 1620               	.Lscope10:
 1621               		.section	.text._ZN5Xgrid16try_parse_packetEPNS_6PacketEPKhj,"ax",@progbits
 1627               	.global	_ZN5Xgrid16try_parse_packetEPNS_6PacketEPKhj
 1629               	_ZN5Xgrid16try_parse_packetEPNS_6PacketEPKhj:
 255:xgrid.cpp     **** 
 256:xgrid.cpp     **** 
 257:xgrid.cpp     **** uint8_t Xgrid::try_read_packet(Packet *pkt, IStream *stream)
 258:xgrid.cpp     **** {
 259:xgrid.cpp     ****         uint8_t buffer[XGRID_BUFFER_SIZE];
 260:xgrid.cpp     ****         uint16_t len;
 261:xgrid.cpp     ****         
 262:xgrid.cpp     ****         // don't do anything if data pointer is null
 263:xgrid.cpp     ****         if (pkt->data == 0)
 264:xgrid.cpp     ****                 return 0;
 265:xgrid.cpp     ****         
 266:xgrid.cpp     ****         // drop bytes until we get a XGRID_IDENTIFIER
 267:xgrid.cpp     ****         while (stream->available() > 0 && stream->peek() != XGRID_IDENTIFIER)
 268:xgrid.cpp     ****                 stream->get();
 269:xgrid.cpp     ****         
 270:xgrid.cpp     ****         // return if we're not looking at a packet
 271:xgrid.cpp     ****         if (stream->peek() != XGRID_IDENTIFIER)
 272:xgrid.cpp     ****                 return 0;
 273:xgrid.cpp     ****         
 274:xgrid.cpp     ****         // grab length
 275:xgrid.cpp     ****         if (stream->available() < 3)
 276:xgrid.cpp     ****                 return 0;
 277:xgrid.cpp     ****         
 278:xgrid.cpp     ****         len = stream->peek(1) | (stream->peek(2) << 8);
 279:xgrid.cpp     ****         
 280:xgrid.cpp     ****         // return if the whole packet isn't available yet
 281:xgrid.cpp     ****         if (stream->available() < len + 3)
 282:xgrid.cpp     ****                 return 0;
 283:xgrid.cpp     ****         
 284:xgrid.cpp     ****         // drop header
 285:xgrid.cpp     ****         stream->get();
 286:xgrid.cpp     ****         stream->get();
 287:xgrid.cpp     ****         stream->get();
 288:xgrid.cpp     ****         
 289:xgrid.cpp     ****         // read data
 290:xgrid.cpp     ****         stream->read(buffer, len);
 291:xgrid.cpp     ****         
 292:xgrid.cpp     ****         return try_parse_packet(pkt, buffer, len);
 293:xgrid.cpp     **** }
 294:xgrid.cpp     **** 
 295:xgrid.cpp     **** 
 296:xgrid.cpp     **** uint8_t Xgrid::try_parse_packet(Packet *pkt, const uint8_t *buffer, uint16_t len)
 297:xgrid.cpp     **** {
 1631               	.LM118:
 1632               	.LFBB11:
 1633 0000 CF93      		push r28
 1634 0002 DF93      		push r29
 1635               	/* prologue: function */
 1636               	/* frame size = 0 */
 1637               	/* stack size = 2 */
 1638               	.L__stack_usage = 2
 1639 0004 EB01      		movw r28,r22
 1640 0006 DA01      		movw r26,r20
 1641               	.LBB34:
 298:xgrid.cpp     ****         if (len < sizeof(xgrid_header_short_t))
 1643               	.LM119:
 1644 0008 2630      		cpi r18,6
 1645 000a 3105      		cpc r19,__zero_reg__
 1646 000c 00F0      		brlo .L39
 299:xgrid.cpp     ****                 return 0;
 300:xgrid.cpp     ****         
 301:xgrid.cpp     ****         xgrid_header_short_t *hdr = (xgrid_header_short_t *)buffer;
 302:xgrid.cpp     ****         
 303:xgrid.cpp     ****         pkt->source_id = hdr->source_id;
 1648               	.LM120:
 1649 000e 8D91      		ld r24,X+
 1650 0010 9C91      		ld r25,X
 1651 0012 1197      		sbiw r26,1
 1652 0014 8883      		st Y,r24
 1653 0016 9983      		std Y+1,r25
 304:xgrid.cpp     ****         pkt->type = hdr->type;
 1655               	.LM121:
 1656 0018 1296      		adiw r26,2
 1657 001a 8C91      		ld r24,X
 1658 001c 1297      		sbiw r26,2
 1659 001e 8A83      		std Y+2,r24
 305:xgrid.cpp     ****         pkt->seq = hdr->seq;
 1661               	.LM122:
 1662 0020 1396      		adiw r26,3
 1663 0022 8C91      		ld r24,X
 1664 0024 1397      		sbiw r26,3
 1665 0026 8B83      		std Y+3,r24
 306:xgrid.cpp     ****         pkt->flags = hdr->flags;
 1667               	.LM123:
 1668 0028 1496      		adiw r26,4
 1669 002a 8C91      		ld r24,X
 1670 002c 1497      		sbiw r26,4
 1671 002e 8C83      		std Y+4,r24
 307:xgrid.cpp     ****         pkt->radius = hdr->radius;
 1673               	.LM124:
 1674 0030 1596      		adiw r26,5
 1675 0032 8C91      		ld r24,X
 1676 0034 1597      		sbiw r26,5
 1677 0036 8D83      		std Y+5,r24
 308:xgrid.cpp     ****         
 309:xgrid.cpp     ****         len -= sizeof(xgrid_header_short_t);
 1679               	.LM125:
 1680 0038 2650      		subi r18,lo8(-(-6))
 1681 003a 3040      		sbci r19,hi8(-(-6))
 296:xgrid.cpp     **** uint8_t Xgrid::try_parse_packet(Packet *pkt, const uint8_t *buffer, uint16_t len)
 1683               	.LM126:
 1684 003c 1696      		adiw r26,6
 1685               	.LBB35:
 310:xgrid.cpp     ****         
 311:xgrid.cpp     ****         for (uint16_t i = 0; i < len; i++)
 1687               	.LM127:
 1688 003e 80E0      		ldi r24,lo8(0)
 1689 0040 90E0      		ldi r25,hi8(0)
 1690 0042 00C0      		rjmp .L37
 1691               	.L38:
 312:xgrid.cpp     ****         {
 313:xgrid.cpp     ****                 pkt->data[i] = buffer[i + sizeof(xgrid_header_short_t)];
 1693               	.LM128:
 1694 0044 4D91      		ld r20,X+
 1695 0046 EE81      		ldd r30,Y+6
 1696 0048 FF81      		ldd r31,Y+7
 1697 004a E80F      		add r30,r24
 1698 004c F91F      		adc r31,r25
 1699 004e 4083      		st Z,r20
 311:xgrid.cpp     ****         for (uint16_t i = 0; i < len; i++)
 1701               	.LM129:
 1702 0050 0196      		adiw r24,1
 1703               	.L37:
 311:xgrid.cpp     ****         for (uint16_t i = 0; i < len; i++)
 1705               	.LM130:
 1706 0052 8217      		cp r24,r18
 1707 0054 9307      		cpc r25,r19
 1708 0056 00F0      		brlo .L38
 1709               	.LBE35:
 314:xgrid.cpp     ****         }
 315:xgrid.cpp     ****         
 316:xgrid.cpp     ****         pkt->data_len = len;
 1711               	.LM131:
 1712 0058 2887      		std Y+8,r18
 1713 005a 3987      		std Y+9,r19
 317:xgrid.cpp     ****         
 318:xgrid.cpp     ****         return 1;
 1715               	.LM132:
 1716 005c 81E0      		ldi r24,lo8(1)
 1717 005e 00C0      		rjmp .L36
 1718               	.L39:
 299:xgrid.cpp     ****                 return 0;
 1720               	.LM133:
 1721 0060 80E0      		ldi r24,lo8(0)
 1722               	.L36:
 1723               	/* epilogue start */
 1724               	.LBE34:
 319:xgrid.cpp     **** }
 1726               	.LM134:
 1727 0062 DF91      		pop r29
 1728 0064 CF91      		pop r28
 1729 0066 0895      		ret
 1734               	.Lscope11:
 1735               		.section	.text._ZN5Xgrid15try_read_packetEPNS_6PacketEP7IStream,"ax",@progbits
 1740               	.global	_ZN5Xgrid15try_read_packetEPNS_6PacketEP7IStream
 1742               	_ZN5Xgrid15try_read_packetEPNS_6PacketEP7IStream:
 258:xgrid.cpp     **** {
 1744               	.LM135:
 1745               	.LFBB12:
 1746 0000 AF92      		push r10
 1747 0002 BF92      		push r11
 1748 0004 CF92      		push r12
 1749 0006 DF92      		push r13
 1750 0008 EF92      		push r14
 1751 000a FF92      		push r15
 1752 000c 0F93      		push r16
 1753 000e 1F93      		push r17
 1754 0010 CF93      		push r28
 1755 0012 DF93      		push r29
 1756 0014 CDB7      		in r28,__SP_L__
 1757 0016 DEB7      		in r29,__SP_H__
 1758 0018 C054      		subi r28,lo8(-(-64))
 1759 001a D040      		sbci r29,hi8(-(-64))
 1760 001c CDBF      		out __SP_L__,r28
 1761 001e DEBF      		out __SP_H__,r29
 1762               	/* prologue: function */
 1763               	/* frame size = 64 */
 1764               	/* stack size = 74 */
 1765               	.L__stack_usage = 74
 1766 0020 5C01      		movw r10,r24
 1767 0022 6B01      		movw r12,r22
 1768 0024 8A01      		movw r16,r20
 1769               	.LBB36:
 263:xgrid.cpp     ****         if (pkt->data == 0)
 1771               	.LM136:
 1772 0026 DB01      		movw r26,r22
 1773 0028 1696      		adiw r26,6
 1774 002a 8D91      		ld r24,X+
 1775 002c 9C91      		ld r25,X
 1776 002e 1797      		sbiw r26,6+1
 1777 0030 0097      		sbiw r24,0
 1778 0032 01F4      		brne .+2
 1779 0034 00C0      		rjmp .L48
 1780               	.L49:
 267:xgrid.cpp     ****         while (stream->available() > 0 && stream->peek() != XGRID_IDENTIFIER)
 1782               	.LM137:
 1783 0036 D801      		movw r26,r16
 1784 0038 ED91      		ld r30,X+
 1785 003a FC91      		ld r31,X
 1786 003c 0190      		ld __tmp_reg__,Z+
 1787 003e F081      		ld r31,Z
 1788 0040 E02D      		mov r30,__tmp_reg__
 1789 0042 C801      		movw r24,r16
 1790 0044 1995      		eicall
 1791 0046 0097      		sbiw r24,0
 1792 0048 01F4      		brne .+2
 1793 004a 00C0      		rjmp .L42
 267:xgrid.cpp     ****         while (stream->available() > 0 && stream->peek() != XGRID_IDENTIFIER)
 1795               	.LM138:
 1796 004c D801      		movw r26,r16
 1797 004e ED91      		ld r30,X+
 1798 0050 FC91      		ld r31,X
 1799 0052 0480      		ldd __tmp_reg__,Z+4
 1800 0054 F581      		ldd r31,Z+5
 1801 0056 E02D      		mov r30,__tmp_reg__
 1802 0058 C801      		movw r24,r16
 1803 005a 60E0      		ldi r22,lo8(0)
 1804 005c 70E0      		ldi r23,hi8(0)
 1805 005e 1995      		eicall
 1806 0060 8A35      		cpi r24,90
 1807 0062 9105      		cpc r25,__zero_reg__
 1808 0064 01F4      		brne .+2
 1809 0066 00C0      		rjmp .L42
 268:xgrid.cpp     ****                 stream->get();
 1811               	.LM139:
 1812 0068 D801      		movw r26,r16
 1813 006a ED91      		ld r30,X+
 1814 006c FC91      		ld r31,X
 1815 006e 0280      		ldd __tmp_reg__,Z+2
 1816 0070 F381      		ldd r31,Z+3
 1817 0072 E02D      		mov r30,__tmp_reg__
 1818 0074 C801      		movw r24,r16
 1819 0076 1995      		eicall
 1820 0078 00C0      		rjmp .L49
 1821               	.L51:
 275:xgrid.cpp     ****         if (stream->available() < 3)
 1823               	.LM140:
 1824 007a D801      		movw r26,r16
 1825 007c ED91      		ld r30,X+
 1826 007e FC91      		ld r31,X
 1827 0080 0190      		ld __tmp_reg__,Z+
 1828 0082 F081      		ld r31,Z
 1829 0084 E02D      		mov r30,__tmp_reg__
 1830 0086 C801      		movw r24,r16
 1831 0088 1995      		eicall
 1832 008a 8330      		cpi r24,3
 1833 008c 9105      		cpc r25,__zero_reg__
 1834 008e 00F4      		brsh .+2
 1835 0090 00C0      		rjmp .L48
 278:xgrid.cpp     ****         len = stream->peek(1) | (stream->peek(2) << 8);
 1837               	.LM141:
 1838 0092 D801      		movw r26,r16
 1839 0094 ED91      		ld r30,X+
 1840 0096 FC91      		ld r31,X
 1841 0098 0480      		ldd __tmp_reg__,Z+4
 1842 009a F581      		ldd r31,Z+5
 1843 009c E02D      		mov r30,__tmp_reg__
 1844 009e C801      		movw r24,r16
 1845 00a0 61E0      		ldi r22,lo8(1)
 1846 00a2 70E0      		ldi r23,hi8(1)
 1847 00a4 1995      		eicall
 1848 00a6 7C01      		movw r14,r24
 1849 00a8 D801      		movw r26,r16
 1850 00aa ED91      		ld r30,X+
 1851 00ac FC91      		ld r31,X
 1852 00ae 0480      		ldd __tmp_reg__,Z+4
 1853 00b0 F581      		ldd r31,Z+5
 1854 00b2 E02D      		mov r30,__tmp_reg__
 1855 00b4 C801      		movw r24,r16
 1856 00b6 62E0      		ldi r22,lo8(2)
 1857 00b8 70E0      		ldi r23,hi8(2)
 1858 00ba 1995      		eicall
 1859 00bc 382F      		mov r19,r24
 1860 00be 20E0      		ldi r18,lo8(0)
 1861 00c0 E22A      		or r14,r18
 1862 00c2 F32A      		or r15,r19
 281:xgrid.cpp     ****         if (stream->available() < len + 3)
 1864               	.LM142:
 1865 00c4 D801      		movw r26,r16
 1866 00c6 ED91      		ld r30,X+
 1867 00c8 FC91      		ld r31,X
 1868 00ca 0190      		ld __tmp_reg__,Z+
 1869 00cc F081      		ld r31,Z
 1870 00ce E02D      		mov r30,__tmp_reg__
 1871 00d0 C801      		movw r24,r16
 1872 00d2 1995      		eicall
 1873 00d4 9701      		movw r18,r14
 1874 00d6 2D5F      		subi r18,lo8(-(3))
 1875 00d8 3F4F      		sbci r19,hi8(-(3))
 1876 00da 8217      		cp r24,r18
 1877 00dc 9307      		cpc r25,r19
 1878 00de 00F0      		brlo .L48
 285:xgrid.cpp     ****         stream->get();
 1880               	.LM143:
 1881 00e0 D801      		movw r26,r16
 1882 00e2 ED91      		ld r30,X+
 1883 00e4 FC91      		ld r31,X
 1884 00e6 0280      		ldd __tmp_reg__,Z+2
 1885 00e8 F381      		ldd r31,Z+3
 1886 00ea E02D      		mov r30,__tmp_reg__
 1887 00ec C801      		movw r24,r16
 1888 00ee 1995      		eicall
 286:xgrid.cpp     ****         stream->get();
 1890               	.LM144:
 1891 00f0 D801      		movw r26,r16
 1892 00f2 ED91      		ld r30,X+
 1893 00f4 FC91      		ld r31,X
 1894 00f6 0280      		ldd __tmp_reg__,Z+2
 1895 00f8 F381      		ldd r31,Z+3
 1896 00fa E02D      		mov r30,__tmp_reg__
 1897 00fc C801      		movw r24,r16
 1898 00fe 1995      		eicall
 287:xgrid.cpp     ****         stream->get();
 1900               	.LM145:
 1901 0100 D801      		movw r26,r16
 1902 0102 ED91      		ld r30,X+
 1903 0104 FC91      		ld r31,X
 1904 0106 0280      		ldd __tmp_reg__,Z+2
 1905 0108 F381      		ldd r31,Z+3
 1906 010a E02D      		mov r30,__tmp_reg__
 1907 010c C801      		movw r24,r16
 1908 010e 1995      		eicall
 290:xgrid.cpp     ****         stream->read(buffer, len);
 1910               	.LM146:
 1911 0110 D801      		movw r26,r16
 1912 0112 ED91      		ld r30,X+
 1913 0114 FC91      		ld r31,X
 1914 0116 0084      		ldd __tmp_reg__,Z+8
 1915 0118 F185      		ldd r31,Z+9
 1916 011a E02D      		mov r30,__tmp_reg__
 1917 011c C801      		movw r24,r16
 1918 011e BE01      		movw r22,r28
 1919 0120 6F5F      		subi r22,lo8(-(1))
 1920 0122 7F4F      		sbci r23,hi8(-(1))
 1921 0124 A701      		movw r20,r14
 1922 0126 1995      		eicall
 292:xgrid.cpp     ****         return try_parse_packet(pkt, buffer, len);
 1924               	.LM147:
 1925 0128 C501      		movw r24,r10
 1926 012a B601      		movw r22,r12
 1927 012c AE01      		movw r20,r28
 1928 012e 4F5F      		subi r20,lo8(-(1))
 1929 0130 5F4F      		sbci r21,hi8(-(1))
 1930 0132 9701      		movw r18,r14
 1931 0134 0E94 0000 		call _ZN5Xgrid16try_parse_packetEPNS_6PacketEPKhj
 1932 0138 00C0      		rjmp .L41
 1933               	.L48:
 272:xgrid.cpp     ****                 return 0;
 1935               	.LM148:
 1936 013a 80E0      		ldi r24,lo8(0)
 1937               	.L41:
 1938               	/* epilogue start */
 1939               	.LBE36:
 293:xgrid.cpp     **** }
 1941               	.LM149:
 1942 013c C05C      		subi r28,lo8(-(64))
 1943 013e DF4F      		sbci r29,hi8(-(64))
 1944 0140 CDBF      		out __SP_L__,r28
 1945 0142 DEBF      		out __SP_H__,r29
 1946 0144 DF91      		pop r29
 1947 0146 CF91      		pop r28
 1948 0148 1F91      		pop r17
 1949 014a 0F91      		pop r16
 1950 014c FF90      		pop r15
 1951 014e EF90      		pop r14
 1952 0150 DF90      		pop r13
 1953 0152 CF90      		pop r12
 1954 0154 BF90      		pop r11
 1955 0156 AF90      		pop r10
 1956 0158 0895      		ret
 1957               	.L42:
 1958               	.LBB37:
 271:xgrid.cpp     ****         if (stream->peek() != XGRID_IDENTIFIER)
 1960               	.LM150:
 1961 015a D801      		movw r26,r16
 1962 015c ED91      		ld r30,X+
 1963 015e FC91      		ld r31,X
 1964 0160 0480      		ldd __tmp_reg__,Z+4
 1965 0162 F581      		ldd r31,Z+5
 1966 0164 E02D      		mov r30,__tmp_reg__
 1967 0166 C801      		movw r24,r16
 1968 0168 60E0      		ldi r22,lo8(0)
 1969 016a 70E0      		ldi r23,hi8(0)
 1970 016c 1995      		eicall
 1971 016e 8A35      		cpi r24,90
 1972 0170 9105      		cpc r25,__zero_reg__
 1973 0172 01F4      		brne .L48
 1974 0174 00C0      		rjmp .L51
 1975               	.LBE37:
 1985               	.Lscope12:
 1986               		.section	.text._ZN5Xgrid23internal_process_packetEPNS_6PacketE,"ax",@progbits
 1990               	.global	_ZN5Xgrid23internal_process_packetEPNS_6PacketE
 1992               	_ZN5Xgrid23internal_process_packetEPNS_6PacketE:
 320:xgrid.cpp     **** 
 321:xgrid.cpp     **** 
 322:xgrid.cpp     **** void Xgrid::process()
 323:xgrid.cpp     **** {
 324:xgrid.cpp     ****         Packet pkt;
 325:xgrid.cpp     ****         
 326:xgrid.cpp     ****         // process nodes
 327:xgrid.cpp     ****         for (uint8_t i = 0; i < node_cnt; i++)
 328:xgrid.cpp     ****         {
 329:xgrid.cpp     ****                 IOStream *stream = nodes[i].stream;
 330:xgrid.cpp     ****                 
 331:xgrid.cpp     ****                 // drop chars if necessary
 332:xgrid.cpp     ****                 // for discarding duplicate packets
 333:xgrid.cpp     ****                 while (nodes[i].drop_chars > 0 && stream->available())
 334:xgrid.cpp     ****                 {
 335:xgrid.cpp     ****                         stream->get();
 336:xgrid.cpp     ****                         nodes[i].drop_chars--;
 337:xgrid.cpp     ****                 }
 338:xgrid.cpp     ****                 
 339:xgrid.cpp     ****                 if (nodes[i].stream->available())
 340:xgrid.cpp     ****                 {
 341:xgrid.cpp     ****                         // Process receive data
 342:xgrid.cpp     ****                         if (nodes[i].rx_buffer == -1)
 343:xgrid.cpp     ****                         {
 344:xgrid.cpp     ****                                 uint16_t len;
 345:xgrid.cpp     ****                                 
 346:xgrid.cpp     ****                                 // drop chars to get to identifier
 347:xgrid.cpp     ****                                 while (stream->available() > 0 && stream->peek() != XGRID_IDENTIFIE
 348:xgrid.cpp     ****                                         stream->get();
 349:xgrid.cpp     ****                                 
 350:xgrid.cpp     ****                                 // continue if we're not looking at a packet
 351:xgrid.cpp     ****                                 if (stream->peek() != XGRID_IDENTIFIER)
 352:xgrid.cpp     ****                                         continue;
 353:xgrid.cpp     ****                                 
 354:xgrid.cpp     ****                                 // grab length
 355:xgrid.cpp     ****                                 if (stream->available() < 3)
 356:xgrid.cpp     ****                                         continue;
 357:xgrid.cpp     ****                                 
 358:xgrid.cpp     ****                                 len = stream->peek(1) | (stream->peek(2) << 8);
 359:xgrid.cpp     ****                                 
 360:xgrid.cpp     ****                                 int8_t bi = get_free_buffer(len-sizeof(xgrid_header_short_t));
 361:xgrid.cpp     ****                                 
 362:xgrid.cpp     ****                                 if (bi < 0)
 363:xgrid.cpp     ****                                         continue;
 364:xgrid.cpp     ****                                 
 365:xgrid.cpp     ****                                 nodes[i].rx_buffer = bi;
 366:xgrid.cpp     ****                                 
 367:xgrid.cpp     ****                                 pkt_buffer[bi].flags |= XGRID_BUFFER_IN_USE_RX;
 368:xgrid.cpp     ****                                 pkt_buffer[bi].flags &= ~XGRID_BUFFER_UNIQUE;
 369:xgrid.cpp     ****                                 pkt_buffer[bi].ptr = 0;
 370:xgrid.cpp     ****                         }
 371:xgrid.cpp     ****                         
 372:xgrid.cpp     ****                         xgrid_buffer_t *buffer = &(pkt_buffer[nodes[i].rx_buffer]);
 373:xgrid.cpp     ****                         
 374:xgrid.cpp     ****                         // read header
 375:xgrid.cpp     ****                         while (buffer->ptr < sizeof(xgrid_header_t) && nodes[i].stream->available()
 376:xgrid.cpp     ****                         {
 377:xgrid.cpp     ****                                 ((uint8_t *)&(buffer->hdr))[buffer->ptr++] = nodes[i].stream->get()
 378:xgrid.cpp     ****                         }
 379:xgrid.cpp     ****                         
 380:xgrid.cpp     ****                         if (buffer->ptr < sizeof(xgrid_header_t))
 381:xgrid.cpp     ****                                 continue;
 382:xgrid.cpp     ****                         
 383:xgrid.cpp     ****                         // grab header
 384:xgrid.cpp     ****                         pkt.source_id = buffer->hdr.source_id;
 385:xgrid.cpp     ****                         pkt.type = buffer->hdr.type;
 386:xgrid.cpp     ****                         pkt.seq = buffer->hdr.seq;
 387:xgrid.cpp     ****                         pkt.flags = buffer->hdr.flags;
 388:xgrid.cpp     ****                         pkt.radius = buffer->hdr.radius;
 389:xgrid.cpp     ****                         pkt.rx_node = i;
 390:xgrid.cpp     ****                         
 391:xgrid.cpp     ****                         // is packet unique?
 392:xgrid.cpp     ****                         if (!(buffer->flags & XGRID_BUFFER_UNIQUE))
 393:xgrid.cpp     ****                         {
 394:xgrid.cpp     ****                                 if (pkt.type == XGRID_PKT_FLUSH_COMPARE_BUFFER ||
 395:xgrid.cpp     ****                                         ((pkt.type != XGRID_PKT_FIRMWARE_BLOCK || (state == XGRID_S
 396:xgrid.cpp     ****                                         !(state == XGRID_STATE_FW_RX && ((pkt.type & 0xF0) != 0xF0)
 397:xgrid.cpp     ****                                         check_unique(&pkt)))
 398:xgrid.cpp     ****                                 {
 399:xgrid.cpp     ****                                         buffer->flags |= XGRID_BUFFER_UNIQUE;
 400:xgrid.cpp     ****                                 }
 401:xgrid.cpp     ****                                 else
 402:xgrid.cpp     ****                                 {
 403:xgrid.cpp     ****                                         // drop remainder
 404:xgrid.cpp     ****                                         nodes[i].drop_chars = (buffer->hdr.size+3) - buffer->ptr;
 405:xgrid.cpp     ****                                         
 406:xgrid.cpp     ****                                         // release buffer
 407:xgrid.cpp     ****                                         buffer->flags &= ~ XGRID_BUFFER_IN_USE;
 408:xgrid.cpp     ****                                         nodes[i].rx_buffer = -1;
 409:xgrid.cpp     ****                                         
 410:xgrid.cpp     ****                                         continue;
 411:xgrid.cpp     ****                                 }
 412:xgrid.cpp     ****                         }
 413:xgrid.cpp     ****                         
 414:xgrid.cpp     ****                         // read data
 415:xgrid.cpp     ****                         while (buffer->ptr < buffer->hdr.size+3 && nodes[i].stream->available())
 416:xgrid.cpp     ****                         {
 417:xgrid.cpp     ****                                 buffer->buffer[buffer->ptr++ - sizeof(xgrid_header_t)] = nodes[i].s
 418:xgrid.cpp     ****                         }
 419:xgrid.cpp     ****                         
 420:xgrid.cpp     ****                         // are we done?
 421:xgrid.cpp     ****                         if (buffer->ptr >= buffer->hdr.size+3)
 422:xgrid.cpp     ****                         {
 423:xgrid.cpp     ****                                 // set up data reference
 424:xgrid.cpp     ****                                 pkt.data = buffer->buffer;
 425:xgrid.cpp     ****                                 pkt.data_len = buffer->hdr.size - sizeof(xgrid_header_short_t);
 426:xgrid.cpp     ****                                 
 427:xgrid.cpp     ****                                 // process packet
 428:xgrid.cpp     ****                                 if (pkt.radius > 1)
 429:xgrid.cpp     ****                                 {
 430:xgrid.cpp     ****                                         uint8_t use_current = 1;
 431:xgrid.cpp     ****                                         uint16_t mask = 0xFFFF;
 432:xgrid.cpp     ****                                         if (pkt.rx_node < 16)
 433:xgrid.cpp     ****                                                 mask &= ~(1 << pkt.rx_node);
 434:xgrid.cpp     ****                                         
 435:xgrid.cpp     ****                                         if (buffer->hdr.flags & XGRID_PKT_FLAG_TRACE)
 436:xgrid.cpp     ****                                         {
 437:xgrid.cpp     ****                                                 buffer->hdr.size++;
 438:xgrid.cpp     ****                                                 if (buffer->hdr.size - sizeof(xgrid_header_short_t)
 439:xgrid.cpp     ****                                                 {
 440:xgrid.cpp     ****                                                         buffer->buffer[buffer->hdr.size - sizeof(xg
 441:xgrid.cpp     ****                                                 }
 442:xgrid.cpp     ****                                                 else
 443:xgrid.cpp     ****                                                 {
 444:xgrid.cpp     ****                                                         // TODO
 445:xgrid.cpp     ****                                                 }
 446:xgrid.cpp     ****                                         }
 447:xgrid.cpp     ****                                         
 448:xgrid.cpp     ****                                         if (use_current)
 449:xgrid.cpp     ****                                         {
 450:xgrid.cpp     ****                                                 buffer->hdr.radius--;
 451:xgrid.cpp     ****                                                 buffer->mask = mask;
 452:xgrid.cpp     ****                                                 buffer->flags |= XGRID_BUFFER_IN_USE_TX;
 453:xgrid.cpp     ****                                                 buffer->ptr = 0;
 454:xgrid.cpp     ****                                         }
 455:xgrid.cpp     ****                                 }
 456:xgrid.cpp     ****                                 
 457:xgrid.cpp     ****                                 internal_process_packet(&pkt);
 458:xgrid.cpp     ****                                 
 459:xgrid.cpp     ****                                 // release buffer
 460:xgrid.cpp     ****                                 buffer->flags &= ~ XGRID_BUFFER_IN_USE_RX;
 461:xgrid.cpp     ****                                 nodes[i].rx_buffer = -1;
 462:xgrid.cpp     ****                         }
 463:xgrid.cpp     ****                 }
 464:xgrid.cpp     ****         }
 465:xgrid.cpp     ****         
 466:xgrid.cpp     ****         // process transmit buffers
 467:xgrid.cpp     ****         for (uint8_t i = 0; i < XGRID_BUFFER_COUNT; i++)
 468:xgrid.cpp     ****         {
 469:xgrid.cpp     ****                 xgrid_buffer_t *buffer = &(pkt_buffer[i]);
 470:xgrid.cpp     ****                 
 471:xgrid.cpp     ****                 if (buffer->flags & XGRID_BUFFER_IN_USE_TX)
 472:xgrid.cpp     ****                 {
 473:xgrid.cpp     ****                         // process for transmit buffer
 474:xgrid.cpp     ****                         
 475:xgrid.cpp     ****                         // find minimum free
 476:xgrid.cpp     ****                         uint16_t f = 0xffff;
 477:xgrid.cpp     ****                         
 478:xgrid.cpp     ****                         for (uint8_t n = 0; n < node_cnt; n++)
 479:xgrid.cpp     ****                         {
 480:xgrid.cpp     ****                                 if (buffer->mask & (1 << n))
 481:xgrid.cpp     ****                                 {
 482:xgrid.cpp     ****                                         // check node buffer assignment
 483:xgrid.cpp     ****                                         if (nodes[n].tx_buffer == -1)
 484:xgrid.cpp     ****                                         {
 485:xgrid.cpp     ****                                                 // if not assigned, set
 486:xgrid.cpp     ****                                                 nodes[n].tx_buffer = i;
 487:xgrid.cpp     ****                                         }
 488:xgrid.cpp     ****                                         else if (nodes[n].tx_buffer != i)
 489:xgrid.cpp     ****                                         {
 490:xgrid.cpp     ****                                                 // if assigned to different buffer, hold packet
 491:xgrid.cpp     ****                                                 f = 0;
 492:xgrid.cpp     ****                                         }
 493:xgrid.cpp     ****                                         
 494:xgrid.cpp     ****                                         uint16_t f2 = nodes[n].stream->free();
 495:xgrid.cpp     ****                                         if (f > f2)
 496:xgrid.cpp     ****                                                 f = f2;
 497:xgrid.cpp     ****                                 }
 498:xgrid.cpp     ****                         }
 499:xgrid.cpp     ****                         
 500:xgrid.cpp     ****                         // send as much of packet as possible
 501:xgrid.cpp     ****                         for (uint8_t n = 0; n < node_cnt; n++)
 502:xgrid.cpp     ****                         {
 503:xgrid.cpp     ****                                 if (buffer->mask & (1 << n))
 504:xgrid.cpp     ****                                 {
 505:xgrid.cpp     ****                                         uint16_t cnt = f;
 506:xgrid.cpp     ****                                         uint16_t ptr = buffer->ptr;
 507:xgrid.cpp     ****                                         
 508:xgrid.cpp     ****                                         // header
 509:xgrid.cpp     ****                                         while (cnt > 0 && ptr < sizeof(xgrid_header_t))
 510:xgrid.cpp     ****                                         {
 511:xgrid.cpp     ****                                                 nodes[n].stream->put(((uint8_t *)&(buffer->hdr))[pt
 512:xgrid.cpp     ****                                                 ptr++;
 513:xgrid.cpp     ****                                                 cnt--;
 514:xgrid.cpp     ****                                         }
 515:xgrid.cpp     ****                                         
 516:xgrid.cpp     ****                                         // data
 517:xgrid.cpp     ****                                         while (cnt > 0 && ptr < buffer->hdr.size+3)
 518:xgrid.cpp     ****                                         {
 519:xgrid.cpp     ****                                                 nodes[n].stream->put(buffer->buffer[ptr-sizeof(xgri
 520:xgrid.cpp     ****                                                 ptr++;
 521:xgrid.cpp     ****                                                 cnt--;
 522:xgrid.cpp     ****                                         }
 523:xgrid.cpp     ****                                         
 524:xgrid.cpp     ****                                 }
 525:xgrid.cpp     ****                         }
 526:xgrid.cpp     ****                         
 527:xgrid.cpp     ****                         buffer->ptr += f;
 528:xgrid.cpp     ****                         
 529:xgrid.cpp     ****                         // are we done?
 530:xgrid.cpp     ****                         if (buffer->ptr >= buffer->hdr.size+3)
 531:xgrid.cpp     ****                         {
 532:xgrid.cpp     ****                                 // turn off flag
 533:xgrid.cpp     ****                                 buffer->flags &= ~XGRID_BUFFER_IN_USE;
 534:xgrid.cpp     ****                                 
 535:xgrid.cpp     ****                                 // remove buffer assigments
 536:xgrid.cpp     ****                                 for (uint8_t n = 0; n < node_cnt; n++)
 537:xgrid.cpp     ****                                 {
 538:xgrid.cpp     ****                                         if (buffer->mask & (1 << n))
 539:xgrid.cpp     ****                                         {
 540:xgrid.cpp     ****                                                 nodes[n].tx_buffer = -1;
 541:xgrid.cpp     ****                                         }
 542:xgrid.cpp     ****                                 }
 543:xgrid.cpp     ****                         }
 544:xgrid.cpp     ****                 }
 545:xgrid.cpp     ****         }
 546:xgrid.cpp     ****         
 547:xgrid.cpp     ****         // state machine timeout
 548:xgrid.cpp     ****         if (timeout > 0)
 549:xgrid.cpp     ****         {
 550:xgrid.cpp     ****                 timeout--;
 551:xgrid.cpp     ****                 
 552:xgrid.cpp     ****                 if (timeout == 0)
 553:xgrid.cpp     ****                 {
 554:xgrid.cpp     **** #ifdef DEBUG
 555:xgrid.cpp     ****                         printf_P(PSTR("timeout!\n"));
 556:xgrid.cpp     **** #endif // DEBUG
 557:xgrid.cpp     ****                         firmware_offset = 0;
 558:xgrid.cpp     ****                         state = XGRID_STATE_IDLE;
 559:xgrid.cpp     ****                 }
 560:xgrid.cpp     ****         }
 561:xgrid.cpp     ****         
 562:xgrid.cpp     ****         // state machine and periodic tasks
 563:xgrid.cpp     ****         if (delay > 0)
 564:xgrid.cpp     ****         {
 565:xgrid.cpp     ****                 // delay processing
 566:xgrid.cpp     ****                 delay--;
 567:xgrid.cpp     ****         }
 568:xgrid.cpp     ****         else if (state == XGRID_STATE_INIT)
 569:xgrid.cpp     ****         {
 570:xgrid.cpp     **** #ifdef DEBUG
 571:xgrid.cpp     ****                 printf_P(PSTR("init, send flush command\n"));
 572:xgrid.cpp     **** #endif // DEBUG
 573:xgrid.cpp     ****                 pkt.type = XGRID_PKT_FLUSH_COMPARE_BUFFER;
 574:xgrid.cpp     ****                 pkt.flags = 0;
 575:xgrid.cpp     ****                 pkt.radius = 1;
 576:xgrid.cpp     ****                 pkt.data = 0;
 577:xgrid.cpp     ****                 pkt.data_len = 0;
 578:xgrid.cpp     ****                 
 579:xgrid.cpp     ****                 send_packet(&pkt);
 580:xgrid.cpp     ****                 
 581:xgrid.cpp     ****                 delay = 1000;
 582:xgrid.cpp     ****                 state = XGRID_STATE_IDLE;
 583:xgrid.cpp     ****                 timeout = 0;
 584:xgrid.cpp     ****         }
 585:xgrid.cpp     ****         else if (state == XGRID_STATE_IDLE)
 586:xgrid.cpp     ****         {
 587:xgrid.cpp     **** #ifdef DEBUG
 588:xgrid.cpp     ****                 printf_P(PSTR("idle, send version check\n"));
 589:xgrid.cpp     **** #endif // DEBUG
 590:xgrid.cpp     ****                 // if we're idle, send a ping request
 591:xgrid.cpp     ****                 // to get neighbor firmware information
 592:xgrid.cpp     ****                 pkt.type = XGRID_PKT_PING_REQUEST;
 593:xgrid.cpp     ****                 pkt.flags = 0;
 594:xgrid.cpp     ****                 pkt.radius = 1;
 595:xgrid.cpp     ****                 pkt.data_len = 0;
 596:xgrid.cpp     ****                 
 597:xgrid.cpp     ****                 send_packet(&pkt);
 598:xgrid.cpp     ****                 
 599:xgrid.cpp     ****                 // wait 100 cycles
 600:xgrid.cpp     ****                 delay = 100;
 601:xgrid.cpp     ****                 state = XGRID_STATE_CHECK_VER;
 602:xgrid.cpp     ****                 timeout = 0;
 603:xgrid.cpp     ****         }
 604:xgrid.cpp     ****         else if (state == XGRID_STATE_CHECK_VER)
 605:xgrid.cpp     ****         {
 606:xgrid.cpp     **** #ifdef DEBUG
 607:xgrid.cpp     ****                 printf_P(PSTR("check neighbor versions\n"));
 608:xgrid.cpp     **** #endif // DEBUG
 609:xgrid.cpp     ****                 // check versions every 30 seconds
 610:xgrid.cpp     ****                 // at 1 kHz tick rate
 611:xgrid.cpp     ****                 delay = 30*1000;
 612:xgrid.cpp     ****                 state = XGRID_STATE_IDLE;
 613:xgrid.cpp     ****                 
 614:xgrid.cpp     ****                 update_node_mask = 0;
 615:xgrid.cpp     ****                 
 616:xgrid.cpp     **** #ifdef DEBUG
 617:xgrid.cpp     ****                 printf_P(PSTR("update check %ld\n"), build_number);
 618:xgrid.cpp     **** #endif // DEBUG
 619:xgrid.cpp     ****                 
 620:xgrid.cpp     ****                 // check detected revisions
 621:xgrid.cpp     ****                 for (uint8_t n = 0; n < node_cnt; n++)
 622:xgrid.cpp     ****                 {
 623:xgrid.cpp     **** #ifdef DEBUG
 624:xgrid.cpp     ****                         printf_P(PSTR("node %d: %ld (%04x)\n"), n, nodes[n].build, nodes[n].crc);
 625:xgrid.cpp     **** #endif // DEBUG
 626:xgrid.cpp     ****                         if (nodes[n].build > 0 && nodes[n].build < build_number)
 627:xgrid.cpp     ****                         {
 628:xgrid.cpp     ****                                 update_node_mask |= (1 << n);
 629:xgrid.cpp     ****                         }
 630:xgrid.cpp     ****                         else if (nodes[n].build > build_number)
 631:xgrid.cpp     ****                         {
 632:xgrid.cpp     ****                                 // we're old, don't try to update anybody
 633:xgrid.cpp     ****                                 update_node_mask = 0;
 634:xgrid.cpp     ****                                 break;
 635:xgrid.cpp     ****                         }
 636:xgrid.cpp     ****                 }
 637:xgrid.cpp     ****                 
 638:xgrid.cpp     ****                 // need to update somebody?
 639:xgrid.cpp     ****                 if (update_node_mask != 0)
 640:xgrid.cpp     ****                 {
 641:xgrid.cpp     **** #ifdef DEBUG
 642:xgrid.cpp     ****                         printf_P(PSTR("send start update command\n"));
 643:xgrid.cpp     **** #endif // DEBUG
 644:xgrid.cpp     ****                         // send start update command
 645:xgrid.cpp     ****                         uint8_t buffer[11];
 646:xgrid.cpp     ****                         //xgrid_pkt_maint_cmd_t *c = (xgrid_pkt_maint_cmd_t *)buffer;
 647:xgrid.cpp     ****                         xgrid_pkt_maint_cmd_start_update_t *c = (xgrid_pkt_maint_cmd_start_update_t
 648:xgrid.cpp     ****                         pkt.type = XGRID_PKT_MAINT_CMD;
 649:xgrid.cpp     ****                         pkt.flags = 0;
 650:xgrid.cpp     ****                         pkt.radius = 1;
 651:xgrid.cpp     ****                         pkt.data = buffer;
 652:xgrid.cpp     ****                         pkt.data_len = sizeof(xgrid_pkt_maint_cmd_start_update_t);
 653:xgrid.cpp     ****                         
 654:xgrid.cpp     ****                         c->cmd = XGRID_CMD_START_UPDATE;
 655:xgrid.cpp     ****                         
 656:xgrid.cpp     ****                         c->magic = XGRID_CMD_UPDATE_MAGIC;
 657:xgrid.cpp     ****                         
 658:xgrid.cpp     ****                         c->crc = firmware_crc;
 659:xgrid.cpp     ****                         c->build = build_number;
 660:xgrid.cpp     ****                         
 661:xgrid.cpp     ****                         send_packet(&pkt, update_node_mask);
 662:xgrid.cpp     ****                         
 663:xgrid.cpp     ****                         if (firmware_updated)
 664:xgrid.cpp     ****                                 firmware_offset = XB_APP_TEMP_START;
 665:xgrid.cpp     ****                         else
 666:xgrid.cpp     ****                                 firmware_offset = 0;
 667:xgrid.cpp     ****                         
 668:xgrid.cpp     ****                         // start sending new firmware after small delay
 669:xgrid.cpp     ****                         delay = 100;
 670:xgrid.cpp     ****                         state = XGRID_STATE_FW_TX;
 671:xgrid.cpp     ****                 }
 672:xgrid.cpp     ****                 else
 673:xgrid.cpp     ****                 {
 674:xgrid.cpp     ****                         // if we've been updated and no one else needs an update,
 675:xgrid.cpp     ****                         // install the firmware and reset
 676:xgrid.cpp     ****                         if (firmware_updated)
 677:xgrid.cpp     ****                         {
 678:xgrid.cpp     ****                                 xboot_reset();
 679:xgrid.cpp     ****                         }
 680:xgrid.cpp     ****                 }
 681:xgrid.cpp     ****         }
 682:xgrid.cpp     ****         else if (state == XGRID_STATE_FW_TX)
 683:xgrid.cpp     ****         {
 684:xgrid.cpp     ****                 if (firmware_offset < XB_APP_SIZE ||
 685:xgrid.cpp     ****                         (firmware_updated && firmware_offset < (XB_APP_TEMP_START + XB_APP_TEMP_SIZ
 686:xgrid.cpp     ****                 {
 687:xgrid.cpp     **** #ifdef DEBUG
 688:xgrid.cpp     ****                         printf_P(PSTR("send firmware block\n"));
 689:xgrid.cpp     **** #endif // DEBUG
 690:xgrid.cpp     ****                         // send flash block
 691:xgrid.cpp     ****                         
 692:xgrid.cpp     ****                         uint8_t buffer[SPM_PAGESIZE+2];
 693:xgrid.cpp     ****                         xgrid_pkt_firmware_block_t *b = (xgrid_pkt_firmware_block_t *)buffer;
 694:xgrid.cpp     ****                         pkt.type = XGRID_PKT_FIRMWARE_BLOCK;
 695:xgrid.cpp     ****                         pkt.flags = 0;
 696:xgrid.cpp     ****                         pkt.radius = 1;
 697:xgrid.cpp     ****                         pkt.data = buffer;
 698:xgrid.cpp     ****                         pkt.data_len = SPM_PAGESIZE+2;
 699:xgrid.cpp     ****                         
 700:xgrid.cpp     ****                         if (firmware_updated)
 701:xgrid.cpp     ****                                 b->offset = (firmware_offset - XB_APP_TEMP_START)/SPM_PAGESIZE;
 702:xgrid.cpp     ****                         else
 703:xgrid.cpp     ****                                 b->offset = firmware_offset/SPM_PAGESIZE;
 704:xgrid.cpp     ****                         
 705:xgrid.cpp     ****                         for (uint16_t i = 0; i < SPM_PAGESIZE; i++)
 706:xgrid.cpp     ****                         {
 707:xgrid.cpp     ****                                 b->data[i] = PGM_READ_BYTE(firmware_offset++);
 708:xgrid.cpp     ****                         }
 709:xgrid.cpp     ****                         
 710:xgrid.cpp     ****                         if (firmware_offset == XB_APP_TEMP_END)
 711:xgrid.cpp     ****                         {
 712:xgrid.cpp     ****                                 for (uint16_t i = SPM_PAGESIZE - 7; i < SPM_PAGESIZE; i++)
 713:xgrid.cpp     ****                                         b->data[i] = 0xff;
 714:xgrid.cpp     ****                         }
 715:xgrid.cpp     ****                         
 716:xgrid.cpp     ****                         send_packet(&pkt, update_node_mask);
 717:xgrid.cpp     ****                         
 718:xgrid.cpp     ****                         // small delay before next packet
 719:xgrid.cpp     ****                         // long enough to clear data through serial
 720:xgrid.cpp     ****                         // port buffer and write the block at the other end
 721:xgrid.cpp     ****                         delay = 100;
 722:xgrid.cpp     ****                 }
 723:xgrid.cpp     ****                 else
 724:xgrid.cpp     ****                 {
 725:xgrid.cpp     **** #ifdef DEBUG
 726:xgrid.cpp     ****                         printf_P(PSTR("finished sending firmware\n"));
 727:xgrid.cpp     **** #endif // DEBUG
 728:xgrid.cpp     ****                         // send finish update command
 729:xgrid.cpp     ****                         uint8_t buffer[5];
 730:xgrid.cpp     ****                         xgrid_pkt_maint_cmd_t *c = (xgrid_pkt_maint_cmd_t *)buffer;
 731:xgrid.cpp     ****                         pkt.type = XGRID_PKT_MAINT_CMD;
 732:xgrid.cpp     ****                         pkt.flags = 0;
 733:xgrid.cpp     ****                         pkt.radius = 1;
 734:xgrid.cpp     ****                         pkt.data = buffer;
 735:xgrid.cpp     ****                         pkt.data_len = 5;
 736:xgrid.cpp     ****                         
 737:xgrid.cpp     ****                         c->cmd = XGRID_CMD_FINISH_UPDATE;
 738:xgrid.cpp     ****                         
 739:xgrid.cpp     ****                         c->magic = XGRID_CMD_UPDATE_MAGIC;
 740:xgrid.cpp     ****                         
 741:xgrid.cpp     ****                         send_packet(&pkt, update_node_mask);
 742:xgrid.cpp     ****                         
 743:xgrid.cpp     ****                         // flush old build information
 744:xgrid.cpp     ****                         for (int i = 0; i < node_cnt; i++)
 745:xgrid.cpp     ****                         {
 746:xgrid.cpp     ****                                 nodes[i].build = 0;
 747:xgrid.cpp     ****                                 nodes[i].crc = 0;
 748:xgrid.cpp     ****                         }
 749:xgrid.cpp     ****                         
 750:xgrid.cpp     ****                         // check again after short delay
 751:xgrid.cpp     ****                         delay = 1000;
 752:xgrid.cpp     ****                         state = XGRID_STATE_IDLE;
 753:xgrid.cpp     ****                 }
 754:xgrid.cpp     ****         }
 755:xgrid.cpp     ****         else if (state == XGRID_STATE_FW_RX)
 756:xgrid.cpp     ****         {
 757:xgrid.cpp     ****                 // nothing special
 758:xgrid.cpp     ****         }
 759:xgrid.cpp     ****         else
 760:xgrid.cpp     ****         {
 761:xgrid.cpp     ****                 // invalid state, go back to idle, do not collect $200
 762:xgrid.cpp     ****                 state = XGRID_STATE_IDLE;
 763:xgrid.cpp     ****         }
 764:xgrid.cpp     **** }
 765:xgrid.cpp     **** 
 766:xgrid.cpp     **** 
 767:xgrid.cpp     **** void Xgrid::process_packet(Packet *pkt)
 768:xgrid.cpp     **** {
 769:xgrid.cpp     ****         if (check_unique(pkt))
 770:xgrid.cpp     ****         {
 771:xgrid.cpp     ****                 if (pkt->radius > 1)
 772:xgrid.cpp     ****                 {
 773:xgrid.cpp     ****                         pkt->radius--;
 774:xgrid.cpp     ****                         uint16_t mask = 0xFFFF;
 775:xgrid.cpp     ****                         if (pkt->rx_node < 16)
 776:xgrid.cpp     ****                                 mask &= ~(1 << pkt->rx_node);
 777:xgrid.cpp     ****                         send_raw_packet(pkt, mask);
 778:xgrid.cpp     ****                         pkt->radius++;
 779:xgrid.cpp     ****                 }
 780:xgrid.cpp     ****                 
 781:xgrid.cpp     ****                 internal_process_packet(pkt);
 782:xgrid.cpp     ****         }
 783:xgrid.cpp     **** }
 784:xgrid.cpp     **** 
 785:xgrid.cpp     **** 
 786:xgrid.cpp     **** void Xgrid::internal_process_packet(Packet *pkt)
 787:xgrid.cpp     **** {
 1994               	.LM151:
 1995               	.LFBB13:
 1996 0000 EF92      		push r14
 1997 0002 FF92      		push r15
 1998 0004 0F93      		push r16
 1999 0006 1F93      		push r17
 2000 0008 CF93      		push r28
 2001 000a DF93      		push r29
 2002 000c CDB7      		in r28,__SP_L__
 2003 000e DEB7      		in r29,__SP_H__
 2004 0010 6497      		sbiw r28,20
 2005 0012 CDBF      		out __SP_L__,r28
 2006 0014 DEBF      		out __SP_H__,r29
 2007               	/* prologue: function */
 2008               	/* frame size = 20 */
 2009               	/* stack size = 26 */
 2010               	.L__stack_usage = 26
 2011 0016 8C01      		movw r16,r24
 2012 0018 7B01      		movw r14,r22
 2013               	.LBB38:
 788:xgrid.cpp     ****         if (pkt->type == XGRID_PKT_PING_REQUEST)
 2015               	.LM152:
 2016 001a DB01      		movw r26,r22
 2017 001c 1296      		adiw r26,2
 2018 001e 8C91      		ld r24,X
 2019 0020 1297      		sbiw r26,2
 2020 0022 8D3F      		cpi r24,lo8(-3)
 2021 0024 01F4      		brne .L53
 2022               	.LBB39:
 789:xgrid.cpp     ****         {
 790:xgrid.cpp     **** #ifdef DEBUG
 791:xgrid.cpp     ****                 printf_P(PSTR("rx ping req\n"));
 2024               	.LM153:
 2025 0026 0F92      		push __tmp_reg__
 2026 0028 0F92      		push __tmp_reg__
 2027 002a 80E0      		ldi r24,lo8(_ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c)
 2028 002c 90E0      		ldi r25,hi8(_ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c)
 2029 002e EDB7      		in r30,__SP_L__
 2030 0030 FEB7      		in r31,__SP_H__
 2031 0032 8183      		std Z+1,r24
 2032 0034 9283      		std Z+2,r25
 2033 0036 0E94 0000 		call printf_P
 792:xgrid.cpp     **** #endif // DEBUG
 793:xgrid.cpp     ****                 xgrid_pkt_ping_reply_t d;
 794:xgrid.cpp     ****                 d.build = build_number;
 2035               	.LM154:
 2036 003a F801      		movw r30,r16
 2037 003c 8581      		ldd r24,Z+5
 2038 003e 9681      		ldd r25,Z+6
 2039 0040 A781      		ldd r26,Z+7
 2040 0042 B085      		ldd r27,Z+8
 2041 0044 8B83      		std Y+3,r24
 2042 0046 9C83      		std Y+4,r25
 2043 0048 AD83      		std Y+5,r26
 2044 004a BE83      		std Y+6,r27
 795:xgrid.cpp     ****                 d.crc = firmware_crc;
 2046               	.LM155:
 2047 004c 8381      		ldd r24,Z+3
 2048 004e 9481      		ldd r25,Z+4
 2049 0050 8F83      		std Y+7,r24
 2050 0052 9887      		std Y+8,r25
 796:xgrid.cpp     ****                 
 797:xgrid.cpp     ****                 Packet reply;
 798:xgrid.cpp     ****                 reply.type = XGRID_PKT_PING_REPLY;
 2052               	.LM156:
 2053 0054 8EEF      		ldi r24,lo8(-2)
 2054 0056 8B87      		std Y+11,r24
 799:xgrid.cpp     ****                 reply.flags = 0;
 2056               	.LM157:
 2057 0058 1D86      		std Y+13,__zero_reg__
 800:xgrid.cpp     ****                 reply.radius = 1;
 2059               	.LM158:
 2060 005a 81E0      		ldi r24,lo8(1)
 2061 005c 8E87      		std Y+14,r24
 801:xgrid.cpp     ****                 reply.data = (uint8_t *)&d;
 2063               	.LM159:
 2064 005e CE01      		movw r24,r28
 2065 0060 0396      		adiw r24,3
 2066 0062 8F87      		std Y+15,r24
 2067 0064 988B      		std Y+16,r25
 802:xgrid.cpp     ****                 reply.data_len = sizeof(xgrid_pkt_ping_reply_t);
 2069               	.LM160:
 2070 0066 86E0      		ldi r24,lo8(6)
 2071 0068 90E0      		ldi r25,hi8(6)
 2072 006a 898B      		std Y+17,r24
 2073 006c 9A8B      		std Y+18,r25
 803:xgrid.cpp     ****                 
 804:xgrid.cpp     ****                 send_packet(&reply, (1 << pkt->rx_node));
 2075               	.LM161:
 2076 006e 0F90      		pop __tmp_reg__
 2077 0070 0F90      		pop __tmp_reg__
 2078 0072 41E0      		ldi r20,lo8(1)
 2079 0074 50E0      		ldi r21,hi8(1)
 2080 0076 D701      		movw r26,r14
 2081 0078 1A96      		adiw r26,10
 2082 007a 0C90      		ld r0,X
 2083 007c 00C0      		rjmp 2f
 2084 007e 440F      	1:	lsl r20
 2085 0080 551F      		rol r21
 2086 0082 0A94      	2:	dec r0
 2087 0084 02F4      		brpl 1b
 2088 0086 C801      		movw r24,r16
 2089 0088 BE01      		movw r22,r28
 2090 008a 675F      		subi r22,lo8(-(9))
 2091 008c 7F4F      		sbci r23,hi8(-(9))
 2092 008e 0E94 0000 		call _ZN5Xgrid11send_packetEPNS_6PacketEj
 2093 0092 00C0      		rjmp .L52
 2094               	.L53:
 2095               	.LBE39:
 2096               	.LBB40:
 805:xgrid.cpp     ****         }
 806:xgrid.cpp     ****         else if (pkt->type == XGRID_PKT_PING_REPLY)
 2098               	.LM162:
 2099 0094 8E3F      		cpi r24,lo8(-2)
 2100 0096 01F4      		brne .L55
 2101               	.LBB41:
 807:xgrid.cpp     ****         {
 808:xgrid.cpp     **** #ifdef DEBUG
 809:xgrid.cpp     ****                 printf_P(PSTR("rx ping reply\n"));
 2103               	.LM163:
 2104 0098 0F92      		push __tmp_reg__
 2105 009a 0F92      		push __tmp_reg__
 2106 009c 80E0      		ldi r24,lo8(_ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_0)
 2107 009e 90E0      		ldi r25,hi8(_ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_0)
 2108 00a0 EDB7      		in r30,__SP_L__
 2109 00a2 FEB7      		in r31,__SP_H__
 2110 00a4 8183      		std Z+1,r24
 2111 00a6 9283      		std Z+2,r25
 2112 00a8 0E94 0000 		call printf_P
 810:xgrid.cpp     **** #endif // DEBUG
 811:xgrid.cpp     ****                 xgrid_pkt_ping_reply_t *d = (xgrid_pkt_ping_reply_t *)(pkt->data);
 2114               	.LM164:
 2115 00ac D701      		movw r26,r14
 2116 00ae 1696      		adiw r26,6
 2117 00b0 2D91      		ld r18,X+
 2118 00b2 3C91      		ld r19,X
 2119 00b4 1797      		sbiw r26,6+1
 812:xgrid.cpp     ****                 
 813:xgrid.cpp     ****                 nodes[pkt->rx_node].build = d->build;
 2121               	.LM165:
 2122 00b6 1A96      		adiw r26,10
 2123 00b8 8C91      		ld r24,X
 2124 00ba 90E0      		ldi r25,lo8(0)
 2125 00bc FC01      		movw r30,r24
 2126 00be EE0F      		lsl r30
 2127 00c0 FF1F      		rol r31
 2128 00c2 E80F      		add r30,r24
 2129 00c4 F91F      		adc r31,r25
 2130 00c6 EE0F      		lsl r30
 2131 00c8 FF1F      		rol r31
 2132 00ca EE0F      		lsl r30
 2133 00cc FF1F      		rol r31
 2134 00ce E00F      		add r30,r16
 2135 00d0 F11F      		adc r31,r17
 2136 00d2 D901      		movw r26,r18
 2137 00d4 4D91      		ld r20,X+
 2138 00d6 5D91      		ld r21,X+
 2139 00d8 6D91      		ld r22,X+
 2140 00da 7C91      		ld r23,X
 2141 00dc 1397      		sbiw r26,3
 2142 00de 43A3      		std Z+35,r20
 2143 00e0 54A3      		std Z+36,r21
 2144 00e2 65A3      		std Z+37,r22
 2145 00e4 76A3      		std Z+38,r23
 814:xgrid.cpp     ****                 nodes[pkt->rx_node].crc = d->crc;
 2147               	.LM166:
 2148 00e6 F701      		movw r30,r14
 2149 00e8 8285      		ldd r24,Z+10
 2150 00ea 90E0      		ldi r25,lo8(0)
 2151 00ec FC01      		movw r30,r24
 2152 00ee EE0F      		lsl r30
 2153 00f0 FF1F      		rol r31
 2154 00f2 E80F      		add r30,r24
 2155 00f4 F91F      		adc r31,r25
 2156 00f6 EE0F      		lsl r30
 2157 00f8 FF1F      		rol r31
 2158 00fa EE0F      		lsl r30
 2159 00fc FF1F      		rol r31
 2160 00fe E00F      		add r30,r16
 2161 0100 F11F      		adc r31,r17
 2162 0102 1496      		adiw r26,4
 2163 0104 8D91      		ld r24,X+
 2164 0106 9C91      		ld r25,X
 2165 0108 1597      		sbiw r26,4+1
 2166 010a 87A3      		std Z+39,r24
 2167 010c 90A7      		std Z+40,r25
 2168 010e 00C0      		rjmp .L64
 2169               	.L55:
 2170               	.LBE41:
 2171               	.LBB42:
 815:xgrid.cpp     ****         }
 816:xgrid.cpp     ****         else if (pkt->type == XGRID_PKT_MAINT_CMD)
 2173               	.LM167:
 2174 0110 893F      		cpi r24,lo8(-7)
 2175 0112 01F0      		breq .+2
 2176 0114 00C0      		rjmp .L56
 2177               	.LBB43:
 817:xgrid.cpp     ****         {
 818:xgrid.cpp     **** #ifdef DEBUG
 819:xgrid.cpp     ****                 printf_P(PSTR("rx maint cmd\n"));
 2179               	.LM168:
 2180 0116 0F92      		push __tmp_reg__
 2181 0118 0F92      		push __tmp_reg__
 2182 011a 80E0      		ldi r24,lo8(_ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_1)
 2183 011c 90E0      		ldi r25,hi8(_ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_1)
 2184 011e ADB7      		in r26,__SP_L__
 2185 0120 BEB7      		in r27,__SP_H__
 2186 0122 1196      		adiw r26,1
 2187 0124 8D93      		st X+,r24
 2188 0126 9C93      		st X,r25
 2189 0128 1297      		sbiw r26,1+1
 2190 012a 0E94 0000 		call printf_P
 820:xgrid.cpp     **** #endif // DEBUG
 821:xgrid.cpp     ****                 xgrid_pkt_maint_cmd_t *c = (xgrid_pkt_maint_cmd_t *)(pkt->data);
 2192               	.LM169:
 2193 012e D701      		movw r26,r14
 2194 0130 1696      		adiw r26,6
 2195 0132 ED91      		ld r30,X+
 2196 0134 FC91      		ld r31,X
 2197 0136 1797      		sbiw r26,6+1
 2198               	.LBB44:
 822:xgrid.cpp     ****                 
 823:xgrid.cpp     ****                 if (c->cmd == XGRID_CMD_START_UPDATE && c->magic == XGRID_CMD_UPDATE_MAGIC &&
 2200               	.LM170:
 2201 0138 8081      		ld r24,Z
 2202 013a 0F90      		pop __tmp_reg__
 2203 013c 0F90      		pop __tmp_reg__
 2204 013e 8138      		cpi r24,lo8(-127)
 2205 0140 01F0      		breq .+2
 2206 0142 00C0      		rjmp .L57
 2208               	.LM171:
 2209 0144 8181      		ldd r24,Z+1
 2210 0146 9281      		ldd r25,Z+2
 2211 0148 A381      		ldd r26,Z+3
 2212 014a B481      		ldd r27,Z+4
 2213 014c 8E37      		cpi r24,lo8(189800062)
 2214 014e EEE1      		ldi r30,hi8(189800062)
 2215 0150 9E07      		cpc r25,r30
 2216 0152 E0E5      		ldi r30,hlo8(189800062)
 2217 0154 AE07      		cpc r26,r30
 2218 0156 EBE0      		ldi r30,hhi8(189800062)
 2219 0158 BE07      		cpc r27,r30
 2220 015a 01F0      		breq .+2
 2221 015c 00C0      		rjmp .L52
 2223               	.LM172:
 2224 015e D801      		movw r26,r16
 2225 0160 1F96      		adiw r26,15
 2226 0162 8C91      		ld r24,X
 2227 0164 1F97      		sbiw r26,15
 2228 0166 8832      		cpi r24,lo8(40)
 2229 0168 01F4      		brne .+2
 2230 016a 00C0      		rjmp .L52
 2231               	.LBB45:
 824:xgrid.cpp     ****                                 state != XGRID_STATE_FW_RX)
 825:xgrid.cpp     ****                 {
 826:xgrid.cpp     **** #ifdef DEBUG
 827:xgrid.cpp     ****                         printf_P(PSTR("start update\n"));
 2233               	.LM173:
 2234 016c 0F92      		push __tmp_reg__
 2235 016e 0F92      		push __tmp_reg__
 2236 0170 80E0      		ldi r24,lo8(_ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_2)
 2237 0172 90E0      		ldi r25,hi8(_ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_2)
 2238 0174 EDB7      		in r30,__SP_L__
 2239 0176 FEB7      		in r31,__SP_H__
 2240 0178 8183      		std Z+1,r24
 2241 017a 9283      		std Z+2,r25
 2242 017c 0E94 0000 		call printf_P
 828:xgrid.cpp     **** #endif // DEBUG
 829:xgrid.cpp     ****                         // start update
 830:xgrid.cpp     ****                         firmware_offset = 0;
 2244               	.LM174:
 2245 0180 D801      		movw r26,r16
 2246 0182 5896      		adiw r26,24
 2247 0184 1D92      		st X+,__zero_reg__
 2248 0186 1D92      		st X+,__zero_reg__
 2249 0188 1D92      		st X+,__zero_reg__
 2250 018a 1C92      		st X,__zero_reg__
 2251 018c 5B97      		sbiw r26,24+3
 831:xgrid.cpp     ****                         
 832:xgrid.cpp     ****                         xgrid_pkt_maint_cmd_start_update_t *csu = (xgrid_pkt_maint_cmd_start_update
 2253               	.LM175:
 2254 018e F701      		movw r30,r14
 2255 0190 2681      		ldd r18,Z+6
 2256 0192 3781      		ldd r19,Z+7
 833:xgrid.cpp     ****                         
 834:xgrid.cpp     ****                         if (csu->build > build_number)
 2258               	.LM176:
 2259 0194 F901      		movw r30,r18
 2260 0196 8781      		ldd r24,Z+7
 2261 0198 9085      		ldd r25,Z+8
 2262 019a A185      		ldd r26,Z+9
 2263 019c B285      		ldd r27,Z+10
 2264 019e 0F90      		pop __tmp_reg__
 2265 01a0 0F90      		pop __tmp_reg__
 2266 01a2 F801      		movw r30,r16
 2267 01a4 4581      		ldd r20,Z+5
 2268 01a6 5681      		ldd r21,Z+6
 2269 01a8 6781      		ldd r22,Z+7
 2270 01aa 7085      		ldd r23,Z+8
 2271 01ac 4817      		cp r20,r24
 2272 01ae 5907      		cpc r21,r25
 2273 01b0 6A07      		cpc r22,r26
 2274 01b2 7B07      		cpc r23,r27
 2275 01b4 00F0      		brlo .+2
 2276 01b6 00C0      		rjmp .L52
 835:xgrid.cpp     ****                         {
 836:xgrid.cpp     ****                                 // sanity check: only update if being
 837:xgrid.cpp     ****                                 // offered a more recent version
 838:xgrid.cpp     ****                                 
 839:xgrid.cpp     ****                                 new_build = csu->build;
 2278               	.LM177:
 2279 01b8 848B      		std Z+20,r24
 2280 01ba 958B      		std Z+21,r25
 2281 01bc A68B      		std Z+22,r26
 2282 01be B78B      		std Z+23,r27
 840:xgrid.cpp     ****                                 new_crc = csu->crc;
 2284               	.LM178:
 2285 01c0 D901      		movw r26,r18
 2286 01c2 1596      		adiw r26,5
 2287 01c4 8D91      		ld r24,X+
 2288 01c6 9C91      		ld r25,X
 2289 01c8 1697      		sbiw r26,5+1
 2290 01ca 828B      		std Z+18,r24
 2291 01cc 938B      		std Z+19,r25
 841:xgrid.cpp     ****                                 
 842:xgrid.cpp     ****                                 update_node_mask = pkt->rx_node;
 2293               	.LM179:
 2294 01ce F701      		movw r30,r14
 2295 01d0 8285      		ldd r24,Z+10
 2296 01d2 D801      		movw r26,r16
 2297 01d4 5096      		adiw r26,16
 2298 01d6 8C93      		st X,r24
 2299 01d8 5097      		sbiw r26,16
 2300 01da 5196      		adiw r26,17
 2301 01dc 1C92      		st X,__zero_reg__
 2302 01de 5197      		sbiw r26,17
 843:xgrid.cpp     ****                                 state = XGRID_STATE_FW_RX;
 2304               	.LM180:
 2305 01e0 88E2      		ldi r24,lo8(40)
 2306 01e2 1F96      		adiw r26,15
 2307 01e4 8C93      		st X,r24
 2308 01e6 1F97      		sbiw r26,15
 844:xgrid.cpp     ****                                 timeout = 1000;
 2310               	.LM181:
 2311 01e8 88EE      		ldi r24,lo8(1000)
 2312 01ea 93E0      		ldi r25,hi8(1000)
 2313 01ec 00C0      		rjmp .L65
 2314               	.L57:
 2315               	.LBE45:
 2316               	.LBB46:
 845:xgrid.cpp     ****                         }
 846:xgrid.cpp     ****                 }
 847:xgrid.cpp     ****                 else if (c->cmd == XGRID_CMD_FINISH_UPDATE && c->magic == XGRID_CMD_UPDATE_MAGIC &&
 2318               	.LM182:
 2319 01ee 8238      		cpi r24,lo8(-126)
 2320 01f0 01F0      		breq .+2
 2321 01f2 00C0      		rjmp .L58
 2323               	.LM183:
 2324 01f4 8181      		ldd r24,Z+1
 2325 01f6 9281      		ldd r25,Z+2
 2326 01f8 A381      		ldd r26,Z+3
 2327 01fa B481      		ldd r27,Z+4
 2328 01fc 8E37      		cpi r24,lo8(189800062)
 2329 01fe EEE1      		ldi r30,hi8(189800062)
 2330 0200 9E07      		cpc r25,r30
 2331 0202 E0E5      		ldi r30,hlo8(189800062)
 2332 0204 AE07      		cpc r26,r30
 2333 0206 EBE0      		ldi r30,hhi8(189800062)
 2334 0208 BE07      		cpc r27,r30
 2335 020a 01F0      		breq .+2
 2336 020c 00C0      		rjmp .L52
 2338               	.LM184:
 2339 020e D801      		movw r26,r16
 2340 0210 1F96      		adiw r26,15
 2341 0212 8C91      		ld r24,X
 2342 0214 1F97      		sbiw r26,15
 2343 0216 8832      		cpi r24,lo8(40)
 2344 0218 01F0      		breq .+2
 2345 021a 00C0      		rjmp .L52
 2346               	.LBB47:
 848:xgrid.cpp     ****                                 state == XGRID_STATE_FW_RX)
 849:xgrid.cpp     ****                 {
 850:xgrid.cpp     **** #ifdef DEBUG
 851:xgrid.cpp     ****                         printf_P(PSTR("finish update\n"));
 2348               	.LM185:
 2349 021c 0F92      		push __tmp_reg__
 2350 021e 0F92      		push __tmp_reg__
 2351 0220 80E0      		ldi r24,lo8(_ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_3)
 2352 0222 90E0      		ldi r25,hi8(_ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_3)
 2353 0224 EDB7      		in r30,__SP_L__
 2354 0226 FEB7      		in r31,__SP_H__
 2355 0228 8183      		std Z+1,r24
 2356 022a 9283      		std Z+2,r25
 2357 022c 0E94 0000 		call printf_P
 852:xgrid.cpp     **** #endif // DEBUG
 853:xgrid.cpp     ****                         // check and install firmware
 854:xgrid.cpp     ****                         
 855:xgrid.cpp     ****                         uint16_t cur_crc;
 856:xgrid.cpp     ****                         
 857:xgrid.cpp     ****                         xboot_app_temp_crc16(&cur_crc);
 2359               	.LM186:
 2360 0230 0F90      		pop __tmp_reg__
 2361 0232 0F90      		pop __tmp_reg__
 2362 0234 CE01      		movw r24,r28
 2363 0236 0196      		adiw r24,1
 2364 0238 0E94 0000 		call xboot_app_temp_crc16
 858:xgrid.cpp     ****                         
 859:xgrid.cpp     **** #ifdef DEBUG
 860:xgrid.cpp     ****                         printf_P(PSTR("new crc: %04x\n"), new_crc);
 2366               	.LM187:
 2367 023c 00D0      		rcall .
 2368 023e 0F92      		push __tmp_reg__
 2369 0240 80E0      		ldi r24,lo8(_ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_4)
 2370 0242 90E0      		ldi r25,hi8(_ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_4)
 2371 0244 ADB7      		in r26,__SP_L__
 2372 0246 BEB7      		in r27,__SP_H__
 2373 0248 1196      		adiw r26,1
 2374 024a 8D93      		st X+,r24
 2375 024c 9C93      		st X,r25
 2376 024e 1297      		sbiw r26,1+1
 2377 0250 F801      		movw r30,r16
 2378 0252 8289      		ldd r24,Z+18
 2379 0254 9389      		ldd r25,Z+19
 2380 0256 1396      		adiw r26,3
 2381 0258 8D93      		st X+,r24
 2382 025a 9C93      		st X,r25
 2383 025c 1497      		sbiw r26,3+1
 2384 025e 0E94 0000 		call printf_P
 861:xgrid.cpp     ****                         printf_P(PSTR("cur crc: %04x\n"), cur_crc);
 2386               	.LM188:
 2387 0262 80E0      		ldi r24,lo8(_ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_5)
 2388 0264 90E0      		ldi r25,hi8(_ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_5)
 2389 0266 ADB7      		in r26,__SP_L__
 2390 0268 BEB7      		in r27,__SP_H__
 2391 026a 1196      		adiw r26,1
 2392 026c 8D93      		st X+,r24
 2393 026e 9C93      		st X,r25
 2394 0270 1297      		sbiw r26,1+1
 2395 0272 8981      		ldd r24,Y+1
 2396 0274 9A81      		ldd r25,Y+2
 2397 0276 1396      		adiw r26,3
 2398 0278 8D93      		st X+,r24
 2399 027a 9C93      		st X,r25
 2400 027c 1497      		sbiw r26,3+1
 2401 027e 0E94 0000 		call printf_P
 2402               	.LBB48:
 862:xgrid.cpp     **** #endif // DEBUG
 863:xgrid.cpp     ****                         
 864:xgrid.cpp     ****                         if (cur_crc == new_crc)
 2404               	.LM189:
 2405 0282 0F90      		pop __tmp_reg__
 2406 0284 0F90      		pop __tmp_reg__
 2407 0286 0F90      		pop __tmp_reg__
 2408 0288 0F90      		pop __tmp_reg__
 2409 028a 2981      		ldd r18,Y+1
 2410 028c 3A81      		ldd r19,Y+2
 2411 028e F801      		movw r30,r16
 2412 0290 8289      		ldd r24,Z+18
 2413 0292 9389      		ldd r25,Z+19
 2414 0294 2817      		cp r18,r24
 2415 0296 3907      		cpc r19,r25
 2416 0298 01F4      		brne .L59
 2417               	.LBB49:
 865:xgrid.cpp     ****                         {
 866:xgrid.cpp     **** #ifdef DEBUG
 867:xgrid.cpp     ****                                 printf_P(PSTR("good crc\n"));
 2419               	.LM190:
 2420 029a 0F92      		push __tmp_reg__
 2421 029c 0F92      		push __tmp_reg__
 2422 029e 80E0      		ldi r24,lo8(_ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_6)
 2423 02a0 90E0      		ldi r25,hi8(_ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_6)
 2424 02a2 ADB7      		in r26,__SP_L__
 2425 02a4 BEB7      		in r27,__SP_H__
 2426 02a6 1196      		adiw r26,1
 2427 02a8 8D93      		st X+,r24
 2428 02aa 9C93      		st X,r25
 2429 02ac 1297      		sbiw r26,1+1
 2430 02ae 0E94 0000 		call printf_P
 868:xgrid.cpp     **** #endif // DEBUG
 869:xgrid.cpp     ****                                 firmware_crc = new_crc;
 2432               	.LM191:
 2433 02b2 F801      		movw r30,r16
 2434 02b4 8289      		ldd r24,Z+18
 2435 02b6 9389      		ldd r25,Z+19
 2436 02b8 8383      		std Z+3,r24
 2437 02ba 9483      		std Z+4,r25
 870:xgrid.cpp     ****                                 build_number = new_build;
 2439               	.LM192:
 2440 02bc 4489      		ldd r20,Z+20
 2441 02be 5589      		ldd r21,Z+21
 2442 02c0 6689      		ldd r22,Z+22
 2443 02c2 7789      		ldd r23,Z+23
 2444 02c4 4583      		std Z+5,r20
 2445 02c6 5683      		std Z+6,r21
 2446 02c8 6783      		std Z+7,r22
 2447 02ca 7087      		std Z+8,r23
 871:xgrid.cpp     ****                                 firmware_offset = XB_APP_TEMP_START;
 2449               	.LM193:
 2450 02cc 40E0      		ldi r20,lo8(65536)
 2451 02ce 50E0      		ldi r21,hi8(65536)
 2452 02d0 61E0      		ldi r22,hlo8(65536)
 2453 02d2 70E0      		ldi r23,hhi8(65536)
 2454 02d4 408F      		std Z+24,r20
 2455 02d6 518F      		std Z+25,r21
 2456 02d8 628F      		std Z+26,r22
 2457 02da 738F      		std Z+27,r23
 872:xgrid.cpp     ****                                 firmware_updated = 1;
 2459               	.LM194:
 2460 02dc 21E0      		ldi r18,lo8(1)
 2461 02de 248F      		std Z+28,r18
 873:xgrid.cpp     ****                                 // init install
 874:xgrid.cpp     ****                                 xboot_install_firmware(new_crc);
 2463               	.LM195:
 2464 02e0 0F90      		pop __tmp_reg__
 2465 02e2 0F90      		pop __tmp_reg__
 2466 02e4 0E94 0000 		call xboot_install_firmware
 2467 02e8 00C0      		rjmp .L60
 2468               	.L59:
 2469               	.LBE49:
 2470               	.LBB50:
 875:xgrid.cpp     ****                         }
 876:xgrid.cpp     ****                         else
 877:xgrid.cpp     ****                         {
 878:xgrid.cpp     **** #ifdef DEBUG
 879:xgrid.cpp     ****                                 printf_P(PSTR("bad crc\n"));
 2472               	.LM196:
 2473 02ea 0F92      		push __tmp_reg__
 2474 02ec 0F92      		push __tmp_reg__
 2475 02ee 80E0      		ldi r24,lo8(_ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_7)
 2476 02f0 90E0      		ldi r25,hi8(_ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_7)
 2477 02f2 ADB7      		in r26,__SP_L__
 2478 02f4 BEB7      		in r27,__SP_H__
 2479 02f6 1196      		adiw r26,1
 2480 02f8 8D93      		st X+,r24
 2481 02fa 9C93      		st X,r25
 2482 02fc 1297      		sbiw r26,1+1
 2483 02fe 0E94 0000 		call printf_P
 880:xgrid.cpp     **** #endif // DEBUG
 881:xgrid.cpp     ****                                 firmware_offset = 0;
 2485               	.LM197:
 2486 0302 F801      		movw r30,r16
 2487 0304 108E      		std Z+24,__zero_reg__
 2488 0306 118E      		std Z+25,__zero_reg__
 2489 0308 128E      		std Z+26,__zero_reg__
 2490 030a 138E      		std Z+27,__zero_reg__
 2491 030c 0F90      		pop __tmp_reg__
 2492 030e 0F90      		pop __tmp_reg__
 2493               	.L60:
 2494               	.LBE50:
 2495               	.LBE48:
 882:xgrid.cpp     ****                         }
 883:xgrid.cpp     ****                         
 884:xgrid.cpp     ****                         // go back to idle and check neighbor firmware versions
 885:xgrid.cpp     ****                         timeout = 0;
 2497               	.LM198:
 2498 0310 D801      		movw r26,r16
 2499 0312 1996      		adiw r26,9
 2500 0314 1D92      		st X+,__zero_reg__
 2501 0316 1C92      		st X,__zero_reg__
 2502 0318 1A97      		sbiw r26,9+1
 886:xgrid.cpp     ****                         delay = 100;
 2504               	.LM199:
 2505 031a 84E6      		ldi r24,lo8(100)
 2506 031c 90E0      		ldi r25,hi8(100)
 2507 031e A0E0      		ldi r26,hlo8(100)
 2508 0320 B0E0      		ldi r27,hhi8(100)
 2509 0322 F801      		movw r30,r16
 2510 0324 8387      		std Z+11,r24
 2511 0326 9487      		std Z+12,r25
 2512 0328 A587      		std Z+13,r26
 2513 032a B687      		std Z+14,r27
 887:xgrid.cpp     ****                         state = XGRID_STATE_IDLE;
 2515               	.LM200:
 2516 032c 1786      		std Z+15,__zero_reg__
 2517               	.LBE47:
 2518 032e 00C0      		rjmp .L52
 2519               	.L58:
 2520               	.LBB51:
 888:xgrid.cpp     ****                 }
 889:xgrid.cpp     ****                 else if (c->cmd == XGRID_CMD_ABORT_UPDATE && c->magic == XGRID_CMD_UPDATE_MAGIC &&
 2522               	.LM201:
 2523 0330 8338      		cpi r24,lo8(-125)
 2524 0332 01F4      		brne .L61
 2526               	.LM202:
 2527 0334 8181      		ldd r24,Z+1
 2528 0336 9281      		ldd r25,Z+2
 2529 0338 A381      		ldd r26,Z+3
 2530 033a B481      		ldd r27,Z+4
 2531 033c 8E37      		cpi r24,lo8(189800062)
 2532 033e FEE1      		ldi r31,hi8(189800062)
 2533 0340 9F07      		cpc r25,r31
 2534 0342 F0E5      		ldi r31,hlo8(189800062)
 2535 0344 AF07      		cpc r26,r31
 2536 0346 FBE0      		ldi r31,hhi8(189800062)
 2537 0348 BF07      		cpc r27,r31
 2538 034a 01F0      		breq .+2
 2539 034c 00C0      		rjmp .L52
 2541               	.LM203:
 2542 034e D801      		movw r26,r16
 2543 0350 1F96      		adiw r26,15
 2544 0352 8C91      		ld r24,X
 2545 0354 1F97      		sbiw r26,15
 2546 0356 8832      		cpi r24,lo8(40)
 2547 0358 01F0      		breq .+2
 2548 035a 00C0      		rjmp .L52
 2549               	.LBB52:
 890:xgrid.cpp     ****                                 state == XGRID_STATE_FW_RX)
 891:xgrid.cpp     ****                 {
 892:xgrid.cpp     **** #ifdef DEBUG
 893:xgrid.cpp     ****                         printf_P(PSTR("abort update\n"));
 2551               	.LM204:
 2552 035c 0F92      		push __tmp_reg__
 2553 035e 0F92      		push __tmp_reg__
 2554 0360 80E0      		ldi r24,lo8(_ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_8)
 2555 0362 90E0      		ldi r25,hi8(_ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_8)
 2556 0364 EDB7      		in r30,__SP_L__
 2557 0366 FEB7      		in r31,__SP_H__
 2558 0368 8183      		std Z+1,r24
 2559 036a 9283      		std Z+2,r25
 2560 036c 0E94 0000 		call printf_P
 894:xgrid.cpp     **** #endif // DEBUG
 895:xgrid.cpp     ****                         // abort update (go back to idle)
 896:xgrid.cpp     ****                         firmware_offset = 0;
 2562               	.LM205:
 2563 0370 D801      		movw r26,r16
 2564 0372 5896      		adiw r26,24
 2565 0374 1D92      		st X+,__zero_reg__
 2566 0376 1D92      		st X+,__zero_reg__
 2567 0378 1D92      		st X+,__zero_reg__
 2568 037a 1C92      		st X,__zero_reg__
 2569 037c 5B97      		sbiw r26,24+3
 897:xgrid.cpp     ****                         state = XGRID_STATE_IDLE;
 2571               	.LM206:
 2572 037e 1F96      		adiw r26,15
 2573 0380 1C92      		st X,__zero_reg__
 2574 0382 1F97      		sbiw r26,15
 2575               	.L64:
 2576               	.LBE52:
 2577 0384 0F90      		pop __tmp_reg__
 2578 0386 0F90      		pop __tmp_reg__
 2579 0388 00C0      		rjmp .L52
 2580               	.L61:
 2581               	.LBB53:
 898:xgrid.cpp     ****                 }
 899:xgrid.cpp     ****                 else if (c->cmd == XGRID_CMD_RESET && c->magic == XGRID_CMD_RESET_MAGIC)
 2583               	.LM207:
 2584 038a 8039      		cpi r24,lo8(-112)
 2585 038c 01F0      		breq .+2
 2586 038e 00C0      		rjmp .L52
 2588               	.LM208:
 2589 0390 8181      		ldd r24,Z+1
 2590 0392 9281      		ldd r25,Z+2
 2591 0394 A381      		ldd r26,Z+3
 2592 0396 B481      		ldd r27,Z+4
 2593 0398 8D3A      		cpi r24,lo8(-18751827)
 2594 039a EEED      		ldi r30,hi8(-18751827)
 2595 039c 9E07      		cpc r25,r30
 2596 039e E1EE      		ldi r30,hlo8(-18751827)
 2597 03a0 AE07      		cpc r26,r30
 2598 03a2 EEEF      		ldi r30,hhi8(-18751827)
 2599 03a4 BE07      		cpc r27,r30
 2600 03a6 01F0      		breq .+2
 2601 03a8 00C0      		rjmp .L52
 2602               	.LBB54:
 900:xgrid.cpp     ****                 {
 901:xgrid.cpp     **** #ifdef DEBUG
 902:xgrid.cpp     ****                         printf_P(PSTR("reset\n"));
 2604               	.LM209:
 2605 03aa 0F92      		push __tmp_reg__
 2606 03ac 0F92      		push __tmp_reg__
 2607 03ae 80E0      		ldi r24,lo8(_ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_9)
 2608 03b0 90E0      		ldi r25,hi8(_ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_9)
 2609 03b2 ADB7      		in r26,__SP_L__
 2610 03b4 BEB7      		in r27,__SP_H__
 2611 03b6 1196      		adiw r26,1
 2612 03b8 8D93      		st X+,r24
 2613 03ba 9C93      		st X,r25
 2614 03bc 1297      		sbiw r26,1+1
 2615 03be 0E94 0000 		call printf_P
 903:xgrid.cpp     **** #endif // DEBUG
 904:xgrid.cpp     ****                         xboot_reset();
 2617               	.LM210:
 2618 03c2 0F90      		pop __tmp_reg__
 2619 03c4 0F90      		pop __tmp_reg__
 2620 03c6 0E94 0000 		call xboot_reset
 2621               	.L56:
 2622               	.LBE54:
 2623               	.LBE53:
 2624               	.LBE51:
 2625               	.LBE46:
 2626               	.LBE44:
 2627               	.LBE43:
 2628               	.LBB55:
 905:xgrid.cpp     ****                 }
 906:xgrid.cpp     ****         }
 907:xgrid.cpp     ****         else if (pkt->type == XGRID_PKT_FIRMWARE_BLOCK)
 2630               	.LM211:
 2631 03ca 8B3F      		cpi r24,lo8(-5)
 2632 03cc 01F4      		brne .L62
 2633               	.LBB56:
 908:xgrid.cpp     ****         {
 909:xgrid.cpp     **** #ifdef DEBUG
 910:xgrid.cpp     ****                 printf_P(PSTR("rx firmware block\n"));
 2635               	.LM212:
 2636 03ce 0F92      		push __tmp_reg__
 2637 03d0 0F92      		push __tmp_reg__
 2638 03d2 80E0      		ldi r24,lo8(_ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_10)
 2639 03d4 90E0      		ldi r25,hi8(_ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_10)
 2640 03d6 EDB7      		in r30,__SP_L__
 2641 03d8 FEB7      		in r31,__SP_H__
 2642 03da 8183      		std Z+1,r24
 2643 03dc 9283      		std Z+2,r25
 2644 03de 0E94 0000 		call printf_P
 2645               	.LBB57:
 911:xgrid.cpp     **** #endif // DEBUG
 912:xgrid.cpp     ****                 if (state == XGRID_STATE_FW_RX && pkt->data_len == SPM_PAGESIZE+2)
 2647               	.LM213:
 2648 03e2 0F90      		pop __tmp_reg__
 2649 03e4 0F90      		pop __tmp_reg__
 2650 03e6 D801      		movw r26,r16
 2651 03e8 1F96      		adiw r26,15
 2652 03ea 8C91      		ld r24,X
 2653 03ec 1F97      		sbiw r26,15
 2654 03ee 8832      		cpi r24,lo8(40)
 2655 03f0 01F0      		breq .+2
 2656 03f2 00C0      		rjmp .L52
 2658               	.LM214:
 2659 03f4 F701      		movw r30,r14
 2660 03f6 8085      		ldd r24,Z+8
 2661 03f8 9185      		ldd r25,Z+9
 2662 03fa F2E0      		ldi r31,hi8(514)
 2663 03fc 8230      		cpi r24,lo8(514)
 2664 03fe 9F07      		cpc r25,r31
 2665 0400 01F4      		brne .L52
 2666               	.LBB58:
 913:xgrid.cpp     ****                 {
 914:xgrid.cpp     ****                         xgrid_pkt_firmware_block_t *b = (xgrid_pkt_firmware_block_t *)(pkt->data);
 2668               	.LM215:
 2669 0402 D701      		movw r26,r14
 2670 0404 1696      		adiw r26,6
 2671 0406 4D91      		ld r20,X+
 2672 0408 5C91      		ld r21,X
 2673 040a 1797      		sbiw r26,6+1
 915:xgrid.cpp     ****                         
 916:xgrid.cpp     ****                         xboot_app_temp_write_page(b->offset * SPM_PAGESIZE, b->data, 1);
 2675               	.LM216:
 2676 040c FA01      		movw r30,r20
 2677 040e 8081      		ld r24,Z
 2678 0410 782F      		mov r23,r24
 2679 0412 770F      		lsl r23
 2680 0414 60E0      		ldi r22,lo8(0)
 2681 0416 8827      		clr r24
 2682 0418 77FD      		sbrc r23,7
 2683 041a 8095      		com r24
 2684 041c 982F      		mov r25,r24
 2685 041e 4E5F      		subi r20,lo8(-(2))
 2686 0420 5F4F      		sbci r21,hi8(-(2))
 2687 0422 21E0      		ldi r18,lo8(1)
 2688 0424 0E94 0000 		call xboot_app_temp_write_page
 917:xgrid.cpp     ****                         
 918:xgrid.cpp     ****                         timeout = 1000;
 2690               	.LM217:
 2691 0428 88EE      		ldi r24,lo8(1000)
 2692 042a 93E0      		ldi r25,hi8(1000)
 2693 042c D801      		movw r26,r16
 2694               	.L65:
 2695 042e 1996      		adiw r26,9
 2696 0430 8D93      		st X+,r24
 2697 0432 9C93      		st X,r25
 2698 0434 1A97      		sbiw r26,9+1
 2699 0436 00C0      		rjmp .L52
 2700               	.L62:
 2701               	.LBE58:
 2702               	.LBE57:
 2703               	.LBE56:
 2704               	.LBB59:
 919:xgrid.cpp     ****                 }
 920:xgrid.cpp     ****         }
 921:xgrid.cpp     ****         else if (pkt->type == XGRID_PKT_FLUSH_COMPARE_BUFFER)
 2706               	.LM218:
 2707 0438 8C3F      		cpi r24,lo8(-4)
 2708 043a 01F4      		brne .L63
 2709               	.LBB60:
 922:xgrid.cpp     ****         {
 923:xgrid.cpp     **** #ifdef DEBUG
 924:xgrid.cpp     ****                 printf_P(PSTR("rx flush buffer\n"));
 2711               	.LM219:
 2712 043c 0F92      		push __tmp_reg__
 2713 043e 0F92      		push __tmp_reg__
 2714 0440 80E0      		ldi r24,lo8(_ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_11)
 2715 0442 90E0      		ldi r25,hi8(_ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_11)
 2716 0444 EDB7      		in r30,__SP_L__
 2717 0446 FEB7      		in r31,__SP_H__
 2718 0448 8183      		std Z+1,r24
 2719 044a 9283      		std Z+2,r25
 2720 044c 0E94 0000 		call printf_P
 925:xgrid.cpp     **** #endif // DEBUG
 926:xgrid.cpp     ****                 memset(compare_buffer, 0, sizeof(xgrid_header_minimal_t) * XGRID_COMPARE_BUFFER_SIZ
 2722               	.LM220:
 2723 0450 0258      		subi r16,lo8(-(126))
 2724 0452 1F4F      		sbci r17,hi8(-(126))
 2725 0454 80E4      		ldi r24,lo8(64)
 2726 0456 D801      		movw r26,r16
 2727 0458 1D92      		st X+,__zero_reg__
 2728 045a 8A95      	        dec r24
 2729 045c 01F4      		brne .-6
 2730 045e 00C0      		rjmp .L64
 2731               	.L63:
 2732               	.LBE60:
 927:xgrid.cpp     ****         }
 928:xgrid.cpp     ****         else
 929:xgrid.cpp     ****         {
 930:xgrid.cpp     ****                 // if we haven't processed the packet internally,
 931:xgrid.cpp     ****                 // pass it to the application
 932:xgrid.cpp     ****                 if (rx_pkt)
 2734               	.LM221:
 2735 0460 F801      		movw r30,r16
 2736 0462 E95F      		subi r30,lo8(-(1543))
 2737 0464 F94F      		sbci r31,hi8(-(1543))
 2738 0466 0190      		ld __tmp_reg__,Z+
 2739 0468 F081      		ld r31,Z
 2740 046a E02D      		mov r30,__tmp_reg__
 2741 046c 3097      		sbiw r30,0
 2742 046e 01F0      		breq .L52
 933:xgrid.cpp     ****                         (*rx_pkt)(pkt);
 2744               	.LM222:
 2745 0470 CB01      		movw r24,r22
 2746 0472 1995      		eicall
 2747               	.L52:
 2748               	/* epilogue start */
 2749               	.LBE59:
 2750               	.LBE55:
 2751               	.LBE42:
 2752               	.LBE40:
 2753               	.LBE38:
 934:xgrid.cpp     ****         }
 935:xgrid.cpp     **** }
 2755               	.LM223:
 2756 0474 6496      		adiw r28,20
 2757 0476 CDBF      		out __SP_L__,r28
 2758 0478 DEBF      		out __SP_H__,r29
 2759 047a DF91      		pop r29
 2760 047c CF91      		pop r28
 2761 047e 1F91      		pop r17
 2762 0480 0F91      		pop r16
 2763 0482 FF90      		pop r15
 2764 0484 EF90      		pop r14
 2765 0486 0895      		ret
 2786               	.Lscope13:
 2787               		.section	.text._ZN5Xgrid14process_packetEPNS_6PacketE,"ax",@progbits
 2791               	.global	_ZN5Xgrid14process_packetEPNS_6PacketE
 2793               	_ZN5Xgrid14process_packetEPNS_6PacketE:
 768:xgrid.cpp     **** {
 2795               	.LM224:
 2796               	.LFBB14:
 2797 0000 0F93      		push r16
 2798 0002 1F93      		push r17
 2799 0004 CF93      		push r28
 2800 0006 DF93      		push r29
 2801               	/* prologue: function */
 2802               	/* frame size = 0 */
 2803               	/* stack size = 4 */
 2804               	.L__stack_usage = 4
 2805 0008 8C01      		movw r16,r24
 2806 000a EB01      		movw r28,r22
 2807               	.LBB61:
 769:xgrid.cpp     ****         if (check_unique(pkt))
 2809               	.LM225:
 2810 000c 0E94 0000 		call _ZN5Xgrid12check_uniqueEPNS_6PacketE
 2811 0010 8823      		tst r24
 2812 0012 01F0      		breq .L66
 2813               	.LBB62:
 2814               	.LBB63:
 771:xgrid.cpp     ****                 if (pkt->radius > 1)
 2816               	.LM226:
 2817 0014 8D81      		ldd r24,Y+5
 2818 0016 8230      		cpi r24,lo8(2)
 2819 0018 00F0      		brlo .L68
 2820               	.LBB64:
 773:xgrid.cpp     ****                         pkt->radius--;
 2822               	.LM227:
 2823 001a 8150      		subi r24,lo8(-(-1))
 2824 001c 8D83      		std Y+5,r24
 775:xgrid.cpp     ****                         if (pkt->rx_node < 16)
 2826               	.LM228:
 2827 001e 8A85      		ldd r24,Y+10
 2828 0020 8031      		cpi r24,lo8(16)
 2829 0022 00F4      		brsh .L70
 776:xgrid.cpp     ****                                 mask &= ~(1 << pkt->rx_node);
 2831               	.LM229:
 2832 0024 41E0      		ldi r20,lo8(1)
 2833 0026 50E0      		ldi r21,hi8(1)
 2834 0028 00C0      		rjmp 2f
 2835 002a 440F      	1:	lsl r20
 2836 002c 551F      		rol r21
 2837 002e 8A95      	2:	dec r24
 2838 0030 02F4      		brpl 1b
 2839 0032 4095      		com r20
 2840 0034 5095      		com r21
 2841 0036 00C0      		rjmp .L69
 2842               	.L70:
 774:xgrid.cpp     ****                         uint16_t mask = 0xFFFF;
 2844               	.LM230:
 2845 0038 4FEF      		ldi r20,lo8(-1)
 2846 003a 5FEF      		ldi r21,hi8(-1)
 2847               	.L69:
 777:xgrid.cpp     ****                         send_raw_packet(pkt, mask);
 2849               	.LM231:
 2850 003c C801      		movw r24,r16
 2851 003e BE01      		movw r22,r28
 2852 0040 0E94 0000 		call _ZN5Xgrid15send_raw_packetEPNS_6PacketEj
 778:xgrid.cpp     ****                         pkt->radius++;
 2854               	.LM232:
 2855 0044 8D81      		ldd r24,Y+5
 2856 0046 8F5F      		subi r24,lo8(-(1))
 2857 0048 8D83      		std Y+5,r24
 2858               	.L68:
 2859               	.LBE64:
 2860               	.LBE63:
 781:xgrid.cpp     ****                 internal_process_packet(pkt);
 2862               	.LM233:
 2863 004a C801      		movw r24,r16
 2864 004c BE01      		movw r22,r28
 2865 004e 0E94 0000 		call _ZN5Xgrid23internal_process_packetEPNS_6PacketE
 2866               	.L66:
 2867               	/* epilogue start */
 2868               	.LBE62:
 2869               	.LBE61:
 783:xgrid.cpp     **** }
 2871               	.LM234:
 2872 0052 DF91      		pop r29
 2873 0054 CF91      		pop r28
 2874 0056 1F91      		pop r17
 2875 0058 0F91      		pop r16
 2876 005a 0895      		ret
 2881               	.Lscope14:
 2882               		.section	.text._ZN5Xgrid7processEv,"ax",@progbits
 2885               	.global	_ZN5Xgrid7processEv
 2887               	_ZN5Xgrid7processEv:
 323:xgrid.cpp     **** {
 2889               	.LM235:
 2890               	.LFBB15:
 2891 0000 2F92      		push r2
 2892 0002 3F92      		push r3
 2893 0004 4F92      		push r4
 2894 0006 5F92      		push r5
 2895 0008 6F92      		push r6
 2896 000a 7F92      		push r7
 2897 000c 8F92      		push r8
 2898 000e 9F92      		push r9
 2899 0010 AF92      		push r10
 2900 0012 BF92      		push r11
 2901 0014 CF92      		push r12
 2902 0016 DF92      		push r13
 2903 0018 EF92      		push r14
 2904 001a FF92      		push r15
 2905 001c 0F93      		push r16
 2906 001e 1F93      		push r17
 2907 0020 CF93      		push r28
 2908 0022 DF93      		push r29
 2909 0024 CDB7      		in r28,__SP_L__
 2910 0026 DEB7      		in r29,__SP_H__
 2911 0028 C251      		subi r28,lo8(-(-530))
 2912 002a D240      		sbci r29,hi8(-(-530))
 2913 002c CDBF      		out __SP_L__,r28
 2914 002e DEBF      		out __SP_H__,r29
 2915               	/* prologue: function */
 2916               	/* frame size = 530 */
 2917               	/* stack size = 548 */
 2918               	.L__stack_usage = 548
 2919 0030 5C01      		movw r10,r24
 2920               	.LBB65:
 2921               	.LBB66:
 327:xgrid.cpp     ****         for (uint8_t i = 0; i < node_cnt; i++)
 2923               	.LM236:
 2924 0032 9924      		clr r9
 2925 0034 9C01      		movw r18,r24
 2926 0036 2358      		subi r18,lo8(-(125))
 2927 0038 3F4F      		sbci r19,hi8(-(125))
 2928 003a C15F      		subi r28,lo8(-527)
 2929 003c DD4F      		sbci r29,hi8(-527)
 2930 003e 2883      		st Y,r18
 2931 0040 3983      		std Y+1,r19
 2932 0042 CF50      		subi r28,lo8(527)
 2933 0044 D240      		sbci r29,hi8(527)
 2934               	.LBB67:
 2935               	.LBB68:
 2936               	.LBB69:
 2937               	.LBB70:
 2938               	.LBB71:
 461:xgrid.cpp     ****                                 nodes[i].rx_buffer = -1;
 2940               	.LM237:
 2941 0046 8824      		clr r8
 2942 0048 8A94      		dec r8
 2943               	.LBE71:
 2944               	.LBE70:
 2945               	.LBE69:
 2946               	.LBE68:
 2947               	.LBE67:
 327:xgrid.cpp     ****         for (uint8_t i = 0; i < node_cnt; i++)
 2949               	.LM238:
 2950 004a 00C0      		rjmp .L72
 2951               	.L91:
 2952               	.LBB85:
 329:xgrid.cpp     ****                 IOStream *stream = nodes[i].stream;
 2954               	.LM239:
 2955 004c F201      		movw r30,r4
 2956 004e EE0F      		lsl r30
 2957 0050 FF1F      		rol r31
 2958 0052 E40D      		add r30,r4
 2959 0054 F51D      		adc r31,r5
 2960 0056 EE0F      		lsl r30
 2961 0058 FF1F      		rol r31
 2962 005a EE0F      		lsl r30
 2963 005c FF1F      		rol r31
 2964 005e EA0D      		add r30,r10
 2965 0060 FB1D      		adc r31,r11
 2966 0062 C58C      		ldd r12,Z+29
 2967 0064 D68C      		ldd r13,Z+30
 333:xgrid.cpp     ****                 while (nodes[i].drop_chars > 0 && stream->available())
 2969               	.LM240:
 2970 0066 8F01      		movw r16,r30
 2971 0068 0F5D      		subi r16,lo8(-(33))
 2972 006a 1F4F      		sbci r17,hi8(-(33))
 2973               	.L74:
 333:xgrid.cpp     ****                 while (nodes[i].drop_chars > 0 && stream->available())
 2975               	.LM241:
 2976 006c D801      		movw r26,r16
 2977 006e 8D91      		ld r24,X+
 2978 0070 9C91      		ld r25,X
 2979 0072 1197      		sbiw r26,1
 2980 0074 0097      		sbiw r24,0
 2981 0076 01F4      		brne .+2
 2982 0078 00C0      		rjmp .L73
 333:xgrid.cpp     ****                 while (nodes[i].drop_chars > 0 && stream->available())
 2984               	.LM242:
 2985 007a D601      		movw r26,r12
 2986 007c ED91      		ld r30,X+
 2987 007e FC91      		ld r31,X
 2988 0080 0190      		ld __tmp_reg__,Z+
 2989 0082 F081      		ld r31,Z
 2990 0084 E02D      		mov r30,__tmp_reg__
 2991 0086 C601      		movw r24,r12
 2992 0088 1995      		eicall
 2993 008a 0097      		sbiw r24,0
 2994 008c 01F4      		brne .+2
 2995 008e 00C0      		rjmp .L73
 335:xgrid.cpp     ****                         stream->get();
 2997               	.LM243:
 2998 0090 D601      		movw r26,r12
 2999 0092 ED91      		ld r30,X+
 3000 0094 FC91      		ld r31,X
 3001 0096 0280      		ldd __tmp_reg__,Z+2
 3002 0098 F381      		ldd r31,Z+3
 3003 009a E02D      		mov r30,__tmp_reg__
 3004 009c C601      		movw r24,r12
 3005 009e 1995      		eicall
 336:xgrid.cpp     ****                         nodes[i].drop_chars--;
 3007               	.LM244:
 3008 00a0 F801      		movw r30,r16
 3009 00a2 8081      		ld r24,Z
 3010 00a4 9181      		ldd r25,Z+1
 3011 00a6 0197      		sbiw r24,1
 3012 00a8 8083      		st Z,r24
 3013 00aa 9183      		std Z+1,r25
 3014 00ac 00C0      		rjmp .L74
 3015               	.L131:
 3016               	.LBB83:
 3017               	.LBB81:
 3018               	.LBB75:
 342:xgrid.cpp     ****                         if (nodes[i].rx_buffer == -1)
 3020               	.LM245:
 3021 00ae D801      		movw r26,r16
 3022 00b0 5F96      		adiw r26,31
 3023 00b2 8C91      		ld r24,X
 3024 00b4 5F97      		sbiw r26,31
 3025 00b6 8F3F      		cpi r24,lo8(-1)
 3026 00b8 01F0      		breq .+2
 3027 00ba 00C0      		rjmp .L75
 3028               	.LBB76:
 347:xgrid.cpp     ****                                 while (stream->available() > 0 && stream->peek() != XGRID_IDENTIFIE
 3030               	.LM246:
 3031 00bc EC2C      		mov r14,r12
 3032 00be 0D2D      		mov r16,r13
 3033               	.L141:
 3034 00c0 D601      		movw r26,r12
 3035 00c2 ED91      		ld r30,X+
 3036 00c4 FC91      		ld r31,X
 3037 00c6 0190      		ld __tmp_reg__,Z+
 3038 00c8 F081      		ld r31,Z
 3039 00ca E02D      		mov r30,__tmp_reg__
 3040 00cc 8E2D      		mov r24,r14
 3041 00ce 902F      		mov r25,r16
 3042 00d0 1995      		eicall
 3043 00d2 0097      		sbiw r24,0
 3044 00d4 01F4      		brne .+2
 3045 00d6 00C0      		rjmp .L76
 347:xgrid.cpp     ****                                 while (stream->available() > 0 && stream->peek() != XGRID_IDENTIFIE
 3047               	.LM247:
 3048 00d8 D601      		movw r26,r12
 3049 00da ED91      		ld r30,X+
 3050 00dc FC91      		ld r31,X
 3051 00de 0480      		ldd __tmp_reg__,Z+4
 3052 00e0 F581      		ldd r31,Z+5
 3053 00e2 E02D      		mov r30,__tmp_reg__
 3054 00e4 8E2D      		mov r24,r14
 3055 00e6 902F      		mov r25,r16
 3056 00e8 60E0      		ldi r22,lo8(0)
 3057 00ea 70E0      		ldi r23,hi8(0)
 3058 00ec 1995      		eicall
 3059 00ee 8A35      		cpi r24,90
 3060 00f0 9105      		cpc r25,__zero_reg__
 3061 00f2 01F4      		brne .+2
 3062 00f4 00C0      		rjmp .L76
 348:xgrid.cpp     ****                                         stream->get();
 3064               	.LM248:
 3065 00f6 D601      		movw r26,r12
 3066 00f8 ED91      		ld r30,X+
 3067 00fa FC91      		ld r31,X
 3068 00fc 0280      		ldd __tmp_reg__,Z+2
 3069 00fe F381      		ldd r31,Z+3
 3070 0100 E02D      		mov r30,__tmp_reg__
 3071 0102 8E2D      		mov r24,r14
 3072 0104 902F      		mov r25,r16
 3073 0106 1995      		eicall
 3074 0108 00C0      		rjmp .L141
 3075               	.L150:
 355:xgrid.cpp     ****                                 if (stream->available() < 3)
 3077               	.LM249:
 3078 010a D601      		movw r26,r12
 3079 010c ED91      		ld r30,X+
 3080 010e FC91      		ld r31,X
 3081 0110 0190      		ld __tmp_reg__,Z+
 3082 0112 F081      		ld r31,Z
 3083 0114 E02D      		mov r30,__tmp_reg__
 3084 0116 8E2D      		mov r24,r14
 3085 0118 902F      		mov r25,r16
 3086 011a 1995      		eicall
 3087 011c 8330      		cpi r24,3
 3088 011e 9105      		cpc r25,__zero_reg__
 3089 0120 00F4      		brsh .+2
 3090 0122 00C0      		rjmp .L78
 358:xgrid.cpp     ****                                 len = stream->peek(1) | (stream->peek(2) << 8);
 3092               	.LM250:
 3093 0124 D601      		movw r26,r12
 3094 0126 ED91      		ld r30,X+
 3095 0128 FC91      		ld r31,X
 3096 012a 0480      		ldd __tmp_reg__,Z+4
 3097 012c F581      		ldd r31,Z+5
 3098 012e E02D      		mov r30,__tmp_reg__
 3099 0130 8E2D      		mov r24,r14
 3100 0132 902F      		mov r25,r16
 3101 0134 61E0      		ldi r22,lo8(1)
 3102 0136 70E0      		ldi r23,hi8(1)
 3103 0138 1995      		eicall
 3104 013a 3C01      		movw r6,r24
 3105 013c D601      		movw r26,r12
 3106 013e ED91      		ld r30,X+
 3107 0140 FC91      		ld r31,X
 3108 0142 0480      		ldd __tmp_reg__,Z+4
 3109 0144 F581      		ldd r31,Z+5
 3110 0146 E02D      		mov r30,__tmp_reg__
 3111 0148 8E2D      		mov r24,r14
 3112 014a 902F      		mov r25,r16
 3113 014c 62E0      		ldi r22,lo8(2)
 3114 014e 70E0      		ldi r23,hi8(2)
 3115 0150 1995      		eicall
 3116 0152 382E      		mov r3,r24
 3117 0154 2224      		clr r2
 3118 0156 B101      		movw r22,r2
 3119 0158 6629      		or r22,r6
 3120 015a 7729      		or r23,r7
 360:xgrid.cpp     ****                                 int8_t bi = get_free_buffer(len-sizeof(xgrid_header_short_t));
 3122               	.LM251:
 3123 015c 6650      		subi r22,lo8(-(-6))
 3124 015e 7040      		sbci r23,hi8(-(-6))
 3125 0160 C501      		movw r24,r10
 3126 0162 0E94 0000 		call _ZN5Xgrid15get_free_bufferEj
 362:xgrid.cpp     ****                                 if (bi < 0)
 3128               	.LM252:
 3129 0166 87FD      		sbrc r24,7
 3130 0168 00C0      		rjmp .L78
 365:xgrid.cpp     ****                                 nodes[i].rx_buffer = bi;
 3132               	.LM253:
 3133 016a F201      		movw r30,r4
 3134 016c EE0F      		lsl r30
 3135 016e FF1F      		rol r31
 3136 0170 E40D      		add r30,r4
 3137 0172 F51D      		adc r31,r5
 3138 0174 EE0F      		lsl r30
 3139 0176 FF1F      		rol r31
 3140 0178 EE0F      		lsl r30
 3141 017a FF1F      		rol r31
 3142 017c EA0D      		add r30,r10
 3143 017e FB1D      		adc r31,r11
 3144 0180 878F      		std Z+31,r24
 367:xgrid.cpp     ****                                 pkt_buffer[bi].flags |= XGRID_BUFFER_IN_USE_RX;
 3146               	.LM254:
 3147 0182 9927      		clr r25
 3148 0184 87FD      		sbrc r24,7
 3149 0186 9095      		com r25
 368:xgrid.cpp     ****                                 pkt_buffer[bi].flags &= ~XGRID_BUFFER_UNIQUE;
 3151               	.LM255:
 3152 0188 880F      		lsl r24
 3153 018a 991F      		rol r25
 3154 018c 9C01      		movw r18,r24
 3155 018e 63E0      		ldi r22,3
 3156 0190 220F      	1:	lsl r18
 3157 0192 331F      		rol r19
 3158 0194 6A95      		dec r22
 3159 0196 01F4      		brne 1b
 3160 0198 280F      		add r18,r24
 3161 019a 391F      		adc r19,r25
 3162 019c 2A0D      		add r18,r10
 3163 019e 3B1D      		adc r19,r11
 3164 01a0 F901      		movw r30,r18
 3165 01a2 EE5A      		subi r30,lo8(-(1362))
 3166 01a4 FA4F      		sbci r31,hi8(-(1362))
 367:xgrid.cpp     ****                                 pkt_buffer[bi].flags |= XGRID_BUFFER_IN_USE_RX;
 3168               	.LM256:
 3169 01a6 8081      		ld r24,Z
 3170 01a8 8260      		ori r24,lo8(2)
 368:xgrid.cpp     ****                                 pkt_buffer[bi].flags &= ~XGRID_BUFFER_UNIQUE;
 3172               	.LM257:
 3173 01aa 8B7F      		andi r24,lo8(-5)
 3174 01ac 8083      		st Z,r24
 369:xgrid.cpp     ****                                 pkt_buffer[bi].ptr = 0;
 3176               	.LM258:
 3177 01ae 225B      		subi r18,lo8(-(1358))
 3178 01b0 3A4F      		sbci r19,hi8(-(1358))
 3179 01b2 F901      		movw r30,r18
 3180 01b4 1082      		st Z,__zero_reg__
 3181 01b6 1182      		std Z+1,__zero_reg__
 3182               	.L75:
 3183               	.LBE76:
 3184               	.LBE75:
 372:xgrid.cpp     ****                         xgrid_buffer_t *buffer = &(pkt_buffer[nodes[i].rx_buffer]);
 3186               	.LM259:
 3187 01b8 F201      		movw r30,r4
 3188 01ba EE0F      		lsl r30
 3189 01bc FF1F      		rol r31
 3190 01be E40D      		add r30,r4
 3191 01c0 F51D      		adc r31,r5
 3192 01c2 EE0F      		lsl r30
 3193 01c4 FF1F      		rol r31
 3194 01c6 EE0F      		lsl r30
 3195 01c8 FF1F      		rol r31
 3196 01ca EA0D      		add r30,r10
 3197 01cc FB1D      		adc r31,r11
 3198 01ce 878D      		ldd r24,Z+31
 3199 01d0 9927      		clr r25
 3200 01d2 87FD      		sbrc r24,7
 3201 01d4 9095      		com r25
 3202 01d6 880F      		lsl r24
 3203 01d8 991F      		rol r25
 3204 01da 8C01      		movw r16,r24
 3205 01dc B3E0      		ldi r27,3
 3206 01de 000F      	1:	lsl r16
 3207 01e0 111F      		rol r17
 3208 01e2 BA95      		dec r27
 3209 01e4 01F4      		brne 1b
 3210 01e6 080F      		add r16,r24
 3211 01e8 191F      		adc r17,r25
 3212 01ea 0F5B      		subi r16,lo8(-(1345))
 3213 01ec 1A4F      		sbci r17,hi8(-(1345))
 3214 01ee 0A0D      		add r16,r10
 3215 01f0 1B1D      		adc r17,r11
 375:xgrid.cpp     ****                         while (buffer->ptr < sizeof(xgrid_header_t) && nodes[i].stream->available()
 3217               	.LM260:
 3218 01f2 2DE1      		ldi r18,lo8(29)
 3219 01f4 622E      		mov r6,r18
 3220 01f6 712C      		mov r7,__zero_reg__
 3221 01f8 6E0E      		add r6,r30
 3222 01fa 7F1E      		adc r7,r31
 3223               	.L80:
 375:xgrid.cpp     ****                         while (buffer->ptr < sizeof(xgrid_header_t) && nodes[i].stream->available()
 3225               	.LM261:
 3226 01fc D801      		movw r26,r16
 3227 01fe 1D96      		adiw r26,13
 3228 0200 8D91      		ld r24,X+
 3229 0202 9C91      		ld r25,X
 3230 0204 1E97      		sbiw r26,13+1
 3231 0206 8930      		cpi r24,9
 3232 0208 9105      		cpc r25,__zero_reg__
 3233 020a 00F0      		brlo .+2
 3234 020c 00C0      		rjmp .L79
 375:xgrid.cpp     ****                         while (buffer->ptr < sizeof(xgrid_header_t) && nodes[i].stream->available()
 3236               	.LM262:
 3237 020e F301      		movw r30,r6
 3238 0210 8081      		ld r24,Z
 3239 0212 9181      		ldd r25,Z+1
 3240 0214 DC01      		movw r26,r24
 3241 0216 ED91      		ld r30,X+
 3242 0218 FC91      		ld r31,X
 3243 021a 0190      		ld __tmp_reg__,Z+
 3244 021c F081      		ld r31,Z
 3245 021e E02D      		mov r30,__tmp_reg__
 3246 0220 1995      		eicall
 3247 0222 0097      		sbiw r24,0
 3248 0224 01F4      		brne .+2
 3249 0226 00C0      		rjmp .L79
 377:xgrid.cpp     ****                                 ((uint8_t *)&(buffer->hdr))[buffer->ptr++] = nodes[i].stream->get()
 3251               	.LM263:
 3252 0228 F801      		movw r30,r16
 3253 022a E584      		ldd r14,Z+13
 3254 022c F684      		ldd r15,Z+14
 3255 022e 6801      		movw r12,r16
 3256 0230 CE0C      		add r12,r14
 3257 0232 DF1C      		adc r13,r15
 3258 0234 D301      		movw r26,r6
 3259 0236 8D91      		ld r24,X+
 3260 0238 9C91      		ld r25,X
 3261 023a DC01      		movw r26,r24
 3262 023c ED91      		ld r30,X+
 3263 023e FC91      		ld r31,X
 3264 0240 0280      		ldd __tmp_reg__,Z+2
 3265 0242 F381      		ldd r31,Z+3
 3266 0244 E02D      		mov r30,__tmp_reg__
 3267 0246 1995      		eicall
 3268 0248 F601      		movw r30,r12
 3269 024a 8083      		st Z,r24
 3270 024c C701      		movw r24,r14
 3271 024e 0196      		adiw r24,1
 3272 0250 D801      		movw r26,r16
 3273 0252 1D96      		adiw r26,13
 3274 0254 8D93      		st X+,r24
 3275 0256 9C93      		st X,r25
 3276 0258 1E97      		sbiw r26,13+1
 3277 025a 00C0      		rjmp .L80
 3278               	.L151:
 384:xgrid.cpp     ****                         pkt.source_id = buffer->hdr.source_id;
 3280               	.LM264:
 3281 025c F801      		movw r30,r16
 3282 025e 8381      		ldd r24,Z+3
 3283 0260 9481      		ldd r25,Z+4
 3284 0262 8983      		std Y+1,r24
 3285 0264 9A83      		std Y+2,r25
 385:xgrid.cpp     ****                         pkt.type = buffer->hdr.type;
 3287               	.LM265:
 3288 0266 4581      		ldd r20,Z+5
 3289 0268 4B83      		std Y+3,r20
 386:xgrid.cpp     ****                         pkt.seq = buffer->hdr.seq;
 3291               	.LM266:
 3292 026a 8681      		ldd r24,Z+6
 3293 026c 8C83      		std Y+4,r24
 387:xgrid.cpp     ****                         pkt.flags = buffer->hdr.flags;
 3295               	.LM267:
 3296 026e 8781      		ldd r24,Z+7
 3297 0270 8D83      		std Y+5,r24
 388:xgrid.cpp     ****                         pkt.radius = buffer->hdr.radius;
 3299               	.LM268:
 3300 0272 8085      		ldd r24,Z+8
 3301 0274 8E83      		std Y+6,r24
 389:xgrid.cpp     ****                         pkt.rx_node = i;
 3303               	.LM269:
 3304 0276 9B86      		std Y+11,r9
 392:xgrid.cpp     ****                         if (!(buffer->flags & XGRID_BUFFER_UNIQUE))
 3306               	.LM270:
 3307 0278 8189      		ldd r24,Z+17
 3308 027a 82FD      		sbrc r24,2
 3309 027c 00C0      		rjmp .L87
 394:xgrid.cpp     ****                                 if (pkt.type == XGRID_PKT_FLUSH_COMPARE_BUFFER ||
 3311               	.LM271:
 3312 027e 4C3F      		cpi r20,lo8(-4)
 3313 0280 01F0      		breq .L82
 394:xgrid.cpp     ****                                 if (pkt.type == XGRID_PKT_FLUSH_COMPARE_BUFFER ||
 3315               	.LM272:
 3316 0282 4B3F      		cpi r20,lo8(-5)
 3317 0284 01F4      		brne .L83
 394:xgrid.cpp     ****                                 if (pkt.type == XGRID_PKT_FLUSH_COMPARE_BUFFER ||
 3319               	.LM273:
 3320 0286 D501      		movw r26,r10
 3321 0288 1F96      		adiw r26,15
 3322 028a 8C91      		ld r24,X
 3323 028c 1F97      		sbiw r26,15
 3324 028e 8832      		cpi r24,lo8(40)
 3325 0290 01F0      		breq .+2
 3326 0292 00C0      		rjmp .L84
 394:xgrid.cpp     ****                                 if (pkt.type == XGRID_PKT_FLUSH_COMPARE_BUFFER ||
 3328               	.LM274:
 3329 0294 292D      		mov r18,r9
 3330 0296 30E0      		ldi r19,lo8(0)
 3331 0298 5096      		adiw r26,16
 3332 029a 8D91      		ld r24,X+
 3333 029c 9C91      		ld r25,X
 3334 029e 5197      		sbiw r26,16+1
 3335 02a0 8217      		cp r24,r18
 3336 02a2 9307      		cpc r25,r19
 3337 02a4 01F0      		breq .+2
 3338 02a6 00C0      		rjmp .L84
 3339               	.L83:
 394:xgrid.cpp     ****                                 if (pkt.type == XGRID_PKT_FLUSH_COMPARE_BUFFER ||
 3341               	.LM275:
 3342 02a8 F501      		movw r30,r10
 3343 02aa 8785      		ldd r24,Z+15
 3344 02ac 8832      		cpi r24,lo8(40)
 3345 02ae 01F4      		brne .L85
 396:xgrid.cpp     ****                                         !(state == XGRID_STATE_FW_RX && ((pkt.type & 0xF0) != 0xF0)
 3347               	.LM276:
 3348 02b0 407F      		andi r20,lo8(-16)
 3349 02b2 403F      		cpi r20,lo8(-16)
 3350 02b4 01F0      		breq .+2
 3351 02b6 00C0      		rjmp .L84
 3352               	.L85:
 397:xgrid.cpp     ****                                         check_unique(&pkt)))
 3354               	.LM277:
 3355 02b8 C501      		movw r24,r10
 3356 02ba BE01      		movw r22,r28
 3357 02bc 6F5F      		subi r22,lo8(-(1))
 3358 02be 7F4F      		sbci r23,hi8(-(1))
 3359 02c0 0E94 0000 		call _ZN5Xgrid12check_uniqueEPNS_6PacketE
 394:xgrid.cpp     ****                                 if (pkt.type == XGRID_PKT_FLUSH_COMPARE_BUFFER ||
 3361               	.LM278:
 3362 02c4 8823      		tst r24
 3363 02c6 01F4      		brne .+2
 3364 02c8 00C0      		rjmp .L84
 3365               	.L82:
 399:xgrid.cpp     ****                                         buffer->flags |= XGRID_BUFFER_UNIQUE;
 3367               	.LM279:
 3368 02ca D801      		movw r26,r16
 3369 02cc 5196      		adiw r26,17
 3370 02ce 8C91      		ld r24,X
 3371 02d0 5197      		sbiw r26,17
 3372 02d2 8460      		ori r24,lo8(4)
 3373 02d4 5196      		adiw r26,17
 3374 02d6 8C93      		st X,r24
 3375               	.L87:
 415:xgrid.cpp     ****                         while (buffer->ptr < buffer->hdr.size+3 && nodes[i].stream->available())
 3377               	.LM280:
 3378 02d8 7201      		movw r14,r4
 3379 02da EE0C      		lsl r14
 3380 02dc FF1C      		rol r15
 3381 02de E40C      		add r14,r4
 3382 02e0 F51C      		adc r15,r5
 3383 02e2 EE0C      		lsl r14
 3384 02e4 FF1C      		rol r15
 3385 02e6 EE0C      		lsl r14
 3386 02e8 FF1C      		rol r15
 3387 02ea EA0C      		add r14,r10
 3388 02ec FB1C      		adc r15,r11
 3389 02ee EDE1      		ldi r30,lo8(29)
 3390 02f0 F0E0      		ldi r31,hi8(29)
 3391 02f2 EE0E      		add r14,r30
 3392 02f4 FF1E      		adc r15,r31
 3393               	.L142:
 3394 02f6 D801      		movw r26,r16
 3395 02f8 1196      		adiw r26,1
 3396 02fa 8D91      		ld r24,X+
 3397 02fc 9C91      		ld r25,X
 3398 02fe 1297      		sbiw r26,1+1
 3399 0300 0396      		adiw r24,3
 3400 0302 1D96      		adiw r26,13
 3401 0304 2D91      		ld r18,X+
 3402 0306 3C91      		ld r19,X
 3403 0308 1E97      		sbiw r26,13+1
 3404 030a 2817      		cp r18,r24
 3405 030c 3907      		cpc r19,r25
 3406 030e 00F0      		brlo .+2
 3407 0310 00C0      		rjmp .L86
 415:xgrid.cpp     ****                         while (buffer->ptr < buffer->hdr.size+3 && nodes[i].stream->available())
 3409               	.LM281:
 3410 0312 F701      		movw r30,r14
 3411 0314 8081      		ld r24,Z
 3412 0316 9181      		ldd r25,Z+1
 3413 0318 DC01      		movw r26,r24
 3414 031a ED91      		ld r30,X+
 3415 031c FC91      		ld r31,X
 3416 031e 0190      		ld __tmp_reg__,Z+
 3417 0320 F081      		ld r31,Z
 3418 0322 E02D      		mov r30,__tmp_reg__
 3419 0324 1995      		eicall
 3420 0326 0097      		sbiw r24,0
 3421 0328 01F4      		brne .+2
 3422 032a 00C0      		rjmp .L86
 417:xgrid.cpp     ****                                 buffer->buffer[buffer->ptr++ - sizeof(xgrid_header_t)] = nodes[i].s
 3424               	.LM282:
 3425 032c F801      		movw r30,r16
 3426 032e 6584      		ldd r6,Z+13
 3427 0330 7684      		ldd r7,Z+14
 3428 0332 C301      		movw r24,r6
 3429 0334 0997      		sbiw r24,9
 3430 0336 C184      		ldd r12,Z+9
 3431 0338 D284      		ldd r13,Z+10
 3432 033a C80E      		add r12,r24
 3433 033c D91E      		adc r13,r25
 3434 033e D701      		movw r26,r14
 3435 0340 8D91      		ld r24,X+
 3436 0342 9C91      		ld r25,X
 3437 0344 DC01      		movw r26,r24
 3438 0346 ED91      		ld r30,X+
 3439 0348 FC91      		ld r31,X
 3440 034a 0280      		ldd __tmp_reg__,Z+2
 3441 034c F381      		ldd r31,Z+3
 3442 034e E02D      		mov r30,__tmp_reg__
 3443 0350 1995      		eicall
 3444 0352 F601      		movw r30,r12
 3445 0354 8083      		st Z,r24
 3446 0356 C301      		movw r24,r6
 3447 0358 0196      		adiw r24,1
 3448 035a D801      		movw r26,r16
 3449 035c 1D96      		adiw r26,13
 3450 035e 8D93      		st X+,r24
 3451 0360 9C93      		st X,r25
 3452 0362 1E97      		sbiw r26,13+1
 3453 0364 00C0      		rjmp .L142
 3454               	.L134:
 3455               	.LBB78:
 3456               	.LBB74:
 424:xgrid.cpp     ****                                 pkt.data = buffer->buffer;
 3458               	.LM283:
 3459 0366 D801      		movw r26,r16
 3460 0368 1996      		adiw r26,9
 3461 036a ED91      		ld r30,X+
 3462 036c FC91      		ld r31,X
 3463 036e 1A97      		sbiw r26,9+1
 3464 0370 EF83      		std Y+7,r30
 3465 0372 F887      		std Y+8,r31
 425:xgrid.cpp     ****                                 pkt.data_len = buffer->hdr.size - sizeof(xgrid_header_short_t);
 3467               	.LM284:
 3468 0374 3AEF      		ldi r19,lo8(-6)
 3469 0376 E32E      		mov r14,r19
 3470 0378 3FEF      		ldi r19,hi8(-6)
 3471 037a F32E      		mov r15,r19
 3472 037c E60E      		add r14,r22
 3473 037e F71E      		adc r15,r23
 3474 0380 E986      		std Y+9,r14
 3475 0382 FA86      		std Y+10,r15
 3476               	.LBB72:
 428:xgrid.cpp     ****                                 if (pkt.radius > 1)
 3478               	.LM285:
 3479 0384 8E81      		ldd r24,Y+6
 3480 0386 8230      		cpi r24,lo8(2)
 3481 0388 00F0      		brlo .L88
 3482               	.LBB73:
 432:xgrid.cpp     ****                                         if (pkt.rx_node < 16)
 3484               	.LM286:
 3485 038a CB84      		ldd r12,Y+11
 3486 038c BFE0      		ldi r27,lo8(15)
 3487 038e BC15      		cp r27,r12
 3488 0390 00F0      		brlo .L135
 433:xgrid.cpp     ****                                                 mask &= ~(1 << pkt.rx_node);
 3490               	.LM287:
 3491 0392 41E0      		ldi r20,lo8(1)
 3492 0394 50E0      		ldi r21,hi8(1)
 3493 0396 0C2C      		mov r0,r12
 3494 0398 00C0      		rjmp 2f
 3495 039a 440F      	1:	lsl r20
 3496 039c 551F      		rol r21
 3497 039e 0A94      	2:	dec r0
 3498 03a0 02F4      		brpl 1b
 3499 03a2 4095      		com r20
 3500 03a4 5095      		com r21
 3501 03a6 00C0      		rjmp .L89
 3502               	.L135:
 431:xgrid.cpp     ****                                         uint16_t mask = 0xFFFF;
 3504               	.LM288:
 3505 03a8 4FEF      		ldi r20,lo8(-1)
 3506 03aa 5FEF      		ldi r21,hi8(-1)
 3507               	.L89:
 435:xgrid.cpp     ****                                         if (buffer->hdr.flags & XGRID_PKT_FLAG_TRACE)
 3509               	.LM289:
 3510 03ac D801      		movw r26,r16
 3511 03ae 1796      		adiw r26,7
 3512 03b0 8C91      		ld r24,X
 3513 03b2 1797      		sbiw r26,7
 3514 03b4 84FF      		sbrs r24,4
 3515 03b6 00C0      		rjmp .L90
 437:xgrid.cpp     ****                                                 buffer->hdr.size++;
 3517               	.LM290:
 3518 03b8 CB01      		movw r24,r22
 3519 03ba 0196      		adiw r24,1
 3520 03bc 1196      		adiw r26,1
 3521 03be 8D93      		st X+,r24
 3522 03c0 9C93      		st X,r25
 3523 03c2 1297      		sbiw r26,1+1
 438:xgrid.cpp     ****                                                 if (buffer->hdr.size - sizeof(xgrid_header_short_t)
 3525               	.LM291:
 3526 03c4 CB01      		movw r24,r22
 3527 03c6 0597      		sbiw r24,5
 3528 03c8 1B96      		adiw r26,11
 3529 03ca 2D91      		ld r18,X+
 3530 03cc 3C91      		ld r19,X
 3531 03ce 1C97      		sbiw r26,11+1
 3532 03d0 2817      		cp r18,r24
 3533 03d2 3907      		cpc r19,r25
 3534 03d4 00F0      		brlo .L90
 440:xgrid.cpp     ****                                                         buffer->buffer[buffer->hdr.size - sizeof(xg
 3536               	.LM292:
 3537 03d6 EE0D      		add r30,r14
 3538 03d8 FF1D      		adc r31,r15
 3539 03da C082      		st Z,r12
 3540               	.L90:
 450:xgrid.cpp     ****                                                 buffer->hdr.radius--;
 3542               	.LM293:
 3543 03dc F801      		movw r30,r16
 3544 03de 8085      		ldd r24,Z+8
 3545 03e0 8150      		subi r24,lo8(-(-1))
 3546 03e2 8087      		std Z+8,r24
 451:xgrid.cpp     ****                                                 buffer->mask = mask;
 3548               	.LM294:
 3549 03e4 4787      		std Z+15,r20
 3550 03e6 508B      		std Z+16,r21
 452:xgrid.cpp     ****                                                 buffer->flags |= XGRID_BUFFER_IN_USE_TX;
 3552               	.LM295:
 3553 03e8 8189      		ldd r24,Z+17
 3554 03ea 8160      		ori r24,lo8(1)
 3555 03ec 818B      		std Z+17,r24
 453:xgrid.cpp     ****                                                 buffer->ptr = 0;
 3557               	.LM296:
 3558 03ee 1586      		std Z+13,__zero_reg__
 3559 03f0 1686      		std Z+14,__zero_reg__
 3560               	.L88:
 3561               	.LBE73:
 3562               	.LBE72:
 457:xgrid.cpp     ****                                 internal_process_packet(&pkt);
 3564               	.LM297:
 3565 03f2 C501      		movw r24,r10
 3566 03f4 BE01      		movw r22,r28
 3567 03f6 6F5F      		subi r22,lo8(-(1))
 3568 03f8 7F4F      		sbci r23,hi8(-(1))
 3569 03fa 0E94 0000 		call _ZN5Xgrid23internal_process_packetEPNS_6PacketE
 460:xgrid.cpp     ****                                 buffer->flags &= ~ XGRID_BUFFER_IN_USE_RX;
 3571               	.LM298:
 3572 03fe D801      		movw r26,r16
 3573 0400 5196      		adiw r26,17
 3574 0402 8C91      		ld r24,X
 3575 0404 5197      		sbiw r26,17
 3576 0406 8D7F      		andi r24,lo8(-3)
 3577 0408 5196      		adiw r26,17
 3578 040a 8C93      		st X,r24
 3579 040c 5197      		sbiw r26,17
 461:xgrid.cpp     ****                                 nodes[i].rx_buffer = -1;
 3581               	.LM299:
 3582 040e F201      		movw r30,r4
 3583 0410 EE0F      		lsl r30
 3584 0412 FF1F      		rol r31
 3585 0414 E40D      		add r30,r4
 3586 0416 F51D      		adc r31,r5
 3587 0418 EE0F      		lsl r30
 3588 041a FF1F      		rol r31
 3589 041c EE0F      		lsl r30
 3590 041e FF1F      		rol r31
 3591 0420 EA0D      		add r30,r10
 3592 0422 FB1D      		adc r31,r11
 3593               	.L146:
 3594 0424 878E      		std Z+31,r8
 3595               	.L78:
 3596               	.LBE74:
 3597               	.LBE78:
 3598               	.LBE81:
 3599               	.LBE83:
 3600               	.LBE85:
 327:xgrid.cpp     ****         for (uint8_t i = 0; i < node_cnt; i++)
 3602               	.LM300:
 3603 0426 9394      		inc r9
 3604               	.L72:
 327:xgrid.cpp     ****         for (uint8_t i = 0; i < node_cnt; i++)
 3606               	.LM301:
 3607 0428 492C      		mov r4,r9
 3608 042a 5524      		clr r5
 3609 042c C15F      		subi r28,lo8(-527)
 3610 042e DD4F      		sbci r29,hi8(-527)
 3611 0430 E881      		ld r30,Y
 3612 0432 F981      		ldd r31,Y+1
 3613 0434 CF50      		subi r28,lo8(527)
 3614 0436 D240      		sbci r29,hi8(527)
 3615 0438 8081      		ld r24,Z
 3616 043a 9927      		clr r25
 3617 043c 87FD      		sbrc r24,7
 3618 043e 9095      		com r25
 3619 0440 4816      		cp r4,r24
 3620 0442 5906      		cpc r5,r25
 3621 0444 04F4      		brge .+2
 3622 0446 00C0      		rjmp .L91
 327:xgrid.cpp     ****         for (uint8_t i = 0; i < node_cnt; i++)
 3624               	.LM302:
 3625 0448 C15F      		subi r28,lo8(-527)
 3626 044a DD4F      		sbci r29,hi8(-527)
 3627 044c 1882      		st Y,__zero_reg__
 3628 044e 1982      		std Y+1,__zero_reg__
 3629 0450 CF50      		subi r28,lo8(527)
 3630 0452 D240      		sbci r29,hi8(527)
 3631               	.LBE66:
 3632               	.LBB87:
 3633               	.LBB88:
 3634               	.LBB89:
 3635               	.LBB90:
 3636               	.LBB91:
 478:xgrid.cpp     ****                         for (uint8_t n = 0; n < node_cnt; n++)
 3638               	.LM303:
 3639 0454 9501      		movw r18,r10
 3640 0456 2358      		subi r18,lo8(-(125))
 3641 0458 3F4F      		sbci r19,hi8(-(125))
 3642 045a CF5E      		subi r28,lo8(-529)
 3643 045c DD4F      		sbci r29,hi8(-529)
 3644 045e 2883      		st Y,r18
 3645 0460 3983      		std Y+1,r19
 3646 0462 C151      		subi r28,lo8(529)
 3647 0464 D240      		sbci r29,hi8(529)
 3648               	.LBE91:
 3649               	.LBB94:
 3650               	.LBB95:
 3651               	.LBB96:
 540:xgrid.cpp     ****                                                 nodes[n].tx_buffer = -1;
 3653               	.LM304:
 3654 0466 8824      		clr r8
 3655 0468 8A94      		dec r8
 3656               	.L107:
 3657               	.LBE96:
 3658               	.LBE95:
 3659               	.LBE94:
 3660               	.LBE90:
 3661               	.LBE89:
 469:xgrid.cpp     ****                 xgrid_buffer_t *buffer = &(pkt_buffer[i]);
 3663               	.LM305:
 3664 046a C15F      		subi r28,lo8(-527)
 3665 046c DD4F      		sbci r29,hi8(-527)
 3666 046e 8881      		ld r24,Y
 3667 0470 9981      		ldd r25,Y+1
 3668 0472 CF50      		subi r28,lo8(527)
 3669 0474 D240      		sbci r29,hi8(527)
 3670 0476 880F      		lsl r24
 3671 0478 991F      		rol r25
 3672 047a 6C01      		movw r12,r24
 3673 047c 13E0      		ldi r17,3
 3674 047e CC0C      	1:	lsl r12
 3675 0480 DD1C      		rol r13
 3676 0482 1A95      		dec r17
 3677 0484 01F4      		brne 1b
 3678 0486 C80E      		add r12,r24
 3679 0488 D91E      		adc r13,r25
 3680 048a 61E4      		ldi r22,lo8(1345)
 3681 048c 75E0      		ldi r23,hi8(1345)
 3682 048e C60E      		add r12,r22
 3683 0490 D71E      		adc r13,r23
 3684 0492 CA0C      		add r12,r10
 3685 0494 DB1C      		adc r13,r11
 3686               	.LBB107:
 471:xgrid.cpp     ****                 if (buffer->flags & XGRID_BUFFER_IN_USE_TX)
 3688               	.LM306:
 3689 0496 D601      		movw r26,r12
 3690 0498 5196      		adiw r26,17
 3691 049a 8C91      		ld r24,X
 3692 049c 5197      		sbiw r26,17
 3693 049e 80FD      		sbrc r24,0
 3694 04a0 00C0      		rjmp .L136
 3695 04a2 00C0      		rjmp .L93
 3696               	.L97:
 3697               	.LBB105:
 3698               	.LBB99:
 3699               	.LBB92:
 480:xgrid.cpp     ****                                 if (buffer->mask & (1 << n))
 3701               	.LM307:
 3702 04a4 81E0      		ldi r24,lo8(1)
 3703 04a6 90E0      		ldi r25,hi8(1)
 3704 04a8 002E      		mov r0,r16
 3705 04aa 00C0      		rjmp 2f
 3706 04ac 880F      	1:	lsl r24
 3707 04ae 991F      		rol r25
 3708 04b0 0A94      	2:	dec r0
 3709 04b2 02F4      		brpl 1b
 3710 04b4 F601      		movw r30,r12
 3711 04b6 2785      		ldd r18,Z+15
 3712 04b8 3089      		ldd r19,Z+16
 3713 04ba 8223      		and r24,r18
 3714 04bc 9323      		and r25,r19
 3715 04be 0097      		sbiw r24,0
 3716 04c0 01F0      		breq .L94
 3717               	.LBB93:
 483:xgrid.cpp     ****                                         if (nodes[n].tx_buffer == -1)
 3719               	.LM308:
 3720 04c2 9A01      		movw r18,r20
 3721 04c4 220F      		lsl r18
 3722 04c6 331F      		rol r19
 3723 04c8 F901      		movw r30,r18
 3724 04ca E40F      		add r30,r20
 3725 04cc F51F      		adc r31,r21
 3726 04ce EE0F      		lsl r30
 3727 04d0 FF1F      		rol r31
 3728 04d2 EE0F      		lsl r30
 3729 04d4 FF1F      		rol r31
 3730 04d6 EA0D      		add r30,r10
 3731 04d8 FB1D      		adc r31,r11
 3732 04da 80A1      		ldd r24,Z+32
 3733 04dc 8F3F      		cpi r24,lo8(-1)
 3734 04de 01F4      		brne .L95
 486:xgrid.cpp     ****                                                 nodes[n].tx_buffer = i;
 3736               	.LM309:
 3737 04e0 C15F      		subi r28,lo8(-527)
 3738 04e2 DD4F      		sbci r29,hi8(-527)
 3739 04e4 6881      		ld r22,Y
 3740 04e6 CF50      		subi r28,lo8(527)
 3741 04e8 D240      		sbci r29,hi8(527)
 3742 04ea 60A3      		std Z+32,r22
 3743 04ec 00C0      		rjmp .L96
 3744               	.L95:
 488:xgrid.cpp     ****                                         else if (nodes[n].tx_buffer != i)
 3746               	.LM310:
 3747 04ee 9927      		clr r25
 3748 04f0 87FD      		sbrc r24,7
 3749 04f2 9095      		com r25
 3750 04f4 C15F      		subi r28,lo8(-527)
 3751 04f6 DD4F      		sbci r29,hi8(-527)
 3752 04f8 A881      		ld r26,Y
 3753 04fa B981      		ldd r27,Y+1
 3754 04fc CF50      		subi r28,lo8(527)
 3755 04fe D240      		sbci r29,hi8(527)
 3756 0500 8A17      		cp r24,r26
 3757 0502 9B07      		cpc r25,r27
 3758 0504 01F0      		breq .L96
 491:xgrid.cpp     ****                                                 f = 0;
 3760               	.LM311:
 3761 0506 2224      		clr r2
 3762 0508 3324      		clr r3
 3763               	.L96:
 494:xgrid.cpp     ****                                         uint16_t f2 = nodes[n].stream->free();
 3765               	.LM312:
 3766 050a F901      		movw r30,r18
 3767 050c E40F      		add r30,r20
 3768 050e F51F      		adc r31,r21
 3769 0510 EE0F      		lsl r30
 3770 0512 FF1F      		rol r31
 3771 0514 EE0F      		lsl r30
 3772 0516 FF1F      		rol r31
 3773 0518 EA0D      		add r30,r10
 3774 051a FB1D      		adc r31,r11
 3775 051c 858D      		ldd r24,Z+29
 3776 051e 968D      		ldd r25,Z+30
 3777 0520 DC01      		movw r26,r24
 3778 0522 1296      		adiw r26,2
 3779 0524 ED91      		ld r30,X+
 3780 0526 FC91      		ld r31,X
 3781 0528 1397      		sbiw r26,2+1
 3782 052a 0190      		ld __tmp_reg__,Z+
 3783 052c F081      		ld r31,Z
 3784 052e E02D      		mov r30,__tmp_reg__
 3785 0530 0296      		adiw r24,2
 3786 0532 1995      		eicall
 495:xgrid.cpp     ****                                         if (f > f2)
 3788               	.LM313:
 3789 0534 8215      		cp r24,r2
 3790 0536 9305      		cpc r25,r3
 3791 0538 00F4      		brsh .L94
 3792 053a 1C01      		movw r2,r24
 3793               	.L94:
 3794               	.LBE93:
 3795               	.LBE92:
 478:xgrid.cpp     ****                         for (uint8_t n = 0; n < node_cnt; n++)
 3797               	.LM314:
 3798 053c 0F5F      		subi r16,lo8(-(1))
 3799 053e 00C0      		rjmp .L92
 3800               	.L136:
 3801               	.LBE99:
 3802               	.LBE105:
 471:xgrid.cpp     ****                 if (buffer->flags & XGRID_BUFFER_IN_USE_TX)
 3804               	.LM315:
 3805 0540 00E0      		ldi r16,lo8(0)
 3806 0542 2224      		clr r2
 3807 0544 2A94      		dec r2
 3808 0546 322C      		mov r3,r2
 3809               	.L92:
 3810               	.LBB106:
 3811               	.LBB100:
 478:xgrid.cpp     ****                         for (uint8_t n = 0; n < node_cnt; n++)
 3813               	.LM316:
 3814 0548 402F      		mov r20,r16
 3815 054a 50E0      		ldi r21,lo8(0)
 3816 054c CF5E      		subi r28,lo8(-529)
 3817 054e DD4F      		sbci r29,hi8(-529)
 3818 0550 E881      		ld r30,Y
 3819 0552 F981      		ldd r31,Y+1
 3820 0554 C151      		subi r28,lo8(529)
 3821 0556 D240      		sbci r29,hi8(529)
 3822 0558 8081      		ld r24,Z
 3823 055a 9927      		clr r25
 3824 055c 87FD      		sbrc r24,7
 3825 055e 9095      		com r25
 3826 0560 4817      		cp r20,r24
 3827 0562 5907      		cpc r21,r25
 3828 0564 04F4      		brge .+2
 3829 0566 00C0      		rjmp .L97
 478:xgrid.cpp     ****                         for (uint8_t n = 0; n < node_cnt; n++)
 3831               	.LM317:
 3832 0568 9924      		clr r9
 3833 056a 00C0      		rjmp .L98
 3834               	.L103:
 3835               	.LBE100:
 3836               	.LBB101:
 3837               	.LBB102:
 503:xgrid.cpp     ****                                 if (buffer->mask & (1 << n))
 3839               	.LM318:
 3840 056c 81E0      		ldi r24,lo8(1)
 3841 056e 90E0      		ldi r25,hi8(1)
 3842 0570 092C      		mov r0,r9
 3843 0572 00C0      		rjmp 2f
 3844 0574 880F      	1:	lsl r24
 3845 0576 991F      		rol r25
 3846 0578 0A94      	2:	dec r0
 3847 057a 02F4      		brpl 1b
 3848 057c D601      		movw r26,r12
 3849 057e 1F96      		adiw r26,15
 3850 0580 2D91      		ld r18,X+
 3851 0582 3C91      		ld r19,X
 3852 0584 5097      		sbiw r26,15+1
 3853 0586 8223      		and r24,r18
 3854 0588 9323      		and r25,r19
 3855 058a 0097      		sbiw r24,0
 3856 058c 01F4      		brne .+2
 3857 058e 00C0      		rjmp .L99
 3858               	.LBB103:
 506:xgrid.cpp     ****                                         uint16_t ptr = buffer->ptr;
 3860               	.LM319:
 3861 0590 1D96      		adiw r26,13
 3862 0592 ED90      		ld r14,X+
 3863 0594 FC90      		ld r15,X
 3864 0596 1E97      		sbiw r26,13+1
 509:xgrid.cpp     ****                                         while (cnt > 0 && ptr < sizeof(xgrid_header_t))
 3866               	.LM320:
 3867 0598 3101      		movw r6,r2
 511:xgrid.cpp     ****                                                 nodes[n].stream->put(((uint8_t *)&(buffer->hdr))[pt
 3869               	.LM321:
 3870 059a 8201      		movw r16,r4
 3871 059c 000F      		lsl r16
 3872 059e 111F      		rol r17
 3873 05a0 040D      		add r16,r4
 3874 05a2 151D      		adc r17,r5
 3875 05a4 000F      		lsl r16
 3876 05a6 111F      		rol r17
 3877 05a8 000F      		lsl r16
 3878 05aa 111F      		rol r17
 3879 05ac 0A0D      		add r16,r10
 3880 05ae 1B1D      		adc r17,r11
 3881 05b0 035E      		subi r16,lo8(-(29))
 3882 05b2 1F4F      		sbci r17,hi8(-(29))
 3883               	.L101:
 509:xgrid.cpp     ****                                         while (cnt > 0 && ptr < sizeof(xgrid_header_t))
 3885               	.LM322:
 3886 05b4 6114      		cp r6,__zero_reg__
 3887 05b6 7104      		cpc r7,__zero_reg__
 3888 05b8 01F0      		breq .L102
 509:xgrid.cpp     ****                                         while (cnt > 0 && ptr < sizeof(xgrid_header_t))
 3890               	.LM323:
 3891 05ba B9E0      		ldi r27,lo8(9)
 3892 05bc EB16      		cp r14,r27
 3893 05be F104      		cpc r15,__zero_reg__
 3894 05c0 00F4      		brsh .L102
 511:xgrid.cpp     ****                                                 nodes[n].stream->put(((uint8_t *)&(buffer->hdr))[pt
 3896               	.LM324:
 3897 05c2 F801      		movw r30,r16
 3898 05c4 8081      		ld r24,Z
 3899 05c6 9181      		ldd r25,Z+1
 3900 05c8 DC01      		movw r26,r24
 3901 05ca 1296      		adiw r26,2
 3902 05cc ED91      		ld r30,X+
 3903 05ce FC91      		ld r31,X
 3904 05d0 1397      		sbiw r26,2+1
 3905 05d2 D601      		movw r26,r12
 3906 05d4 AE0D      		add r26,r14
 3907 05d6 BF1D      		adc r27,r15
 3908 05d8 0280      		ldd __tmp_reg__,Z+2
 3909 05da F381      		ldd r31,Z+3
 3910 05dc E02D      		mov r30,__tmp_reg__
 3911 05de 0296      		adiw r24,2
 3912 05e0 6C91      		ld r22,X
 3913 05e2 1995      		eicall
 512:xgrid.cpp     ****                                                 ptr++;
 3915               	.LM325:
 3916 05e4 0894      		sec
 3917 05e6 E11C      		adc r14,__zero_reg__
 3918 05e8 F11C      		adc r15,__zero_reg__
 513:xgrid.cpp     ****                                                 cnt--;
 3920               	.LM326:
 3921 05ea 0894      		sec
 3922 05ec 6108      		sbc r6,__zero_reg__
 3923 05ee 7108      		sbc r7,__zero_reg__
 3924 05f0 00C0      		rjmp .L101
 3925               	.L102:
 519:xgrid.cpp     ****                                                 nodes[n].stream->put(buffer->buffer[ptr-sizeof(xgri
 3927               	.LM327:
 3928 05f2 8201      		movw r16,r4
 3929 05f4 000F      		lsl r16
 3930 05f6 111F      		rol r17
 3931 05f8 040D      		add r16,r4
 3932 05fa 151D      		adc r17,r5
 3933 05fc 000F      		lsl r16
 3934 05fe 111F      		rol r17
 3935 0600 000F      		lsl r16
 3936 0602 111F      		rol r17
 3937 0604 0A0D      		add r16,r10
 3938 0606 1B1D      		adc r17,r11
 3939 0608 035E      		subi r16,lo8(-(29))
 3940 060a 1F4F      		sbci r17,hi8(-(29))
 3941               	.L143:
 517:xgrid.cpp     ****                                         while (cnt > 0 && ptr < buffer->hdr.size+3)
 3943               	.LM328:
 3944 060c 6114      		cp r6,__zero_reg__
 3945 060e 7104      		cpc r7,__zero_reg__
 3946 0610 01F0      		breq .L99
 517:xgrid.cpp     ****                                         while (cnt > 0 && ptr < buffer->hdr.size+3)
 3948               	.LM329:
 3949 0612 F601      		movw r30,r12
 3950 0614 8181      		ldd r24,Z+1
 3951 0616 9281      		ldd r25,Z+2
 3952 0618 0396      		adiw r24,3
 3953 061a E816      		cp r14,r24
 3954 061c F906      		cpc r15,r25
 3955 061e 00F4      		brsh .L99
 519:xgrid.cpp     ****                                                 nodes[n].stream->put(buffer->buffer[ptr-sizeof(xgri
 3957               	.LM330:
 3958 0620 D801      		movw r26,r16
 3959 0622 8D91      		ld r24,X+
 3960 0624 9C91      		ld r25,X
 3961 0626 FC01      		movw r30,r24
 3962 0628 2281      		ldd r18,Z+2
 3963 062a 3381      		ldd r19,Z+3
 3964 062c F601      		movw r30,r12
 3965 062e A185      		ldd r26,Z+9
 3966 0630 B285      		ldd r27,Z+10
 3967 0632 AE0D      		add r26,r14
 3968 0634 BF1D      		adc r27,r15
 3969 0636 1997      		sbiw r26,9
 3970 0638 F901      		movw r30,r18
 3971 063a 2281      		ldd r18,Z+2
 3972 063c 3381      		ldd r19,Z+3
 3973 063e 0296      		adiw r24,2
 3974 0640 6C91      		ld r22,X
 3975 0642 F901      		movw r30,r18
 3976 0644 1995      		eicall
 520:xgrid.cpp     ****                                                 ptr++;
 3978               	.LM331:
 3979 0646 0894      		sec
 3980 0648 E11C      		adc r14,__zero_reg__
 3981 064a F11C      		adc r15,__zero_reg__
 521:xgrid.cpp     ****                                                 cnt--;
 3983               	.LM332:
 3984 064c 0894      		sec
 3985 064e 6108      		sbc r6,__zero_reg__
 3986 0650 7108      		sbc r7,__zero_reg__
 3987 0652 00C0      		rjmp .L143
 3988               	.L99:
 3989               	.LBE103:
 3990               	.LBE102:
 501:xgrid.cpp     ****                         for (uint8_t n = 0; n < node_cnt; n++)
 3992               	.LM333:
 3993 0654 9394      		inc r9
 3994               	.L98:
 501:xgrid.cpp     ****                         for (uint8_t n = 0; n < node_cnt; n++)
 3996               	.LM334:
 3997 0656 492C      		mov r4,r9
 3998 0658 5524      		clr r5
 3999 065a CF5E      		subi r28,lo8(-529)
 4000 065c DD4F      		sbci r29,hi8(-529)
 4001 065e A881      		ld r26,Y
 4002 0660 B981      		ldd r27,Y+1
 4003 0662 C151      		subi r28,lo8(529)
 4004 0664 D240      		sbci r29,hi8(529)
 4005 0666 8C91      		ld r24,X
 4006 0668 9927      		clr r25
 4007 066a 87FD      		sbrc r24,7
 4008 066c 9095      		com r25
 4009 066e 4816      		cp r4,r24
 4010 0670 5906      		cpc r5,r25
 4011 0672 04F4      		brge .+2
 4012 0674 00C0      		rjmp .L103
 4013               	.LBE101:
 527:xgrid.cpp     ****                         buffer->ptr += f;
 4015               	.LM335:
 4016 0676 F601      		movw r30,r12
 4017 0678 2585      		ldd r18,Z+13
 4018 067a 3685      		ldd r19,Z+14
 4019 067c 220D      		add r18,r2
 4020 067e 331D      		adc r19,r3
 4021 0680 2587      		std Z+13,r18
 4022 0682 3687      		std Z+14,r19
 4023               	.LBB104:
 530:xgrid.cpp     ****                         if (buffer->ptr >= buffer->hdr.size+3)
 4025               	.LM336:
 4026 0684 8181      		ldd r24,Z+1
 4027 0686 9281      		ldd r25,Z+2
 4028 0688 0396      		adiw r24,3
 4029 068a 2817      		cp r18,r24
 4030 068c 3907      		cpc r19,r25
 4031 068e 00F0      		brlo .L93
 4032               	.LBB98:
 533:xgrid.cpp     ****                                 buffer->flags &= ~XGRID_BUFFER_IN_USE;
 4034               	.LM337:
 4035 0690 8189      		ldd r24,Z+17
 4036 0692 8C7F      		andi r24,lo8(-4)
 4037 0694 818B      		std Z+17,r24
 4038               	.LBB97:
 536:xgrid.cpp     ****                                 for (uint8_t n = 0; n < node_cnt; n++)
 4040               	.LM338:
 4041 0696 FD01      		movw r30,r26
 4042 0698 A081      		ld r26,Z
 4043 069a BB27      		clr r27
 4044 069c A7FD      		sbrc r26,7
 4045 069e B095      		com r27
 4046 06a0 40E0      		ldi r20,lo8(0)
 4047 06a2 00C0      		rjmp .L104
 4048               	.L106:
 538:xgrid.cpp     ****                                         if (buffer->mask & (1 << n))
 4050               	.LM339:
 4051 06a4 81E0      		ldi r24,lo8(1)
 4052 06a6 90E0      		ldi r25,hi8(1)
 4053 06a8 042E      		mov r0,r20
 4054 06aa 00C0      		rjmp 2f
 4055 06ac 880F      	1:	lsl r24
 4056 06ae 991F      		rol r25
 4057 06b0 0A94      	2:	dec r0
 4058 06b2 02F4      		brpl 1b
 4059 06b4 F601      		movw r30,r12
 4060 06b6 2785      		ldd r18,Z+15
 4061 06b8 3089      		ldd r19,Z+16
 4062 06ba 8223      		and r24,r18
 4063 06bc 9323      		and r25,r19
 4064 06be 0097      		sbiw r24,0
 4065 06c0 01F0      		breq .L105
 540:xgrid.cpp     ****                                                 nodes[n].tx_buffer = -1;
 4067               	.LM340:
 4068 06c2 FB01      		movw r30,r22
 4069 06c4 EE0F      		lsl r30
 4070 06c6 FF1F      		rol r31
 4071 06c8 E60F      		add r30,r22
 4072 06ca F71F      		adc r31,r23
 4073 06cc EE0F      		lsl r30
 4074 06ce FF1F      		rol r31
 4075 06d0 EE0F      		lsl r30
 4076 06d2 FF1F      		rol r31
 4077 06d4 EA0D      		add r30,r10
 4078 06d6 FB1D      		adc r31,r11
 4079 06d8 80A2      		std Z+32,r8
 4080               	.L105:
 536:xgrid.cpp     ****                                 for (uint8_t n = 0; n < node_cnt; n++)
 4082               	.LM341:
 4083 06da 4F5F      		subi r20,lo8(-(1))
 4084               	.L104:
 536:xgrid.cpp     ****                                 for (uint8_t n = 0; n < node_cnt; n++)
 4086               	.LM342:
 4087 06dc 642F      		mov r22,r20
 4088 06de 70E0      		ldi r23,lo8(0)
 4089 06e0 6A17      		cp r22,r26
 4090 06e2 7B07      		cpc r23,r27
 4091 06e4 04F0      		brlt .L106
 4092               	.L93:
 536:xgrid.cpp     ****                                 for (uint8_t n = 0; n < node_cnt; n++)
 4094               	.LM343:
 4095 06e6 C15F      		subi r28,lo8(-527)
 4096 06e8 DD4F      		sbci r29,hi8(-527)
 4097 06ea 2881      		ld r18,Y
 4098 06ec 3981      		ldd r19,Y+1
 4099 06ee CF50      		subi r28,lo8(527)
 4100 06f0 D240      		sbci r29,hi8(527)
 4101 06f2 2F5F      		subi r18,lo8(-(1))
 4102 06f4 3F4F      		sbci r19,hi8(-(1))
 4103 06f6 C15F      		subi r28,lo8(-527)
 4104 06f8 DD4F      		sbci r29,hi8(-527)
 4105 06fa 2883      		st Y,r18
 4106 06fc 3983      		std Y+1,r19
 4107 06fe CF50      		subi r28,lo8(527)
 4108 0700 D240      		sbci r29,hi8(527)
 4109               	.LBE97:
 4110               	.LBE98:
 4111               	.LBE104:
 4112               	.LBE106:
 4113               	.LBE107:
 4114               	.LBE88:
 467:xgrid.cpp     ****         for (uint8_t i = 0; i < XGRID_BUFFER_COUNT; i++)
 4116               	.LM344:
 4117 0702 2B30      		cpi r18,11
 4118 0704 3105      		cpc r19,__zero_reg__
 4119 0706 01F0      		breq .+2
 4120 0708 00C0      		rjmp .L107
 4121               	.LBE87:
 4122               	.LBB108:
 548:xgrid.cpp     ****         if (timeout > 0)
 4124               	.LM345:
 4125 070a D501      		movw r26,r10
 4126 070c 1996      		adiw r26,9
 4127 070e 8D91      		ld r24,X+
 4128 0710 9C91      		ld r25,X
 4129 0712 1A97      		sbiw r26,9+1
 4130 0714 0097      		sbiw r24,0
 4131 0716 01F0      		breq .L108
 4132               	.LBB109:
 550:xgrid.cpp     ****                 timeout--;
 4134               	.LM346:
 4135 0718 0197      		sbiw r24,1
 4136 071a 1996      		adiw r26,9
 4137 071c 8D93      		st X+,r24
 4138 071e 9C93      		st X,r25
 4139 0720 1A97      		sbiw r26,9+1
 4140               	.LBB110:
 552:xgrid.cpp     ****                 if (timeout == 0)
 4142               	.LM347:
 4143 0722 0097      		sbiw r24,0
 4144 0724 01F4      		brne .L108
 4145               	.LBB111:
 555:xgrid.cpp     ****                         printf_P(PSTR("timeout!\n"));
 4147               	.LM348:
 4148 0726 0F92      		push __tmp_reg__
 4149 0728 0F92      		push __tmp_reg__
 4150 072a 80E0      		ldi r24,lo8(_ZZN5Xgrid7processEvE3__c)
 4151 072c 90E0      		ldi r25,hi8(_ZZN5Xgrid7processEvE3__c)
 4152 072e EDB7      		in r30,__SP_L__
 4153 0730 FEB7      		in r31,__SP_H__
 4154 0732 8183      		std Z+1,r24
 4155 0734 9283      		std Z+2,r25
 4156 0736 0E94 0000 		call printf_P
 557:xgrid.cpp     ****                         firmware_offset = 0;
 4158               	.LM349:
 4159 073a D501      		movw r26,r10
 4160 073c 5896      		adiw r26,24
 4161 073e 1D92      		st X+,__zero_reg__
 4162 0740 1D92      		st X+,__zero_reg__
 4163 0742 1D92      		st X+,__zero_reg__
 4164 0744 1C92      		st X,__zero_reg__
 4165 0746 5B97      		sbiw r26,24+3
 558:xgrid.cpp     ****                         state = XGRID_STATE_IDLE;
 4167               	.LM350:
 4168 0748 1F96      		adiw r26,15
 4169 074a 1C92      		st X,__zero_reg__
 4170 074c 0F90      		pop __tmp_reg__
 4171 074e 0F90      		pop __tmp_reg__
 4172               	.L108:
 4173               	.LBE111:
 4174               	.LBE110:
 4175               	.LBE109:
 4176               	.LBE108:
 4177               	.LBB112:
 563:xgrid.cpp     ****         if (delay > 0)
 4179               	.LM351:
 4180 0750 F501      		movw r30,r10
 4181 0752 8385      		ldd r24,Z+11
 4182 0754 9485      		ldd r25,Z+12
 4183 0756 A585      		ldd r26,Z+13
 4184 0758 B685      		ldd r27,Z+14
 4185 075a 0097      		sbiw r24,0
 4186 075c A105      		cpc r26,__zero_reg__
 4187 075e B105      		cpc r27,__zero_reg__
 4188 0760 01F0      		breq .L109
 566:xgrid.cpp     ****                 delay--;
 4190               	.LM352:
 4191 0762 0197      		sbiw r24,1
 4192 0764 A109      		sbc r26,__zero_reg__
 4193 0766 B109      		sbc r27,__zero_reg__
 4194 0768 00C0      		rjmp .L148
 4195               	.L109:
 4196               	.LBB113:
 568:xgrid.cpp     ****         else if (state == XGRID_STATE_INIT)
 4198               	.LM353:
 4199 076a 0785      		ldd r16,Z+15
 4200 076c 0130      		cpi r16,lo8(1)
 4201 076e 01F4      		brne .L111
 4202               	.LBB114:
 571:xgrid.cpp     ****                 printf_P(PSTR("init, send flush command\n"));
 4204               	.LM354:
 4205 0770 0F92      		push __tmp_reg__
 4206 0772 0F92      		push __tmp_reg__
 4207 0774 80E0      		ldi r24,lo8(_ZZN5Xgrid7processEvE3__c_0)
 4208 0776 90E0      		ldi r25,hi8(_ZZN5Xgrid7processEvE3__c_0)
 4209 0778 EDB7      		in r30,__SP_L__
 4210 077a FEB7      		in r31,__SP_H__
 4211 077c 8183      		std Z+1,r24
 4212 077e 9283      		std Z+2,r25
 4213 0780 0E94 0000 		call printf_P
 573:xgrid.cpp     ****                 pkt.type = XGRID_PKT_FLUSH_COMPARE_BUFFER;
 4215               	.LM355:
 4216 0784 8CEF      		ldi r24,lo8(-4)
 4217 0786 8B83      		std Y+3,r24
 574:xgrid.cpp     ****                 pkt.flags = 0;
 4219               	.LM356:
 4220 0788 1D82      		std Y+5,__zero_reg__
 575:xgrid.cpp     ****                 pkt.radius = 1;
 4222               	.LM357:
 4223 078a 0E83      		std Y+6,r16
 576:xgrid.cpp     ****                 pkt.data = 0;
 4225               	.LM358:
 4226 078c 1F82      		std Y+7,__zero_reg__
 4227 078e 1886      		std Y+8,__zero_reg__
 577:xgrid.cpp     ****                 pkt.data_len = 0;
 4229               	.LM359:
 4230 0790 1986      		std Y+9,__zero_reg__
 4231 0792 1A86      		std Y+10,__zero_reg__
 579:xgrid.cpp     ****                 send_packet(&pkt);
 4233               	.LM360:
 4234 0794 0F90      		pop __tmp_reg__
 4235 0796 0F90      		pop __tmp_reg__
 4236 0798 C501      		movw r24,r10
 4237 079a BE01      		movw r22,r28
 4238 079c 6F5F      		subi r22,lo8(-(1))
 4239 079e 7F4F      		sbci r23,hi8(-(1))
 4240 07a0 4FEF      		ldi r20,lo8(-1)
 4241 07a2 5FEF      		ldi r21,hi8(-1)
 4242 07a4 0E94 0000 		call _ZN5Xgrid11send_packetEPNS_6PacketEj
 581:xgrid.cpp     ****                 delay = 1000;
 4244               	.LM361:
 4245 07a8 88EE      		ldi r24,lo8(1000)
 4246 07aa 93E0      		ldi r25,hi8(1000)
 4247 07ac A0E0      		ldi r26,hlo8(1000)
 4248 07ae B0E0      		ldi r27,hhi8(1000)
 4249 07b0 F501      		movw r30,r10
 4250 07b2 8387      		std Z+11,r24
 4251 07b4 9487      		std Z+12,r25
 4252 07b6 A587      		std Z+13,r26
 4253 07b8 B687      		std Z+14,r27
 582:xgrid.cpp     ****                 state = XGRID_STATE_IDLE;
 4255               	.LM362:
 4256 07ba 1786      		std Z+15,__zero_reg__
 4257 07bc 00C0      		rjmp .L149
 4258               	.L111:
 4259               	.LBE114:
 4260               	.LBB115:
 585:xgrid.cpp     ****         else if (state == XGRID_STATE_IDLE)
 4262               	.LM363:
 4263 07be 0023      		tst r16
 4264 07c0 01F4      		brne .L112
 4265               	.LBB116:
 588:xgrid.cpp     ****                 printf_P(PSTR("idle, send version check\n"));
 4267               	.LM364:
 4268 07c2 0F92      		push __tmp_reg__
 4269 07c4 0F92      		push __tmp_reg__
 4270 07c6 80E0      		ldi r24,lo8(_ZZN5Xgrid7processEvE3__c_1)
 4271 07c8 90E0      		ldi r25,hi8(_ZZN5Xgrid7processEvE3__c_1)
 4272 07ca ADB7      		in r26,__SP_L__
 4273 07cc BEB7      		in r27,__SP_H__
 4274 07ce 1196      		adiw r26,1
 4275 07d0 8D93      		st X+,r24
 4276 07d2 9C93      		st X,r25
 4277 07d4 1297      		sbiw r26,1+1
 4278 07d6 0E94 0000 		call printf_P
 592:xgrid.cpp     ****                 pkt.type = XGRID_PKT_PING_REQUEST;
 4280               	.LM365:
 4281 07da 8DEF      		ldi r24,lo8(-3)
 4282 07dc 8B83      		std Y+3,r24
 593:xgrid.cpp     ****                 pkt.flags = 0;
 4284               	.LM366:
 4285 07de 1D82      		std Y+5,__zero_reg__
 594:xgrid.cpp     ****                 pkt.radius = 1;
 4287               	.LM367:
 4288 07e0 81E0      		ldi r24,lo8(1)
 4289 07e2 8E83      		std Y+6,r24
 595:xgrid.cpp     ****                 pkt.data_len = 0;
 4291               	.LM368:
 4292 07e4 1986      		std Y+9,__zero_reg__
 4293 07e6 1A86      		std Y+10,__zero_reg__
 597:xgrid.cpp     ****                 send_packet(&pkt);
 4295               	.LM369:
 4296 07e8 0F90      		pop __tmp_reg__
 4297 07ea 0F90      		pop __tmp_reg__
 4298 07ec C501      		movw r24,r10
 4299 07ee BE01      		movw r22,r28
 4300 07f0 6F5F      		subi r22,lo8(-(1))
 4301 07f2 7F4F      		sbci r23,hi8(-(1))
 4302 07f4 4FEF      		ldi r20,lo8(-1)
 4303 07f6 5FEF      		ldi r21,hi8(-1)
 4304 07f8 0E94 0000 		call _ZN5Xgrid11send_packetEPNS_6PacketEj
 600:xgrid.cpp     ****                 delay = 100;
 4306               	.LM370:
 4307 07fc 84E6      		ldi r24,lo8(100)
 4308 07fe 90E0      		ldi r25,hi8(100)
 4309 0800 A0E0      		ldi r26,hlo8(100)
 4310 0802 B0E0      		ldi r27,hhi8(100)
 4311 0804 F501      		movw r30,r10
 4312 0806 8387      		std Z+11,r24
 4313 0808 9487      		std Z+12,r25
 4314 080a A587      		std Z+13,r26
 4315 080c B687      		std Z+14,r27
 601:xgrid.cpp     ****                 state = XGRID_STATE_CHECK_VER;
 4317               	.LM371:
 4318 080e 80E1      		ldi r24,lo8(16)
 4319 0810 8787      		std Z+15,r24
 4320               	.L149:
 602:xgrid.cpp     ****                 timeout = 0;
 4322               	.LM372:
 4323 0812 1186      		std Z+9,__zero_reg__
 4324 0814 1286      		std Z+10,__zero_reg__
 4325 0816 00C0      		rjmp .L71
 4326               	.L112:
 4327               	.LBE116:
 4328               	.LBB117:
 604:xgrid.cpp     ****         else if (state == XGRID_STATE_CHECK_VER)
 4330               	.LM373:
 4331 0818 0031      		cpi r16,lo8(16)
 4332 081a 01F0      		breq .+2
 4333 081c 00C0      		rjmp .L113
 4334               	.LBB118:
 607:xgrid.cpp     ****                 printf_P(PSTR("check neighbor versions\n"));
 4336               	.LM374:
 4337 081e 0F92      		push __tmp_reg__
 4338 0820 0F92      		push __tmp_reg__
 4339 0822 80E0      		ldi r24,lo8(_ZZN5Xgrid7processEvE3__c_2)
 4340 0824 90E0      		ldi r25,hi8(_ZZN5Xgrid7processEvE3__c_2)
 4341 0826 ADB7      		in r26,__SP_L__
 4342 0828 BEB7      		in r27,__SP_H__
 4343 082a 1196      		adiw r26,1
 4344 082c 8D93      		st X+,r24
 4345 082e 9C93      		st X,r25
 4346 0830 1297      		sbiw r26,1+1
 4347 0832 0E94 0000 		call printf_P
 611:xgrid.cpp     ****                 delay = 30*1000;
 4349               	.LM375:
 4350 0836 80E3      		ldi r24,lo8(30000)
 4351 0838 95E7      		ldi r25,hi8(30000)
 4352 083a A0E0      		ldi r26,hlo8(30000)
 4353 083c B0E0      		ldi r27,hhi8(30000)
 4354 083e F501      		movw r30,r10
 4355 0840 8387      		std Z+11,r24
 4356 0842 9487      		std Z+12,r25
 4357 0844 A587      		std Z+13,r26
 4358 0846 B687      		std Z+14,r27
 612:xgrid.cpp     ****                 state = XGRID_STATE_IDLE;
 4360               	.LM376:
 4361 0848 1786      		std Z+15,__zero_reg__
 614:xgrid.cpp     ****                 update_node_mask = 0;
 4363               	.LM377:
 4364 084a 108A      		std Z+16,__zero_reg__
 4365 084c 118A      		std Z+17,__zero_reg__
 617:xgrid.cpp     ****                 printf_P(PSTR("update check %ld\n"), build_number);
 4367               	.LM378:
 4368 084e 00D0      		rcall .
 4369 0850 0F92      		push __tmp_reg__
 4370 0852 80E0      		ldi r24,lo8(_ZZN5Xgrid7processEvE3__c_3)
 4371 0854 90E0      		ldi r25,hi8(_ZZN5Xgrid7processEvE3__c_3)
 4372 0856 ADB7      		in r26,__SP_L__
 4373 0858 BEB7      		in r27,__SP_H__
 4374 085a 1196      		adiw r26,1
 4375 085c 8D93      		st X+,r24
 4376 085e 9C93      		st X,r25
 4377 0860 1297      		sbiw r26,1+1
 4378 0862 8581      		ldd r24,Z+5
 4379 0864 9681      		ldd r25,Z+6
 4380 0866 A781      		ldd r26,Z+7
 4381 0868 B085      		ldd r27,Z+8
 4382 086a EDB7      		in r30,__SP_L__
 4383 086c FEB7      		in r31,__SP_H__
 4384 086e 8383      		std Z+3,r24
 4385 0870 9483      		std Z+4,r25
 4386 0872 A583      		std Z+5,r26
 4387 0874 B683      		std Z+6,r27
 4388 0876 0E94 0000 		call printf_P
 4389               	.LBB119:
 621:xgrid.cpp     ****                 for (uint8_t n = 0; n < node_cnt; n++)
 4391               	.LM379:
 4392 087a 2DB7      		in r18,__SP_L__
 4393 087c 3EB7      		in r19,__SP_H__
 4394 087e 2A5F      		subi r18,lo8(-(6))
 4395 0880 3F4F      		sbci r19,hi8(-(6))
 4396 0882 2DBF      		out __SP_L__,r18
 4397 0884 3EBF      		out __SP_H__,r19
 4398 0886 CC24      		clr r12
 4399 0888 4DE7      		ldi r20,lo8(125)
 4400 088a 442E      		mov r4,r20
 4401 088c 512C      		mov r5,__zero_reg__
 4402 088e 4A0C      		add r4,r10
 4403 0890 5B1C      		adc r5,r11
 4404               	.LBB120:
 624:xgrid.cpp     ****                         printf_P(PSTR("node %d: %ld (%04x)\n"), n, nodes[n].build, nodes[n].crc);
 4406               	.LM380:
 4407 0892 50E0      		ldi r21,lo8(_ZZN5Xgrid7processEvE3__c_4)
 4408 0894 252E      		mov r2,r21
 4409 0896 50E0      		ldi r21,hi8(_ZZN5Xgrid7processEvE3__c_4)
 4410 0898 352E      		mov r3,r21
 628:xgrid.cpp     ****                                 update_node_mask |= (1 << n);
 4412               	.LM381:
 4413 089a 61E0      		ldi r22,lo8(1)
 4414 089c 662E      		mov r6,r22
 4415 089e 712C      		mov r7,__zero_reg__
 4416               	.LBE120:
 621:xgrid.cpp     ****                 for (uint8_t n = 0; n < node_cnt; n++)
 4418               	.LM382:
 4419 08a0 00C0      		rjmp .L114
 4420               	.L118:
 4421               	.LBB121:
 624:xgrid.cpp     ****                         printf_P(PSTR("node %d: %ld (%04x)\n"), n, nodes[n].build, nodes[n].crc);
 4423               	.LM383:
 4424 08a2 6DB7      		in r22,__SP_L__
 4425 08a4 7EB7      		in r23,__SP_H__
 4426 08a6 6A50      		subi r22,lo8(-(-10))
 4427 08a8 7040      		sbci r23,hi8(-(-10))
 4428 08aa 6DBF      		out __SP_L__,r22
 4429 08ac 7EBF      		out __SP_H__,r23
 4430 08ae 2DB7      		in r18,__SP_L__
 4431 08b0 3EB7      		in r19,__SP_H__
 4432 08b2 2F5F      		subi r18,lo8(-(1))
 4433 08b4 3F4F      		sbci r19,hi8(-(1))
 4434 08b6 ADB7      		in r26,__SP_L__
 4435 08b8 BEB7      		in r27,__SP_H__
 4436 08ba 1196      		adiw r26,1
 4437 08bc 2D92      		st X+,r2
 4438 08be 3C92      		st X,r3
 4439 08c0 1297      		sbiw r26,1+1
 4440 08c2 F901      		movw r30,r18
 4441 08c4 E282      		std Z+2,r14
 4442 08c6 F382      		std Z+3,r15
 4443 08c8 8701      		movw r16,r14
 4444 08ca 000F      		lsl r16
 4445 08cc 111F      		rol r17
 4446 08ce 0E0D      		add r16,r14
 4447 08d0 1F1D      		adc r17,r15
 4448 08d2 000F      		lsl r16
 4449 08d4 111F      		rol r17
 4450 08d6 000F      		lsl r16
 4451 08d8 111F      		rol r17
 4452 08da 0A0D      		add r16,r10
 4453 08dc 1B1D      		adc r17,r11
 4454 08de F801      		movw r30,r16
 4455 08e0 83A1      		ldd r24,Z+35
 4456 08e2 94A1      		ldd r25,Z+36
 4457 08e4 A5A1      		ldd r26,Z+37
 4458 08e6 B6A1      		ldd r27,Z+38
 4459 08e8 F901      		movw r30,r18
 4460 08ea 8483      		std Z+4,r24
 4461 08ec 9583      		std Z+5,r25
 4462 08ee A683      		std Z+6,r26
 4463 08f0 B783      		std Z+7,r27
 4464 08f2 D801      		movw r26,r16
 4465 08f4 9796      		adiw r26,39
 4466 08f6 8D91      		ld r24,X+
 4467 08f8 9C91      		ld r25,X
 4468 08fa 9897      		sbiw r26,39+1
 4469 08fc 8087      		std Z+8,r24
 4470 08fe 9187      		std Z+9,r25
 4471 0900 0E94 0000 		call printf_P
 626:xgrid.cpp     ****                         if (nodes[n].build > 0 && nodes[n].build < build_number)
 4473               	.LM384:
 4474 0904 F801      		movw r30,r16
 4475 0906 83A1      		ldd r24,Z+35
 4476 0908 94A1      		ldd r25,Z+36
 4477 090a A5A1      		ldd r26,Z+37
 4478 090c B6A1      		ldd r27,Z+38
 4479 090e 2DB7      		in r18,__SP_L__
 4480 0910 3EB7      		in r19,__SP_H__
 4481 0912 265F      		subi r18,lo8(-(10))
 4482 0914 3F4F      		sbci r19,hi8(-(10))
 4483 0916 2DBF      		out __SP_L__,r18
 4484 0918 3EBF      		out __SP_H__,r19
 4485 091a F501      		movw r30,r10
 4486 091c 4581      		ldd r20,Z+5
 4487 091e 5681      		ldd r21,Z+6
 4488 0920 6781      		ldd r22,Z+7
 4489 0922 7085      		ldd r23,Z+8
 4490 0924 0097      		sbiw r24,0
 4491 0926 A105      		cpc r26,__zero_reg__
 4492 0928 B105      		cpc r27,__zero_reg__
 4493 092a 01F0      		breq .L115
 626:xgrid.cpp     ****                         if (nodes[n].build > 0 && nodes[n].build < build_number)
 4495               	.LM385:
 4496 092c 8417      		cp r24,r20
 4497 092e 9507      		cpc r25,r21
 4498 0930 A607      		cpc r26,r22
 4499 0932 B707      		cpc r27,r23
 4500 0934 00F4      		brsh .L115
 628:xgrid.cpp     ****                                 update_node_mask |= (1 << n);
 4502               	.LM386:
 4503 0936 9301      		movw r18,r6
 4504 0938 00C0      		rjmp 2f
 4505 093a 220F      	1:	lsl r18
 4506 093c 331F      		rol r19
 4507 093e EA94      	2:	dec r14
 4508 0940 02F4      		brpl 1b
 4509 0942 8089      		ldd r24,Z+16
 4510 0944 9189      		ldd r25,Z+17
 4511 0946 822B      		or r24,r18
 4512 0948 932B      		or r25,r19
 4513 094a 808B      		std Z+16,r24
 4514 094c 918B      		std Z+17,r25
 4515 094e 00C0      		rjmp .L116
 4516               	.L115:
 630:xgrid.cpp     ****                         else if (nodes[n].build > build_number)
 4518               	.LM387:
 4519 0950 4817      		cp r20,r24
 4520 0952 5907      		cpc r21,r25
 4521 0954 6A07      		cpc r22,r26
 4522 0956 7B07      		cpc r23,r27
 4523 0958 00F4      		brsh .L116
 633:xgrid.cpp     ****                                 update_node_mask = 0;
 4525               	.LM388:
 4526 095a D501      		movw r26,r10
 4527 095c 5096      		adiw r26,16
 4528 095e 1D92      		st X+,__zero_reg__
 4529 0960 1C92      		st X,__zero_reg__
 4530 0962 5197      		sbiw r26,16+1
 634:xgrid.cpp     ****                                 break;
 4532               	.LM389:
 4533 0964 00C0      		rjmp .L117
 4534               	.L116:
 4535               	.LBE121:
 621:xgrid.cpp     ****                 for (uint8_t n = 0; n < node_cnt; n++)
 4537               	.LM390:
 4538 0966 C394      		inc r12
 4539               	.L114:
 621:xgrid.cpp     ****                 for (uint8_t n = 0; n < node_cnt; n++)
 4541               	.LM391:
 4542 0968 EC2C      		mov r14,r12
 4543 096a FF24      		clr r15
 4544 096c F201      		movw r30,r4
 4545 096e 8081      		ld r24,Z
 4546 0970 9927      		clr r25
 4547 0972 87FD      		sbrc r24,7
 4548 0974 9095      		com r25
 4549 0976 E816      		cp r14,r24
 4550 0978 F906      		cpc r15,r25
 4551 097a 04F4      		brge .+2
 4552 097c 00C0      		rjmp .L118
 4553               	.L117:
 4554               	.LBE119:
 4555               	.LBB122:
 639:xgrid.cpp     ****                 if (update_node_mask != 0)
 4557               	.LM392:
 4558 097e D501      		movw r26,r10
 4559 0980 5096      		adiw r26,16
 4560 0982 8D91      		ld r24,X+
 4561 0984 9C91      		ld r25,X
 4562 0986 5197      		sbiw r26,16+1
 4563 0988 0097      		sbiw r24,0
 4564 098a 01F4      		brne .+2
 4565 098c 00C0      		rjmp .L119
 4566               	.LBB123:
 642:xgrid.cpp     ****                         printf_P(PSTR("send start update command\n"));
 4568               	.LM393:
 4569 098e 0F92      		push __tmp_reg__
 4570 0990 0F92      		push __tmp_reg__
 4571 0992 80E0      		ldi r24,lo8(_ZZN5Xgrid7processEvE3__c_5)
 4572 0994 90E0      		ldi r25,hi8(_ZZN5Xgrid7processEvE3__c_5)
 4573 0996 EDB7      		in r30,__SP_L__
 4574 0998 FEB7      		in r31,__SP_H__
 4575 099a 8183      		std Z+1,r24
 4576 099c 9283      		std Z+2,r25
 4577 099e 0E94 0000 		call printf_P
 648:xgrid.cpp     ****                         pkt.type = XGRID_PKT_MAINT_CMD;
 4579               	.LM394:
 4580 09a2 89EF      		ldi r24,lo8(-7)
 4581 09a4 8B83      		std Y+3,r24
 649:xgrid.cpp     ****                         pkt.flags = 0;
 4583               	.LM395:
 4584 09a6 1D82      		std Y+5,__zero_reg__
 650:xgrid.cpp     ****                         pkt.radius = 1;
 4586               	.LM396:
 4587 09a8 81E0      		ldi r24,lo8(1)
 4588 09aa 8E83      		std Y+6,r24
 651:xgrid.cpp     ****                         pkt.data = buffer;
 4590               	.LM397:
 4591 09ac CE01      		movw r24,r28
 4592 09ae 0D96      		adiw r24,13
 4593 09b0 8F83      		std Y+7,r24
 4594 09b2 9887      		std Y+8,r25
 652:xgrid.cpp     ****                         pkt.data_len = sizeof(xgrid_pkt_maint_cmd_start_update_t);
 4596               	.LM398:
 4597 09b4 8BE0      		ldi r24,lo8(11)
 4598 09b6 90E0      		ldi r25,hi8(11)
 4599 09b8 8987      		std Y+9,r24
 4600 09ba 9A87      		std Y+10,r25
 654:xgrid.cpp     ****                         c->cmd = XGRID_CMD_START_UPDATE;
 4602               	.LM399:
 4603 09bc 81E8      		ldi r24,lo8(-127)
 4604 09be 8D87      		std Y+13,r24
 656:xgrid.cpp     ****                         c->magic = XGRID_CMD_UPDATE_MAGIC;
 4606               	.LM400:
 4607 09c0 8EE7      		ldi r24,lo8(189800062)
 4608 09c2 9EE1      		ldi r25,hi8(189800062)
 4609 09c4 A0E5      		ldi r26,hlo8(189800062)
 4610 09c6 BBE0      		ldi r27,hhi8(189800062)
 4611 09c8 8E87      		std Y+14,r24
 4612 09ca 9F87      		std Y+15,r25
 4613 09cc A88B      		std Y+16,r26
 4614 09ce B98B      		std Y+17,r27
 658:xgrid.cpp     ****                         c->crc = firmware_crc;
 4616               	.LM401:
 4617 09d0 D501      		movw r26,r10
 4618 09d2 1396      		adiw r26,3
 4619 09d4 8D91      		ld r24,X+
 4620 09d6 9C91      		ld r25,X
 4621 09d8 1497      		sbiw r26,3+1
 4622 09da 8A8B      		std Y+18,r24
 4623 09dc 9B8B      		std Y+19,r25
 659:xgrid.cpp     ****                         c->build = build_number;
 4625               	.LM402:
 4626 09de 1596      		adiw r26,5
 4627 09e0 8D91      		ld r24,X+
 4628 09e2 9D91      		ld r25,X+
 4629 09e4 0D90      		ld __tmp_reg__,X+
 4630 09e6 BC91      		ld r27,X
 4631 09e8 A02D      		mov r26,__tmp_reg__
 4632 09ea 8C8B      		std Y+20,r24
 4633 09ec 9D8B      		std Y+21,r25
 4634 09ee AE8B      		std Y+22,r26
 4635 09f0 BF8B      		std Y+23,r27
 661:xgrid.cpp     ****                         send_packet(&pkt, update_node_mask);
 4637               	.LM403:
 4638 09f2 0F90      		pop __tmp_reg__
 4639 09f4 0F90      		pop __tmp_reg__
 4640 09f6 F501      		movw r30,r10
 4641 09f8 4089      		ldd r20,Z+16
 4642 09fa 5189      		ldd r21,Z+17
 4643 09fc C501      		movw r24,r10
 4644 09fe BE01      		movw r22,r28
 4645 0a00 6F5F      		subi r22,lo8(-(1))
 4646 0a02 7F4F      		sbci r23,hi8(-(1))
 4647 0a04 0E94 0000 		call _ZN5Xgrid11send_packetEPNS_6PacketEj
 663:xgrid.cpp     ****                         if (firmware_updated)
 4649               	.LM404:
 4650 0a08 D501      		movw r26,r10
 4651 0a0a 5C96      		adiw r26,28
 4652 0a0c 8C91      		ld r24,X
 4653 0a0e 5C97      		sbiw r26,28
 4654 0a10 8823      		tst r24
 4655 0a12 01F0      		breq .L120
 664:xgrid.cpp     ****                                 firmware_offset = XB_APP_TEMP_START;
 4657               	.LM405:
 4658 0a14 80E0      		ldi r24,lo8(65536)
 4659 0a16 90E0      		ldi r25,hi8(65536)
 4660 0a18 A1E0      		ldi r26,hlo8(65536)
 4661 0a1a B0E0      		ldi r27,hhi8(65536)
 4662 0a1c F501      		movw r30,r10
 4663 0a1e 808F      		std Z+24,r24
 4664 0a20 918F      		std Z+25,r25
 4665 0a22 A28F      		std Z+26,r26
 4666 0a24 B38F      		std Z+27,r27
 4667 0a26 00C0      		rjmp .L121
 4668               	.L120:
 666:xgrid.cpp     ****                                 firmware_offset = 0;
 4670               	.LM406:
 4671 0a28 D501      		movw r26,r10
 4672 0a2a 5896      		adiw r26,24
 4673 0a2c 1D92      		st X+,__zero_reg__
 4674 0a2e 1D92      		st X+,__zero_reg__
 4675 0a30 1D92      		st X+,__zero_reg__
 4676 0a32 1C92      		st X,__zero_reg__
 4677 0a34 5B97      		sbiw r26,24+3
 4678               	.L121:
 669:xgrid.cpp     ****                         delay = 100;
 4680               	.LM407:
 4681 0a36 84E6      		ldi r24,lo8(100)
 4682 0a38 90E0      		ldi r25,hi8(100)
 4683 0a3a A0E0      		ldi r26,hlo8(100)
 4684 0a3c B0E0      		ldi r27,hhi8(100)
 4685 0a3e F501      		movw r30,r10
 4686 0a40 8387      		std Z+11,r24
 4687 0a42 9487      		std Z+12,r25
 4688 0a44 A587      		std Z+13,r26
 4689 0a46 B687      		std Z+14,r27
 670:xgrid.cpp     ****                         state = XGRID_STATE_FW_TX;
 4691               	.LM408:
 4692 0a48 80E2      		ldi r24,lo8(32)
 4693 0a4a 8787      		std Z+15,r24
 4694 0a4c 00C0      		rjmp .L71
 4695               	.L119:
 4696               	.LBE123:
 676:xgrid.cpp     ****                         if (firmware_updated)
 4698               	.LM409:
 4699 0a4e D501      		movw r26,r10
 4700 0a50 5C96      		adiw r26,28
 4701 0a52 8C91      		ld r24,X
 4702 0a54 5C97      		sbiw r26,28
 4703 0a56 8823      		tst r24
 4704 0a58 01F4      		brne .+2
 4705 0a5a 00C0      		rjmp .L71
 678:xgrid.cpp     ****                                 xboot_reset();
 4707               	.LM410:
 4708 0a5c 0E94 0000 		call xboot_reset
 4709               	.L113:
 4710               	.LBE122:
 4711               	.LBE118:
 4712               	.LBB125:
 682:xgrid.cpp     ****         else if (state == XGRID_STATE_FW_TX)
 4714               	.LM411:
 4715 0a60 0032      		cpi r16,lo8(32)
 4716 0a62 01F0      		breq .+2
 4717 0a64 00C0      		rjmp .L122
 4718               	.LBB126:
 684:xgrid.cpp     ****                 if (firmware_offset < XB_APP_SIZE ||
 4720               	.LM412:
 4721 0a66 F501      		movw r30,r10
 4722 0a68 808D      		ldd r24,Z+24
 4723 0a6a 918D      		ldd r25,Z+25
 4724 0a6c A28D      		ldd r26,Z+26
 4725 0a6e B38D      		ldd r27,Z+27
 4726 0a70 8030      		cpi r24,lo8(65536)
 4727 0a72 F0E0      		ldi r31,hi8(65536)
 4728 0a74 9F07      		cpc r25,r31
 4729 0a76 F1E0      		ldi r31,hlo8(65536)
 4730 0a78 AF07      		cpc r26,r31
 4731 0a7a F0E0      		ldi r31,hhi8(65536)
 4732 0a7c BF07      		cpc r27,r31
 4733 0a7e 00F0      		brlo .L123
 684:xgrid.cpp     ****                 if (firmware_offset < XB_APP_SIZE ||
 4735               	.LM413:
 4736 0a80 F501      		movw r30,r10
 4737 0a82 248D      		ldd r18,Z+28
 4738 0a84 2223      		tst r18
 4739 0a86 01F4      		brne .+2
 4740 0a88 00C0      		rjmp .L124
 684:xgrid.cpp     ****                 if (firmware_offset < XB_APP_SIZE ||
 4742               	.LM414:
 4743 0a8a 8030      		cpi r24,lo8(131072)
 4744 0a8c F0E0      		ldi r31,hi8(131072)
 4745 0a8e 9F07      		cpc r25,r31
 4746 0a90 F2E0      		ldi r31,hlo8(131072)
 4747 0a92 AF07      		cpc r26,r31
 4748 0a94 F0E0      		ldi r31,hhi8(131072)
 4749 0a96 BF07      		cpc r27,r31
 4750 0a98 00F0      		brlo .+2
 4751 0a9a 00C0      		rjmp .L124
 4752               	.L123:
 4753               	.LBB127:
 688:xgrid.cpp     ****                         printf_P(PSTR("send firmware block\n"));
 4755               	.LM415:
 4756 0a9c 0F92      		push __tmp_reg__
 4757 0a9e 0F92      		push __tmp_reg__
 4758 0aa0 80E0      		ldi r24,lo8(_ZZN5Xgrid7processEvE3__c_6)
 4759 0aa2 90E0      		ldi r25,hi8(_ZZN5Xgrid7processEvE3__c_6)
 4760 0aa4 ADB7      		in r26,__SP_L__
 4761 0aa6 BEB7      		in r27,__SP_H__
 4762 0aa8 1196      		adiw r26,1
 4763 0aaa 8D93      		st X+,r24
 4764 0aac 9C93      		st X,r25
 4765 0aae 1297      		sbiw r26,1+1
 4766 0ab0 0E94 0000 		call printf_P
 694:xgrid.cpp     ****                         pkt.type = XGRID_PKT_FIRMWARE_BLOCK;
 4768               	.LM416:
 4769 0ab4 8BEF      		ldi r24,lo8(-5)
 4770 0ab6 8B83      		std Y+3,r24
 695:xgrid.cpp     ****                         pkt.flags = 0;
 4772               	.LM417:
 4773 0ab8 1D82      		std Y+5,__zero_reg__
 696:xgrid.cpp     ****                         pkt.radius = 1;
 4775               	.LM418:
 4776 0aba 81E0      		ldi r24,lo8(1)
 4777 0abc 8E83      		std Y+6,r24
 697:xgrid.cpp     ****                         pkt.data = buffer;
 4779               	.LM419:
 4780 0abe CE01      		movw r24,r28
 4781 0ac0 0D96      		adiw r24,13
 4782 0ac2 8F83      		std Y+7,r24
 4783 0ac4 9887      		std Y+8,r25
 698:xgrid.cpp     ****                         pkt.data_len = SPM_PAGESIZE+2;
 4785               	.LM420:
 4786 0ac6 82E0      		ldi r24,lo8(514)
 4787 0ac8 92E0      		ldi r25,hi8(514)
 4788 0aca 8987      		std Y+9,r24
 4789 0acc 9A87      		std Y+10,r25
 700:xgrid.cpp     ****                         if (firmware_updated)
 4791               	.LM421:
 4792 0ace 0F90      		pop __tmp_reg__
 4793 0ad0 0F90      		pop __tmp_reg__
 4794 0ad2 F501      		movw r30,r10
 4795 0ad4 848D      		ldd r24,Z+28
 4796 0ad6 408D      		ldd r20,Z+24
 4797 0ad8 518D      		ldd r21,Z+25
 4798 0ada 628D      		ldd r22,Z+26
 4799 0adc 738D      		ldd r23,Z+27
 4800 0ade 8823      		tst r24
 4801 0ae0 01F0      		breq .L125
 701:xgrid.cpp     ****                                 b->offset = (firmware_offset - XB_APP_TEMP_START)/SPM_PAGESIZE;
 4803               	.LM422:
 4804 0ae2 DB01      		movw r26,r22
 4805 0ae4 CA01      		movw r24,r20
 4806 0ae6 8050      		subi r24,lo8(-(-65536))
 4807 0ae8 9040      		sbci r25,hi8(-(-65536))
 4808 0aea A140      		sbci r26,hlo8(-(-65536))
 4809 0aec B040      		sbci r27,hhi8(-(-65536))
 4810 0aee 00C0      		rjmp .L147
 4811               	.L125:
 703:xgrid.cpp     ****                                 b->offset = firmware_offset/SPM_PAGESIZE;
 4813               	.LM423:
 4814 0af0 DB01      		movw r26,r22
 4815 0af2 CA01      		movw r24,r20
 4816               	.L147:
 4817 0af4 E9E0      		ldi r30,9
 4818 0af6 B695      	1:	lsr r27
 4819 0af8 A795      		ror r26
 4820 0afa 9795      		ror r25
 4821 0afc 8795      		ror r24
 4822 0afe EA95      		dec r30
 4823 0b00 01F4      		brne 1b
 4824 0b02 8D87      		std Y+13,r24
 4825 0b04 9E87      		std Y+14,r25
 4826 0b06 DE01      		movw r26,r28
 4827 0b08 1F96      		adiw r26,15
 4828               	.LBE127:
 4829               	.LBE126:
 4830               	.LBE125:
 4831               	.LBB136:
 4832               	.LBB124:
 621:xgrid.cpp     ****                 for (uint8_t n = 0; n < node_cnt; n++)
 4834               	.LM424:
 4835 0b0a 8A01      		movw r16,r20
 4836 0b0c 9B01      		movw r18,r22
 4837 0b0e 80E0      		ldi r24,lo8(0)
 4838 0b10 90E0      		ldi r25,hi8(0)
 4839               	.L127:
 4840               	.LBE124:
 4841               	.LBE136:
 4842               	.LBB137:
 4843               	.LBB135:
 4844               	.LBB132:
 4845               	.LBB128:
 4846               	.LBB129:
 707:xgrid.cpp     ****                                 b->data[i] = PGM_READ_BYTE(firmware_offset++);
 4848               	.LM425:
 4849               	/* #APP */
 4850               	 ;  707 "xgrid.cpp" 1
 4851 0b12 2BBF      		out 59, r18
 4852 0b14 F801      		movw r30, r16
 4853 0b16 E790      		elpm r14, Z+
 4854               		
 4855               	 ;  0 "" 2
 4856               	/* #NOAPP */
 4857 0b18 ED92      		st X+,r14
 4858               	.LBE129:
 705:xgrid.cpp     ****                         for (uint16_t i = 0; i < SPM_PAGESIZE; i++)
 4860               	.LM426:
 4861 0b1a 0196      		adiw r24,1
 4862 0b1c 0F5F      		subi r16,lo8(-(1))
 4863 0b1e 1F4F      		sbci r17,hi8(-(1))
 4864 0b20 2F4F      		sbci r18,hlo8(-(1))
 4865 0b22 3F4F      		sbci r19,hhi8(-(1))
 4866 0b24 F2E0      		ldi r31,hi8(512)
 4867 0b26 8030      		cpi r24,lo8(512)
 4868 0b28 9F07      		cpc r25,r31
 4869 0b2a 01F4      		brne .L127
 705:xgrid.cpp     ****                         for (uint16_t i = 0; i < SPM_PAGESIZE; i++)
 4871               	.LM427:
 4872 0b2c 4050      		subi r20,lo8(-(512))
 4873 0b2e 5E4F      		sbci r21,hi8(-(512))
 4874 0b30 6F4F      		sbci r22,hlo8(-(512))
 4875 0b32 7F4F      		sbci r23,hhi8(-(512))
 4876 0b34 D501      		movw r26,r10
 4877 0b36 5896      		adiw r26,24
 4878 0b38 4D93      		st X+,r20
 4879 0b3a 5D93      		st X+,r21
 4880 0b3c 6D93      		st X+,r22
 4881 0b3e 7C93      		st X,r23
 4882 0b40 5B97      		sbiw r26,24+3
 4883               	.LBE128:
 4884               	.LBB130:
 710:xgrid.cpp     ****                         if (firmware_offset == XB_APP_TEMP_END)
 4886               	.LM428:
 4887 0b42 4F3F      		cpi r20,lo8(131071)
 4888 0b44 BFEF      		ldi r27,hi8(131071)
 4889 0b46 5B07      		cpc r21,r27
 4890 0b48 B1E0      		ldi r27,hlo8(131071)
 4891 0b4a 6B07      		cpc r22,r27
 4892 0b4c B0E0      		ldi r27,hhi8(131071)
 4893 0b4e 7B07      		cpc r23,r27
 4894 0b50 01F4      		brne .L128
 4895               	.LBB131:
 713:xgrid.cpp     ****                                         b->data[i] = 0xff;
 4897               	.LM429:
 4898 0b52 8FEF      		ldi r24,lo8(-1)
 4899 0b54 C85F      		subi r28,lo8(-520)
 4900 0b56 DD4F      		sbci r29,hi8(-520)
 4901 0b58 8883      		st Y,r24
 4902 0b5a C850      		subi r28,lo8(520)
 4903 0b5c D240      		sbci r29,hi8(520)
 4904 0b5e C75F      		subi r28,lo8(-521)
 4905 0b60 DD4F      		sbci r29,hi8(-521)
 4906 0b62 8883      		st Y,r24
 4907 0b64 C950      		subi r28,lo8(521)
 4908 0b66 D240      		sbci r29,hi8(521)
 4909 0b68 C65F      		subi r28,lo8(-522)
 4910 0b6a DD4F      		sbci r29,hi8(-522)
 4911 0b6c 8883      		st Y,r24
 4912 0b6e CA50      		subi r28,lo8(522)
 4913 0b70 D240      		sbci r29,hi8(522)
 4914 0b72 C55F      		subi r28,lo8(-523)
 4915 0b74 DD4F      		sbci r29,hi8(-523)
 4916 0b76 8883      		st Y,r24
 4917 0b78 CB50      		subi r28,lo8(523)
 4918 0b7a D240      		sbci r29,hi8(523)
 4919 0b7c C45F      		subi r28,lo8(-524)
 4920 0b7e DD4F      		sbci r29,hi8(-524)
 4921 0b80 8883      		st Y,r24
 4922 0b82 CC50      		subi r28,lo8(524)
 4923 0b84 D240      		sbci r29,hi8(524)
 4924 0b86 C35F      		subi r28,lo8(-525)
 4925 0b88 DD4F      		sbci r29,hi8(-525)
 4926 0b8a 8883      		st Y,r24
 4927 0b8c CD50      		subi r28,lo8(525)
 4928 0b8e D240      		sbci r29,hi8(525)
 4929 0b90 C25F      		subi r28,lo8(-526)
 4930 0b92 DD4F      		sbci r29,hi8(-526)
 4931 0b94 8883      		st Y,r24
 4932 0b96 CE50      		subi r28,lo8(526)
 4933 0b98 D240      		sbci r29,hi8(526)
 4934               	.L128:
 4935               	.LBE131:
 4936               	.LBE130:
 716:xgrid.cpp     ****                         send_packet(&pkt, update_node_mask);
 4938               	.LM430:
 4939 0b9a F501      		movw r30,r10
 4940 0b9c 4089      		ldd r20,Z+16
 4941 0b9e 5189      		ldd r21,Z+17
 4942 0ba0 C501      		movw r24,r10
 4943 0ba2 BE01      		movw r22,r28
 4944 0ba4 6F5F      		subi r22,lo8(-(1))
 4945 0ba6 7F4F      		sbci r23,hi8(-(1))
 4946 0ba8 0E94 0000 		call _ZN5Xgrid11send_packetEPNS_6PacketEj
 721:xgrid.cpp     ****                         delay = 100;
 4948               	.LM431:
 4949 0bac 84E6      		ldi r24,lo8(100)
 4950 0bae 90E0      		ldi r25,hi8(100)
 4951 0bb0 A0E0      		ldi r26,hlo8(100)
 4952 0bb2 B0E0      		ldi r27,hhi8(100)
 4953 0bb4 F501      		movw r30,r10
 4954               	.L148:
 4955 0bb6 8387      		std Z+11,r24
 4956 0bb8 9487      		std Z+12,r25
 4957 0bba A587      		std Z+13,r26
 4958 0bbc B687      		std Z+14,r27
 4959               	.LBE132:
 4960 0bbe 00C0      		rjmp .L71
 4961               	.L124:
 4962               	.LBB133:
 726:xgrid.cpp     ****                         printf_P(PSTR("finished sending firmware\n"));
 4964               	.LM432:
 4965 0bc0 0F92      		push __tmp_reg__
 4966 0bc2 0F92      		push __tmp_reg__
 4967 0bc4 80E0      		ldi r24,lo8(_ZZN5Xgrid7processEvE3__c_7)
 4968 0bc6 90E0      		ldi r25,hi8(_ZZN5Xgrid7processEvE3__c_7)
 4969 0bc8 ADB7      		in r26,__SP_L__
 4970 0bca BEB7      		in r27,__SP_H__
 4971 0bcc 1196      		adiw r26,1
 4972 0bce 8D93      		st X+,r24
 4973 0bd0 9C93      		st X,r25
 4974 0bd2 1297      		sbiw r26,1+1
 4975 0bd4 0E94 0000 		call printf_P
 731:xgrid.cpp     ****                         pkt.type = XGRID_PKT_MAINT_CMD;
 4977               	.LM433:
 4978 0bd8 89EF      		ldi r24,lo8(-7)
 4979 0bda 8B83      		std Y+3,r24
 732:xgrid.cpp     ****                         pkt.flags = 0;
 4981               	.LM434:
 4982 0bdc 1D82      		std Y+5,__zero_reg__
 733:xgrid.cpp     ****                         pkt.radius = 1;
 4984               	.LM435:
 4985 0bde 81E0      		ldi r24,lo8(1)
 4986 0be0 8E83      		std Y+6,r24
 734:xgrid.cpp     ****                         pkt.data = buffer;
 4988               	.LM436:
 4989 0be2 CE01      		movw r24,r28
 4990 0be4 0D96      		adiw r24,13
 4991 0be6 8F83      		std Y+7,r24
 4992 0be8 9887      		std Y+8,r25
 735:xgrid.cpp     ****                         pkt.data_len = 5;
 4994               	.LM437:
 4995 0bea 85E0      		ldi r24,lo8(5)
 4996 0bec 90E0      		ldi r25,hi8(5)
 4997 0bee 8987      		std Y+9,r24
 4998 0bf0 9A87      		std Y+10,r25
 737:xgrid.cpp     ****                         c->cmd = XGRID_CMD_FINISH_UPDATE;
 5000               	.LM438:
 5001 0bf2 82E8      		ldi r24,lo8(-126)
 5002 0bf4 8D87      		std Y+13,r24
 739:xgrid.cpp     ****                         c->magic = XGRID_CMD_UPDATE_MAGIC;
 5004               	.LM439:
 5005 0bf6 8EE7      		ldi r24,lo8(189800062)
 5006 0bf8 9EE1      		ldi r25,hi8(189800062)
 5007 0bfa A0E5      		ldi r26,hlo8(189800062)
 5008 0bfc BBE0      		ldi r27,hhi8(189800062)
 5009 0bfe 8E87      		std Y+14,r24
 5010 0c00 9F87      		std Y+15,r25
 5011 0c02 A88B      		std Y+16,r26
 5012 0c04 B98B      		std Y+17,r27
 741:xgrid.cpp     ****                         send_packet(&pkt, update_node_mask);
 5014               	.LM440:
 5015 0c06 0F90      		pop __tmp_reg__
 5016 0c08 0F90      		pop __tmp_reg__
 5017 0c0a F501      		movw r30,r10
 5018 0c0c 4089      		ldd r20,Z+16
 5019 0c0e 5189      		ldd r21,Z+17
 5020 0c10 C501      		movw r24,r10
 5021 0c12 BE01      		movw r22,r28
 5022 0c14 6F5F      		subi r22,lo8(-(1))
 5023 0c16 7F4F      		sbci r23,hi8(-(1))
 5024 0c18 0E94 0000 		call _ZN5Xgrid11send_packetEPNS_6PacketEj
 5025               	.LBB134:
 744:xgrid.cpp     ****                         for (int i = 0; i < node_cnt; i++)
 5027               	.LM441:
 5028 0c1c F501      		movw r30,r10
 5029 0c1e E358      		subi r30,lo8(-(125))
 5030 0c20 FF4F      		sbci r31,hi8(-(125))
 5031 0c22 8081      		ld r24,Z
 5032 0c24 9927      		clr r25
 5033 0c26 87FD      		sbrc r24,7
 5034 0c28 9095      		com r25
 5035 0c2a F501      		movw r30,r10
 5036 0c2c 20E0      		ldi r18,lo8(0)
 5037 0c2e 30E0      		ldi r19,hi8(0)
 5038 0c30 00C0      		rjmp .L129
 5039               	.L130:
 746:xgrid.cpp     ****                                 nodes[i].build = 0;
 5041               	.LM442:
 5042 0c32 178A      		std Z+23,__zero_reg__
 5043 0c34 108E      		std Z+24,__zero_reg__
 5044 0c36 118E      		std Z+25,__zero_reg__
 5045 0c38 128E      		std Z+26,__zero_reg__
 747:xgrid.cpp     ****                                 nodes[i].crc = 0;
 5047               	.LM443:
 5048 0c3a 138E      		std Z+27,__zero_reg__
 5049 0c3c 148E      		std Z+28,__zero_reg__
 744:xgrid.cpp     ****                         for (int i = 0; i < node_cnt; i++)
 5051               	.LM444:
 5052 0c3e 2F5F      		subi r18,lo8(-(1))
 5053 0c40 3F4F      		sbci r19,hi8(-(1))
 5054               	.L129:
 744:xgrid.cpp     ****                         for (int i = 0; i < node_cnt; i++)
 5056               	.LM445:
 5057 0c42 3C96      		adiw r30,12
 5058 0c44 2817      		cp r18,r24
 5059 0c46 3907      		cpc r19,r25
 5060 0c48 04F0      		brlt .L130
 5061               	.LBE134:
 751:xgrid.cpp     ****                         delay = 1000;
 5063               	.LM446:
 5064 0c4a 88EE      		ldi r24,lo8(1000)
 5065 0c4c 93E0      		ldi r25,hi8(1000)
 5066 0c4e A0E0      		ldi r26,hlo8(1000)
 5067 0c50 B0E0      		ldi r27,hhi8(1000)
 5068 0c52 F501      		movw r30,r10
 5069 0c54 8387      		std Z+11,r24
 5070 0c56 9487      		std Z+12,r25
 5071 0c58 A587      		std Z+13,r26
 5072 0c5a B687      		std Z+14,r27
 752:xgrid.cpp     ****                         state = XGRID_STATE_IDLE;
 5074               	.LM447:
 5075 0c5c 1786      		std Z+15,__zero_reg__
 5076 0c5e 00C0      		rjmp .L71
 5077               	.L122:
 5078               	.LBE133:
 5079               	.LBE135:
 755:xgrid.cpp     ****         else if (state == XGRID_STATE_FW_RX)
 5081               	.LM448:
 5082 0c60 0832      		cpi r16,lo8(40)
 5083 0c62 01F4      		brne .+2
 5084 0c64 00C0      		rjmp .L71
 762:xgrid.cpp     ****                 state = XGRID_STATE_IDLE;
 5086               	.LM449:
 5087 0c66 1786      		std Z+15,__zero_reg__
 5088 0c68 00C0      		rjmp .L71
 5089               	.L73:
 5090               	.LBE137:
 5091               	.LBE117:
 5092               	.LBE115:
 5093               	.LBE113:
 5094               	.LBE112:
 5095               	.LBB138:
 5096               	.LBB86:
 5097               	.LBB84:
 339:xgrid.cpp     ****                 if (nodes[i].stream->available())
 5099               	.LM450:
 5100 0c6a 8201      		movw r16,r4
 5101 0c6c 000F      		lsl r16
 5102 0c6e 111F      		rol r17
 5103 0c70 040D      		add r16,r4
 5104 0c72 151D      		adc r17,r5
 5105 0c74 000F      		lsl r16
 5106 0c76 111F      		rol r17
 5107 0c78 000F      		lsl r16
 5108 0c7a 111F      		rol r17
 5109 0c7c 0A0D      		add r16,r10
 5110 0c7e 1B1D      		adc r17,r11
 5111 0c80 F801      		movw r30,r16
 5112 0c82 858D      		ldd r24,Z+29
 5113 0c84 968D      		ldd r25,Z+30
 5114 0c86 DC01      		movw r26,r24
 5115 0c88 ED91      		ld r30,X+
 5116 0c8a FC91      		ld r31,X
 5117 0c8c 0190      		ld __tmp_reg__,Z+
 5118 0c8e F081      		ld r31,Z
 5119 0c90 E02D      		mov r30,__tmp_reg__
 5120 0c92 1995      		eicall
 5121 0c94 0097      		sbiw r24,0
 5122 0c96 01F0      		breq .+2
 5123 0c98 00C0      		rjmp .L131
 5124 0c9a 00C0      		rjmp .L78
 5125               	.L76:
 5126               	.LBB82:
 5127               	.LBB79:
 5128               	.LBB77:
 351:xgrid.cpp     ****                                 if (stream->peek() != XGRID_IDENTIFIER)
 5130               	.LM451:
 5131 0c9c D601      		movw r26,r12
 5132 0c9e ED91      		ld r30,X+
 5133 0ca0 FC91      		ld r31,X
 5134 0ca2 0480      		ldd __tmp_reg__,Z+4
 5135 0ca4 F581      		ldd r31,Z+5
 5136 0ca6 E02D      		mov r30,__tmp_reg__
 5137 0ca8 8E2D      		mov r24,r14
 5138 0caa 902F      		mov r25,r16
 5139 0cac 60E0      		ldi r22,lo8(0)
 5140 0cae 70E0      		ldi r23,hi8(0)
 5141 0cb0 1995      		eicall
 5142 0cb2 8A35      		cpi r24,90
 5143 0cb4 9105      		cpc r25,__zero_reg__
 5144 0cb6 01F0      		breq .+2
 5145 0cb8 00C0      		rjmp .L78
 5146 0cba 00C0      		rjmp .L150
 5147               	.L79:
 5148               	.LBE77:
 5149               	.LBE79:
 380:xgrid.cpp     ****                         if (buffer->ptr < sizeof(xgrid_header_t))
 5151               	.LM452:
 5152 0cbc F801      		movw r30,r16
 5153 0cbe 8585      		ldd r24,Z+13
 5154 0cc0 9685      		ldd r25,Z+14
 5155 0cc2 8930      		cpi r24,9
 5156 0cc4 9105      		cpc r25,__zero_reg__
 5157 0cc6 00F4      		brsh .+2
 5158 0cc8 00C0      		rjmp .L78
 5159 0cca 00C0      		rjmp .L151
 5160               	.L84:
 404:xgrid.cpp     ****                                         nodes[i].drop_chars = (buffer->hdr.size+3) - buffer->ptr;
 5162               	.LM453:
 5163 0ccc F201      		movw r30,r4
 5164 0cce EE0F      		lsl r30
 5165 0cd0 FF1F      		rol r31
 5166 0cd2 E40D      		add r30,r4
 5167 0cd4 F51D      		adc r31,r5
 5168 0cd6 EE0F      		lsl r30
 5169 0cd8 FF1F      		rol r31
 5170 0cda EE0F      		lsl r30
 5171 0cdc FF1F      		rol r31
 5172 0cde EA0D      		add r30,r10
 5173 0ce0 FB1D      		adc r31,r11
 5174 0ce2 D801      		movw r26,r16
 5175 0ce4 1196      		adiw r26,1
 5176 0ce6 8D91      		ld r24,X+
 5177 0ce8 9C91      		ld r25,X
 5178 0cea 1297      		sbiw r26,1+1
 5179 0cec 0396      		adiw r24,3
 5180 0cee 1D96      		adiw r26,13
 5181 0cf0 2D91      		ld r18,X+
 5182 0cf2 3C91      		ld r19,X
 5183 0cf4 1E97      		sbiw r26,13+1
 5184 0cf6 821B      		sub r24,r18
 5185 0cf8 930B      		sbc r25,r19
 5186 0cfa 81A3      		std Z+33,r24
 5187 0cfc 92A3      		std Z+34,r25
 407:xgrid.cpp     ****                                         buffer->flags &= ~ XGRID_BUFFER_IN_USE;
 5189               	.LM454:
 5190 0cfe 5196      		adiw r26,17
 5191 0d00 8C91      		ld r24,X
 5192 0d02 5197      		sbiw r26,17
 5193 0d04 8C7F      		andi r24,lo8(-4)
 5194 0d06 5196      		adiw r26,17
 5195 0d08 8C93      		st X,r24
 5196 0d0a 5197      		sbiw r26,17
 5197 0d0c 00C0      		rjmp .L146
 5198               	.L86:
 5199               	.LBB80:
 421:xgrid.cpp     ****                         if (buffer->ptr >= buffer->hdr.size+3)
 5201               	.LM455:
 5202 0d0e F801      		movw r30,r16
 5203 0d10 6181      		ldd r22,Z+1
 5204 0d12 7281      		ldd r23,Z+2
 5205 0d14 9B01      		movw r18,r22
 5206 0d16 2D5F      		subi r18,lo8(-(3))
 5207 0d18 3F4F      		sbci r19,hi8(-(3))
 5208 0d1a 8585      		ldd r24,Z+13
 5209 0d1c 9685      		ldd r25,Z+14
 5210 0d1e 8217      		cp r24,r18
 5211 0d20 9307      		cpc r25,r19
 5212 0d22 00F0      		brlo .+2
 5213 0d24 00C0      		rjmp .L134
 5214 0d26 00C0      		rjmp .L78
 5215               	.L71:
 5216               	/* epilogue start */
 5217               	.LBE80:
 5218               	.LBE82:
 5219               	.LBE84:
 5220               	.LBE86:
 5221               	.LBE138:
 5222               	.LBE65:
 764:xgrid.cpp     **** }
 5224               	.LM456:
 5225 0d28 CE5E      		subi r28,lo8(-(530))
 5226 0d2a DD4F      		sbci r29,hi8(-(530))
 5227 0d2c CDBF      		out __SP_L__,r28
 5228 0d2e DEBF      		out __SP_H__,r29
 5229 0d30 DF91      		pop r29
 5230 0d32 CF91      		pop r28
 5231 0d34 1F91      		pop r17
 5232 0d36 0F91      		pop r16
 5233 0d38 FF90      		pop r15
 5234 0d3a EF90      		pop r14
 5235 0d3c DF90      		pop r13
 5236 0d3e CF90      		pop r12
 5237 0d40 BF90      		pop r11
 5238 0d42 AF90      		pop r10
 5239 0d44 9F90      		pop r9
 5240 0d46 8F90      		pop r8
 5241 0d48 7F90      		pop r7
 5242 0d4a 6F90      		pop r6
 5243 0d4c 5F90      		pop r5
 5244 0d4e 4F90      		pop r4
 5245 0d50 3F90      		pop r3
 5246 0d52 2F90      		pop r2
 5247 0d54 0895      		ret
 5337               	.Lscope15:
 5338               		.section	.progmem.data,"a",@progbits
 5341               	_ZZN5Xgrid7processEvE3__c:
 5342 0000 7469 6D65 		.string	"timeout!\n"
 5342      6F75 7421 
 5342      0A00 
 5345               	_ZZN5Xgrid7processEvE3__c_0:
 5346 000a 696E 6974 		.string	"init, send flush command\n"
 5346      2C20 7365 
 5346      6E64 2066 
 5346      6C75 7368 
 5346      2063 6F6D 
 5349               	_ZZN5Xgrid7processEvE3__c_1:
 5350 0024 6964 6C65 		.string	"idle, send version check\n"
 5350      2C20 7365 
 5350      6E64 2076 
 5350      6572 7369 
 5350      6F6E 2063 
 5353               	_ZZN5Xgrid7processEvE3__c_2:
 5354 003e 6368 6563 		.string	"check neighbor versions\n"
 5354      6B20 6E65 
 5354      6967 6862 
 5354      6F72 2076 
 5354      6572 7369 
 5357               	_ZZN5Xgrid7processEvE3__c_3:
 5358 0057 7570 6461 		.string	"update check %ld\n"
 5358      7465 2063 
 5358      6865 636B 
 5358      2025 6C64 
 5358      0A00 
 5361               	_ZZN5Xgrid7processEvE3__c_4:
 5362 0069 6E6F 6465 		.string	"node %d: %ld (%04x)\n"
 5362      2025 643A 
 5362      2025 6C64 
 5362      2028 2530 
 5362      3478 290A 
 5365               	_ZZN5Xgrid7processEvE3__c_5:
 5366 007e 7365 6E64 		.string	"send start update command\n"
 5366      2073 7461 
 5366      7274 2075 
 5366      7064 6174 
 5366      6520 636F 
 5369               	_ZZN5Xgrid7processEvE3__c_6:
 5370 0099 7365 6E64 		.string	"send firmware block\n"
 5370      2066 6972 
 5370      6D77 6172 
 5370      6520 626C 
 5370      6F63 6B0A 
 5373               	_ZZN5Xgrid7processEvE3__c_7:
 5374 00ae 6669 6E69 		.string	"finished sending firmware\n"
 5374      7368 6564 
 5374      2073 656E 
 5374      6469 6E67 
 5374      2066 6972 
 5377               	_ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c:
 5378 00c9 7278 2070 		.string	"rx ping req\n"
 5378      696E 6720 
 5378      7265 710A 
 5378      00
 5381               	_ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_0:
 5382 00d6 7278 2070 		.string	"rx ping reply\n"
 5382      696E 6720 
 5382      7265 706C 
 5382      790A 00
 5385               	_ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_1:
 5386 00e5 7278 206D 		.string	"rx maint cmd\n"
 5386      6169 6E74 
 5386      2063 6D64 
 5386      0A00 
 5389               	_ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_2:
 5390 00f3 7374 6172 		.string	"start update\n"
 5390      7420 7570 
 5390      6461 7465 
 5390      0A00 
 5393               	_ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_3:
 5394 0101 6669 6E69 		.string	"finish update\n"
 5394      7368 2075 
 5394      7064 6174 
 5394      650A 00
 5397               	_ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_4:
 5398 0110 6E65 7720 		.string	"new crc: %04x\n"
 5398      6372 633A 
 5398      2025 3034 
 5398      780A 00
 5401               	_ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_5:
 5402 011f 6375 7220 		.string	"cur crc: %04x\n"
 5402      6372 633A 
 5402      2025 3034 
 5402      780A 00
 5405               	_ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_6:
 5406 012e 676F 6F64 		.string	"good crc\n"
 5406      2063 7263 
 5406      0A00 
 5409               	_ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_7:
 5410 0138 6261 6420 		.string	"bad crc\n"
 5410      6372 630A 
 5410      00
 5413               	_ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_8:
 5414 0141 6162 6F72 		.string	"abort update\n"
 5414      7420 7570 
 5414      6461 7465 
 5414      0A00 
 5417               	_ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_9:
 5418 014f 7265 7365 		.string	"reset\n"
 5418      740A 00
 5421               	_ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_10:
 5422 0156 7278 2066 		.string	"rx firmware block\n"
 5422      6972 6D77 
 5422      6172 6520 
 5422      626C 6F63 
 5422      6B0A 00
 5425               	_ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_11:
 5426 0169 7278 2066 		.string	"rx flush buffer\n"
 5426      6C75 7368 
 5426      2062 7566 
 5426      6665 720A 
 5426      00
 5427               	.global	_ZN5XgridC1Ev
 5428               		.set	_ZN5XgridC1Ev,_ZN5XgridC2Ev
 5429               	.global	_ZN5XgridD1Ev
 5430               		.set	_ZN5XgridD1Ev,_ZN5XgridD2Ev
 5431               		.text
 5433               	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 xgrid.cpp
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccJLVy02.s:2      *ABS*:0000003f __SREG__
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccJLVy02.s:3      *ABS*:0000003e __SP_H__
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccJLVy02.s:4      *ABS*:0000003d __SP_L__
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccJLVy02.s:5      *ABS*:00000034 __CCP__
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccJLVy02.s:6      *ABS*:00000000 __tmp_reg__
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccJLVy02.s:7      *ABS*:00000001 __zero_reg__
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccJLVy02.s:642    .text._ZN5XgridC2Ev:00000000 _ZN5XgridC2Ev
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccJLVy02.s:913    .text._ZN5XgridD2Ev:00000000 _ZN5XgridD2Ev
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccJLVy02.s:932    .text._ZN5Xgrid6get_idEv:00000000 _ZN5Xgrid6get_idEv
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccJLVy02.s:955    .text._ZN5Xgrid8add_nodeEP8IOStream:00000000 _ZN5Xgrid8add_nodeEP8IOStream
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccJLVy02.s:1034   .text._ZN5Xgrid15populate_packetEPNS_6PacketEPh:00000000 _ZN5Xgrid15populate_packetEPNS_6PacketEPh
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccJLVy02.s:1102   .text._ZN5Xgrid9is_uniqueEPNS_6PacketE:00000000 _ZN5Xgrid9is_uniqueEPNS_6PacketE
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccJLVy02.s:1187   .text._ZN5Xgrid12check_uniqueEPNS_6PacketE:00000000 _ZN5Xgrid12check_uniqueEPNS_6PacketE
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccJLVy02.s:1297   .text._ZN5Xgrid15get_free_bufferEj:00000000 _ZN5Xgrid15get_free_bufferEj
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccJLVy02.s:1377   .text._ZN5Xgrid15send_raw_packetEPNS_6PacketEj:00000000 _ZN5Xgrid15send_raw_packetEPNS_6PacketEj
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccJLVy02.s:1582   .text._ZN5Xgrid11send_packetEPNS_6PacketEj:00000000 _ZN5Xgrid11send_packetEPNS_6PacketEj
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccJLVy02.s:1629   .text._ZN5Xgrid16try_parse_packetEPNS_6PacketEPKhj:00000000 _ZN5Xgrid16try_parse_packetEPNS_6PacketEPKhj
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccJLVy02.s:1742   .text._ZN5Xgrid15try_read_packetEPNS_6PacketEP7IStream:00000000 _ZN5Xgrid15try_read_packetEPNS_6PacketEP7IStream
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccJLVy02.s:1992   .text._ZN5Xgrid23internal_process_packetEPNS_6PacketE:00000000 _ZN5Xgrid23internal_process_packetEPNS_6PacketE
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccJLVy02.s:5377   .progmem.data:000000c9 _ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccJLVy02.s:5381   .progmem.data:000000d6 _ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_0
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccJLVy02.s:5385   .progmem.data:000000e5 _ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_1
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccJLVy02.s:5389   .progmem.data:000000f3 _ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_2
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccJLVy02.s:5393   .progmem.data:00000101 _ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_3
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccJLVy02.s:5397   .progmem.data:00000110 _ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_4
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccJLVy02.s:5401   .progmem.data:0000011f _ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_5
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccJLVy02.s:5405   .progmem.data:0000012e _ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_6
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccJLVy02.s:5409   .progmem.data:00000138 _ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_7
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccJLVy02.s:5413   .progmem.data:00000141 _ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_8
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccJLVy02.s:5417   .progmem.data:0000014f _ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_9
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccJLVy02.s:5421   .progmem.data:00000156 _ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_10
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccJLVy02.s:5425   .progmem.data:00000169 _ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_11
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccJLVy02.s:2793   .text._ZN5Xgrid14process_packetEPNS_6PacketE:00000000 _ZN5Xgrid14process_packetEPNS_6PacketE
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccJLVy02.s:2887   .text._ZN5Xgrid7processEv:00000000 _ZN5Xgrid7processEv
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccJLVy02.s:5341   .progmem.data:00000000 _ZZN5Xgrid7processEvE3__c
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccJLVy02.s:5345   .progmem.data:0000000a _ZZN5Xgrid7processEvE3__c_0
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccJLVy02.s:5349   .progmem.data:00000024 _ZZN5Xgrid7processEvE3__c_1
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccJLVy02.s:5353   .progmem.data:0000003e _ZZN5Xgrid7processEvE3__c_2
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccJLVy02.s:5357   .progmem.data:00000057 _ZZN5Xgrid7processEvE3__c_3
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccJLVy02.s:5361   .progmem.data:00000069 _ZZN5Xgrid7processEvE3__c_4
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccJLVy02.s:5365   .progmem.data:0000007e _ZZN5Xgrid7processEvE3__c_5
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccJLVy02.s:5369   .progmem.data:00000099 _ZZN5Xgrid7processEvE3__c_6
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccJLVy02.s:5373   .progmem.data:000000ae _ZZN5Xgrid7processEvE3__c_7
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccJLVy02.s:642    .text._ZN5XgridC2Ev:00000000 _ZN5XgridC1Ev
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccJLVy02.s:913    .text._ZN5XgridD2Ev:00000000 _ZN5XgridD1Ev

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
xboot_app_crc16
__BUILD_NUMBER
printf_P
xboot_app_temp_crc16
xboot_install_firmware
xboot_reset
xboot_app_temp_write_page
