   1               		.file	"spi.cpp"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
 621               		.section	.text._ZThn2_N3Spi3putEc,"ax",@progbits
 622               	.global	_ZThn2_N3Spi3putEc
 624               	_ZThn2_N3Spi3putEc:
 625               	/* prologue: function */
 626               	/* frame size = 0 */
 627               	/* stack size = 0 */
 628               	.L__stack_usage = 0
 629 0000 0297      		sbiw r24,2
 630 0002 0E94 0000 		call .LTHUNK0
 631               	/* epilogue start */
 632 0006 0895      		ret
 634               		.section	.text._ZN3Spi3putEc,"ax",@progbits
 638               	.global	_ZN3Spi3putEc
 640               	_ZN3Spi3putEc:
   1:spi.cpp       **** /************************************************************************/
   2:spi.cpp       **** /* XMEGA SPI Driver                                                     */
   3:spi.cpp       **** /*                                                                      */
   4:spi.cpp       **** /* spi.cpp                                                              */
   5:spi.cpp       **** /*                                                                      */
   6:spi.cpp       **** /* Alex Forencich <alex@alexforencich.com>                              */
   7:spi.cpp       **** /*                                                                      */
   8:spi.cpp       **** /* Copyright (c) 2011 Alex Forencich                                    */
   9:spi.cpp       **** /*                                                                      */
  10:spi.cpp       **** /* Permission is hereby granted, free of charge, to any person          */
  11:spi.cpp       **** /* obtaining a copy of this software and associated documentation       */
  12:spi.cpp       **** /* files(the "Software"), to deal in the Software without restriction,  */
  13:spi.cpp       **** /* including without limitation the rights to use, copy, modify, merge, */
  14:spi.cpp       **** /* publish, distribute, sublicense, and/or sell copies of the Software, */
  15:spi.cpp       **** /* and to permit persons to whom the Software is furnished to do so,    */
  16:spi.cpp       **** /* subject to the following conditions:                                 */
  17:spi.cpp       **** /*                                                                      */
  18:spi.cpp       **** /* The above copyright notice and this permission notice shall be       */
  19:spi.cpp       **** /* included in all copies or substantial portions of the Software.      */
  20:spi.cpp       **** /*                                                                      */
  21:spi.cpp       **** /* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,      */
  22:spi.cpp       **** /* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF   */
  23:spi.cpp       **** /* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                */
  24:spi.cpp       **** /* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS  */
  25:spi.cpp       **** /* BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN   */
  26:spi.cpp       **** /* ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN    */
  27:spi.cpp       **** /* CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE     */
  28:spi.cpp       **** /* SOFTWARE.                                                            */
  29:spi.cpp       **** /*                                                                      */
  30:spi.cpp       **** /************************************************************************/
  31:spi.cpp       **** 
  32:spi.cpp       **** #include "spi.h"
  33:spi.cpp       **** 
  34:spi.cpp       **** 
  35:spi.cpp       **** // Statics
  36:spi.cpp       **** Spi *Spi::spi_list[MAX_SPI_IND];
  37:spi.cpp       **** 
  38:spi.cpp       **** 
  39:spi.cpp       **** char __attribute__ ((noinline)) Spi::which_spi(SPI_t *_spi)
  40:spi.cpp       **** {
  41:spi.cpp       **** #if MAX_SPI_IND >= SPIC_IND
  42:spi.cpp       ****         if ((uintptr_t)_spi == (uintptr_t)&SPIC)
  43:spi.cpp       ****                 return SPIC_IND;
  44:spi.cpp       **** #endif
  45:spi.cpp       **** #if MAX_SPI_IND >= SPID_IND
  46:spi.cpp       ****         if ((uintptr_t)_spi == (uintptr_t)&SPID)
  47:spi.cpp       ****                 return SPID_IND;
  48:spi.cpp       **** #endif
  49:spi.cpp       **** #if MAX_SPI_IND >= SPIE_IND
  50:spi.cpp       ****         if ((uintptr_t)_spi == (uintptr_t)&SPIE)
  51:spi.cpp       ****                 return SPIE_IND;
  52:spi.cpp       **** #endif
  53:spi.cpp       **** #if MAX_SPI_IND >= SPIF_IND
  54:spi.cpp       ****         if ((uintptr_t)_spi == (uintptr_t)&SPIF)
  55:spi.cpp       ****                 return SPIF_IND;
  56:spi.cpp       **** #endif
  57:spi.cpp       ****         return 0;
  58:spi.cpp       **** }
  59:spi.cpp       **** 
  60:spi.cpp       **** 
  61:spi.cpp       **** SPI_t * __attribute__ ((noinline)) Spi::get_spi(char _spi)
  62:spi.cpp       **** {
  63:spi.cpp       ****         switch (_spi)
  64:spi.cpp       ****         {
  65:spi.cpp       **** #if MAX_SPI_IND >= SPIC_IND
  66:spi.cpp       ****                 case SPIC_IND:
  67:spi.cpp       ****                         return &SPIC;
  68:spi.cpp       **** #endif
  69:spi.cpp       **** #if MAX_SPI_IND >= SPID_IND
  70:spi.cpp       ****                 case SPID_IND:
  71:spi.cpp       ****                         return &SPID;
  72:spi.cpp       **** #endif
  73:spi.cpp       **** #if MAX_SPI_IND >= SPIE_IND
  74:spi.cpp       ****                 case SPIE_IND:
  75:spi.cpp       ****                         return &SPIE;
  76:spi.cpp       **** #endif
  77:spi.cpp       **** #if MAX_SPI_IND >= SPIF_IND
  78:spi.cpp       ****                 case SPIF_IND:
  79:spi.cpp       ****                         return &SPIF;
  80:spi.cpp       **** #endif
  81:spi.cpp       ****                 default:
  82:spi.cpp       ****                         return 0;
  83:spi.cpp       ****         }
  84:spi.cpp       **** }
  85:spi.cpp       **** 
  86:spi.cpp       **** 
  87:spi.cpp       **** PORT_t * __attribute__ ((noinline)) Spi::get_port(char _spi)
  88:spi.cpp       **** {
  89:spi.cpp       ****         switch (_spi)
  90:spi.cpp       ****         {
  91:spi.cpp       **** #if MAX_SPI_IND >= SPIC_IND
  92:spi.cpp       ****                 case SPIC_IND:
  93:spi.cpp       ****                         return &PORTC;
  94:spi.cpp       **** #endif
  95:spi.cpp       **** #if MAX_SPI_IND >= SPID_IND
  96:spi.cpp       ****                 case SPID_IND:
  97:spi.cpp       ****                         return &PORTD;
  98:spi.cpp       **** #endif
  99:spi.cpp       **** #if MAX_SPI_IND >= SPIE_IND
 100:spi.cpp       ****                 case SPIE_IND:
 101:spi.cpp       ****                         return &PORTE;
 102:spi.cpp       **** #endif
 103:spi.cpp       **** #if MAX_SPI_IND >= SPIF_IND
 104:spi.cpp       ****                 case SPIF_IND:
 105:spi.cpp       ****                         return &PORTF;
 106:spi.cpp       **** #endif
 107:spi.cpp       ****                 default:
 108:spi.cpp       ****                         return 0;
 109:spi.cpp       ****         }
 110:spi.cpp       **** }
 111:spi.cpp       **** 
 112:spi.cpp       **** Spi::Spi(SPI_t *_spi) :
 113:spi.cpp       ****         spi(_spi),
 114:spi.cpp       ****         flags(0)
 115:spi.cpp       **** {
 116:spi.cpp       ****         spi_ind = which_spi(spi);
 117:spi.cpp       ****         spi_list[spi_ind-1] = this;
 118:spi.cpp       **** }
 119:spi.cpp       **** 
 120:spi.cpp       **** 
 121:spi.cpp       **** Spi::~Spi()
 122:spi.cpp       **** {
 123:spi.cpp       ****         end();
 124:spi.cpp       ****         spi_list[spi_ind-1] = 0;
 125:spi.cpp       **** }
 126:spi.cpp       **** 
 127:spi.cpp       **** 
 128:spi.cpp       **** void __attribute__ ((noinline)) Spi::begin(uint8_t mode, uint8_t prescl, uint8_t clk2x)
 129:spi.cpp       **** {
 130:spi.cpp       ****         PORT_t *port = get_port(spi_ind);
 131:spi.cpp       ****         flags = SPI_MODE_MASTER;
 132:spi.cpp       ****         
 133:spi.cpp       ****         port->DIRSET = SPI_SS_PIN_bm | SPI_MOSI_PIN_bm | SPI_SCK_PIN_bm;
 134:spi.cpp       ****         port->DIRCLR = SPI_MISO_PIN_bm;
 135:spi.cpp       ****         port->OUTCLR = SPI_SS_PIN_bm;
 136:spi.cpp       ****         port->OUTCLR = SPI_MOSI_PIN_bm | SPI_SCK_PIN_bm;
 137:spi.cpp       ****         
 138:spi.cpp       ****         spi->CTRL = SPI_ENABLE_bm | SPI_MASTER_bm | mode | prescl | (clk2x ? SPI_CLK2X_bm : 0);
 139:spi.cpp       ****         spi->INTCTRL = SPI_INTLVL_OFF_gc;
 140:spi.cpp       **** }
 141:spi.cpp       **** 
 142:spi.cpp       **** 
 143:spi.cpp       **** void __attribute__ ((noinline)) Spi::end()
 144:spi.cpp       **** {
 145:spi.cpp       ****         spi->CTRL = 0;
 146:spi.cpp       **** }
 147:spi.cpp       **** 
 148:spi.cpp       **** 
 149:spi.cpp       **** char Spi::transceive(char c)
 150:spi.cpp       **** {
 151:spi.cpp       ****         uint8_t saved_status = 0;
 152:spi.cpp       ****         
 153:spi.cpp       ****         saved_status = SREG;
 154:spi.cpp       ****         cli();
 155:spi.cpp       ****         
 156:spi.cpp       ****         spi->DATA = c;
 157:spi.cpp       ****         SPI_WAIT();
 158:spi.cpp       ****         return spi->DATA;
 159:spi.cpp       ****         
 160:spi.cpp       ****         SREG = saved_status;
 161:spi.cpp       **** }
 162:spi.cpp       **** 
 163:spi.cpp       **** 
 164:spi.cpp       **** void Spi::put(char c)
 165:spi.cpp       **** {
 642               	.LM0:
 643               	.LFBB1:
 644               	/* prologue: function */
 645               	/* frame size = 0 */
 646               	/* stack size = 0 */
 647               	.L__stack_usage = 0
 649               	.LM1:
 650 0000 FC01      		movw r30,r24
 651               	.LBB17:
 166:spi.cpp       ****         uint8_t saved_status = 0;
 167:spi.cpp       ****         
 168:spi.cpp       ****         saved_status = SREG;
 653               	.LM2:
 654 0002 8FB7      		in r24,__SREG__
 169:spi.cpp       ****         cli();
 656               	.LM3:
 657               	/* #APP */
 658               	 ;  169 "spi.cpp" 1
 659 0004 F894      		cli
 660               	 ;  0 "" 2
 170:spi.cpp       ****         
 171:spi.cpp       ****         spi->DATA = c;
 662               	.LM4:
 663               	/* #NOAPP */
 664 0006 A481      		ldd r26,Z+4
 665 0008 B581      		ldd r27,Z+5
 666 000a 1396      		adiw r26,3
 667 000c 6C93      		st X,r22
 668 000e 1397      		sbiw r26,3
 172:spi.cpp       ****         SPI_WAIT();
 670               	.LM5:
 671 0010 0480      		ldd __tmp_reg__,Z+4
 672 0012 F581      		ldd r31,Z+5
 673 0014 E02D      		mov r30,__tmp_reg__
 674               	.L3:
 676               	.LM6:
 677 0016 9281      		ldd r25,Z+2
 678 0018 97FF      		sbrs r25,7
 679 001a 00C0      		rjmp .L3
 173:spi.cpp       ****         
 174:spi.cpp       ****         SREG = saved_status;
 681               	.LM7:
 682 001c 8FBF      		out __SREG__,r24
 683               	/* epilogue start */
 684               	.LBE17:
 175:spi.cpp       **** }
 686               	.LM8:
 687 001e 0895      		ret
 692               	.Lscope1:
 693               		.section	.text._ZN3Spi3putEcP6__file,"ax",@progbits
 697               	.global	_ZN3Spi3putEcP6__file
 699               	_ZN3Spi3putEcP6__file:
 176:spi.cpp       **** 
 177:spi.cpp       **** 
 178:spi.cpp       **** void Spi::write_word(uint16_t word)
 179:spi.cpp       **** {
 180:spi.cpp       ****         uint8_t saved_status = 0;
 181:spi.cpp       ****         SPI_t *spi2 = spi;
 182:spi.cpp       ****         
 183:spi.cpp       ****         union
 184:spi.cpp       ****         {
 185:spi.cpp       ****                 uint16_t w;
 186:spi.cpp       ****                 struct
 187:spi.cpp       ****                 {
 188:spi.cpp       ****                         uint8_t b0;
 189:spi.cpp       ****                         uint8_t b1;
 190:spi.cpp       ****                 } b;
 191:spi.cpp       ****         } word2;
 192:spi.cpp       ****         
 193:spi.cpp       ****         saved_status = SREG;
 194:spi.cpp       ****         cli();
 195:spi.cpp       ****         
 196:spi.cpp       ****         word2.w = word;
 197:spi.cpp       ****         
 198:spi.cpp       ****         spi2->DATA = word2.b.b1;
 199:spi.cpp       ****         asm volatile("nop\n\t"::);
 200:spi.cpp       ****         while (!(spi2->STATUS & SPI_IF_bm)) { };
 201:spi.cpp       ****         spi2->DATA = word2.b.b0;
 202:spi.cpp       ****         asm volatile("nop\n\t"::);
 203:spi.cpp       ****         while (!(spi2->STATUS & SPI_IF_bm)) { };
 204:spi.cpp       ****         
 205:spi.cpp       ****         SREG = saved_status;
 206:spi.cpp       **** }
 207:spi.cpp       **** 
 208:spi.cpp       **** 
 209:spi.cpp       **** void Spi::write_dword(uint32_t dword)
 210:spi.cpp       **** {
 211:spi.cpp       ****         uint8_t saved_status = 0;
 212:spi.cpp       ****         SPI_t *spi2 = spi;
 213:spi.cpp       ****         
 214:spi.cpp       ****         union
 215:spi.cpp       ****         {
 216:spi.cpp       ****                 uint32_t d;
 217:spi.cpp       ****                 struct
 218:spi.cpp       ****                 {
 219:spi.cpp       ****                         uint8_t b0;
 220:spi.cpp       ****                         uint8_t b1;
 221:spi.cpp       ****                         uint8_t b2;
 222:spi.cpp       ****                         uint8_t b3;
 223:spi.cpp       ****                 } b;
 224:spi.cpp       ****         } dword2;
 225:spi.cpp       ****         
 226:spi.cpp       ****         saved_status = SREG;
 227:spi.cpp       ****         cli();
 228:spi.cpp       ****         
 229:spi.cpp       ****         dword2.d = dword;
 230:spi.cpp       ****         
 231:spi.cpp       ****         spi2->DATA = dword2.b.b3;
 232:spi.cpp       ****         asm volatile("nop\n\t"::);
 233:spi.cpp       ****         while (!(spi2->STATUS & SPI_IF_bm)) { };
 234:spi.cpp       ****         spi2->DATA = dword2.b.b2;
 235:spi.cpp       ****         asm volatile("nop\n\t"::);
 236:spi.cpp       ****         while (!(spi2->STATUS & SPI_IF_bm)) { };
 237:spi.cpp       ****         spi2->DATA = dword2.b.b1;
 238:spi.cpp       ****         asm volatile("nop\n\t"::);
 239:spi.cpp       ****         while (!(spi2->STATUS & SPI_IF_bm)) { };
 240:spi.cpp       ****         spi2->DATA = dword2.b.b0;
 241:spi.cpp       ****         asm volatile("nop\n\t"::);
 242:spi.cpp       ****         while (!(spi2->STATUS & SPI_IF_bm)) { };
 243:spi.cpp       ****         
 244:spi.cpp       ****         SREG = saved_status;
 245:spi.cpp       **** }
 246:spi.cpp       **** 
 247:spi.cpp       **** 
 248:spi.cpp       **** char Spi::get()
 249:spi.cpp       **** {
 250:spi.cpp       ****         return transceive(0);
 251:spi.cpp       **** }
 252:spi.cpp       **** 
 253:spi.cpp       **** 
 254:spi.cpp       **** void Spi::setup_stream(FILE *stream)
 255:spi.cpp       **** {
 256:spi.cpp       ****         fdev_setup_stream(stream, put, get, _FDEV_SETUP_RW);
 257:spi.cpp       ****         fdev_set_udata(stream, this);
 258:spi.cpp       **** }
 259:spi.cpp       **** 
 260:spi.cpp       **** 
 261:spi.cpp       **** // static
 262:spi.cpp       **** int Spi::put(char c, FILE *stream)
 263:spi.cpp       **** {
 701               	.LM9:
 702               	.LFBB2:
 703               	/* prologue: function */
 704               	/* frame size = 0 */
 705               	/* stack size = 0 */
 706               	.L__stack_usage = 0
 707 0000 282F      		mov r18,r24
 708 0002 FB01      		movw r30,r22
 709               	.LBB18:
 264:spi.cpp       ****         Spi *u;
 265:spi.cpp       ****         u = (Spi *)fdev_get_udata(stream);
 711               	.LM10:
 712 0004 A485      		ldd r26,Z+12
 713 0006 B585      		ldd r27,Z+13
 266:spi.cpp       ****         if (u != 0)
 715               	.LM11:
 716 0008 1097      		sbiw r26,0
 717 000a 01F0      		breq .L7
 267:spi.cpp       ****         {
 268:spi.cpp       ****                 u->put(c);
 719               	.LM12:
 720 000c ED91      		ld r30,X+
 721 000e FC91      		ld r31,X
 722 0010 1197      		sbiw r26,1
 723 0012 0284      		ldd __tmp_reg__,Z+10
 724 0014 F385      		ldd r31,Z+11
 725 0016 E02D      		mov r30,__tmp_reg__
 726 0018 CD01      		movw r24,r26
 727 001a 622F      		mov r22,r18
 728 001c 1995      		eicall
 269:spi.cpp       ****                 return 0;
 730               	.LM13:
 731 001e 80E0      		ldi r24,lo8(0)
 732 0020 90E0      		ldi r25,hi8(0)
 733 0022 0895      		ret
 734               	.L7:
 270:spi.cpp       ****         }
 271:spi.cpp       ****         return _FDEV_ERR;
 736               	.LM14:
 737 0024 8FEF      		ldi r24,lo8(-1)
 738 0026 9FEF      		ldi r25,hi8(-1)
 739               	.LBE18:
 272:spi.cpp       **** }
 741               	.LM15:
 742 0028 0895      		ret
 747               	.Lscope2:
 748               		.section	.text._ZN3Spi3getEP6__file,"ax",@progbits
 751               	.global	_ZN3Spi3getEP6__file
 753               	_ZN3Spi3getEP6__file:
 273:spi.cpp       **** 
 274:spi.cpp       **** 
 275:spi.cpp       **** // static
 276:spi.cpp       **** int Spi::get(FILE *stream)
 277:spi.cpp       **** {
 755               	.LM16:
 756               	.LFBB3:
 757               	/* prologue: function */
 758               	/* frame size = 0 */
 759               	/* stack size = 0 */
 760               	.L__stack_usage = 0
 761               	.LBB19:
 278:spi.cpp       ****         Spi *u;
 279:spi.cpp       ****         u = (Spi *)fdev_get_udata(stream);
 763               	.LM17:
 764 0000 DC01      		movw r26,r24
 765 0002 1C96      		adiw r26,12
 766 0004 8D91      		ld r24,X+
 767 0006 9C91      		ld r25,X
 768 0008 1D97      		sbiw r26,12+1
 280:spi.cpp       ****         if (u != 0)
 770               	.LM18:
 771 000a 0097      		sbiw r24,0
 772 000c 01F0      		breq .L10
 281:spi.cpp       ****         {
 282:spi.cpp       ****                 return u->get();
 774               	.LM19:
 775 000e DC01      		movw r26,r24
 776 0010 ED91      		ld r30,X+
 777 0012 FC91      		ld r31,X
 778 0014 0280      		ldd __tmp_reg__,Z+2
 779 0016 F381      		ldd r31,Z+3
 780 0018 E02D      		mov r30,__tmp_reg__
 781 001a 1995      		eicall
 782 001c 90E0      		ldi r25,lo8(0)
 783 001e 0895      		ret
 784               	.L10:
 283:spi.cpp       ****         }
 284:spi.cpp       ****         return _FDEV_ERR;
 786               	.LM20:
 787 0020 8FEF      		ldi r24,lo8(-1)
 788 0022 9FEF      		ldi r25,hi8(-1)
 789               	.LBE19:
 285:spi.cpp       **** }
 791               	.LM21:
 792 0024 0895      		ret
 797               	.Lscope3:
 798               		.section	.text._ZN3Spi9which_spiEP10SPI_struct,"ax",@progbits
 801               	.global	_ZN3Spi9which_spiEP10SPI_struct
 803               	_ZN3Spi9which_spiEP10SPI_struct:
  40:spi.cpp       **** {
 805               	.LM22:
 806               	.LFBB4:
 807               	/* prologue: function */
 808               	/* frame size = 0 */
 809               	/* stack size = 0 */
 810               	.L__stack_usage = 0
  42:spi.cpp       ****         if ((uintptr_t)_spi == (uintptr_t)&SPIC)
 812               	.LM23:
 813 0000 28E0      		ldi r18,hi8(2240)
 814 0002 803C      		cpi r24,lo8(2240)
 815 0004 9207      		cpc r25,r18
 816 0006 01F0      		breq .L13
  46:spi.cpp       ****         if ((uintptr_t)_spi == (uintptr_t)&SPID)
 818               	.LM24:
 819 0008 29E0      		ldi r18,hi8(2496)
 820 000a 803C      		cpi r24,lo8(2496)
 821 000c 9207      		cpc r25,r18
 822 000e 01F0      		breq .L14
  50:spi.cpp       ****         if ((uintptr_t)_spi == (uintptr_t)&SPIE)
 824               	.LM25:
 825 0010 2AE0      		ldi r18,hi8(2752)
 826 0012 803C      		cpi r24,lo8(2752)
 827 0014 9207      		cpc r25,r18
 828 0016 01F0      		breq .L15
  54:spi.cpp       ****         if ((uintptr_t)_spi == (uintptr_t)&SPIF)
 830               	.LM26:
 831 0018 2BE0      		ldi r18,hi8(3008)
 832 001a 803C      		cpi r24,lo8(3008)
 833 001c 9207      		cpc r25,r18
 834 001e 01F4      		brne .L16
  55:spi.cpp       ****                 return SPIF_IND;
 836               	.LM27:
 837 0020 84E0      		ldi r24,lo8(4)
 838 0022 0895      		ret
 839               	.L13:
  43:spi.cpp       ****                 return SPIC_IND;
 841               	.LM28:
 842 0024 81E0      		ldi r24,lo8(1)
 843 0026 0895      		ret
 844               	.L14:
  47:spi.cpp       ****                 return SPID_IND;
 846               	.LM29:
 847 0028 82E0      		ldi r24,lo8(2)
 848 002a 0895      		ret
 849               	.L15:
  51:spi.cpp       ****                 return SPIE_IND;
 851               	.LM30:
 852 002c 83E0      		ldi r24,lo8(3)
 853 002e 0895      		ret
 854               	.L16:
  57:spi.cpp       ****         return 0;
 856               	.LM31:
 857 0030 80E0      		ldi r24,lo8(0)
  58:spi.cpp       **** }
 859               	.LM32:
 860 0032 0895      		ret
 862               	.Lscope4:
 863               		.section	.text._ZN3Spi7get_spiEc,"ax",@progbits
 866               	.global	_ZN3Spi7get_spiEc
 868               	_ZN3Spi7get_spiEc:
  62:spi.cpp       **** {
 870               	.LM33:
 871               	.LFBB5:
 872               	/* prologue: function */
 873               	/* frame size = 0 */
 874               	/* stack size = 0 */
 875               	.L__stack_usage = 0
  62:spi.cpp       **** {
 877               	.LM34:
 878 0000 8150      		subi r24,lo8(-(-1))
 879 0002 8430      		cpi r24,lo8(4)
 880 0004 00F4      		brsh .L19
 881 0006 E82F      		mov r30,r24
 882 0008 F0E0      		ldi r31,lo8(0)
 883 000a EE0F      		lsl r30
 884 000c FF1F      		rol r31
 885 000e E050      		subi r30,lo8(-(CSWTCH.10))
 886 0010 F040      		sbci r31,hi8(-(CSWTCH.10))
 887 0012 8081      		ld r24,Z
 888 0014 9181      		ldd r25,Z+1
 889 0016 0895      		ret
 890               	.L19:
 891 0018 80E0      		ldi r24,lo8(0)
 892 001a 90E0      		ldi r25,hi8(0)
  84:spi.cpp       **** }
 894               	.LM35:
 895 001c 0895      		ret
 897               	.Lscope5:
 898               		.section	.text._ZN3Spi8get_portEc,"ax",@progbits
 901               	.global	_ZN3Spi8get_portEc
 903               	_ZN3Spi8get_portEc:
  88:spi.cpp       **** {
 905               	.LM36:
 906               	.LFBB6:
 907               	/* prologue: function */
 908               	/* frame size = 0 */
 909               	/* stack size = 0 */
 910               	.L__stack_usage = 0
  88:spi.cpp       **** {
 912               	.LM37:
 913 0000 8150      		subi r24,lo8(-(-1))
 914 0002 8430      		cpi r24,lo8(4)
 915 0004 00F4      		brsh .L22
 916 0006 E82F      		mov r30,r24
 917 0008 F0E0      		ldi r31,lo8(0)
 918 000a EE0F      		lsl r30
 919 000c FF1F      		rol r31
 920 000e E050      		subi r30,lo8(-(CSWTCH.12))
 921 0010 F040      		sbci r31,hi8(-(CSWTCH.12))
 922 0012 8081      		ld r24,Z
 923 0014 9181      		ldd r25,Z+1
 924 0016 0895      		ret
 925               	.L22:
 926 0018 80E0      		ldi r24,lo8(0)
 927 001a 90E0      		ldi r25,hi8(0)
 110:spi.cpp       **** }
 929               	.LM38:
 930 001c 0895      		ret
 932               	.Lscope6:
 933               		.section	.text._ZN3SpiC2EP10SPI_struct,"ax",@progbits
 937               	.global	_ZN3SpiC2EP10SPI_struct
 939               	_ZN3SpiC2EP10SPI_struct:
 112:spi.cpp       **** Spi::Spi(SPI_t *_spi) :
 941               	.LM39:
 942               	.LFBB7:
 943 0000 CF93      		push r28
 944 0002 DF93      		push r29
 945               	/* prologue: function */
 946               	/* frame size = 0 */
 947               	/* stack size = 2 */
 948               	.L__stack_usage = 2
 949 0004 EC01      		movw r28,r24
 950 0006 CB01      		movw r24,r22
 951               	.LBB20:
 114:spi.cpp       ****         flags(0)
 953               	.LM40:
 954 0008 20E0      		ldi r18,lo8(_ZTV3Spi+4)
 955 000a 30E0      		ldi r19,hi8(_ZTV3Spi+4)
 956 000c 2883      		st Y,r18
 957 000e 3983      		std Y+1,r19
 958 0010 205F      		subi r18,lo8(-(16))
 959 0012 3F4F      		sbci r19,hi8(-(16))
 960 0014 2A83      		std Y+2,r18
 961 0016 3B83      		std Y+3,r19
 962 0018 6C83      		std Y+4,r22
 963 001a 7D83      		std Y+5,r23
 964 001c 1886      		std Y+8,__zero_reg__
 116:spi.cpp       ****         spi_ind = which_spi(spi);
 966               	.LM41:
 967 001e 0E94 0000 		call _ZN3Spi9which_spiEP10SPI_struct
 968 0022 90E0      		ldi r25,lo8(0)
 969 0024 8E83      		std Y+6,r24
 970 0026 9F83      		std Y+7,r25
 117:spi.cpp       ****         spi_list[spi_ind-1] = this;
 972               	.LM42:
 973 0028 FC01      		movw r30,r24
 974 002a EE0F      		lsl r30
 975 002c FF1F      		rol r31
 976 002e E050      		subi r30,lo8(-(_ZN3Spi8spi_listE-2))
 977 0030 F040      		sbci r31,hi8(-(_ZN3Spi8spi_listE-2))
 978 0032 C083      		st Z,r28
 979 0034 D183      		std Z+1,r29
 980               	/* epilogue start */
 981               	.LBE20:
 118:spi.cpp       **** }
 983               	.LM43:
 984 0036 DF91      		pop r29
 985 0038 CF91      		pop r28
 986 003a 0895      		ret
 988               	.Lscope7:
 989               		.section	.text._ZN3Spi5beginEhhh,"ax",@progbits
 995               	.global	_ZN3Spi5beginEhhh
 997               	_ZN3Spi5beginEhhh:
 129:spi.cpp       **** {
 999               	.LM44:
 1000               	.LFBB8:
 1001 0000 0F93      		push r16
 1002 0002 1F93      		push r17
 1003 0004 CF93      		push r28
 1004 0006 DF93      		push r29
 1005 0008 00D0      		rcall .
 1006 000a CDB7      		in r28,__SP_L__
 1007 000c DEB7      		in r29,__SP_H__
 1008               	/* prologue: function */
 1009               	/* frame size = 3 */
 1010               	/* stack size = 7 */
 1011               	.L__stack_usage = 7
 1012 000e 8C01      		movw r16,r24
 1013               	.LBB21:
 130:spi.cpp       ****         PORT_t *port = get_port(spi_ind);
 1015               	.LM45:
 1016 0010 DC01      		movw r26,r24
 1017 0012 1696      		adiw r26,6
 1018 0014 8C91      		ld r24,X
 1019 0016 2B83      		std Y+3,r18
 1020 0018 4A83      		std Y+2,r20
 1021 001a 6983      		std Y+1,r22
 1022 001c 0E94 0000 		call _ZN3Spi8get_portEc
 1023 0020 FC01      		movw r30,r24
 131:spi.cpp       ****         flags = SPI_MODE_MASTER;
 1025               	.LM46:
 1026 0022 D801      		movw r26,r16
 1027 0024 1896      		adiw r26,8
 1028 0026 1C92      		st X,__zero_reg__
 1029 0028 1897      		sbiw r26,8
 133:spi.cpp       ****         port->DIRSET = SPI_SS_PIN_bm | SPI_MOSI_PIN_bm | SPI_SCK_PIN_bm;
 1031               	.LM47:
 1032 002a 80EB      		ldi r24,lo8(-80)
 1033 002c 8183      		std Z+1,r24
 134:spi.cpp       ****         port->DIRCLR = SPI_MISO_PIN_bm;
 1035               	.LM48:
 1036 002e 80E4      		ldi r24,lo8(64)
 1037 0030 8283      		std Z+2,r24
 135:spi.cpp       ****         port->OUTCLR = SPI_SS_PIN_bm;
 1039               	.LM49:
 1040 0032 80E1      		ldi r24,lo8(16)
 1041 0034 8683      		std Z+6,r24
 136:spi.cpp       ****         port->OUTCLR = SPI_MOSI_PIN_bm | SPI_SCK_PIN_bm;
 1043               	.LM50:
 1044 0036 80EA      		ldi r24,lo8(-96)
 1045 0038 8683      		std Z+6,r24
 138:spi.cpp       ****         spi->CTRL = SPI_ENABLE_bm | SPI_MASTER_bm | mode | prescl | (clk2x ? SPI_CLK2X_bm : 0);
 1047               	.LM51:
 1048 003a 1496      		adiw r26,4
 1049 003c ED91      		ld r30,X+
 1050 003e FC91      		ld r31,X
 1051 0040 1597      		sbiw r26,4+1
 1052 0042 6981      		ldd r22,Y+1
 1053 0044 6065      		ori r22,lo8(80)
 1054 0046 4A81      		ldd r20,Y+2
 1055 0048 642B      		or r22,r20
 1056 004a 2B81      		ldd r18,Y+3
 1057 004c 2223      		tst r18
 1058 004e 01F0      		breq .L26
 1059 0050 80E8      		ldi r24,lo8(-128)
 1060 0052 00C0      		rjmp .L25
 1061               	.L26:
 1062 0054 80E0      		ldi r24,lo8(0)
 1063               	.L25:
 138:spi.cpp       ****         spi->CTRL = SPI_ENABLE_bm | SPI_MASTER_bm | mode | prescl | (clk2x ? SPI_CLK2X_bm : 0);
 1065               	.LM52:
 1066 0056 682B      		or r22,r24
 1067 0058 6083      		st Z,r22
 139:spi.cpp       ****         spi->INTCTRL = SPI_INTLVL_OFF_gc;
 1069               	.LM53:
 1070 005a D801      		movw r26,r16
 1071 005c 1496      		adiw r26,4
 1072 005e ED91      		ld r30,X+
 1073 0060 FC91      		ld r31,X
 1074 0062 1597      		sbiw r26,4+1
 1075 0064 1182      		std Z+1,__zero_reg__
 1076               	/* epilogue start */
 1077               	.LBE21:
 140:spi.cpp       **** }
 1079               	.LM54:
 1080 0066 2396      		adiw r28,3
 1081 0068 CDBF      		out __SP_L__,r28
 1082 006a DEBF      		out __SP_H__,r29
 1083 006c DF91      		pop r29
 1084 006e CF91      		pop r28
 1085 0070 1F91      		pop r17
 1086 0072 0F91      		pop r16
 1087 0074 0895      		ret
 1092               	.Lscope8:
 1093               		.section	.text._ZN3Spi3endEv,"ax",@progbits
 1096               	.global	_ZN3Spi3endEv
 1098               	_ZN3Spi3endEv:
 144:spi.cpp       **** {
 1100               	.LM55:
 1101               	.LFBB9:
 1102               	/* prologue: function */
 1103               	/* frame size = 0 */
 1104               	/* stack size = 0 */
 1105               	.L__stack_usage = 0
 145:spi.cpp       ****         spi->CTRL = 0;
 1107               	.LM56:
 1108 0000 DC01      		movw r26,r24
 1109 0002 1496      		adiw r26,4
 1110 0004 ED91      		ld r30,X+
 1111 0006 FC91      		ld r31,X
 1112 0008 1597      		sbiw r26,4+1
 1113 000a 1082      		st Z,__zero_reg__
 1114               	/* epilogue start */
 146:spi.cpp       **** }
 1116               	.LM57:
 1117 000c 0895      		ret
 1119               	.Lscope9:
 1120               		.section	.text._ZN3SpiD2Ev,"ax",@progbits
 1123               	.global	_ZN3SpiD2Ev
 1125               	_ZN3SpiD2Ev:
 121:spi.cpp       **** Spi::~Spi()
 1127               	.LM58:
 1128               	.LFBB10:
 1129 0000 CF93      		push r28
 1130 0002 DF93      		push r29
 1131               	/* prologue: function */
 1132               	/* frame size = 0 */
 1133               	/* stack size = 2 */
 1134               	.L__stack_usage = 2
 1135 0004 EC01      		movw r28,r24
 1136               	.LBB22:
 121:spi.cpp       **** Spi::~Spi()
 1138               	.LM59:
 1139 0006 80E0      		ldi r24,lo8(_ZTV3Spi+4)
 1140 0008 90E0      		ldi r25,hi8(_ZTV3Spi+4)
 1141 000a 8883      		st Y,r24
 1142 000c 9983      		std Y+1,r25
 1143 000e 4096      		adiw r24,16
 1144 0010 8A83      		std Y+2,r24
 1145 0012 9B83      		std Y+3,r25
 123:spi.cpp       ****         end();
 1147               	.LM60:
 1148 0014 CE01      		movw r24,r28
 1149 0016 0E94 0000 		call _ZN3Spi3endEv
 124:spi.cpp       ****         spi_list[spi_ind-1] = 0;
 1151               	.LM61:
 1152 001a EE81      		ldd r30,Y+6
 1153 001c FF81      		ldd r31,Y+7
 1154 001e EE0F      		lsl r30
 1155 0020 FF1F      		rol r31
 1156 0022 E050      		subi r30,lo8(-(_ZN3Spi8spi_listE-2))
 1157 0024 F040      		sbci r31,hi8(-(_ZN3Spi8spi_listE-2))
 1158 0026 1082      		st Z,__zero_reg__
 1159 0028 1182      		std Z+1,__zero_reg__
 1160               	/* epilogue start */
 1161               	.LBE22:
 125:spi.cpp       **** }
 1163               	.LM62:
 1164 002a DF91      		pop r29
 1165 002c CF91      		pop r28
 1166 002e 0895      		ret
 1168               	.Lscope10:
 1169               		.section	.text._ZN3Spi10transceiveEc,"ax",@progbits
 1173               	.global	_ZN3Spi10transceiveEc
 1175               	_ZN3Spi10transceiveEc:
 150:spi.cpp       **** {
 1177               	.LM63:
 1178               	.LFBB11:
 1179               	/* prologue: function */
 1180               	/* frame size = 0 */
 1181               	/* stack size = 0 */
 1182               	.L__stack_usage = 0
 1183 0000 FC01      		movw r30,r24
 1184               	.LBB23:
 153:spi.cpp       ****         saved_status = SREG;
 1186               	.LM64:
 1187 0002 8FB7      		in r24,__SREG__
 154:spi.cpp       ****         cli();
 1189               	.LM65:
 1190               	/* #APP */
 1191               	 ;  154 "spi.cpp" 1
 1192 0004 F894      		cli
 1193               	 ;  0 "" 2
 156:spi.cpp       ****         spi->DATA = c;
 1195               	.LM66:
 1196               	/* #NOAPP */
 1197 0006 A481      		ldd r26,Z+4
 1198 0008 B581      		ldd r27,Z+5
 1199 000a 1396      		adiw r26,3
 1200 000c 6C93      		st X,r22
 1201 000e 1397      		sbiw r26,3
 157:spi.cpp       ****         SPI_WAIT();
 1203               	.LM67:
 1204 0010 0480      		ldd __tmp_reg__,Z+4
 1205 0012 F581      		ldd r31,Z+5
 1206 0014 E02D      		mov r30,__tmp_reg__
 1207               	.L31:
 157:spi.cpp       ****         SPI_WAIT();
 1209               	.LM68:
 1210 0016 8281      		ldd r24,Z+2
 1211 0018 87FF      		sbrs r24,7
 1212 001a 00C0      		rjmp .L31
 158:spi.cpp       ****         return spi->DATA;
 1214               	.LM69:
 1215 001c 8381      		ldd r24,Z+3
 1216               	/* epilogue start */
 1217               	.LBE23:
 161:spi.cpp       **** }
 1219               	.LM70:
 1220 001e 0895      		ret
 1225               	.Lscope11:
 1226               		.section	.text._ZN3Spi3getEv,"ax",@progbits
 1229               	.global	_ZN3Spi3getEv
 1231               	_ZN3Spi3getEv:
 249:spi.cpp       **** {
 1233               	.LM71:
 1234               	.LFBB12:
 1235               	/* prologue: function */
 1236               	/* frame size = 0 */
 1237               	/* stack size = 0 */
 1238               	.L__stack_usage = 0
 250:spi.cpp       ****         return transceive(0);
 1240               	.LM72:
 1241 0000 60E0      		ldi r22,lo8(0)
 1242 0002 0E94 0000 		call _ZN3Spi10transceiveEc
 1243               	/* epilogue start */
 251:spi.cpp       **** }
 1245               	.LM73:
 1246 0006 0895      		ret
 1248               	.Lscope12:
 1249               		.section	.text._ZN3Spi10write_wordEj,"ax",@progbits
 1252               	.global	_ZN3Spi10write_wordEj
 1254               	_ZN3Spi10write_wordEj:
 179:spi.cpp       **** {
 1256               	.LM74:
 1257               	.LFBB13:
 1258               	/* prologue: function */
 1259               	/* frame size = 0 */
 1260               	/* stack size = 0 */
 1261               	.L__stack_usage = 0
 1262               	.LBB24:
 181:spi.cpp       ****         SPI_t *spi2 = spi;
 1264               	.LM75:
 1265 0000 DC01      		movw r26,r24
 1266 0002 1496      		adiw r26,4
 1267 0004 ED91      		ld r30,X+
 1268 0006 FC91      		ld r31,X
 1269 0008 1597      		sbiw r26,4+1
 193:spi.cpp       ****         saved_status = SREG;
 1271               	.LM76:
 1272 000a 8FB7      		in r24,__SREG__
 194:spi.cpp       ****         cli();
 1274               	.LM77:
 1275               	/* #APP */
 1276               	 ;  194 "spi.cpp" 1
 1277 000c F894      		cli
 1278               	 ;  0 "" 2
 198:spi.cpp       ****         spi2->DATA = word2.b.b1;
 1280               	.LM78:
 1281               	/* #NOAPP */
 1282 000e 7383      		std Z+3,r23
 199:spi.cpp       ****         asm volatile("nop\n\t"::);
 1284               	.LM79:
 1285               	/* #APP */
 1286               	 ;  199 "spi.cpp" 1
 1287 0010 0000      		nop
 1288               		
 1289               	 ;  0 "" 2
 1290               	/* #NOAPP */
 1291               	.L35:
 200:spi.cpp       ****         while (!(spi2->STATUS & SPI_IF_bm)) { };
 1293               	.LM80:
 1294 0012 9281      		ldd r25,Z+2
 1295 0014 97FF      		sbrs r25,7
 1296 0016 00C0      		rjmp .L35
 201:spi.cpp       ****         spi2->DATA = word2.b.b0;
 1298               	.LM81:
 1299 0018 6383      		std Z+3,r22
 202:spi.cpp       ****         asm volatile("nop\n\t"::);
 1301               	.LM82:
 1302               	/* #APP */
 1303               	 ;  202 "spi.cpp" 1
 1304 001a 0000      		nop
 1305               		
 1306               	 ;  0 "" 2
 1307               	/* #NOAPP */
 1308               	.L36:
 203:spi.cpp       ****         while (!(spi2->STATUS & SPI_IF_bm)) { };
 1310               	.LM83:
 1311 001c 9281      		ldd r25,Z+2
 1312 001e 97FF      		sbrs r25,7
 1313 0020 00C0      		rjmp .L36
 205:spi.cpp       ****         SREG = saved_status;
 1315               	.LM84:
 1316 0022 8FBF      		out __SREG__,r24
 1317               	/* epilogue start */
 1318               	.LBE24:
 206:spi.cpp       **** }
 1320               	.LM85:
 1321 0024 0895      		ret
 1327               	.Lscope13:
 1328               		.section	.text._ZN3Spi11write_dwordEm,"ax",@progbits
 1331               	.global	_ZN3Spi11write_dwordEm
 1333               	_ZN3Spi11write_dwordEm:
 210:spi.cpp       **** {
 1335               	.LM86:
 1336               	.LFBB14:
 1337               	/* prologue: function */
 1338               	/* frame size = 0 */
 1339               	/* stack size = 0 */
 1340               	.L__stack_usage = 0
 1341               	.LBB25:
 212:spi.cpp       ****         SPI_t *spi2 = spi;
 1343               	.LM87:
 1344 0000 DC01      		movw r26,r24
 1345 0002 1496      		adiw r26,4
 1346 0004 ED91      		ld r30,X+
 1347 0006 FC91      		ld r31,X
 1348 0008 1597      		sbiw r26,4+1
 226:spi.cpp       ****         saved_status = SREG;
 1350               	.LM88:
 1351 000a 8FB7      		in r24,__SREG__
 227:spi.cpp       ****         cli();
 1353               	.LM89:
 1354               	/* #APP */
 1355               	 ;  227 "spi.cpp" 1
 1356 000c F894      		cli
 1357               	 ;  0 "" 2
 231:spi.cpp       ****         spi2->DATA = dword2.b.b3;
 1359               	.LM90:
 1360               	/* #NOAPP */
 1361 000e 7383      		std Z+3,r23
 232:spi.cpp       ****         asm volatile("nop\n\t"::);
 1363               	.LM91:
 1364               	/* #APP */
 1365               	 ;  232 "spi.cpp" 1
 1366 0010 0000      		nop
 1367               		
 1368               	 ;  0 "" 2
 1369               	/* #NOAPP */
 1370               	.L40:
 233:spi.cpp       ****         while (!(spi2->STATUS & SPI_IF_bm)) { };
 1372               	.LM92:
 1373 0012 9281      		ldd r25,Z+2
 1374 0014 97FF      		sbrs r25,7
 1375 0016 00C0      		rjmp .L40
 234:spi.cpp       ****         spi2->DATA = dword2.b.b2;
 1377               	.LM93:
 1378 0018 6383      		std Z+3,r22
 235:spi.cpp       ****         asm volatile("nop\n\t"::);
 1380               	.LM94:
 1381               	/* #APP */
 1382               	 ;  235 "spi.cpp" 1
 1383 001a 0000      		nop
 1384               		
 1385               	 ;  0 "" 2
 1386               	/* #NOAPP */
 1387               	.L41:
 236:spi.cpp       ****         while (!(spi2->STATUS & SPI_IF_bm)) { };
 1389               	.LM95:
 1390 001c 9281      		ldd r25,Z+2
 1391 001e 97FF      		sbrs r25,7
 1392 0020 00C0      		rjmp .L41
 237:spi.cpp       ****         spi2->DATA = dword2.b.b1;
 1394               	.LM96:
 1395 0022 5383      		std Z+3,r21
 238:spi.cpp       ****         asm volatile("nop\n\t"::);
 1397               	.LM97:
 1398               	/* #APP */
 1399               	 ;  238 "spi.cpp" 1
 1400 0024 0000      		nop
 1401               		
 1402               	 ;  0 "" 2
 1403               	/* #NOAPP */
 1404               	.L42:
 239:spi.cpp       ****         while (!(spi2->STATUS & SPI_IF_bm)) { };
 1406               	.LM98:
 1407 0026 9281      		ldd r25,Z+2
 1408 0028 97FF      		sbrs r25,7
 1409 002a 00C0      		rjmp .L42
 240:spi.cpp       ****         spi2->DATA = dword2.b.b0;
 1411               	.LM99:
 1412 002c 4383      		std Z+3,r20
 241:spi.cpp       ****         asm volatile("nop\n\t"::);
 1414               	.LM100:
 1415               	/* #APP */
 1416               	 ;  241 "spi.cpp" 1
 1417 002e 0000      		nop
 1418               		
 1419               	 ;  0 "" 2
 1420               	/* #NOAPP */
 1421               	.L43:
 242:spi.cpp       ****         while (!(spi2->STATUS & SPI_IF_bm)) { };
 1423               	.LM101:
 1424 0030 9281      		ldd r25,Z+2
 1425 0032 97FF      		sbrs r25,7
 1426 0034 00C0      		rjmp .L43
 244:spi.cpp       ****         SREG = saved_status;
 1428               	.LM102:
 1429 0036 8FBF      		out __SREG__,r24
 1430               	/* epilogue start */
 1431               	.LBE25:
 245:spi.cpp       **** }
 1433               	.LM103:
 1434 0038 0895      		ret
 1440               	.Lscope14:
 1441               		.section	.text._ZN3Spi12setup_streamEP6__file,"ax",@progbits
 1445               	.global	_ZN3Spi12setup_streamEP6__file
 1447               	_ZN3Spi12setup_streamEP6__file:
 255:spi.cpp       **** {
 1449               	.LM104:
 1450               	.LFBB15:
 1451               	/* prologue: function */
 1452               	/* frame size = 0 */
 1453               	/* stack size = 0 */
 1454               	.L__stack_usage = 0
 1455 0000 FB01      		movw r30,r22
 256:spi.cpp       ****         fdev_setup_stream(stream, put, get, _FDEV_SETUP_RW);
 1457               	.LM105:
 1458 0002 20E0      		ldi r18,lo8(gs(_ZN3Spi3putEcP6__file))
 1459 0004 30E0      		ldi r19,hi8(gs(_ZN3Spi3putEcP6__file))
 1460 0006 2087      		std Z+8,r18
 1461 0008 3187      		std Z+9,r19
 1462 000a 20E0      		ldi r18,lo8(gs(_ZN3Spi3getEP6__file))
 1463 000c 30E0      		ldi r19,hi8(gs(_ZN3Spi3getEP6__file))
 1464 000e 2287      		std Z+10,r18
 1465 0010 3387      		std Z+11,r19
 1466 0012 23E0      		ldi r18,lo8(3)
 1467 0014 2383      		std Z+3,r18
 257:spi.cpp       ****         fdev_set_udata(stream, this);
 1469               	.LM106:
 1470 0016 8487      		std Z+12,r24
 1471 0018 9587      		std Z+13,r25
 1472               	/* epilogue start */
 258:spi.cpp       **** }
 1474               	.LM107:
 1475 001a 0895      		ret
 1477               	.Lscope15:
 1478               		.weak	_ZTV3Spi
 1479               		.section	.rodata._ZTV3Spi,"a",@progbits
 1482               	_ZTV3Spi:
 1483 0000 0000      		.word	0
 1484 0002 0000      		.word	0
 1485 0004 0000      		.word	gs(_ZN7IStream9availableEv)
 1486 0006 0000      		.word	gs(_ZN3Spi3getEv)
 1487 0008 0000      		.word	gs(_ZN7IStream4peekEj)
 1488 000a 0000      		.word	gs(_ZN7IStream11read_stringEPc)
 1489 000c 0000      		.word	gs(_ZN7IStream4readEPvj)
 1490 000e 0000      		.word	gs(_ZN3Spi3putEc)
 1491 0010 FEFF      		.word	-2
 1492 0012 0000      		.word	0
 1493 0014 0000      		.word	gs(_ZN7OStream4freeEv)
 1494 0016 0000      		.word	gs(_ZThn2_N3Spi3putEc)
 1495 0018 0000      		.word	gs(_ZN7OStream12write_stringEPKc)
 1496 001a 0000      		.word	gs(_ZN7OStream5writeEPKvj)
 1497               	.global	_ZN3Spi8spi_listE
 1498               		.section	.bss._ZN3Spi8spi_listE,"aw",@nobits
 1501               	_ZN3Spi8spi_listE:
 1502 0000 0000 0000 		.skip 8,0
 1502      0000 0000 
 1503               		.section	.rodata.CSWTCH.10,"a",@progbits
 1506               	CSWTCH.10:
 1507 0000 C008      		.word	2240
 1508 0002 C009      		.word	2496
 1509 0004 C00A      		.word	2752
 1510 0006 C00B      		.word	3008
 1511               		.section	.rodata.CSWTCH.12,"a",@progbits
 1514               	CSWTCH.12:
 1515 0000 4006      		.word	1600
 1516 0002 6006      		.word	1632
 1517 0004 8006      		.word	1664
 1518 0006 A006      		.word	1696
 1519               		.weak	_ZTV8IOStream
 1520               		.section	.rodata._ZTV8IOStream,"a",@progbits
 1523               	_ZTV8IOStream:
 1524 0000 0000      		.word	0
 1525 0002 0000      		.word	0
 1526 0004 0000      		.word	gs(_ZN7IStream9availableEv)
 1527 0006 0000      		.word	gs(_ZN7IStream3getEv)
 1528 0008 0000      		.word	gs(_ZN7IStream4peekEj)
 1529 000a 0000      		.word	gs(_ZN7IStream11read_stringEPc)
 1530 000c 0000      		.word	gs(_ZN7IStream4readEPvj)
 1531 000e FEFF      		.word	-2
 1532 0010 0000      		.word	0
 1533 0012 0000      		.word	gs(_ZN7OStream4freeEv)
 1534 0014 0000      		.word	gs(_ZN7OStream3putEc)
 1535 0016 0000      		.word	gs(_ZN7OStream12write_stringEPKc)
 1536 0018 0000      		.word	gs(_ZN7OStream5writeEPKvj)
 1538               		.set	.LTHUNK0,_ZN3Spi3putEc
 1539               	.global	_ZN3SpiC1EP10SPI_struct
 1540               		.set	_ZN3SpiC1EP10SPI_struct,_ZN3SpiC2EP10SPI_struct
 1541               	.global	_ZN3SpiD1Ev
 1542               		.set	_ZN3SpiD1Ev,_ZN3SpiD2Ev
 1543               		.text
 1545               	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 spi.cpp
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccODxLCt.s:2      *ABS*:0000003f __SREG__
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccODxLCt.s:3      *ABS*:0000003e __SP_H__
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccODxLCt.s:4      *ABS*:0000003d __SP_L__
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccODxLCt.s:5      *ABS*:00000034 __CCP__
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccODxLCt.s:6      *ABS*:00000000 __tmp_reg__
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccODxLCt.s:7      *ABS*:00000001 __zero_reg__
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccODxLCt.s:624    .text._ZThn2_N3Spi3putEc:00000000 _ZThn2_N3Spi3putEc
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccODxLCt.s:640    .text._ZN3Spi3putEc:00000000 _ZN3Spi3putEc
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccODxLCt.s:699    .text._ZN3Spi3putEcP6__file:00000000 _ZN3Spi3putEcP6__file
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccODxLCt.s:753    .text._ZN3Spi3getEP6__file:00000000 _ZN3Spi3getEP6__file
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccODxLCt.s:803    .text._ZN3Spi9which_spiEP10SPI_struct:00000000 _ZN3Spi9which_spiEP10SPI_struct
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccODxLCt.s:868    .text._ZN3Spi7get_spiEc:00000000 _ZN3Spi7get_spiEc
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccODxLCt.s:1506   .rodata.CSWTCH.10:00000000 CSWTCH.10
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccODxLCt.s:903    .text._ZN3Spi8get_portEc:00000000 _ZN3Spi8get_portEc
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccODxLCt.s:1514   .rodata.CSWTCH.12:00000000 CSWTCH.12
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccODxLCt.s:939    .text._ZN3SpiC2EP10SPI_struct:00000000 _ZN3SpiC2EP10SPI_struct
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccODxLCt.s:1482   .rodata._ZTV3Spi:00000000 _ZTV3Spi
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccODxLCt.s:1501   .bss._ZN3Spi8spi_listE:00000000 _ZN3Spi8spi_listE
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccODxLCt.s:997    .text._ZN3Spi5beginEhhh:00000000 _ZN3Spi5beginEhhh
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccODxLCt.s:1098   .text._ZN3Spi3endEv:00000000 _ZN3Spi3endEv
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccODxLCt.s:1125   .text._ZN3SpiD2Ev:00000000 _ZN3SpiD2Ev
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccODxLCt.s:1175   .text._ZN3Spi10transceiveEc:00000000 _ZN3Spi10transceiveEc
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccODxLCt.s:1231   .text._ZN3Spi3getEv:00000000 _ZN3Spi3getEv
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccODxLCt.s:1254   .text._ZN3Spi10write_wordEj:00000000 _ZN3Spi10write_wordEj
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccODxLCt.s:1333   .text._ZN3Spi11write_dwordEm:00000000 _ZN3Spi11write_dwordEm
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccODxLCt.s:1447   .text._ZN3Spi12setup_streamEP6__file:00000000 _ZN3Spi12setup_streamEP6__file
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccODxLCt.s:1523   .rodata._ZTV8IOStream:00000000 _ZTV8IOStream
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccODxLCt.s:939    .text._ZN3SpiC2EP10SPI_struct:00000000 _ZN3SpiC1EP10SPI_struct
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccODxLCt.s:1125   .text._ZN3SpiD2Ev:00000000 _ZN3SpiD1Ev

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
_ZN7IStream9availableEv
_ZN7IStream4peekEj
_ZN7IStream11read_stringEPc
_ZN7IStream4readEPvj
_ZN7OStream4freeEv
_ZN7OStream12write_stringEPKc
_ZN7OStream5writeEPKvj
_ZN7IStream3getEv
_ZN7OStream3putEc
