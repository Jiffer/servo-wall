   1               		.file	"main.cpp"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
 652               		.section	.text._Z41__static_initialization_and_destruction_0ii.constprop.2,"ax",@progbits
 656               	_Z41__static_initialization_and_destruction_0ii.constprop.2:
   1:main.cpp      **** #if PROGMEM_SIZE > 0x010000
   2:main.cpp      **** #define PGM_READ_BYTE pgm_read_byte_far
   3:main.cpp      **** #else
   4:main.cpp      **** #define PGM_READ_BYTE pgm_read_byte_near
   5:main.cpp      **** #endif
   6:main.cpp      **** 
   7:main.cpp      **** #include "main.h"
   8:main.cpp      **** #include "board_init.c"
   9:main.cpp      **** #include "sonar.c"
  10:main.cpp      **** #include "swarmfunctions.c"
  11:main.cpp      **** #include "communication.c"
  12:main.cpp      **** 
  13:main.cpp      **** // ============================================================================================
  14:main.cpp      **** // Timer tick ISR (1 kHz)
  15:main.cpp      **** // ============================================================================================
  16:main.cpp      **** ISR(TCC0_OVF_vect)
  17:main.cpp      **** {
  18:main.cpp      **** 	jiffies++;	// Timers
  19:main.cpp      **** 
  20:main.cpp      **** 	if(jiffies%100 == 0)
  21:main.cpp      **** 	{
  22:main.cpp      **** 		servo_motor_on   = true;
  23:main.cpp      **** 		sendmessage_fast = true;	
  24:main.cpp      **** 	}
  25:main.cpp      **** 
  26:main.cpp      **** 	if(jiffies%200 == 0)
  27:main.cpp      **** 	{
  28:main.cpp      **** 		use_sensor_data_on = true;
  29:main.cpp      **** 		cnt4sensor++;
  30:main.cpp      **** 		
  31:main.cpp      **** 		if(sonar_attached)
  32:main.cpp      **** 		{
  33:main.cpp      **** 			sensor_value = get_sonar_value();
  34:main.cpp      **** 			
  35:main.cpp      **** 			if(sensor_value != 0 && sensor_value < RANGE3)
  36:main.cpp      **** 			{
  37:main.cpp      **** 				sensor_value_now = sensor_value;
  38:main.cpp      **** 				if(dblchk) sum_dbl += sensor_value_now;
  39:main.cpp      **** 				if(trichk) sum_tri += sensor_value_now;
  40:main.cpp      **** 			}
  41:main.cpp      **** 			else {dblchk = false; trichk = false;}
  42:main.cpp      **** 
  43:main.cpp      **** 			if(cnt4sensor%2 == 0)
  44:main.cpp      **** 			{ 
  45:main.cpp      **** 				if(dblchk) 	sensor_value_dblchk = sum_dbl / 2;
  46:main.cpp      **** 				else 		sensor_value_dblchk = 0;
  47:main.cpp      **** 				sum_dbl = 0;
  48:main.cpp      **** 				dblchk = true;
  49:main.cpp      **** 			}
  50:main.cpp      **** 			
  51:main.cpp      **** 			if(cnt4sensor%3 == 0)
  52:main.cpp      **** 			{
  53:main.cpp      **** 				if(trichk) 	sensor_value_trichk = sum_tri / 3;
  54:main.cpp      **** 				else 		sensor_value_trichk = 0;
  55:main.cpp      **** 				sum_tri = 0;
  56:main.cpp      **** 				trichk = true;
  57:main.cpp      **** 			}
  58:main.cpp      **** 		}
  59:main.cpp      **** 			
  60:main.cpp      **** 		display_on = true;
  61:main.cpp      **** 
  62:main.cpp      **** 
  63:main.cpp      **** //INDICATOR//INDICATOR//INDICATOR//INDICATOR//INDICATOR//INDICATOR//INDICATOR//INDICATOR
  64:main.cpp      **** //INDICATOR//INDICATOR//INDICATOR//INDICATOR//INDICATOR//INDICATOR//INDICATOR//INDICATOR
  65:main.cpp      **** //INDICATOR//INDICATOR//INDICATOR//INDICATOR//INDICATOR//INDICATOR//INDICATOR//INDICATOR
  66:main.cpp      **** 
  67:main.cpp      **** //LED_PORT.OUTTGL = LED_USR_1_PIN_bm;	
  68:main.cpp      **** //LED_PORT.OUTTGL = LED_USR_2_PIN_bm;	
  69:main.cpp      **** 	}
  70:main.cpp      **** 	
  71:main.cpp      **** 	if(jiffies%1000 == 0)
  72:main.cpp      **** 	{		
  73:main.cpp      **** 		if(communication_on) sec_counter++;
  74:main.cpp      **** 		sync = true;		//synchro bit should be set every 1 sec
  75:main.cpp      **** 		rhythm_on = true;
  76:main.cpp      **** 		sensor_value_now = 0;
  77:main.cpp      **** 
  78:main.cpp      **** 		if(!communication_on) LED_PORT.OUT =  LED_USR_0_PIN_bm;
  79:main.cpp      **** 		if(communication_on)  LED_PORT.OUT = !LED_USR_0_PIN_bm;		
  80:main.cpp      **** 	}
  81:main.cpp      **** 	xgrid.process();
  82:main.cpp      **** }
  83:main.cpp      **** 
  84:main.cpp      **** void StageInit(int StageTime, const char str[])
  85:main.cpp      **** {
  86:main.cpp      **** 	if(sec_counter == StageTime && special)
  87:main.cpp      **** 	{
  88:main.cpp      **** 		send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, str);
  89:main.cpp      **** 		init_variables();
  90:main.cpp      **** 	}
  91:main.cpp      **** }
  92:main.cpp      **** 
  93:main.cpp      **** // ============================================================================================
  94:main.cpp      **** // MAIN FUNCTION
  95:main.cpp      **** // ============================================================================================
  96:main.cpp      **** int main(void)
  97:main.cpp      **** {
  98:main.cpp      **** 	float angle = 0;
  99:main.cpp      **** 	
 100:main.cpp      **** 	xgrid.rx_pkt = &rx_pkt;
 101:main.cpp      **** 
 102:main.cpp      **** 	_delay_ms(50);
 103:main.cpp      **** 
 104:main.cpp      **** 	// ========== INITIALIZATION ==========
 105:main.cpp      ****     init();				//for board
 106:main.cpp      **** 	init_servo();		//for servo
 107:main.cpp      **** 	init_variables();	//for program
 108:main.cpp      **** 	init_sonar();		//for sensor
 109:main.cpp      **** 
 110:main.cpp      **** 	fprintf_P(&usart_stream, PSTR("START (build number : %ld)\r\n"), (unsigned long) &__BUILD_NUMBER);
 111:main.cpp      **** 
 112:main.cpp      **** 	// ===== SONAR CHECK & Indicated by LED (attached/not = GREEN/RED) =====
 113:main.cpp      **** 	sonar_attached = check_sonar_attached();	//1:attached, 0:no
 114:main.cpp      **** 
 115:main.cpp      **** 	if(sonar_attached)	{LED_PORT.OUT = LED_USR_2_PIN_bm; _delay_ms(2000);}
 116:main.cpp      **** 	else				{LED_PORT.OUT = LED_USR_0_PIN_bm; _delay_ms(2000);}
 117:main.cpp      **** 
 118:main.cpp      **** 	// ===== Identification of Left Bottom Corner module =====
 119:main.cpp      **** 	// Special module is necessary 
 120:main.cpp      **** 	// 1) as a pace maker in "rhythm" mode,
 121:main.cpp      **** 	// 2) as a messanger of variable-reset signal 
 122:main.cpp      **** 	temp_time = jiffies + 2000;
 123:main.cpp      **** 	while(jiffies < temp_time)
 124:main.cpp      **** 	{
 125:main.cpp      **** 		// send dummy data
 126:main.cpp      **** 		if(sendmessage_fast)
 127:main.cpp      **** 		{
 128:main.cpp      **** 			send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, "@");
 129:main.cpp      **** 			sendmessage_fast = false;
 130:main.cpp      **** 		}
 131:main.cpp      **** 	}
 132:main.cpp      **** 	if(!connected[0] && connected[2] && connected[3] && !connected[4]) special = true;
 133:main.cpp      **** 	
 134:main.cpp      **** 
 135:main.cpp      **** 	// #################### MAIN LOOP ####################
 136:main.cpp      **** 
 137:main.cpp      **** 	while (1)
 138:main.cpp      **** 	{
 139:main.cpp      **** 		// ========== REBOOT PROCESS ==========
 140:main.cpp      **** 		if(reboot_on)
 141:main.cpp      **** 		{
 142:main.cpp      **** 			temp_time = jiffies + 3000;
 143:main.cpp      **** 			while(jiffies < temp_time){LED_PORT.OUTTGL = LED_USR_1_PIN_bm; _delay_ms(100);}
 144:main.cpp      **** 			xboot_reset();	
 145:main.cpp      **** 		}
 146:main.cpp      **** 			
 147:main.cpp      **** 		// ========== KEY INPUT ==========
 148:main.cpp      **** 		key_input();
 149:main.cpp      **** 
 150:main.cpp      **** 		// ========== CALCULATION ==========
 151:main.cpp      **** 		if(sonar_attached && !communication_on)
 152:main.cpp      **** 		{
 153:main.cpp      **** 			if(sensor_value_trichk > RANGE1 && sensor_value_trichk < RANGE3)
 154:main.cpp      **** 			{
 155:main.cpp      **** 				send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, "R");
 156:main.cpp      **** 				_delay_ms(100);
 157:main.cpp      **** 				send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, "1");
 158:main.cpp      **** 				communication_on = true;
 159:main.cpp      **** 			}
 160:main.cpp      **** 		}
 161:main.cpp      **** 
 162:main.cpp      **** 		if(communication_on)
 163:main.cpp      **** 		{
 164:main.cpp      **** 			// ========== SENSOR DATA ==========
 165:main.cpp      **** 			//SENSOR: works every 200 ms (See ISR() function)
 166:main.cpp      **** 
 167:main.cpp      **** 			// ========== SELECT BEHAVIOR ==========
 168:main.cpp      **** 			if(sendmessage_fast)
 169:main.cpp      **** 			{
 170:main.cpp      **** 				// SCENARIO
 171:main.cpp      **** 				// === STAGE 1: Ken's model
 172:main.cpp      **** 				if(sec_counter < STGtime2) 
 173:main.cpp      **** 					angle = 90 * Sync_Disorder(STGtime2);
 174:main.cpp      **** //angle = 90 * rhythm_control3();
 175:main.cpp      **** 
 176:main.cpp      **** 				// === STAGE 2: Rhythm 2 (Frequency Modulation)
 177:main.cpp      **** 				StageInit(STGtime2, "2");
 178:main.cpp      **** 				if(sec_counter > STGtime2 && sec_counter < STGtime3)
 179:main.cpp      **** 					angle = 45 * rhythm_control2();
 180:main.cpp      **** 
 181:main.cpp      **** 
 182:main.cpp      **** 				// === STAGE 3: Rhythm 1 (Amplitude Modulation)
 183:main.cpp      **** 				StageInit(STGtime3, "3");
 184:main.cpp      **** 				if(sec_counter > STGtime3 && sec_counter < STGtime4)
 185:main.cpp      **** 					angle = 90 * rhythm_control1();
 186:main.cpp      **** 
 187:main.cpp      **** 
 188:main.cpp      **** 				// === STAGE 4: Break
 189:main.cpp      **** 				StageInit(STGtime4, "4");
 190:main.cpp      **** 				if(sec_counter > STGtime4 && sec_counter < STGtime5)
 191:main.cpp      **** 					disable_servo();
 192:main.cpp      **** 
 193:main.cpp      **** 
 194:main.cpp      **** 				// === STAGE 5: Ken's model
 195:main.cpp      **** 				StageInit(STGtime5, "5");
 196:main.cpp      **** 				if(sec_counter > STGtime5 && sec_counter < STGtime6)
 197:main.cpp      **** 					angle = 75 * Sync_Disorder(STGtime6);
 198:main.cpp      **** 
 199:main.cpp      **** 
 200:main.cpp      **** 				// === STAGE 6: Column swing
 201:main.cpp      **** 				StageInit(STGtime6, "6");
 202:main.cpp      **** 				if(sec_counter > STGtime6 && sec_counter < STGtime7)
 203:main.cpp      **** 					angle = 90 * column();
 204:main.cpp      **** 
 205:main.cpp      **** 
 206:main.cpp      **** 				// === STAGE 7: Horizontal propagation
 207:main.cpp      **** 				StageInit(STGtime7, "7");
 208:main.cpp      **** 				if(sec_counter > STGtime7 && sec_counter < STGtime8)
 209:main.cpp      **** 					angle = 90 * plane_wave();
 210:main.cpp      **** 
 211:main.cpp      **** 
 212:main.cpp      **** 				// === STAGE 8: Avalanche
 213:main.cpp      **** 				StageInit(STGtime8, "8");
 214:main.cpp      **** 				if(sec_counter > STGtime8 && sec_counter < STGtime9)
 215:main.cpp      **** 					angle = 90 * avalanche();
 216:main.cpp      **** 
 217:main.cpp      **** 
 218:main.cpp      **** 				// === STAGE 8: Break
 219:main.cpp      **** 				StageInit(STGtime9, "9");
 220:main.cpp      **** 				if(sec_counter > STGtime9 && sec_counter < LASTtime)
 221:main.cpp      **** 					disable_servo();
 222:main.cpp      **** 
 223:main.cpp      **** 
 224:main.cpp      **** 				// === Waiting for next run
 225:main.cpp      **** 				StageInit(LASTtime, "0");
 226:main.cpp      **** 				if(sec_counter > LASTtime)
 227:main.cpp      **** 				{
 228:main.cpp      **** 					send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, "Z");
 229:main.cpp      **** 					temp_time = jiffies + 3000;
 230:main.cpp      **** 					while(jiffies < temp_time);
 231:main.cpp      **** 					xboot_reset();
 232:main.cpp      **** 				}
 233:main.cpp      **** 
 234:main.cpp      **** 				sendmessage_fast = false;
 235:main.cpp      **** 			}
 236:main.cpp      **** 		
 237:main.cpp      **** 			// ========== SERVO MOTOR CONTROL ==========
 238:main.cpp      **** 			if(servo_motor_on)
 239:main.cpp      **** 			{
 240:main.cpp      **** 				set_servo_position(angle);
 241:main.cpp      **** 				servo_motor_on = false;
 242:main.cpp      **** 			}
 243:main.cpp      **** 		}
 244:main.cpp      **** 
 245:main.cpp      **** 		// ==========  DISPLAY ==========
 246:main.cpp      **** 		if(display_on && display)
 247:main.cpp      **** 		{
 248:main.cpp      **** 			if(!communication_on) fprintf_P(&usart_stream, PSTR("NO COMM.\r\n"));
 249:main.cpp      **** 			else
 250:main.cpp      **** 			{
 251:main.cpp      **** 				if(sonar_attached)
 252:main.cpp      **** 				fprintf_P(&usart_stream, PSTR("sec cnt=%d SONAR=%d, dblchk=%d,trichk=%d\r\n"),sec_counter, sens
 253:main.cpp      **** 				else
 254:main.cpp      **** 				fprintf_P(&usart_stream, PSTR("sec cnt=%d\r\n"),sec_counter);
 255:main.cpp      **** 			}
 256:main.cpp      **** 			//fprintf_P(&usart_stream, PSTR("hd: %i.%i\n\r"), prt_flt3(agent1.hd));
 257:main.cpp      **** 			display_on = false;
 258:main.cpp      **** 		}
 259:main.cpp      **** 	}
 260:main.cpp      **** 	
 261:main.cpp      **** 	return 0;
 262:main.cpp      **** }
 658               	.LM0:
 659               	.LFBB1:
 660               	/* prologue: function */
 661               	/* frame size = 0 */
 662               	/* stack size = 0 */
 663               	.L__stack_usage = 0
 665               	.LM1:
 666 0000 8130      		cpi r24,1
 667 0002 9105      		cpc r25,__zero_reg__
 668 0004 01F4      		brne .L2
 670               	.Ltext1:
   1:board_init.c  **** // USART
   2:board_init.c  **** #define USART_TX_BUF_SIZE 64
   3:board_init.c  **** #define USART_RX_BUF_SIZE 64
   4:board_init.c  **** char usart_txbuf[USART_TX_BUF_SIZE];
   5:board_init.c  **** char usart_rxbuf[USART_RX_BUF_SIZE];
   6:board_init.c  **** CREATE_USART(usart, UART_DEVICE_PORT);
 672               	.LM2:
 673 0006 80E0      		ldi r24,lo8(usart)
 674 0008 90E0      		ldi r25,hi8(usart)
 675 000a 60EA      		ldi r22,lo8(2976)
 676 000c 7BE0      		ldi r23,hi8(2976)
 677 000e 0E94 0000 		call _ZN5UsartC1EP12USART_struct
   7:board_init.c  **** FILE usart_stream;
   8:board_init.c  **** 
   9:board_init.c  **** #define NODE_TX_BUF_SIZE 32
  10:board_init.c  **** #define NODE_RX_BUF_SIZE 64
  11:board_init.c  **** char usart_n0_txbuf[NODE_TX_BUF_SIZE];
  12:board_init.c  **** char usart_n0_rxbuf[NODE_RX_BUF_SIZE];
  13:board_init.c  **** CREATE_USART(usart_n0, USART_N0_DEVICE_PORT);
 679               	.LM3:
 680 0012 80E0      		ldi r24,lo8(usart_n0)
 681 0014 90E0      		ldi r25,hi8(usart_n0)
 682 0016 60EA      		ldi r22,lo8(2208)
 683 0018 78E0      		ldi r23,hi8(2208)
 684 001a 0E94 0000 		call _ZN5UsartC1EP12USART_struct
  14:board_init.c  **** char usart_n1_txbuf[NODE_TX_BUF_SIZE];
  15:board_init.c  **** char usart_n1_rxbuf[NODE_RX_BUF_SIZE];
  16:board_init.c  **** CREATE_USART(usart_n1, USART_N1_DEVICE_PORT);
 686               	.LM4:
 687 001e 80E0      		ldi r24,lo8(usart_n1)
 688 0020 90E0      		ldi r25,hi8(usart_n1)
 689 0022 60EB      		ldi r22,lo8(2224)
 690 0024 78E0      		ldi r23,hi8(2224)
 691 0026 0E94 0000 		call _ZN5UsartC1EP12USART_struct
  17:board_init.c  **** char usart_n2_txbuf[NODE_TX_BUF_SIZE];
  18:board_init.c  **** char usart_n2_rxbuf[NODE_RX_BUF_SIZE];
  19:board_init.c  **** CREATE_USART(usart_n2, USART_N2_DEVICE_PORT);
 693               	.LM5:
 694 002a 80E0      		ldi r24,lo8(usart_n2)
 695 002c 90E0      		ldi r25,hi8(usart_n2)
 696 002e 60EA      		ldi r22,lo8(2464)
 697 0030 79E0      		ldi r23,hi8(2464)
 698 0032 0E94 0000 		call _ZN5UsartC1EP12USART_struct
  20:board_init.c  **** char usart_n3_txbuf[NODE_TX_BUF_SIZE];
  21:board_init.c  **** char usart_n3_rxbuf[NODE_RX_BUF_SIZE];
  22:board_init.c  **** CREATE_USART(usart_n3, USART_N3_DEVICE_PORT);
 700               	.LM6:
 701 0036 80E0      		ldi r24,lo8(usart_n3)
 702 0038 90E0      		ldi r25,hi8(usart_n3)
 703 003a 60EB      		ldi r22,lo8(2480)
 704 003c 79E0      		ldi r23,hi8(2480)
 705 003e 0E94 0000 		call _ZN5UsartC1EP12USART_struct
  23:board_init.c  **** char usart_n4_txbuf[NODE_TX_BUF_SIZE];
  24:board_init.c  **** char usart_n4_rxbuf[NODE_RX_BUF_SIZE];
  25:board_init.c  **** CREATE_USART(usart_n4, USART_N4_DEVICE_PORT);
 707               	.LM7:
 708 0042 80E0      		ldi r24,lo8(usart_n4)
 709 0044 90E0      		ldi r25,hi8(usart_n4)
 710 0046 60EA      		ldi r22,lo8(2720)
 711 0048 7AE0      		ldi r23,hi8(2720)
 712 004a 0E94 0000 		call _ZN5UsartC1EP12USART_struct
  26:board_init.c  **** char usart_n5_txbuf[NODE_TX_BUF_SIZE];
  27:board_init.c  **** char usart_n5_rxbuf[NODE_RX_BUF_SIZE];
  28:board_init.c  **** CREATE_USART(usart_n5, USART_N5_DEVICE_PORT);
 714               	.LM8:
 715 004e 80E0      		ldi r24,lo8(usart_n5)
 716 0050 90E0      		ldi r25,hi8(usart_n5)
 717 0052 60EB      		ldi r22,lo8(2736)
 718 0054 7AE0      		ldi r23,hi8(2736)
 719 0056 0E94 0000 		call _ZN5UsartC1EP12USART_struct
  29:board_init.c  **** 
  30:board_init.c  **** Xgrid xgrid;
 721               	.LM9:
 722 005a 80E0      		ldi r24,lo8(xgrid)
 723 005c 90E0      		ldi r25,hi8(xgrid)
 724 005e 0E94 0000 		call _ZN5XgridC1Ev
  31:board_init.c  **** 
  32:board_init.c  **** // SPI
  33:board_init.c  **** 
  34:board_init.c  **** Spi spi(&SPI_DEV);
 726               	.LM10:
 727 0062 80E0      		ldi r24,lo8(spi)
 728 0064 90E0      		ldi r25,hi8(spi)
 729 0066 60EC      		ldi r22,lo8(2240)
 730 0068 78E0      		ldi r23,hi8(2240)
 731 006a 0E94 0000 		call _ZN3SpiC1EP10SPI_struct
  35:board_init.c  **** 
  36:board_init.c  **** // I2C
  37:board_init.c  **** 
  38:board_init.c  **** I2c i2c(&I2C_DEV);
 733               	.LM11:
 734 006e 80E0      		ldi r24,lo8(i2c)
 735 0070 90E0      		ldi r25,hi8(i2c)
 736 0072 60EA      		ldi r22,lo8(1184)
 737 0074 74E0      		ldi r23,hi8(1184)
 738 0076 0E94 0000 		call _ZN3I2cC1EP10TWI_struct
 739 007a 0895      		ret
 740               	.L2:
 741 007c 0097      		sbiw r24,0
 742 007e 01F4      		brne .L1
 743               	.LBB43:
 744               	.LBB44:
 745 0080 80E0      		ldi r24,lo8(i2c)
 746 0082 90E0      		ldi r25,hi8(i2c)
 747 0084 0E94 0000 		call _ZN3I2cD1Ev
  34:board_init.c  **** Spi spi(&SPI_DEV);
 749               	.LM12:
 750 0088 80E0      		ldi r24,lo8(spi)
 751 008a 90E0      		ldi r25,hi8(spi)
 752 008c 0E94 0000 		call _ZN3SpiD1Ev
  30:board_init.c  **** Xgrid xgrid;
 754               	.LM13:
 755 0090 80E0      		ldi r24,lo8(xgrid)
 756 0092 90E0      		ldi r25,hi8(xgrid)
 757 0094 0E94 0000 		call _ZN5XgridD1Ev
  28:board_init.c  **** CREATE_USART(usart_n5, USART_N5_DEVICE_PORT);
 759               	.LM14:
 760 0098 80E0      		ldi r24,lo8(usart_n5)
 761 009a 90E0      		ldi r25,hi8(usart_n5)
 762 009c 0E94 0000 		call _ZN5UsartD1Ev
  25:board_init.c  **** CREATE_USART(usart_n4, USART_N4_DEVICE_PORT);
 764               	.LM15:
 765 00a0 80E0      		ldi r24,lo8(usart_n4)
 766 00a2 90E0      		ldi r25,hi8(usart_n4)
 767 00a4 0E94 0000 		call _ZN5UsartD1Ev
  22:board_init.c  **** CREATE_USART(usart_n3, USART_N3_DEVICE_PORT);
 769               	.LM16:
 770 00a8 80E0      		ldi r24,lo8(usart_n3)
 771 00aa 90E0      		ldi r25,hi8(usart_n3)
 772 00ac 0E94 0000 		call _ZN5UsartD1Ev
  19:board_init.c  **** CREATE_USART(usart_n2, USART_N2_DEVICE_PORT);
 774               	.LM17:
 775 00b0 80E0      		ldi r24,lo8(usart_n2)
 776 00b2 90E0      		ldi r25,hi8(usart_n2)
 777 00b4 0E94 0000 		call _ZN5UsartD1Ev
  16:board_init.c  **** CREATE_USART(usart_n1, USART_N1_DEVICE_PORT);
 779               	.LM18:
 780 00b8 80E0      		ldi r24,lo8(usart_n1)
 781 00ba 90E0      		ldi r25,hi8(usart_n1)
 782 00bc 0E94 0000 		call _ZN5UsartD1Ev
  13:board_init.c  **** CREATE_USART(usart_n0, USART_N0_DEVICE_PORT);
 784               	.LM19:
 785 00c0 80E0      		ldi r24,lo8(usart_n0)
 786 00c2 90E0      		ldi r25,hi8(usart_n0)
 787 00c4 0E94 0000 		call _ZN5UsartD1Ev
   6:board_init.c  **** CREATE_USART(usart, UART_DEVICE_PORT);
 789               	.LM20:
 790 00c8 80E0      		ldi r24,lo8(usart)
 791 00ca 90E0      		ldi r25,hi8(usart)
 792 00cc 0E94 0000 		call _ZN5UsartD1Ev
 793               	.L1:
 794 00d0 0895      		ret
 795               	.LBE44:
 796               	.LBE43:
 798               	.Lscope1:
 799               		.section	.text.__vector_120,"ax",@progbits
 801               	.global	__vector_120
 803               	__vector_120:
   6:board_init.c  **** CREATE_USART(usart, UART_DEVICE_PORT);
 805               	.LM21:
 806               	.LFBB2:
 807 0000 1F92      		push r1
 808 0002 0F92      		push r0
 809 0004 0FB6      		in r0,__SREG__
 810 0006 0F92      		push r0
 811 0008 0BB6      		in r0,59-0
 812 000a 0F92      		push r0
 813 000c 1124      		clr __zero_reg__
 814 000e 2F93      		push r18
 815 0010 3F93      		push r19
 816 0012 4F93      		push r20
 817 0014 5F93      		push r21
 818 0016 6F93      		push r22
 819 0018 7F93      		push r23
 820 001a 8F93      		push r24
 821 001c 9F93      		push r25
 822 001e AF93      		push r26
 823 0020 BF93      		push r27
 824 0022 EF93      		push r30
 825 0024 FF93      		push r31
 826               	/* prologue: Signal */
 827               	/* frame size = 0 */
 828               	/* stack size = 16 */
 829               	.L__stack_usage = 16
   6:board_init.c  **** CREATE_USART(usart, UART_DEVICE_PORT);
 831               	.LM22:
 832 0026 80E0      		ldi r24,lo8(usart)
 833 0028 90E0      		ldi r25,hi8(usart)
 834 002a 0E94 0000 		call _ZN5Usart17handle_interruptsEPS_
 835               	/* epilogue start */
 836 002e FF91      		pop r31
 837 0030 EF91      		pop r30
 838 0032 BF91      		pop r27
 839 0034 AF91      		pop r26
 840 0036 9F91      		pop r25
 841 0038 8F91      		pop r24
 842 003a 7F91      		pop r23
 843 003c 6F91      		pop r22
 844 003e 5F91      		pop r21
 845 0040 4F91      		pop r20
 846 0042 3F91      		pop r19
 847 0044 2F91      		pop r18
 848 0046 0F90      		pop r0
 849 0048 0BBE      		out 59-0,r0
 850 004a 0F90      		pop r0
 851 004c 0FBE      		out __SREG__,r0
 852 004e 0F90      		pop r0
 853 0050 1F90      		pop r1
 854 0052 1895      		reti
 856               	.Lscope2:
 857               		.section	.text.__vector_26,"ax",@progbits
 859               	.global	__vector_26
 861               	__vector_26:
  13:board_init.c  **** CREATE_USART(usart_n0, USART_N0_DEVICE_PORT);
 863               	.LM23:
 864               	.LFBB3:
 865 0000 1F92      		push r1
 866 0002 0F92      		push r0
 867 0004 0FB6      		in r0,__SREG__
 868 0006 0F92      		push r0
 869 0008 0BB6      		in r0,59-0
 870 000a 0F92      		push r0
 871 000c 1124      		clr __zero_reg__
 872 000e 2F93      		push r18
 873 0010 3F93      		push r19
 874 0012 4F93      		push r20
 875 0014 5F93      		push r21
 876 0016 6F93      		push r22
 877 0018 7F93      		push r23
 878 001a 8F93      		push r24
 879 001c 9F93      		push r25
 880 001e AF93      		push r26
 881 0020 BF93      		push r27
 882 0022 EF93      		push r30
 883 0024 FF93      		push r31
 884               	/* prologue: Signal */
 885               	/* frame size = 0 */
 886               	/* stack size = 16 */
 887               	.L__stack_usage = 16
  13:board_init.c  **** CREATE_USART(usart_n0, USART_N0_DEVICE_PORT);
 889               	.LM24:
 890 0026 80E0      		ldi r24,lo8(usart_n0)
 891 0028 90E0      		ldi r25,hi8(usart_n0)
 892 002a 0E94 0000 		call _ZN5Usart17handle_interruptsEPS_
 893               	/* epilogue start */
 894 002e FF91      		pop r31
 895 0030 EF91      		pop r30
 896 0032 BF91      		pop r27
 897 0034 AF91      		pop r26
 898 0036 9F91      		pop r25
 899 0038 8F91      		pop r24
 900 003a 7F91      		pop r23
 901 003c 6F91      		pop r22
 902 003e 5F91      		pop r21
 903 0040 4F91      		pop r20
 904 0042 3F91      		pop r19
 905 0044 2F91      		pop r18
 906 0046 0F90      		pop r0
 907 0048 0BBE      		out 59-0,r0
 908 004a 0F90      		pop r0
 909 004c 0FBE      		out __SREG__,r0
 910 004e 0F90      		pop r0
 911 0050 1F90      		pop r1
 912 0052 1895      		reti
 914               	.Lscope3:
 915               		.section	.text.__vector_29,"ax",@progbits
 917               	.global	__vector_29
 919               	__vector_29:
  16:board_init.c  **** CREATE_USART(usart_n1, USART_N1_DEVICE_PORT);
 921               	.LM25:
 922               	.LFBB4:
 923 0000 1F92      		push r1
 924 0002 0F92      		push r0
 925 0004 0FB6      		in r0,__SREG__
 926 0006 0F92      		push r0
 927 0008 0BB6      		in r0,59-0
 928 000a 0F92      		push r0
 929 000c 1124      		clr __zero_reg__
 930 000e 2F93      		push r18
 931 0010 3F93      		push r19
 932 0012 4F93      		push r20
 933 0014 5F93      		push r21
 934 0016 6F93      		push r22
 935 0018 7F93      		push r23
 936 001a 8F93      		push r24
 937 001c 9F93      		push r25
 938 001e AF93      		push r26
 939 0020 BF93      		push r27
 940 0022 EF93      		push r30
 941 0024 FF93      		push r31
 942               	/* prologue: Signal */
 943               	/* frame size = 0 */
 944               	/* stack size = 16 */
 945               	.L__stack_usage = 16
  16:board_init.c  **** CREATE_USART(usart_n1, USART_N1_DEVICE_PORT);
 947               	.LM26:
 948 0026 80E0      		ldi r24,lo8(usart_n1)
 949 0028 90E0      		ldi r25,hi8(usart_n1)
 950 002a 0E94 0000 		call _ZN5Usart17handle_interruptsEPS_
 951               	/* epilogue start */
 952 002e FF91      		pop r31
 953 0030 EF91      		pop r30
 954 0032 BF91      		pop r27
 955 0034 AF91      		pop r26
 956 0036 9F91      		pop r25
 957 0038 8F91      		pop r24
 958 003a 7F91      		pop r23
 959 003c 6F91      		pop r22
 960 003e 5F91      		pop r21
 961 0040 4F91      		pop r20
 962 0042 3F91      		pop r19
 963 0044 2F91      		pop r18
 964 0046 0F90      		pop r0
 965 0048 0BBE      		out 59-0,r0
 966 004a 0F90      		pop r0
 967 004c 0FBE      		out __SREG__,r0
 968 004e 0F90      		pop r0
 969 0050 1F90      		pop r1
 970 0052 1895      		reti
 972               	.Lscope4:
 973               		.section	.text.__vector_89,"ax",@progbits
 975               	.global	__vector_89
 977               	__vector_89:
  19:board_init.c  **** CREATE_USART(usart_n2, USART_N2_DEVICE_PORT);
 979               	.LM27:
 980               	.LFBB5:
 981 0000 1F92      		push r1
 982 0002 0F92      		push r0
 983 0004 0FB6      		in r0,__SREG__
 984 0006 0F92      		push r0
 985 0008 0BB6      		in r0,59-0
 986 000a 0F92      		push r0
 987 000c 1124      		clr __zero_reg__
 988 000e 2F93      		push r18
 989 0010 3F93      		push r19
 990 0012 4F93      		push r20
 991 0014 5F93      		push r21
 992 0016 6F93      		push r22
 993 0018 7F93      		push r23
 994 001a 8F93      		push r24
 995 001c 9F93      		push r25
 996 001e AF93      		push r26
 997 0020 BF93      		push r27
 998 0022 EF93      		push r30
 999 0024 FF93      		push r31
 1000               	/* prologue: Signal */
 1001               	/* frame size = 0 */
 1002               	/* stack size = 16 */
 1003               	.L__stack_usage = 16
  19:board_init.c  **** CREATE_USART(usart_n2, USART_N2_DEVICE_PORT);
 1005               	.LM28:
 1006 0026 80E0      		ldi r24,lo8(usart_n2)
 1007 0028 90E0      		ldi r25,hi8(usart_n2)
 1008 002a 0E94 0000 		call _ZN5Usart17handle_interruptsEPS_
 1009               	/* epilogue start */
 1010 002e FF91      		pop r31
 1011 0030 EF91      		pop r30
 1012 0032 BF91      		pop r27
 1013 0034 AF91      		pop r26
 1014 0036 9F91      		pop r25
 1015 0038 8F91      		pop r24
 1016 003a 7F91      		pop r23
 1017 003c 6F91      		pop r22
 1018 003e 5F91      		pop r21
 1019 0040 4F91      		pop r20
 1020 0042 3F91      		pop r19
 1021 0044 2F91      		pop r18
 1022 0046 0F90      		pop r0
 1023 0048 0BBE      		out 59-0,r0
 1024 004a 0F90      		pop r0
 1025 004c 0FBE      		out __SREG__,r0
 1026 004e 0F90      		pop r0
 1027 0050 1F90      		pop r1
 1028 0052 1895      		reti
 1030               	.Lscope5:
 1031               		.section	.text.__vector_92,"ax",@progbits
 1033               	.global	__vector_92
 1035               	__vector_92:
  22:board_init.c  **** CREATE_USART(usart_n3, USART_N3_DEVICE_PORT);
 1037               	.LM29:
 1038               	.LFBB6:
 1039 0000 1F92      		push r1
 1040 0002 0F92      		push r0
 1041 0004 0FB6      		in r0,__SREG__
 1042 0006 0F92      		push r0
 1043 0008 0BB6      		in r0,59-0
 1044 000a 0F92      		push r0
 1045 000c 1124      		clr __zero_reg__
 1046 000e 2F93      		push r18
 1047 0010 3F93      		push r19
 1048 0012 4F93      		push r20
 1049 0014 5F93      		push r21
 1050 0016 6F93      		push r22
 1051 0018 7F93      		push r23
 1052 001a 8F93      		push r24
 1053 001c 9F93      		push r25
 1054 001e AF93      		push r26
 1055 0020 BF93      		push r27
 1056 0022 EF93      		push r30
 1057 0024 FF93      		push r31
 1058               	/* prologue: Signal */
 1059               	/* frame size = 0 */
 1060               	/* stack size = 16 */
 1061               	.L__stack_usage = 16
  22:board_init.c  **** CREATE_USART(usart_n3, USART_N3_DEVICE_PORT);
 1063               	.LM30:
 1064 0026 80E0      		ldi r24,lo8(usart_n3)
 1065 0028 90E0      		ldi r25,hi8(usart_n3)
 1066 002a 0E94 0000 		call _ZN5Usart17handle_interruptsEPS_
 1067               	/* epilogue start */
 1068 002e FF91      		pop r31
 1069 0030 EF91      		pop r30
 1070 0032 BF91      		pop r27
 1071 0034 AF91      		pop r26
 1072 0036 9F91      		pop r25
 1073 0038 8F91      		pop r24
 1074 003a 7F91      		pop r23
 1075 003c 6F91      		pop r22
 1076 003e 5F91      		pop r21
 1077 0040 4F91      		pop r20
 1078 0042 3F91      		pop r19
 1079 0044 2F91      		pop r18
 1080 0046 0F90      		pop r0
 1081 0048 0BBE      		out 59-0,r0
 1082 004a 0F90      		pop r0
 1083 004c 0FBE      		out __SREG__,r0
 1084 004e 0F90      		pop r0
 1085 0050 1F90      		pop r1
 1086 0052 1895      		reti
 1088               	.Lscope6:
 1089               		.section	.text.__vector_59,"ax",@progbits
 1091               	.global	__vector_59
 1093               	__vector_59:
  25:board_init.c  **** CREATE_USART(usart_n4, USART_N4_DEVICE_PORT);
 1095               	.LM31:
 1096               	.LFBB7:
 1097 0000 1F92      		push r1
 1098 0002 0F92      		push r0
 1099 0004 0FB6      		in r0,__SREG__
 1100 0006 0F92      		push r0
 1101 0008 0BB6      		in r0,59-0
 1102 000a 0F92      		push r0
 1103 000c 1124      		clr __zero_reg__
 1104 000e 2F93      		push r18
 1105 0010 3F93      		push r19
 1106 0012 4F93      		push r20
 1107 0014 5F93      		push r21
 1108 0016 6F93      		push r22
 1109 0018 7F93      		push r23
 1110 001a 8F93      		push r24
 1111 001c 9F93      		push r25
 1112 001e AF93      		push r26
 1113 0020 BF93      		push r27
 1114 0022 EF93      		push r30
 1115 0024 FF93      		push r31
 1116               	/* prologue: Signal */
 1117               	/* frame size = 0 */
 1118               	/* stack size = 16 */
 1119               	.L__stack_usage = 16
  25:board_init.c  **** CREATE_USART(usart_n4, USART_N4_DEVICE_PORT);
 1121               	.LM32:
 1122 0026 80E0      		ldi r24,lo8(usart_n4)
 1123 0028 90E0      		ldi r25,hi8(usart_n4)
 1124 002a 0E94 0000 		call _ZN5Usart17handle_interruptsEPS_
 1125               	/* epilogue start */
 1126 002e FF91      		pop r31
 1127 0030 EF91      		pop r30
 1128 0032 BF91      		pop r27
 1129 0034 AF91      		pop r26
 1130 0036 9F91      		pop r25
 1131 0038 8F91      		pop r24
 1132 003a 7F91      		pop r23
 1133 003c 6F91      		pop r22
 1134 003e 5F91      		pop r21
 1135 0040 4F91      		pop r20
 1136 0042 3F91      		pop r19
 1137 0044 2F91      		pop r18
 1138 0046 0F90      		pop r0
 1139 0048 0BBE      		out 59-0,r0
 1140 004a 0F90      		pop r0
 1141 004c 0FBE      		out __SREG__,r0
 1142 004e 0F90      		pop r0
 1143 0050 1F90      		pop r1
 1144 0052 1895      		reti
 1146               	.Lscope7:
 1147               		.section	.text.__vector_62,"ax",@progbits
 1149               	.global	__vector_62
 1151               	__vector_62:
  28:board_init.c  **** CREATE_USART(usart_n5, USART_N5_DEVICE_PORT);
 1153               	.LM33:
 1154               	.LFBB8:
 1155 0000 1F92      		push r1
 1156 0002 0F92      		push r0
 1157 0004 0FB6      		in r0,__SREG__
 1158 0006 0F92      		push r0
 1159 0008 0BB6      		in r0,59-0
 1160 000a 0F92      		push r0
 1161 000c 1124      		clr __zero_reg__
 1162 000e 2F93      		push r18
 1163 0010 3F93      		push r19
 1164 0012 4F93      		push r20
 1165 0014 5F93      		push r21
 1166 0016 6F93      		push r22
 1167 0018 7F93      		push r23
 1168 001a 8F93      		push r24
 1169 001c 9F93      		push r25
 1170 001e AF93      		push r26
 1171 0020 BF93      		push r27
 1172 0022 EF93      		push r30
 1173 0024 FF93      		push r31
 1174               	/* prologue: Signal */
 1175               	/* frame size = 0 */
 1176               	/* stack size = 16 */
 1177               	.L__stack_usage = 16
  28:board_init.c  **** CREATE_USART(usart_n5, USART_N5_DEVICE_PORT);
 1179               	.LM34:
 1180 0026 80E0      		ldi r24,lo8(usart_n5)
 1181 0028 90E0      		ldi r25,hi8(usart_n5)
 1182 002a 0E94 0000 		call _ZN5Usart17handle_interruptsEPS_
 1183               	/* epilogue start */
 1184 002e FF91      		pop r31
 1185 0030 EF91      		pop r30
 1186 0032 BF91      		pop r27
 1187 0034 AF91      		pop r26
 1188 0036 9F91      		pop r25
 1189 0038 8F91      		pop r24
 1190 003a 7F91      		pop r23
 1191 003c 6F91      		pop r22
 1192 003e 5F91      		pop r21
 1193 0040 4F91      		pop r20
 1194 0042 3F91      		pop r19
 1195 0044 2F91      		pop r18
 1196 0046 0F90      		pop r0
 1197 0048 0BBE      		out 59-0,r0
 1198 004a 0F90      		pop r0
 1199 004c 0FBE      		out __SREG__,r0
 1200 004e 0F90      		pop r0
 1201 0050 1F90      		pop r1
 1202 0052 1895      		reti
 1204               	.Lscope8:
 1205               		.section	.text._Z22SP_ReadCalibrationByteh,"ax",@progbits
 1208               	.global	_Z22SP_ReadCalibrationByteh
 1210               	_Z22SP_ReadCalibrationByteh:
  39:board_init.c  **** 
  40:board_init.c  **** // Timer
  41:board_init.c  **** 
  42:board_init.c  **** // Production signature row access
  43:board_init.c  **** uint8_t SP_ReadCalibrationByte( uint8_t index )
  44:board_init.c  **** {
 1212               	.LM35:
 1213               	.LFBB9:
 1214               	/* prologue: function */
 1215               	/* frame size = 0 */
 1216               	/* stack size = 0 */
 1217               	.L__stack_usage = 0
 1218               	.LBB45:
  45:board_init.c  ****         uint8_t result;
  46:board_init.c  ****         NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
 1220               	.LM36:
 1221 0000 AAEC      		ldi r26,lo8(458)
 1222 0002 B1E0      		ldi r27,hi8(458)
 1223 0004 92E0      		ldi r25,lo8(2)
 1224 0006 9C93      		st X,r25
 1225               	.LBB46:
  47:board_init.c  ****         result = pgm_read_byte(index);
 1227               	.LM37:
 1228 0008 E82F      		mov r30,r24
 1229 000a F0E0      		ldi r31,lo8(0)
 1230               	/* #APP */
 1231               	 ;  47 "board_init.c" 1
 1232 000c 8491      		lpm r24, Z
 1233               		
 1234               	 ;  0 "" 2
 1235               	/* #NOAPP */
 1236               	.LBE46:
  48:board_init.c  ****         NVM_CMD = NVM_CMD_NO_OPERATION_gc;
 1238               	.LM38:
 1239 000e 1C92      		st X,__zero_reg__
 1240               	/* epilogue start */
 1241               	.LBE45:
  49:board_init.c  ****         return result;
  50:board_init.c  **** }
 1243               	.LM39:
 1244 0010 0895      		ret
 1246               	.Lscope9:
 1247               		.section	.text._Z17SP_ReadUserSigRowh,"ax",@progbits
 1250               	.global	_Z17SP_ReadUserSigRowh
 1252               	_Z17SP_ReadUserSigRowh:
  51:board_init.c  **** 
  52:board_init.c  **** // User signature row access
  53:board_init.c  **** uint8_t SP_ReadUserSigRow( uint8_t index )
  54:board_init.c  **** {
 1254               	.LM40:
 1255               	.LFBB10:
 1256               	/* prologue: function */
 1257               	/* frame size = 0 */
 1258               	/* stack size = 0 */
 1259               	.L__stack_usage = 0
 1260               	.LBB47:
  55:board_init.c  ****         uint8_t result;
  56:board_init.c  ****         NVM_CMD = NVM_CMD_READ_USER_SIG_ROW_gc;
 1262               	.LM41:
 1263 0000 AAEC      		ldi r26,lo8(458)
 1264 0002 B1E0      		ldi r27,hi8(458)
 1265 0004 91E0      		ldi r25,lo8(1)
 1266 0006 9C93      		st X,r25
 1267               	.LBB48:
  57:board_init.c  ****         result = pgm_read_byte(index);
 1269               	.LM42:
 1270 0008 E82F      		mov r30,r24
 1271 000a F0E0      		ldi r31,lo8(0)
 1272               	/* #APP */
 1273               	 ;  57 "board_init.c" 1
 1274 000c 8491      		lpm r24, Z
 1275               		
 1276               	 ;  0 "" 2
 1277               	/* #NOAPP */
 1278               	.LBE48:
  58:board_init.c  ****         NVM_CMD = NVM_CMD_NO_OPERATION_gc;
 1280               	.LM43:
 1281 000e 1C92      		st X,__zero_reg__
 1282               	/* epilogue start */
 1283               	.LBE47:
  59:board_init.c  ****         return result;
  60:board_init.c  **** }
 1285               	.LM44:
 1286 0010 0895      		ret
 1288               	.Lscope10:
 1289               		.section	.text._Z4initv,"ax",@progbits
 1291               	.global	_Z4initv
 1293               	_Z4initv:
  61:board_init.c  **** 
  62:board_init.c  **** void init(void)
  63:board_init.c  **** {
 1295               	.LM45:
 1296               	.LFBB11:
 1297 0000 0F93      		push r16
 1298 0002 1F93      		push r17
 1299 0004 CF93      		push r28
 1300 0006 DF93      		push r29
 1301               	/* prologue: function */
 1302               	/* frame size = 0 */
 1303               	/* stack size = 4 */
 1304               	.L__stack_usage = 4
  64:board_init.c  ****         // clock
  65:board_init.c  ****         OSC.CTRL |= OSC_RC32MEN_bm; // turn on 32 MHz oscillator
 1306               	.LM46:
 1307 0008 8091 5000 		lds r24,80
 1308 000c 8260      		ori r24,lo8(2)
 1309 000e 8093 5000 		sts 80,r24
 1310               	.L14:
  66:board_init.c  ****         while (!(OSC.STATUS & OSC_RC32MRDY_bm)) { }; // wait for it to start
 1312               	.LM47:
 1313 0012 8091 5100 		lds r24,81
 1314 0016 81FF      		sbrs r24,1
 1315 0018 00C0      		rjmp .L14
  67:board_init.c  ****         CCP = CCP_IOREG_gc;
 1317               	.LM48:
 1318 001a 88ED      		ldi r24,lo8(-40)
 1319 001c 84BF      		out 52-0,r24
  68:board_init.c  ****         CLK.CTRL = CLK_SCLKSEL_RC32M_gc; // switch osc
 1321               	.LM49:
 1322 001e C1E0      		ldi r28,lo8(1)
 1323 0020 C093 4000 		sts 64,r28
  69:board_init.c  ****         DFLLRC32M.CTRL = DFLL_ENABLE_bm; // turn on DFLL
 1325               	.LM50:
 1326 0024 C093 6000 		sts 96,r28
  70:board_init.c  ****         
  71:board_init.c  ****         // disable JTAG
  72:board_init.c  ****         CCP = CCP_IOREG_gc;
 1328               	.LM51:
 1329 0028 84BF      		out 52-0,r24
  73:board_init.c  ****         MCU.MCUCR = 1;
 1331               	.LM52:
 1332 002a E0E9      		ldi r30,lo8(144)
 1333 002c F0E0      		ldi r31,hi8(144)
 1334 002e C683      		std Z+6,r28
  74:board_init.c  ****         
  75:board_init.c  ****         // Init pins
  76:board_init.c  ****         LED_PORT.OUTCLR = LED_USR_0_PIN_bm | LED_USR_1_PIN_bm | LED_USR_2_PIN_bm;
 1336               	.LM53:
 1337 0030 E0E2      		ldi r30,lo8(1568)
 1338 0032 F6E0      		ldi r31,hi8(1568)
 1339 0034 8BE0      		ldi r24,lo8(11)
 1340 0036 8683      		std Z+6,r24
  77:board_init.c  ****         LED_PORT.DIRSET = LED_USR_0_PIN_bm | LED_USR_1_PIN_bm | LED_USR_2_PIN_bm;
 1342               	.LM54:
 1343 0038 8183      		std Z+1,r24
  78:board_init.c  ****         
  79:board_init.c  ****         // Init buttons
  80:board_init.c  ****         BTN_PORT.DIRCLR = BTN_PIN_bm;
 1345               	.LM55:
 1346 003a E0EA      		ldi r30,lo8(1696)
 1347 003c F6E0      		ldi r31,hi8(1696)
 1348 003e C283      		std Z+2,r28
  81:board_init.c  ****         
  82:board_init.c  ****         // UARTs
  83:board_init.c  ****         usart.set_tx_buffer(usart_txbuf, USART_TX_BUF_SIZE);
 1350               	.LM56:
 1351 0040 80E0      		ldi r24,lo8(usart)
 1352 0042 90E0      		ldi r25,hi8(usart)
 1353 0044 60E0      		ldi r22,lo8(usart_txbuf)
 1354 0046 70E0      		ldi r23,hi8(usart_txbuf)
 1355 0048 40E4      		ldi r20,lo8(64)
 1356 004a 50E0      		ldi r21,hi8(64)
 1357 004c 0E94 0000 		call _ZN5Usart13set_tx_bufferEPcj
  84:board_init.c  ****         usart.set_rx_buffer(usart_rxbuf, USART_RX_BUF_SIZE);
 1359               	.LM57:
 1360 0050 80E0      		ldi r24,lo8(usart)
 1361 0052 90E0      		ldi r25,hi8(usart)
 1362 0054 60E0      		ldi r22,lo8(usart_rxbuf)
 1363 0056 70E0      		ldi r23,hi8(usart_rxbuf)
 1364 0058 40E4      		ldi r20,lo8(64)
 1365 005a 50E0      		ldi r21,hi8(64)
 1366 005c 0E94 0000 		call _ZN5Usart13set_rx_bufferEPcj
  85:board_init.c  ****         usart.begin(UART_BAUD_RATE);
 1368               	.LM58:
 1369 0060 80E0      		ldi r24,lo8(usart)
 1370 0062 90E0      		ldi r25,hi8(usart)
 1371 0064 40E0      		ldi r20,lo8(115200)
 1372 0066 52EC      		ldi r21,hi8(115200)
 1373 0068 61E0      		ldi r22,hlo8(115200)
 1374 006a 70E0      		ldi r23,hhi8(115200)
 1375 006c 20E0      		ldi r18,lo8(0)
 1376 006e 01E0      		ldi r16,lo8(1)
 1377 0070 0E94 0000 		call _ZN5Usart5beginElcc
  86:board_init.c  ****         usart.setup_stream(&usart_stream);
 1379               	.LM59:
 1380 0074 80E0      		ldi r24,lo8(usart)
 1381 0076 90E0      		ldi r25,hi8(usart)
 1382 0078 60E0      		ldi r22,lo8(usart_stream)
 1383 007a 70E0      		ldi r23,hi8(usart_stream)
 1384 007c 0E94 0000 		call _ZN5Usart12setup_streamEP6__file
  87:board_init.c  ****         
  88:board_init.c  ****         usart_n0.set_tx_buffer(usart_n0_txbuf, NODE_TX_BUF_SIZE);
 1386               	.LM60:
 1387 0080 80E0      		ldi r24,lo8(usart_n0)
 1388 0082 90E0      		ldi r25,hi8(usart_n0)
 1389 0084 60E0      		ldi r22,lo8(usart_n0_txbuf)
 1390 0086 70E0      		ldi r23,hi8(usart_n0_txbuf)
 1391 0088 40E2      		ldi r20,lo8(32)
 1392 008a 50E0      		ldi r21,hi8(32)
 1393 008c 0E94 0000 		call _ZN5Usart13set_tx_bufferEPcj
  89:board_init.c  ****         usart_n0.set_rx_buffer(usart_n0_rxbuf, NODE_RX_BUF_SIZE);
 1395               	.LM61:
 1396 0090 80E0      		ldi r24,lo8(usart_n0)
 1397 0092 90E0      		ldi r25,hi8(usart_n0)
 1398 0094 60E0      		ldi r22,lo8(usart_n0_rxbuf)
 1399 0096 70E0      		ldi r23,hi8(usart_n0_rxbuf)
 1400 0098 40E4      		ldi r20,lo8(64)
 1401 009a 50E0      		ldi r21,hi8(64)
 1402 009c 0E94 0000 		call _ZN5Usart13set_rx_bufferEPcj
  90:board_init.c  ****         usart_n0.begin(NODE_BAUD_RATE);
 1404               	.LM62:
 1405 00a0 80E0      		ldi r24,lo8(usart_n0)
 1406 00a2 90E0      		ldi r25,hi8(usart_n0)
 1407 00a4 40E0      		ldi r20,lo8(115200)
 1408 00a6 52EC      		ldi r21,hi8(115200)
 1409 00a8 61E0      		ldi r22,hlo8(115200)
 1410 00aa 70E0      		ldi r23,hhi8(115200)
 1411 00ac 20E0      		ldi r18,lo8(0)
 1412 00ae 0E94 0000 		call _ZN5Usart5beginElcc
  91:board_init.c  ****         xgrid.add_node(&usart_n0);
 1414               	.LM63:
 1415 00b2 80E0      		ldi r24,lo8(xgrid)
 1416 00b4 90E0      		ldi r25,hi8(xgrid)
 1417 00b6 60E0      		ldi r22,lo8(usart_n0)
 1418 00b8 70E0      		ldi r23,hi8(usart_n0)
 1419 00ba 0E94 0000 		call _ZN5Xgrid8add_nodeEP8IOStream
  92:board_init.c  ****         
  93:board_init.c  **** 		usart_n1.set_tx_buffer(usart_n1_txbuf, NODE_TX_BUF_SIZE);
 1421               	.LM64:
 1422 00be 80E0      		ldi r24,lo8(usart_n1)
 1423 00c0 90E0      		ldi r25,hi8(usart_n1)
 1424 00c2 60E0      		ldi r22,lo8(usart_n1_txbuf)
 1425 00c4 70E0      		ldi r23,hi8(usart_n1_txbuf)
 1426 00c6 40E2      		ldi r20,lo8(32)
 1427 00c8 50E0      		ldi r21,hi8(32)
 1428 00ca 0E94 0000 		call _ZN5Usart13set_tx_bufferEPcj
  94:board_init.c  ****         usart_n1.set_rx_buffer(usart_n1_rxbuf, NODE_RX_BUF_SIZE);
 1430               	.LM65:
 1431 00ce 80E0      		ldi r24,lo8(usart_n1)
 1432 00d0 90E0      		ldi r25,hi8(usart_n1)
 1433 00d2 60E0      		ldi r22,lo8(usart_n1_rxbuf)
 1434 00d4 70E0      		ldi r23,hi8(usart_n1_rxbuf)
 1435 00d6 40E4      		ldi r20,lo8(64)
 1436 00d8 50E0      		ldi r21,hi8(64)
 1437 00da 0E94 0000 		call _ZN5Usart13set_rx_bufferEPcj
  95:board_init.c  ****         usart_n1.begin(NODE_BAUD_RATE);
 1439               	.LM66:
 1440 00de 80E0      		ldi r24,lo8(usart_n1)
 1441 00e0 90E0      		ldi r25,hi8(usart_n1)
 1442 00e2 40E0      		ldi r20,lo8(115200)
 1443 00e4 52EC      		ldi r21,hi8(115200)
 1444 00e6 61E0      		ldi r22,hlo8(115200)
 1445 00e8 70E0      		ldi r23,hhi8(115200)
 1446 00ea 20E0      		ldi r18,lo8(0)
 1447 00ec 0E94 0000 		call _ZN5Usart5beginElcc
  96:board_init.c  ****         xgrid.add_node(&usart_n1);
 1449               	.LM67:
 1450 00f0 80E0      		ldi r24,lo8(xgrid)
 1451 00f2 90E0      		ldi r25,hi8(xgrid)
 1452 00f4 60E0      		ldi r22,lo8(usart_n1)
 1453 00f6 70E0      		ldi r23,hi8(usart_n1)
 1454 00f8 0E94 0000 		call _ZN5Xgrid8add_nodeEP8IOStream
  97:board_init.c  ****         
  98:board_init.c  **** 		usart_n2.set_tx_buffer(usart_n2_txbuf, NODE_TX_BUF_SIZE);
 1456               	.LM68:
 1457 00fc 80E0      		ldi r24,lo8(usart_n2)
 1458 00fe 90E0      		ldi r25,hi8(usart_n2)
 1459 0100 60E0      		ldi r22,lo8(usart_n2_txbuf)
 1460 0102 70E0      		ldi r23,hi8(usart_n2_txbuf)
 1461 0104 40E2      		ldi r20,lo8(32)
 1462 0106 50E0      		ldi r21,hi8(32)
 1463 0108 0E94 0000 		call _ZN5Usart13set_tx_bufferEPcj
  99:board_init.c  ****         usart_n2.set_rx_buffer(usart_n2_rxbuf, NODE_RX_BUF_SIZE);
 1465               	.LM69:
 1466 010c 80E0      		ldi r24,lo8(usart_n2)
 1467 010e 90E0      		ldi r25,hi8(usart_n2)
 1468 0110 60E0      		ldi r22,lo8(usart_n2_rxbuf)
 1469 0112 70E0      		ldi r23,hi8(usart_n2_rxbuf)
 1470 0114 40E4      		ldi r20,lo8(64)
 1471 0116 50E0      		ldi r21,hi8(64)
 1472 0118 0E94 0000 		call _ZN5Usart13set_rx_bufferEPcj
 100:board_init.c  ****         usart_n2.begin(NODE_BAUD_RATE);
 1474               	.LM70:
 1475 011c 80E0      		ldi r24,lo8(usart_n2)
 1476 011e 90E0      		ldi r25,hi8(usart_n2)
 1477 0120 40E0      		ldi r20,lo8(115200)
 1478 0122 52EC      		ldi r21,hi8(115200)
 1479 0124 61E0      		ldi r22,hlo8(115200)
 1480 0126 70E0      		ldi r23,hhi8(115200)
 1481 0128 20E0      		ldi r18,lo8(0)
 1482 012a 0E94 0000 		call _ZN5Usart5beginElcc
 101:board_init.c  ****         xgrid.add_node(&usart_n2);
 1484               	.LM71:
 1485 012e 80E0      		ldi r24,lo8(xgrid)
 1486 0130 90E0      		ldi r25,hi8(xgrid)
 1487 0132 60E0      		ldi r22,lo8(usart_n2)
 1488 0134 70E0      		ldi r23,hi8(usart_n2)
 1489 0136 0E94 0000 		call _ZN5Xgrid8add_nodeEP8IOStream
 102:board_init.c  ****         
 103:board_init.c  **** 		usart_n3.set_tx_buffer(usart_n3_txbuf, NODE_TX_BUF_SIZE);
 1491               	.LM72:
 1492 013a 80E0      		ldi r24,lo8(usart_n3)
 1493 013c 90E0      		ldi r25,hi8(usart_n3)
 1494 013e 60E0      		ldi r22,lo8(usart_n3_txbuf)
 1495 0140 70E0      		ldi r23,hi8(usart_n3_txbuf)
 1496 0142 40E2      		ldi r20,lo8(32)
 1497 0144 50E0      		ldi r21,hi8(32)
 1498 0146 0E94 0000 		call _ZN5Usart13set_tx_bufferEPcj
 104:board_init.c  ****         usart_n3.set_rx_buffer(usart_n3_rxbuf, NODE_RX_BUF_SIZE);
 1500               	.LM73:
 1501 014a 80E0      		ldi r24,lo8(usart_n3)
 1502 014c 90E0      		ldi r25,hi8(usart_n3)
 1503 014e 60E0      		ldi r22,lo8(usart_n3_rxbuf)
 1504 0150 70E0      		ldi r23,hi8(usart_n3_rxbuf)
 1505 0152 40E4      		ldi r20,lo8(64)
 1506 0154 50E0      		ldi r21,hi8(64)
 1507 0156 0E94 0000 		call _ZN5Usart13set_rx_bufferEPcj
 105:board_init.c  ****         usart_n3.begin(NODE_BAUD_RATE);
 1509               	.LM74:
 1510 015a 80E0      		ldi r24,lo8(usart_n3)
 1511 015c 90E0      		ldi r25,hi8(usart_n3)
 1512 015e 40E0      		ldi r20,lo8(115200)
 1513 0160 52EC      		ldi r21,hi8(115200)
 1514 0162 61E0      		ldi r22,hlo8(115200)
 1515 0164 70E0      		ldi r23,hhi8(115200)
 1516 0166 20E0      		ldi r18,lo8(0)
 1517 0168 0E94 0000 		call _ZN5Usart5beginElcc
 106:board_init.c  ****         xgrid.add_node(&usart_n3);
 1519               	.LM75:
 1520 016c 80E0      		ldi r24,lo8(xgrid)
 1521 016e 90E0      		ldi r25,hi8(xgrid)
 1522 0170 60E0      		ldi r22,lo8(usart_n3)
 1523 0172 70E0      		ldi r23,hi8(usart_n3)
 1524 0174 0E94 0000 		call _ZN5Xgrid8add_nodeEP8IOStream
 107:board_init.c  ****         
 108:board_init.c  **** 		usart_n4.set_tx_buffer(usart_n4_txbuf, NODE_TX_BUF_SIZE);
 1526               	.LM76:
 1527 0178 80E0      		ldi r24,lo8(usart_n4)
 1528 017a 90E0      		ldi r25,hi8(usart_n4)
 1529 017c 60E0      		ldi r22,lo8(usart_n4_txbuf)
 1530 017e 70E0      		ldi r23,hi8(usart_n4_txbuf)
 1531 0180 40E2      		ldi r20,lo8(32)
 1532 0182 50E0      		ldi r21,hi8(32)
 1533 0184 0E94 0000 		call _ZN5Usart13set_tx_bufferEPcj
 109:board_init.c  ****         usart_n4.set_rx_buffer(usart_n4_rxbuf, NODE_RX_BUF_SIZE);
 1535               	.LM77:
 1536 0188 80E0      		ldi r24,lo8(usart_n4)
 1537 018a 90E0      		ldi r25,hi8(usart_n4)
 1538 018c 60E0      		ldi r22,lo8(usart_n4_rxbuf)
 1539 018e 70E0      		ldi r23,hi8(usart_n4_rxbuf)
 1540 0190 40E4      		ldi r20,lo8(64)
 1541 0192 50E0      		ldi r21,hi8(64)
 1542 0194 0E94 0000 		call _ZN5Usart13set_rx_bufferEPcj
 110:board_init.c  ****         usart_n4.begin(NODE_BAUD_RATE);
 1544               	.LM78:
 1545 0198 80E0      		ldi r24,lo8(usart_n4)
 1546 019a 90E0      		ldi r25,hi8(usart_n4)
 1547 019c 40E0      		ldi r20,lo8(115200)
 1548 019e 52EC      		ldi r21,hi8(115200)
 1549 01a0 61E0      		ldi r22,hlo8(115200)
 1550 01a2 70E0      		ldi r23,hhi8(115200)
 1551 01a4 20E0      		ldi r18,lo8(0)
 1552 01a6 0E94 0000 		call _ZN5Usart5beginElcc
 111:board_init.c  ****         xgrid.add_node(&usart_n4);
 1554               	.LM79:
 1555 01aa 80E0      		ldi r24,lo8(xgrid)
 1556 01ac 90E0      		ldi r25,hi8(xgrid)
 1557 01ae 60E0      		ldi r22,lo8(usart_n4)
 1558 01b0 70E0      		ldi r23,hi8(usart_n4)
 1559 01b2 0E94 0000 		call _ZN5Xgrid8add_nodeEP8IOStream
 112:board_init.c  ****         
 113:board_init.c  **** 		usart_n5.set_tx_buffer(usart_n5_txbuf, NODE_TX_BUF_SIZE);
 1561               	.LM80:
 1562 01b6 80E0      		ldi r24,lo8(usart_n5)
 1563 01b8 90E0      		ldi r25,hi8(usart_n5)
 1564 01ba 60E0      		ldi r22,lo8(usart_n5_txbuf)
 1565 01bc 70E0      		ldi r23,hi8(usart_n5_txbuf)
 1566 01be 40E2      		ldi r20,lo8(32)
 1567 01c0 50E0      		ldi r21,hi8(32)
 1568 01c2 0E94 0000 		call _ZN5Usart13set_tx_bufferEPcj
 114:board_init.c  ****         usart_n5.set_rx_buffer(usart_n5_rxbuf, NODE_RX_BUF_SIZE);
 1570               	.LM81:
 1571 01c6 80E0      		ldi r24,lo8(usart_n5)
 1572 01c8 90E0      		ldi r25,hi8(usart_n5)
 1573 01ca 60E0      		ldi r22,lo8(usart_n5_rxbuf)
 1574 01cc 70E0      		ldi r23,hi8(usart_n5_rxbuf)
 1575 01ce 40E4      		ldi r20,lo8(64)
 1576 01d0 50E0      		ldi r21,hi8(64)
 1577 01d2 0E94 0000 		call _ZN5Usart13set_rx_bufferEPcj
 115:board_init.c  ****         usart_n5.begin(NODE_BAUD_RATE);
 1579               	.LM82:
 1580 01d6 80E0      		ldi r24,lo8(usart_n5)
 1581 01d8 90E0      		ldi r25,hi8(usart_n5)
 1582 01da 40E0      		ldi r20,lo8(115200)
 1583 01dc 52EC      		ldi r21,hi8(115200)
 1584 01de 61E0      		ldi r22,hlo8(115200)
 1585 01e0 70E0      		ldi r23,hhi8(115200)
 1586 01e2 20E0      		ldi r18,lo8(0)
 1587 01e4 0E94 0000 		call _ZN5Usart5beginElcc
 116:board_init.c  ****         xgrid.add_node(&usart_n5);
 1589               	.LM83:
 1590 01e8 80E0      		ldi r24,lo8(xgrid)
 1591 01ea 90E0      		ldi r25,hi8(xgrid)
 1592 01ec 60E0      		ldi r22,lo8(usart_n5)
 1593 01ee 70E0      		ldi r23,hi8(usart_n5)
 1594 01f0 0E94 0000 		call _ZN5Xgrid8add_nodeEP8IOStream
 117:board_init.c  ****         
 118:board_init.c  ****         // ADC setup
 119:board_init.c  ****         ADCA.CTRLA = ADC_DMASEL_OFF_gc | ADC_FLUSH_bm;
 1596               	.LM84:
 1597 01f4 00E0      		ldi r16,lo8(512)
 1598 01f6 12E0      		ldi r17,hi8(512)
 1599 01f8 82E0      		ldi r24,lo8(2)
 1600 01fa 8093 0002 		sts 512,r24
 120:board_init.c  ****         ADCA.CTRLB = ADC_CONMODE_bm | ADC_RESOLUTION_12BIT_gc;
 1602               	.LM85:
 1603 01fe D0E1      		ldi r29,lo8(16)
 1604 0200 F801      		movw r30,r16
 1605 0202 D183      		std Z+1,r29
 121:board_init.c  ****         ADCA.REFCTRL = ADC_REFSEL_INT1V_gc | ADC_BANDGAP_bm;
 1607               	.LM86:
 1608 0204 8283      		std Z+2,r24
 122:board_init.c  ****         ADCA.EVCTRL = ADC_SWEEP_0123_gc | ADC_EVSEL_0123_gc | ADC_EVACT_SWEEP_gc;
 1610               	.LM87:
 1611 0206 85EC      		ldi r24,lo8(-59)
 1612 0208 8383      		std Z+3,r24
 123:board_init.c  ****         ADCA.PRESCALER = ADC_PRESCALER_DIV64_gc;
 1614               	.LM88:
 1615 020a 84E0      		ldi r24,lo8(4)
 1616 020c 8483      		std Z+4,r24
 124:board_init.c  ****         ADCA.CALL = SP_ReadCalibrationByte(PROD_SIGNATURES_START + ADCACAL0_offset);
 1618               	.LM89:
 1619 020e 80E2      		ldi r24,lo8(32)
 1620 0210 0E94 0000 		call _Z22SP_ReadCalibrationByteh
 1621 0214 F801      		movw r30,r16
 1622 0216 8487      		std Z+12,r24
 125:board_init.c  ****         ADCA.CALH = SP_ReadCalibrationByte(PROD_SIGNATURES_START + ADCACAL1_offset);
 1624               	.LM90:
 1625 0218 81E2      		ldi r24,lo8(33)
 1626 021a 0E94 0000 		call _Z22SP_ReadCalibrationByteh
 1627 021e F801      		movw r30,r16
 1628 0220 8587      		std Z+13,r24
 126:board_init.c  ****         
 127:board_init.c  ****         ADCA.CH0.CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_SINGLEENDED_gc;
 1630               	.LM91:
 1631 0222 C0A3      		std Z+32,r28
 128:board_init.c  ****         ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN1_gc;
 1633               	.LM92:
 1634 0224 88E0      		ldi r24,lo8(8)
 1635 0226 81A3      		std Z+33,r24
 129:board_init.c  ****         ADCA.CH0.INTCTRL = ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_LO_gc;
 1637               	.LM93:
 1638 0228 C2A3      		std Z+34,r28
 130:board_init.c  ****         ADCA.CH0.RES = 0;
 1640               	.LM94:
 1641 022a 14A2      		std Z+36,__zero_reg__
 1642 022c 15A2      		std Z+37,__zero_reg__
 131:board_init.c  ****         
 132:board_init.c  ****         ADCA.CH1.CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_SINGLEENDED_gc;
 1644               	.LM95:
 1645 022e C0A7      		std Z+40,r28
 133:board_init.c  ****         ADCA.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN2_gc;
 1647               	.LM96:
 1648 0230 D1A7      		std Z+41,r29
 134:board_init.c  ****         ADCA.CH1.INTCTRL = ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_LO_gc;
 1650               	.LM97:
 1651 0232 C2A7      		std Z+42,r28
 135:board_init.c  ****         ADCA.CH1.RES = 0;
 1653               	.LM98:
 1654 0234 14A6      		std Z+44,__zero_reg__
 1655 0236 15A6      		std Z+45,__zero_reg__
 136:board_init.c  ****         
 137:board_init.c  ****         ADCA.CH2.CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_SINGLEENDED_gc;
 1657               	.LM99:
 1658 0238 C0AB      		std Z+48,r28
 138:board_init.c  ****         ADCA.CH2.MUXCTRL = ADC_CH_MUXPOS_PIN3_gc;
 1660               	.LM100:
 1661 023a 88E1      		ldi r24,lo8(24)
 1662 023c 81AB      		std Z+49,r24
 139:board_init.c  ****         ADCA.CH2.INTCTRL = ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_LO_gc;
 1664               	.LM101:
 1665 023e C2AB      		std Z+50,r28
 140:board_init.c  ****         ADCA.CH2.RES = 0;
 1667               	.LM102:
 1668 0240 14AA      		std Z+52,__zero_reg__
 1669 0242 15AA      		std Z+53,__zero_reg__
 141:board_init.c  ****         
 142:board_init.c  ****         ADCA.CH3.CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_SINGLEENDED_gc;
 1671               	.LM103:
 1672 0244 C0AF      		std Z+56,r28
 143:board_init.c  ****         ADCA.CH3.MUXCTRL = ADC_CH_MUXPOS_PIN4_gc;
 1674               	.LM104:
 1675 0246 80E2      		ldi r24,lo8(32)
 1676 0248 81AF      		std Z+57,r24
 144:board_init.c  ****         ADCA.CH3.INTCTRL = ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_LO_gc;
 1678               	.LM105:
 1679 024a C2AF      		std Z+58,r28
 145:board_init.c  ****         ADCA.CH3.RES = 0;
 1681               	.LM106:
 1682 024c 14AE      		std Z+60,__zero_reg__
 1683 024e 15AE      		std Z+61,__zero_reg__
 146:board_init.c  ****         
 147:board_init.c  ****         //ADCA.CTRLA |= ADC_ENABLE_bm;
 148:board_init.c  ****         //ADCA.CTRLB |= ADC_FREERUN_bm;
 149:board_init.c  ****         
 150:board_init.c  ****         // TCC
 151:board_init.c  ****         TCC0.CTRLA = TC_CLKSEL_DIV256_gc;
 1685               	.LM107:
 1686 0250 E0E0      		ldi r30,lo8(2048)
 1687 0252 F8E0      		ldi r31,hi8(2048)
 1688 0254 86E0      		ldi r24,lo8(6)
 1689 0256 8093 0008 		sts 2048,r24
 152:board_init.c  ****         TCC0.CTRLB = 0;
 1691               	.LM108:
 1692 025a 1182      		std Z+1,__zero_reg__
 153:board_init.c  ****         TCC0.CTRLC = 0;
 1694               	.LM109:
 1695 025c 1282      		std Z+2,__zero_reg__
 154:board_init.c  ****         TCC0.CTRLD = 0;
 1697               	.LM110:
 1698 025e 1382      		std Z+3,__zero_reg__
 155:board_init.c  ****         TCC0.CTRLE = 0;
 1700               	.LM111:
 1701 0260 1482      		std Z+4,__zero_reg__
 156:board_init.c  ****         TCC0.INTCTRLA = TC_OVFINTLVL_LO_gc;
 1703               	.LM112:
 1704 0262 C683      		std Z+6,r28
 157:board_init.c  ****         TCC0.INTCTRLB = 0;
 1706               	.LM113:
 1707 0264 1782      		std Z+7,__zero_reg__
 158:board_init.c  ****         TCC0.CNT = 0;
 1709               	.LM114:
 1710 0266 10A2      		std Z+32,__zero_reg__
 1711 0268 11A2      		std Z+33,__zero_reg__
 159:board_init.c  ****         TCC0.PER = 125;
 1713               	.LM115:
 1714 026a 8DE7      		ldi r24,lo8(125)
 1715 026c 90E0      		ldi r25,hi8(125)
 1716 026e 86A3      		std Z+38,r24
 1717 0270 97A3      		std Z+39,r25
 160:board_init.c  ****         
 161:board_init.c  ****         // ADC trigger on TCC0 overflow
 162:board_init.c  ****         //EVSYS.CH0MUX = EVSYS_CHMUX_TCC0_OVF_gc;
 163:board_init.c  ****         //EVSYS.CH0CTRL = 0;
 164:board_init.c  ****         
 165:board_init.c  ****         // I2C
 166:board_init.c  ****         //i2c.begin(400000L);
 167:board_init.c  ****         
 168:board_init.c  ****         // SPI
 169:board_init.c  ****         //spi.begin(SPI_MODE_2_gc, SPI_PRESCALER_DIV4_gc, 1);
 170:board_init.c  ****         
 171:board_init.c  ****         // CS line
 172:board_init.c  ****         //SPI_CS_PORT.OUTSET = SPI_CS_DEV_PIN_bm;
 173:board_init.c  ****         //SPI_CS_PORT.DIRSET = SPI_CS_DEV_PIN_bm;
 174:board_init.c  ****         
 175:board_init.c  ****         // Interrupts
 176:board_init.c  ****         PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm;
 1719               	.LM116:
 1720 0272 83E0      		ldi r24,lo8(3)
 1721 0274 E0EA      		ldi r30,lo8(160)
 1722 0276 F0E0      		ldi r31,hi8(160)
 1723 0278 8283      		std Z+2,r24
 177:board_init.c  ****         
 178:board_init.c  ****         sei();
 1725               	.LM117:
 1726               	/* #APP */
 1727               	 ;  178 "board_init.c" 1
 1728 027a 7894      		sei
 1729               	 ;  0 "" 2
 1730               	/* epilogue start */
 179:board_init.c  **** }...
 1732               	.LM118:
 1733               	/* #NOAPP */
 1734 027c DF91      		pop r29
 1735 027e CF91      		pop r28
 1736 0280 1F91      		pop r17
 1737 0282 0F91      		pop r16
 1738 0284 0895      		ret
 1740               	.Lscope11:
 1741               		.section	.text._Z10init_sonarv,"ax",@progbits
 1743               	.global	_Z10init_sonarv
 1745               	_Z10init_sonarv:
 1747               	.Ltext2:
   1:sonar.c       **** // sonar.c
   2:sonar.c       **** 
   3:sonar.c       **** #include "avr_compiler.h"
   4:sonar.c       **** #include "sonar.h"
   5:sonar.c       **** 
   6:sonar.c       **** void init_sonar()
   7:sonar.c       **** {
 1749               	.LM119:
 1750               	.LFBB12:
 1751               	/* prologue: function */
 1752               	/* frame size = 0 */
 1753               	/* stack size = 0 */
 1754               	.L__stack_usage = 0
   8:sonar.c       **** 	//**** INITIALIZE I2C ****************************************************************************
   9:sonar.c       **** 	
  10:sonar.c       **** 	//	SDA is connected to portCpin0 (Pin 16)	-> this 3.3v signal is then fed through logic level conv
  11:sonar.c       **** 	//	SCL is connected to portCpin1 (Pin 17)	-> this 3.3v signal is then fed through logic level conv
  12:sonar.c       **** 	//	SDA3 is connected to portEpin0 (Pin 36)
  13:sonar.c       **** 	//	SCL3 is connected to portEpin1 (Pin 37)
  14:sonar.c       **** 	
  15:sonar.c       **** 	/* comments on I2C protocol **		
  16:sonar.c       **** 										Ref: www.robot-electronics.co.uk/acatalog/I2C_Tutorial.html
  17:sonar.c       **** 										Ref: Fairchild Application Note 794		google:fan794.pdf
  18:sonar.c       **** 	
  19:sonar.c       **** 		Common I2C bus speeds are:			(arbitrarily low clock frequencies are also allowed)
  20:sonar.c       **** 			10 kbit/s "low-speed mode"
  21:sonar.c       **** 			100 kbit/s "standard mode"
  22:sonar.c       **** 			400 kbit/s "fast mode" (recent revision of I2C protocol, slave device may not support this) 
  23:sonar.c       **** 	
  24:sonar.c       **** 		I2C Data is transferred in sequences of 8 bits.
  25:sonar.c       **** 		The bits are placed on the SDA line starting with the MSB (Most Significant Bit).
  26:sonar.c       **** 		For every 8 bits transferred, the device receiving the data sends back an acknowledge (ACK) bit, 
  27:sonar.c       **** 		so there are actually 9 SCL clock pulses to transfer each 8 bit byte of data.
  28:sonar.c       **** 		If the receiving device sends back a low ACK bit (0), then it has received the data and is ready 
  29:sonar.c       **** 		If the receiving device sends back a high ACK bit (1), then it is indicating it cannot accept any
  30:sonar.c       **** 		and the master should terminate the transfer by sending a stop sequence.  
  31:sonar.c       **** 	
  32:sonar.c       **** 		I2C Device Addressing:
  33:sonar.c       **** 			Virtually all I2C addresses are 7 bits (10 bits rare). 
  34:sonar.c       **** 			It is possible to have up to 128 devices on the I2C bus, since a 7-bit number can be from 0 to 1
  35:sonar.c       **** 			When sending out the 7-bit address, the protocol is to still always send 8 bits.
  36:sonar.c       **** 			The extra bit is used to inform the slave if the master is writing to it (0) or reading from it 
  37:sonar.c       **** 			The 7-bit address is placed in the upper 7 bits of the byte and the Read/Write (R/W) bit is in t
  38:sonar.c       **** 			
  39:sonar.c       **** 			SDA:	A6		A5		A4		A3		A2		A1		A0		R/W		ACK		(address bits)
  40:sonar.c       **** 			SCL:	1		2		3		4		5		6		7		8		9		(clock pulses)
  41:sonar.c       **** 	
  42:sonar.c       **** 			The placement of the 7 bit address in the upper 7 bits of the byte may be a source of confusion.
  43:sonar.c       **** 			(e.g. to write to address 21, you must actually send out 42 which is 21 moved over by 1 bit)
  44:sonar.c       **** 			The following alternative description may also be used: 
  45:sonar.c       **** 				I2C bus addresses are 8 bit addresses, with even addresses as write only, 
  46:sonar.c       **** 				and the odd addresses are the read address for the same device.
  47:sonar.c       **** 				
  48:sonar.c       **** 		The I2C Software Protocol:
  49:sonar.c       **** 			The first thing that will happen is that the master will send out a start sequence.
  50:sonar.c       **** 			This will alert all the slave devices on the bus that a transaction is starting and they should 
  51:sonar.c       **** 			Next the master will send out the device address.
  52:sonar.c       **** 			The slave that matches this address will continue with the transaction, any others will ignore t
  53:sonar.c       **** 			Having addressed the slave device the master must now send out the internal location or register
  54:sonar.c       **** 			This number is obviously dependent on what the slave actually is and how many internal registers
  55:sonar.c       **** 			Some very simple devices do not have any, but most do.
  56:sonar.c       **** 			Having sent the I2C address and the internal register address the master can now send the data b
  57:sonar.c       **** 			The master can continue to send data bytes to the slave and these will normally be placed in the
  58:sonar.c       **** 			The slave should automatically increment the internal register address after each byte. 
  59:sonar.c       **** 			When the master has finished writing all data to the slave, it sends a stop sequence which compl
  60:sonar.c       **** 
  61:sonar.c       **** 				TO WRITE TO A SLAVE:
  62:sonar.c       **** 				1. Send a start sequence
  63:sonar.c       **** 				2. Send the I2C address of the slave with the R/W bit low (0)
  64:sonar.c       **** 				3. Send the internal register number you want to write to
  65:sonar.c       **** 				4. Send the data byte
  66:sonar.c       **** 				5. [Optionally, send any further data bytes]
  67:sonar.c       **** 				6. Send the stop sequence.	
  68:sonar.c       **** 	
  69:sonar.c       **** 			Before reading data from the slave device, you must tell it which of its internal addresses you 
  70:sonar.c       **** 			So a read of the slave actually starts off by writing to it. 
  71:sonar.c       **** 			This is the same as when you want to write to it: You send the start sequence, 
  72:sonar.c       **** 			the I2C address of the slave with the R/W bit low (0), and the internal register number you want
  73:sonar.c       **** 			Now you send another start sequence (sometimes called a restart) and the I2C address again - thi
  74:sonar.c       **** 			You then read as many data bytes as you wish and terminate the transaction with a stop sequence.
  75:sonar.c       **** 			
  76:sonar.c       **** 				TO READ FROM A SLAVE:
  77:sonar.c       **** 				1. Send a start sequence
  78:sonar.c       **** 				2. Send the I2C address of the slave with the R/W bit low (0)
  79:sonar.c       **** 				3. Send the internal register number you want to read from
  80:sonar.c       **** 				4. Send a start sequence again (repeated start)
  81:sonar.c       **** 				5. Send the I2C address of the slave with the R/W bit high (1)
  82:sonar.c       **** 				6. Read data byte
  83:sonar.c       **** 				7. Send the stop sequence.
  84:sonar.c       **** 
  85:sonar.c       **** 
  86:sonar.c       **** 	*/ // End comments on I2C protocol
  87:sonar.c       **** 	
  88:sonar.c       **** 	//TWIC.MASTER.CTRLB |= TWI_MASTER_SMEN_bm;   // Enable smart mode
  89:sonar.c       **** 	//TWIC.MASTER.CTRLB |= TWI_MASTER_QCEN_bm;   // Enable quick command
  90:sonar.c       **** 	
  91:sonar.c       **** 	TWIC.MASTER.BAUD = 155;                      // 100 kHz (Ref: doc8077.pdf, pg 221, [eqn. 2])
 1756               	.LM120:
 1757 0000 E0E8      		ldi r30,lo8(1152)
 1758 0002 F4E0      		ldi r31,hi8(1152)
 1759 0004 8BE9      		ldi r24,lo8(-101)
 1760 0006 8583      		std Z+5,r24
  92:sonar.c       **** 	//TWIC.MASTER.BAUD = 35;                     // 400 kHz
  93:sonar.c       **** 	
  94:sonar.c       **** 	TWIC.MASTER.CTRLA |= TWI_MASTER_ENABLE_bm; // Master enable
 1762               	.LM121:
 1763 0008 8181      		ldd r24,Z+1
 1764 000a 8860      		ori r24,lo8(8)
 1765 000c 8183      		std Z+1,r24
  95:sonar.c       **** 	TWIC.MASTER.STATUS |= 0x01;                // Set bus idle
 1767               	.LM122:
 1768 000e 8481      		ldd r24,Z+4
 1769 0010 8160      		ori r24,lo8(1)
 1770 0012 8483      		std Z+4,r24
 1771               	/* epilogue start */
  96:sonar.c       **** }
 1773               	.LM123:
 1774 0014 0895      		ret
 1776               	.Lscope12:
 1777               		.section	.text._Z15get_sonar_valuev,"ax",@progbits
 1779               	.global	_Z15get_sonar_valuev
 1781               	_Z15get_sonar_valuev:
  97:sonar.c       **** 
  98:sonar.c       **** uint16_t get_sonar_value(void)
  99:sonar.c       **** {	
 1783               	.LM124:
 1784               	.LFBB13:
 1785               	/* prologue: function */
 1786               	/* frame size = 0 */
 1787               	/* stack size = 0 */
 1788               	.L__stack_usage = 0
 1789               	.LBB49:
 100:sonar.c       **** 	uint8_t range_HIGH;		// high byte
 101:sonar.c       **** 	uint8_t range_LOW;		// low byte
 102:sonar.c       **** 	uint16_t range_FULL;
 103:sonar.c       **** 	
 104:sonar.c       **** 	// The default shipped address of the SRF02 is 0xE0
 105:sonar.c       **** 	// Only register location 0 can be written to
 106:sonar.c       **** 	
 107:sonar.c       **** 	//Send START + SLAVE DEVICE ADDRESS + WRITE BIT: 
 108:sonar.c       **** 	TWIC.MASTER.ADDR = 0xE0;		// 0xE0 = 0b11100000
 1791               	.LM125:
 1792 0000 80EE      		ldi r24,lo8(-32)
 1793 0002 E0E8      		ldi r30,lo8(1152)
 1794 0004 F4E0      		ldi r31,hi8(1152)
 1795 0006 8683      		std Z+6,r24
 1796               	.L18:
 109:sonar.c       **** 	while (!(TWIC.MASTER.STATUS & TWI_MASTER_CLKHOLD_bm));	//wait for the outbound message to complete
 1798               	.LM126:
 1799 0008 8091 8404 		lds r24,1156
 1800 000c 85FF      		sbrs r24,5
 1801 000e 00C0      		rjmp .L18
 110:sonar.c       **** 
 111:sonar.c       **** /*	//IF SLAVE RETURNED NACK OR OR DID NOT REPLY AT ALL:
 112:sonar.c       **** 		//SEND ADDRESS UNTIL SLAVE RETURNS ACK.
 113:sonar.c       ****         while(TWIC.MASTER.STATUS & TWI_MASTER_RXACK_bm)
 114:sonar.c       ****         {
 115:sonar.c       **** 			TWIC.MASTER.ADDR = 0xE0;          // 0xE0 = 0b11100000
 116:sonar.c       **** 			while(!(TWIC.MASTER.STATUS & TWI_MASTER_CLKHOLD_bm));               
 117:sonar.c       **** 		}       */
 118:sonar.c       **** 
 119:sonar.c       **** 	// send the internal register number to write to
 120:sonar.c       **** 	TWIC.MASTER.DATA = 0x00;		// 0x00 = 0b00000000
 1803               	.LM127:
 1804 0010 E0E8      		ldi r30,lo8(1152)
 1805 0012 F4E0      		ldi r31,hi8(1152)
 1806 0014 1782      		std Z+7,__zero_reg__
 1807               	.L19:
 121:sonar.c       **** 	while (!(TWIC.MASTER.STATUS & TWI_MASTER_CLKHOLD_bm));	//wait for the outbound message to complete
 1809               	.LM128:
 1810 0016 8091 8404 		lds r24,1156
 1811 001a 85FF      		sbrs r24,5
 1812 001c 00C0      		rjmp .L19
 122:sonar.c       **** 	
 123:sonar.c       **** 	// command the sonar to start a measurement 
 124:sonar.c       **** 	//	(Real Ranging Mode - Result in inches		- command: 0x50)
 125:sonar.c       **** 	//	(Real Ranging Mode - Result in centimeters	- command: 0x51)
 126:sonar.c       **** 	//	(Real Ranging Mode - Result in microseconds - command: 0x52)
 127:sonar.c       **** 	TWIC.MASTER.DATA = 0x51;		// 0x51 = 0b1010001
 1814               	.LM129:
 1815 001e 81E5      		ldi r24,lo8(81)
 1816 0020 E0E8      		ldi r30,lo8(1152)
 1817 0022 F4E0      		ldi r31,hi8(1152)
 1818 0024 8783      		std Z+7,r24
 1819               	.L20:
 128:sonar.c       **** 	while (!(TWIC.MASTER.STATUS & TWI_MASTER_CLKHOLD_bm));	//wait for the outbound message to complete
 1821               	.LM130:
 1822 0026 E0E8      		ldi r30,lo8(1152)
 1823 0028 F4E0      		ldi r31,hi8(1152)
 1824 002a 8091 8404 		lds r24,1156
 1825 002e 85FF      		sbrs r24,5
 1826 0030 00C0      		rjmp .L20
 129:sonar.c       **** 	
 130:sonar.c       **** 	TWIC.MASTER.CTRLC = 0x03; // issue a STOP condition
 1828               	.LM131:
 1829 0032 83E0      		ldi r24,lo8(3)
 1830 0034 8383      		std Z+3,r24
 131:sonar.c       **** 
 132:sonar.c       **** 	// kill some time while sonar is out
 133:sonar.c       **** 
 134:sonar.c       **** 	// CHECK FOR COMPLETION OF RANGING:
 135:sonar.c       **** 
 136:sonar.c       **** 	/* Need to implement this 
 137:sonar.c       **** 		see the datasheet: www.robot-electronics.co.uk/htm/srf02techI2C.htm
 138:sonar.c       **** 		
 139:sonar.c       **** 	*/
 140:sonar.c       **** 
 141:sonar.c       **** 	// READ THE RANGE DATA VIA I2C:
 142:sonar.c       **** 
 143:sonar.c       **** 	// Send START + SLAVE DEVICE ADDRESS + WRITE BIT: 
 144:sonar.c       **** 	TWIC.MASTER.ADDR = 0xE0;		// 0xE0 = 0b11100000
 1832               	.LM132:
 1833 0036 80EE      		ldi r24,lo8(-32)
 1834 0038 8683      		std Z+6,r24
 1835               	.L21:
 145:sonar.c       **** 	while (!(TWIC.MASTER.STATUS & TWI_MASTER_CLKHOLD_bm));	//wait for the outbound message to complete
 1837               	.LM133:
 1838 003a 8091 8404 		lds r24,1156
 1839 003e 85FF      		sbrs r24,5
 1840 0040 00C0      		rjmp .L21
 146:sonar.c       **** 	
 147:sonar.c       **** 	// send the internal register number to read from
 148:sonar.c       **** 	TWIC.MASTER.DATA = 0x02;		// 0x02 = 0b00000010
 1842               	.LM134:
 1843 0042 82E0      		ldi r24,lo8(2)
 1844 0044 E0E8      		ldi r30,lo8(1152)
 1845 0046 F4E0      		ldi r31,hi8(1152)
 1846 0048 8783      		std Z+7,r24
 1847               	.L22:
 149:sonar.c       **** 	while (!(TWIC.MASTER.STATUS & TWI_MASTER_CLKHOLD_bm));	//wait for the outbound  message to complet
 1849               	.LM135:
 1850 004a E0E8      		ldi r30,lo8(1152)
 1851 004c F4E0      		ldi r31,hi8(1152)
 1852 004e 8091 8404 		lds r24,1156
 1853 0052 85FF      		sbrs r24,5
 1854 0054 00C0      		rjmp .L22
 150:sonar.c       **** 
 151:sonar.c       **** 	TWIC.MASTER.CTRLC = 0x03; // issue a STOP condition
 1856               	.LM136:
 1857 0056 83E0      		ldi r24,lo8(3)
 1858 0058 8383      		std Z+3,r24
 152:sonar.c       **** 
 153:sonar.c       **** 	// Send START + SLAVE DEVICE ADDRESS + READ BIT: 
 154:sonar.c       **** 	TWIC.MASTER.ADDR = 0xE1;		// 0xE1 = 0b11100001
 1860               	.LM137:
 1861 005a 81EE      		ldi r24,lo8(-31)
 1862 005c 8683      		std Z+6,r24
 1863               	.L23:
 155:sonar.c       **** 	while (!(TWIC.MASTER.STATUS & TWI_MASTER_CLKHOLD_bm));	//wait for the outbound message to complete
 1865               	.LM138:
 1866 005e 8091 8404 		lds r24,1156
 1867 0062 85FF      		sbrs r24,5
 1868 0064 00C0      		rjmp .L23
 156:sonar.c       **** 	
 157:sonar.c       **** 	// an inbound message will come in now
 158:sonar.c       **** 	
 159:sonar.c       **** 	range_HIGH = TWIC.MASTER.DATA;
 1870               	.LM139:
 1871 0066 3091 8704 		lds r19,1159
 160:sonar.c       **** 	
 161:sonar.c       **** 	TWIC.MASTER.CTRLC = 0x02; // send an ACK to receive another byte
 1873               	.LM140:
 1874 006a 82E0      		ldi r24,lo8(2)
 1875 006c E0E8      		ldi r30,lo8(1152)
 1876 006e F4E0      		ldi r31,hi8(1152)
 1877 0070 8383      		std Z+3,r24
 1878               	.L24:
 162:sonar.c       **** 
 163:sonar.c       **** 	// an inbound message will come in now
 164:sonar.c       **** 	while (!(TWIC.MASTER.STATUS & TWI_MASTER_RIF_bm));	//wait for the inbound message to complete
 1880               	.LM141:
 1881 0072 8091 8404 		lds r24,1156
 1882 0076 87FF      		sbrs r24,7
 1883 0078 00C0      		rjmp .L24
 165:sonar.c       **** 
 166:sonar.c       **** 	range_LOW = TWIC.MASTER.DATA;
 1885               	.LM142:
 1886 007a 2091 8704 		lds r18,1159
 167:sonar.c       **** 	
 168:sonar.c       **** 	TWIC.MASTER.CTRLC = 0b00000111; // send NACK followed by STOP condition	(0b00000111 = TWI_MASTER_A
 1888               	.LM143:
 1889 007e 87E0      		ldi r24,lo8(7)
 1890 0080 E0E8      		ldi r30,lo8(1152)
 1891 0082 F4E0      		ldi r31,hi8(1152)
 1892 0084 8383      		std Z+3,r24
 169:sonar.c       **** 
 170:sonar.c       **** 	range_FULL = range_HIGH*256;	// read in the high byte
 1894               	.LM144:
 1895 0086 932F      		mov r25,r19
 1896 0088 80E0      		ldi r24,lo8(0)
 171:sonar.c       **** 	range_FULL += range_LOW;		// append with the low byte
 1898               	.LM145:
 1899 008a 820F      		add r24,r18
 1900 008c 911D      		adc r25,__zero_reg__
 1901               	/* epilogue start */
 1902               	.LBE49:
 172:sonar.c       **** 
 173:sonar.c       **** 	return range_FULL;
 174:sonar.c       **** }
 1904               	.LM146:
 1905 008e 0895      		ret
 1911               	.Lscope13:
 1912               		.section	.text._Z20check_sonar_attachedv,"ax",@progbits
 1914               	.global	_Z20check_sonar_attachedv
 1916               	_Z20check_sonar_attachedv:
 175:sonar.c       **** 
 176:sonar.c       **** bool check_sonar_attached(void)
 177:sonar.c       **** {	
 1918               	.LM147:
 1919               	.LFBB14:
 1920               	/* prologue: function */
 1921               	/* frame size = 0 */
 1922               	/* stack size = 0 */
 1923               	.L__stack_usage = 0
 1924               	.LBB50:
 178:sonar.c       **** 	uint32_t i;
 179:sonar.c       **** 	uint8_t range_HIGH;		// high byte
 180:sonar.c       **** 	uint8_t range_LOW;		// low byte
 181:sonar.c       **** 	uint16_t range_FULL;
 182:sonar.c       **** 	
 183:sonar.c       **** 	// The default shipped address of the SRF02 is 0xE0
 184:sonar.c       **** 	// Only register location 0 can be written to
 185:sonar.c       **** 	
 186:sonar.c       **** 	//Send START + SLAVE DEVICE ADDRESS + WRITE BIT: 
 187:sonar.c       **** 	TWIC.MASTER.ADDR = 0xE0;		// 0xE0 = 0b11100000
 1926               	.LM148:
 1927 0000 80EE      		ldi r24,lo8(-32)
 1928 0002 E0E8      		ldi r30,lo8(1152)
 1929 0004 F4E0      		ldi r31,hi8(1152)
 1930 0006 8683      		std Z+6,r24
 1931               	.L33:
 188:sonar.c       **** 	while (!(TWIC.MASTER.STATUS & TWI_MASTER_CLKHOLD_bm));	//wait for the outbound message to complete
 1933               	.LM149:
 1934 0008 8091 8404 		lds r24,1156
 1935 000c 85FF      		sbrs r24,5
 1936 000e 00C0      		rjmp .L33
 189:sonar.c       **** 
 190:sonar.c       **** /*	//IF SLAVE RETURNED NACK OR OR DID NOT REPLY AT ALL:
 191:sonar.c       **** 		//SEND ADDRESS UNTIL SLAVE RETURNS ACK.
 192:sonar.c       ****         while(TWIC.MASTER.STATUS & TWI_MASTER_RXACK_bm)
 193:sonar.c       ****         {
 194:sonar.c       **** 			TWIC.MASTER.ADDR = 0xE0;          // 0xE0 = 0b11100000
 195:sonar.c       **** 			while(!(TWIC.MASTER.STATUS & TWI_MASTER_CLKHOLD_bm));               
 196:sonar.c       **** 		}       */
 197:sonar.c       **** 
 198:sonar.c       **** 	// send the internal register number to write to
 199:sonar.c       **** 	TWIC.MASTER.DATA = 0x00;		// 0x00 = 0b00000000
 1938               	.LM150:
 1939 0010 E0E8      		ldi r30,lo8(1152)
 1940 0012 F4E0      		ldi r31,hi8(1152)
 1941 0014 1782      		std Z+7,__zero_reg__
 1942               	.L34:
 200:sonar.c       **** 	while (!(TWIC.MASTER.STATUS & TWI_MASTER_CLKHOLD_bm));	//wait for the outbound message to complete
 1944               	.LM151:
 1945 0016 8091 8404 		lds r24,1156
 1946 001a 85FF      		sbrs r24,5
 1947 001c 00C0      		rjmp .L34
 201:sonar.c       **** 	
 202:sonar.c       **** 	// command the sonar to start a measurement 
 203:sonar.c       **** 	//	(Real Ranging Mode - Result in inches		- command: 0x50)
 204:sonar.c       **** 	//	(Real Ranging Mode - Result in centimeters	- command: 0x51)
 205:sonar.c       **** 	//	(Real Ranging Mode - Result in microseconds - command: 0x52)
 206:sonar.c       **** 	TWIC.MASTER.DATA = 0x51;		// 0x51 = 0b1010001
 1949               	.LM152:
 1950 001e 81E5      		ldi r24,lo8(81)
 1951 0020 E0E8      		ldi r30,lo8(1152)
 1952 0022 F4E0      		ldi r31,hi8(1152)
 1953 0024 8783      		std Z+7,r24
 1954               	.L35:
 207:sonar.c       **** 	while (!(TWIC.MASTER.STATUS & TWI_MASTER_CLKHOLD_bm));	//wait for the outbound message to complete
 1956               	.LM153:
 1957 0026 E0E8      		ldi r30,lo8(1152)
 1958 0028 F4E0      		ldi r31,hi8(1152)
 1959 002a 8091 8404 		lds r24,1156
 1960 002e 85FF      		sbrs r24,5
 1961 0030 00C0      		rjmp .L35
 208:sonar.c       **** 	
 209:sonar.c       **** 	TWIC.MASTER.CTRLC = 0x03; // issue a STOP condition
 1963               	.LM154:
 1964 0032 83E0      		ldi r24,lo8(3)
 1965 0034 8383      		std Z+3,r24
 210:sonar.c       **** 
 211:sonar.c       **** 	// kill some time while sonar is out
 212:sonar.c       **** 
 213:sonar.c       **** 	// CHECK FOR COMPLETION OF RANGING:
 214:sonar.c       **** 
 215:sonar.c       **** 	/* Need to implement this 
 216:sonar.c       **** 		see the datasheet: www.robot-electronics.co.uk/htm/srf02techI2C.htm
 217:sonar.c       **** 		
 218:sonar.c       **** 	*/
 219:sonar.c       **** 
 220:sonar.c       **** 	// READ THE RANGE DATA VIA I2C:
 221:sonar.c       **** 
 222:sonar.c       **** 	// Send START + SLAVE DEVICE ADDRESS + WRITE BIT: 
 223:sonar.c       **** 	TWIC.MASTER.ADDR = 0xE0;		// 0xE0 = 0b11100000
 1967               	.LM155:
 1968 0036 80EE      		ldi r24,lo8(-32)
 1969 0038 8683      		std Z+6,r24
 1970               	.L36:
 224:sonar.c       **** 	while (!(TWIC.MASTER.STATUS & TWI_MASTER_CLKHOLD_bm));	//wait for the outbound message to complete
 1972               	.LM156:
 1973 003a 8091 8404 		lds r24,1156
 1974 003e 85FF      		sbrs r24,5
 1975 0040 00C0      		rjmp .L36
 225:sonar.c       **** 	
 226:sonar.c       **** 	// send the internal register number to read from
 227:sonar.c       **** 	TWIC.MASTER.DATA = 0x02;		// 0x02 = 0b00000010
 1977               	.LM157:
 1978 0042 82E0      		ldi r24,lo8(2)
 1979 0044 E0E8      		ldi r30,lo8(1152)
 1980 0046 F4E0      		ldi r31,hi8(1152)
 1981 0048 8783      		std Z+7,r24
 1982               	.L37:
 228:sonar.c       **** 	while (!(TWIC.MASTER.STATUS & TWI_MASTER_CLKHOLD_bm));	//wait for the outbound  message to complet
 1984               	.LM158:
 1985 004a E0E8      		ldi r30,lo8(1152)
 1986 004c F4E0      		ldi r31,hi8(1152)
 1987 004e 8091 8404 		lds r24,1156
 1988 0052 85FF      		sbrs r24,5
 1989 0054 00C0      		rjmp .L37
 229:sonar.c       **** 
 230:sonar.c       **** 	TWIC.MASTER.CTRLC = 0x03; // issue a STOP condition
 1991               	.LM159:
 1992 0056 83E0      		ldi r24,lo8(3)
 1993 0058 8383      		std Z+3,r24
 231:sonar.c       **** 
 232:sonar.c       **** 	// Send START + SLAVE DEVICE ADDRESS + READ BIT: 
 233:sonar.c       **** 	TWIC.MASTER.ADDR = 0xE1;		// 0xE1 = 0b11100001
 1995               	.LM160:
 1996 005a 81EE      		ldi r24,lo8(-31)
 1997 005c 8683      		std Z+6,r24
 1998               	.L38:
 234:sonar.c       **** 	while (!(TWIC.MASTER.STATUS & TWI_MASTER_CLKHOLD_bm));	//wait for the outbound message to complete
 2000               	.LM161:
 2001 005e 8091 8404 		lds r24,1156
 2002 0062 85FF      		sbrs r24,5
 2003 0064 00C0      		rjmp .L38
 235:sonar.c       **** 	
 236:sonar.c       **** 	// an inbound message will come in now
 237:sonar.c       **** 	
 238:sonar.c       **** 	range_HIGH = TWIC.MASTER.DATA;
 2005               	.LM162:
 2006 0066 8091 8704 		lds r24,1159
 239:sonar.c       **** 	
 240:sonar.c       **** 	TWIC.MASTER.CTRLC = 0x02; // send an ACK to receive another byte
 2008               	.LM163:
 2009 006a 82E0      		ldi r24,lo8(2)
 2010 006c E0E8      		ldi r30,lo8(1152)
 2011 006e F4E0      		ldi r31,hi8(1152)
 2012 0070 8383      		std Z+3,r24
 241:sonar.c       **** 	
 242:sonar.c       **** 	//i=jiffies+5; // wait 50ms
 243:sonar.c       **** 	i=0;
 2014               	.LM164:
 2015 0072 40E0      		ldi r20,lo8(0)
 2016 0074 50E0      		ldi r21,hi8(0)
 2017 0076 BA01      		movw r22,r20
 2018               	.L40:
 244:sonar.c       **** 	// an inbound message will come in now
 245:sonar.c       **** 	while (!(TWIC.MASTER.STATUS & TWI_MASTER_RIF_bm)&& i++<1600000);	//wait for the inbound message to
 2020               	.LM165:
 2021 0078 8091 8404 		lds r24,1156
 2022 007c 87FD      		sbrc r24,7
 2023 007e 00C0      		rjmp .L39
 2025               	.LM166:
 2026 0080 4F5F      		subi r20,lo8(-(1))
 2027 0082 5F4F      		sbci r21,hi8(-(1))
 2028 0084 6F4F      		sbci r22,hlo8(-(1))
 2029 0086 7F4F      		sbci r23,hhi8(-(1))
 2030 0088 4130      		cpi r20,lo8(1600001)
 2031 008a 8AE6      		ldi r24,hi8(1600001)
 2032 008c 5807      		cpc r21,r24
 2033 008e 88E1      		ldi r24,hlo8(1600001)
 2034 0090 6807      		cpc r22,r24
 2035 0092 80E0      		ldi r24,hhi8(1600001)
 2036 0094 7807      		cpc r23,r24
 2037 0096 01F4      		brne .L40
 2038               	.L39:
 246:sonar.c       **** 	
 247:sonar.c       **** 	//if(jiffies>=i) return 0;
 248:sonar.c       **** 
 249:sonar.c       **** 	range_LOW = TWIC.MASTER.DATA;
 2040               	.LM167:
 2041 0098 8091 8704 		lds r24,1159
 250:sonar.c       **** 	
 251:sonar.c       **** 	TWIC.MASTER.CTRLC = 0b00000111; // send NACK followed by STOP condition	(0b00000111 = TWI_MASTER_A
 2043               	.LM168:
 2044 009c 87E0      		ldi r24,lo8(7)
 2045 009e E0E8      		ldi r30,lo8(1152)
 2046 00a0 F4E0      		ldi r31,hi8(1152)
 2047 00a2 8383      		std Z+3,r24
 176:sonar.c       **** bool check_sonar_attached(void)
 2049               	.LM169:
 2050 00a4 81E0      		ldi r24,lo8(1)
 2051 00a6 4030      		cpi r20,lo8(1600000)
 2052 00a8 9AE6      		ldi r25,hi8(1600000)
 2053 00aa 5907      		cpc r21,r25
 2054 00ac 98E1      		ldi r25,hlo8(1600000)
 2055 00ae 6907      		cpc r22,r25
 2056 00b0 90E0      		ldi r25,hhi8(1600000)
 2057 00b2 7907      		cpc r23,r25
 2058 00b4 00F0      		brlo .L41
 2059 00b6 80E0      		ldi r24,lo8(0)
 2060               	.L41:
 2061               	.LBE50:
 252:sonar.c       **** 
 253:sonar.c       **** 	range_FULL = range_HIGH*256;	// read in the high byte
 254:sonar.c       **** 	range_FULL += range_LOW;		// append with the low byte
 255:sonar.c       **** 	
 256:sonar.c       **** 	if(i<1600000) return 1;
 257:sonar.c       **** 	else return 0;
 258:sonar.c       **** }
 2063               	.LM170:
 2064 00b8 0895      		ret
 2071               	.Lscope14:
 2072               		.section	.text._Z18swarm_interaction0i,"ax",@progbits
 2075               	.global	_Z18swarm_interaction0i
 2077               	_Z18swarm_interaction0i:
 2079               	.Ltext3:
   1:swarmfunctions.c **** // ============================================================================================
   2:swarmfunctions.c **** // variables
   3:swarmfunctions.c **** // ============================================================================================
   4:swarmfunctions.c **** float dt = 0.01;		// time step for differential equation (no relation with real time)
   5:swarmfunctions.c **** float ld=20.0, acc=20.0, cf=100.0;
   6:swarmfunctions.c **** float gmma1=5.0, ka1=0.1, d1=0.0, rc1=20.0, tau1=1.0;	//for synchro motion
   7:swarmfunctions.c **** float gmma0=1.0, ka0=1.0, d0=1.0, rc0=25.0, tau0=0.1;	//for chaotic motion
   8:swarmfunctions.c **** float forcex, forcey;
   9:swarmfunctions.c **** 
  10:swarmfunctions.c **** // ============================================================================================
  11:swarmfunctions.c **** // for initialization of swarm dynamics function
  12:swarmfunctions.c **** // ============================================================================================
  13:swarmfunctions.c **** void init_variables()
  14:swarmfunctions.c **** {
  15:swarmfunctions.c **** 	int i;
  16:swarmfunctions.c **** 
  17:swarmfunctions.c **** 	if(special) 
  18:swarmfunctions.c **** 		send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, "i");
  19:swarmfunctions.c **** 
  20:swarmfunctions.c **** 	for(i=0;i<NUM_NEIGHBORS;i++)
  21:swarmfunctions.c **** 	{
  22:swarmfunctions.c **** 		agent0.neix[i] = 0.0;	agent0.neiy[i] = 0.0;
  23:swarmfunctions.c **** 		agent1.neix[i] = 0.0;	agent1.neiy[i] = 0.0;
  24:swarmfunctions.c **** 		connected[i] = false;
  25:swarmfunctions.c **** 	}
  26:swarmfunctions.c **** 
  27:swarmfunctions.c **** 	// for chaotic motion
  28:swarmfunctions.c **** 	agent0.px = 22.0; agent0.py = 40.0; agent0.vx = 0.186; agent0.vy = -4.8; agent0.hd = 4.75;
  29:swarmfunctions.c **** 
  30:swarmfunctions.c **** 	//for ordered motion
  31:swarmfunctions.c **** 	if(sec_counter < STGtime4)
  32:swarmfunctions.c **** 	{
  33:swarmfunctions.c **** 		agent1.px =  2.7; agent1.py = 75.6; agent1.vx = 3.8;   agent1.vy = 1.3;	 agent1.hd = 0.0;
  34:swarmfunctions.c **** 	}
  35:swarmfunctions.c **** 	else
  36:swarmfunctions.c **** 	{
  37:swarmfunctions.c **** 		agent1.px = 22.0; agent1.py = 40.0; agent1.vx = 0.186; agent1.vy = -4.8; agent1.hd = 4.75;
  38:swarmfunctions.c **** 	}
  39:swarmfunctions.c **** 
  40:swarmfunctions.c **** 	wave_flg = false; 
  41:swarmfunctions.c **** 	wave_ping = false;
  42:swarmfunctions.c **** 	column_flg = false;
  43:swarmfunctions.c **** 	rhythm_on = false;
  44:swarmfunctions.c **** 
  45:swarmfunctions.c **** 	agent2.flg = false;
  46:swarmfunctions.c **** 
  47:swarmfunctions.c **** 	agent3.tim2 = 20.0;
  48:swarmfunctions.c **** 
  49:swarmfunctions.c **** 	global_amp = 0;
  50:swarmfunctions.c **** 	
  51:swarmfunctions.c **** 	enable_servo();
  52:swarmfunctions.c **** 	
  53:swarmfunctions.c **** 	set_servo_position(0);
  54:swarmfunctions.c **** }
  55:swarmfunctions.c **** 
  56:swarmfunctions.c **** // ============================================================================================
  57:swarmfunctions.c **** // ============================================================================================
  58:swarmfunctions.c **** // SWARM DYNAMICS 5 --- rhythm ---
  59:swarmfunctions.c **** // ============================================================================================
  60:swarmfunctions.c **** // ============================================================================================
  61:swarmfunctions.c **** float rhythm(float stp)
  62:swarmfunctions.c **** {
  63:swarmfunctions.c **** 	float self = 0, shift = 1.0;
  64:swarmfunctions.c **** 
  65:swarmfunctions.c **** 	if(special)
  66:swarmfunctions.c **** 	{
  67:swarmfunctions.c **** 		self = agent0.py;
  68:swarmfunctions.c **** 		agent0.px = agent0.py - shift;
  69:swarmfunctions.c **** 		send_message(MESSAGE_NUMDATA, 0b00011100, NULL, "");
  70:swarmfunctions.c **** 
  71:swarmfunctions.c **** 		agent0.py += stp;
  72:swarmfunctions.c **** 		if(agent0.py > 2.0 * PI) agent0.py -= 2.0 * PI;
  73:swarmfunctions.c **** 	}
  74:swarmfunctions.c **** 	else
  75:swarmfunctions.c **** 	{
  76:swarmfunctions.c **** 		if(agent0.neix[0]!=0)
  77:swarmfunctions.c **** 		{
  78:swarmfunctions.c **** 			self = agent0.neiy[0];
  79:swarmfunctions.c **** 
  80:swarmfunctions.c **** 			agent0.py = self;
  81:swarmfunctions.c **** 			agent0.px = self - shift;
  82:swarmfunctions.c **** 			send_message(MESSAGE_NUMDATA, 0b00011100, NULL, "");	
  83:swarmfunctions.c **** 		}
  84:swarmfunctions.c **** 		else if(agent0.neix[2]!=0)
  85:swarmfunctions.c **** 		{
  86:swarmfunctions.c **** 			self = agent0.neix[2];
  87:swarmfunctions.c **** 			agent0.px = self - shift;
  88:swarmfunctions.c **** 			send_message(MESSAGE_NUMDATA, 0b00010000, NULL, "");
  89:swarmfunctions.c **** 		}
  90:swarmfunctions.c **** 		else if(agent0.neix[4]!=0)
  91:swarmfunctions.c **** 		{
  92:swarmfunctions.c **** 			self = agent0.neix[4];
  93:swarmfunctions.c **** 			agent0.px = self - shift;
  94:swarmfunctions.c **** 			send_message(MESSAGE_NUMDATA, 0b00000100, NULL, "");
  95:swarmfunctions.c **** 		}
  96:swarmfunctions.c **** 	}
  97:swarmfunctions.c **** 
  98:swarmfunctions.c **** 	return sin(self);
  99:swarmfunctions.c **** }
 100:swarmfunctions.c **** 
 101:swarmfunctions.c **** // --------------------------------------------------------------------------------------------
 102:swarmfunctions.c **** float rhythm_control1()	//Amplitude Modulation
 103:swarmfunctions.c **** {
 104:swarmfunctions.c **** 	static int timestep = 0;
 105:swarmfunctions.c **** 	float tim, dtim = 2.0 * PI / 30.0;		// 1cycle = 30 sec
 106:swarmfunctions.c **** 	
 107:swarmfunctions.c **** 	tim = (float)timestep * dtim;
 108:swarmfunctions.c **** 	global_amp = sin(tim) * sin(tim);
 109:swarmfunctions.c **** 	if(global_amp < 0.1) global_amp = 0.1; // to avoid complete stop
 110:swarmfunctions.c **** 
 111:swarmfunctions.c **** 	if(rhythm_on)
 112:swarmfunctions.c **** 	{
 113:swarmfunctions.c **** 		timestep++;
 114:swarmfunctions.c **** 		rhythm_on = false;
 115:swarmfunctions.c **** 	}
 116:swarmfunctions.c **** 
 117:swarmfunctions.c **** 	return global_amp * rhythm(0.6);
 118:swarmfunctions.c **** }
 119:swarmfunctions.c **** 
 120:swarmfunctions.c **** // --------------------------------------------------------------------------------------------
 121:swarmfunctions.c **** float rhythm_control2()	//Frequency Modulation
 122:swarmfunctions.c **** {
 123:swarmfunctions.c **** 	static int timestep = 0;
 124:swarmfunctions.c **** 	float stp, tim, dtim = 2.0 * PI / 30.0;	// 1cycle = 30 sec
 125:swarmfunctions.c **** 	
 126:swarmfunctions.c **** 	tim = (float)timestep * dtim;
 127:swarmfunctions.c **** 	stp = 0.6 + 0.4 * cos(tim);
 128:swarmfunctions.c **** 
 129:swarmfunctions.c **** 	if(rhythm_on)
 130:swarmfunctions.c **** 	{
 131:swarmfunctions.c **** 		timestep++;
 132:swarmfunctions.c **** 		rhythm_on = false;
 133:swarmfunctions.c **** 	}
 134:swarmfunctions.c **** 
 135:swarmfunctions.c **** 	return rhythm(stp);
 136:swarmfunctions.c **** }
 137:swarmfunctions.c **** 
 138:swarmfunctions.c **** // --------------------------------------------------------------------------------------------
 139:swarmfunctions.c **** float rhythm_control3()	//Frequency Modulation
 140:swarmfunctions.c **** {
 141:swarmfunctions.c **** 	static int timestep = 0;
 142:swarmfunctions.c **** 	float stp, tim, dtim = 2.0 * PI / 30.0;	// 1cycle = 30 sec
 143:swarmfunctions.c **** 	
 144:swarmfunctions.c **** 	tim = (float)timestep * dtim;
 145:swarmfunctions.c **** 	stp = 0.2;
 146:swarmfunctions.c **** 
 147:swarmfunctions.c **** 	if(rhythm_on)
 148:swarmfunctions.c **** 	{
 149:swarmfunctions.c **** 		timestep++;
 150:swarmfunctions.c **** 		rhythm_on = false;
 151:swarmfunctions.c **** 	}
 152:swarmfunctions.c **** 
 153:swarmfunctions.c **** 	return rhythm(stp);
 154:swarmfunctions.c **** }
 155:swarmfunctions.c **** 
 156:swarmfunctions.c **** // ============================================================================================
 157:swarmfunctions.c **** // ============================================================================================
 158:swarmfunctions.c **** // SWARM DYNAMICS 4 --- plane wave ---
 159:swarmfunctions.c **** // ============================================================================================
 160:swarmfunctions.c **** // ============================================================================================
 161:swarmfunctions.c **** float plane_wave()
 162:swarmfunctions.c **** {
 163:swarmfunctions.c **** 	float period, decay = 1.0;
 164:swarmfunctions.c **** 	float ampl, angle;
 165:swarmfunctions.c **** 	uint8_t wave_dir;
 166:swarmfunctions.c **** 
 167:swarmfunctions.c **** 	if(!agent2.flg)
 168:swarmfunctions.c **** 	{
 169:swarmfunctions.c **** 		agent2.tim1 = 0;
 170:swarmfunctions.c **** 		agent2.tim2 = 0;
 171:swarmfunctions.c **** 		wave_ping = false;
 172:swarmfunctions.c **** 
 173:swarmfunctions.c **** 		// sensor is connected
 174:swarmfunctions.c **** 		if(sonar_attached)
 175:swarmfunctions.c **** 		{
 176:swarmfunctions.c **** 			//if received horizontal signal 'a' 
 177:swarmfunctions.c **** 			if(wave_flg) agent2.flg = true;
 178:swarmfunctions.c **** 			//detect something
 179:swarmfunctions.c **** 			else if(sensor_value_trichk >= RANGE1 && sensor_value_trichk <= RANGE3)
 180:swarmfunctions.c **** 			{
 181:swarmfunctions.c **** 				column_flg = true;
 182:swarmfunctions.c **** 				agent2.flg = true;
 183:swarmfunctions.c **** 				_delay_ms(500);
 184:swarmfunctions.c **** 				send_message(MESSAGE_COMMAND, 0b00001000, 1, "b");
 185:swarmfunctions.c **** 			}
 186:swarmfunctions.c **** 		}
 187:swarmfunctions.c **** 		//  no sensor
 188:swarmfunctions.c **** 		else
 189:swarmfunctions.c **** 		{
 190:swarmfunctions.c **** 			//received vertical signal 'b'
 191:swarmfunctions.c **** 			if(column_flg)
 192:swarmfunctions.c **** 			{
 193:swarmfunctions.c **** 				agent2.flg = true;
 194:swarmfunctions.c **** 				send_message(MESSAGE_COMMAND, 0b00001000, 1, "b");
 195:swarmfunctions.c **** 			}
 196:swarmfunctions.c **** 
 197:swarmfunctions.c **** 			//received horizontal signal 'a' 
 198:swarmfunctions.c **** 			if(wave_flg) agent2.flg = true;
 199:swarmfunctions.c **** 		}
 200:swarmfunctions.c **** 	}
 201:swarmfunctions.c **** 	else
 202:swarmfunctions.c **** 	{
 203:swarmfunctions.c **** 		if(sonar_attached) period = 7.0; else period = 7.0;
 204:swarmfunctions.c **** 
 205:swarmfunctions.c **** 		if(agent2.tim2 < period)
 206:swarmfunctions.c **** 		{
 207:swarmfunctions.c **** 			agent2.tim1 += 0.5;
 208:swarmfunctions.c **** 			agent2.tim2 += 0.1;
 209:swarmfunctions.c **** 
 210:swarmfunctions.c **** 			//threshold time 1: send message to neighbors
 211:swarmfunctions.c **** 			if(agent2.tim2 > period / 4.0)
 212:swarmfunctions.c **** 			{
 213:swarmfunctions.c **** 				if(!wave_ping)
 214:swarmfunctions.c **** 				{
 215:swarmfunctions.c **** 					wave_ping = true; //send message only once
 216:swarmfunctions.c **** 
 217:swarmfunctions.c **** 					//sensor board: send signal both side
 218:swarmfunctions.c **** 					if(column_flg) wave_dir = 0b00010100;
 219:swarmfunctions.c **** 					else
 220:swarmfunctions.c **** 					{
 221:swarmfunctions.c **** 						if(wave_port==2)	wave_dir = 0b00010000;
 222:swarmfunctions.c **** 						else				wave_dir = 0b00000100;
 223:swarmfunctions.c **** 					}
 224:swarmfunctions.c **** 					send_message(MESSAGE_COMMAND, wave_dir, 1, "a");	
 225:swarmfunctions.c **** 				}
 226:swarmfunctions.c **** 			}
 227:swarmfunctions.c **** 		}
 228:swarmfunctions.c **** 		if(agent2.tim2 >= period)
 229:swarmfunctions.c **** 		{
 230:swarmfunctions.c **** 			agent2.flg = false;
 231:swarmfunctions.c **** 			wave_flg = false;
 232:swarmfunctions.c **** 			column_flg = false;
 233:swarmfunctions.c **** 		}
 234:swarmfunctions.c **** 	}
 235:swarmfunctions.c **** 
 236:swarmfunctions.c **** 	ampl = agent2.tim2 * exp(-decay * agent2.tim2) * 2.7;
 237:swarmfunctions.c **** 	angle = ampl * sin(agent2.tim1);
 238:swarmfunctions.c **** 			
 239:swarmfunctions.c **** 	return angle;
 240:swarmfunctions.c **** }
 241:swarmfunctions.c **** 
 242:swarmfunctions.c **** 
 243:swarmfunctions.c **** // ============================================================================================
 244:swarmfunctions.c **** // ============================================================================================
 245:swarmfunctions.c **** // SWARM DYNAMICS 3 --- swing column ---
 246:swarmfunctions.c **** // ============================================================================================
 247:swarmfunctions.c **** // ============================================================================================
 248:swarmfunctions.c **** float column()
 249:swarmfunctions.c **** {
 250:swarmfunctions.c **** 	float decay = 1.0;
 251:swarmfunctions.c **** 	float ampl, angle;
 252:swarmfunctions.c **** 
 253:swarmfunctions.c **** 	if(sonar_attached)
 254:swarmfunctions.c **** 	{
 255:swarmfunctions.c **** 		if(sensor_value_dblchk >= RANGE1 && sensor_value_dblchk <= RANGE3)
 256:swarmfunctions.c **** 		{
 257:swarmfunctions.c **** 			// send command every 300ms
 258:swarmfunctions.c **** 			if(use_sensor_data_on)
 259:swarmfunctions.c **** 			{
 260:swarmfunctions.c **** 				send_message(MESSAGE_COMMAND, 0b00001000, 1, "b");
 261:swarmfunctions.c **** 				agent3.tim2 = 0;
 262:swarmfunctions.c **** 				use_sensor_data_on = false;
 263:swarmfunctions.c **** 			}
 264:swarmfunctions.c **** 		}
 265:swarmfunctions.c **** 	}
 266:swarmfunctions.c **** 	// no sensor, but received 'b' 
 267:swarmfunctions.c **** 	if(column_flg)
 268:swarmfunctions.c **** 	{
 269:swarmfunctions.c **** 		agent3.tim2 = 0;
 270:swarmfunctions.c **** 
 271:swarmfunctions.c **** 		//reset column_flg every 300ms
 272:swarmfunctions.c **** 		if(use_sensor_data_on)
 273:swarmfunctions.c **** 		{
 274:swarmfunctions.c **** 			column_flg = false;
 275:swarmfunctions.c **** 			use_sensor_data_on = false;
 276:swarmfunctions.c **** 			send_message(MESSAGE_COMMAND, 0b00001000, 1, "b");
 277:swarmfunctions.c **** 		}
 278:swarmfunctions.c **** 	}
 279:swarmfunctions.c **** 
 280:swarmfunctions.c **** 	ampl = exp(-decay * agent3.tim2);
 281:swarmfunctions.c **** 	angle = ampl * sin(agent3.tim1);
 282:swarmfunctions.c **** 
 283:swarmfunctions.c **** 	agent3.tim1 += 1.0; if(agent3.tim1 > 2.0*PI) agent3.tim1 -= 2.0*PI;
 284:swarmfunctions.c **** 	agent3.tim2 += 0.1; if(agent3.tim2 > 20.0) agent3.tim2 = 20.0;
 285:swarmfunctions.c **** 
 286:swarmfunctions.c **** 	return angle;
 287:swarmfunctions.c **** }
 288:swarmfunctions.c **** 
 289:swarmfunctions.c **** 
 290:swarmfunctions.c **** // ============================================================================================
 291:swarmfunctions.c **** // ============================================================================================
 292:swarmfunctions.c **** // SWARM DYNAMICS 2 --- wave ---
 293:swarmfunctions.c **** // ============================================================================================
 294:swarmfunctions.c **** // ============================================================================================
 295:swarmfunctions.c **** float wave()
 296:swarmfunctions.c **** {
 297:swarmfunctions.c **** 	float period, decay = 1.0;
 298:swarmfunctions.c **** 	float ampl, angle;
 299:swarmfunctions.c **** 	
 300:swarmfunctions.c **** 	if(!agent2.flg)
 301:swarmfunctions.c **** 	{
 302:swarmfunctions.c **** 		agent2.tim1 = 0;
 303:swarmfunctions.c **** 		agent2.tim2 = 0;
 304:swarmfunctions.c **** 		wave_ping = false;
 305:swarmfunctions.c **** 
 306:swarmfunctions.c **** 		// received 'a' from the neighbor
 307:swarmfunctions.c **** 		if(wave_flg) agent2.flg = true;
 308:swarmfunctions.c **** 		else if(sonar_attached) //not receive 'a', but detect audience by myself
 309:swarmfunctions.c **** 		{
 310:swarmfunctions.c **** 			if(sensor_value_dblchk >= RANGE2 && sensor_value_dblchk <= RANGE3) agent2.flg = true;
 311:swarmfunctions.c **** 		}	
 312:swarmfunctions.c **** 	}
 313:swarmfunctions.c **** 	else
 314:swarmfunctions.c **** 	{
 315:swarmfunctions.c **** 		if(sonar_attached) period = 8.0; else period = 7.0;
 316:swarmfunctions.c **** 
 317:swarmfunctions.c **** 		if(agent2.tim2 < period)
 318:swarmfunctions.c **** 		{
 319:swarmfunctions.c **** 			agent2.tim1 += 0.5;
 320:swarmfunctions.c **** 			agent2.tim2 += 0.1;
 321:swarmfunctions.c **** 
 322:swarmfunctions.c **** 			//threshold time 1: send message to neighbors
 323:swarmfunctions.c **** 			if(agent2.tim2 > period / 4.0)
 324:swarmfunctions.c **** 			{
 325:swarmfunctions.c **** 				if(!wave_ping)
 326:swarmfunctions.c **** 				{
 327:swarmfunctions.c **** 					send_message(MESSAGE_COMMAND, ALL_DIRECTION, 1, "a");
 328:swarmfunctions.c **** 					wave_ping = true;
 329:swarmfunctions.c **** 				}
 330:swarmfunctions.c **** 			}
 331:swarmfunctions.c **** 		}
 332:swarmfunctions.c **** 
 333:swarmfunctions.c **** 		if(agent2.tim2 >= period)
 334:swarmfunctions.c **** 		{
 335:swarmfunctions.c **** 			agent2.flg = false;
 336:swarmfunctions.c **** 			wave_flg = false;
 337:swarmfunctions.c **** 		}
 338:swarmfunctions.c **** 	}
 339:swarmfunctions.c **** 
 340:swarmfunctions.c **** 	ampl = agent2.tim2 * exp(-decay * agent2.tim2) * 2.7;
 341:swarmfunctions.c **** 	angle = ampl * sin(agent2.tim1);
 342:swarmfunctions.c **** 
 343:swarmfunctions.c **** 	return angle;
 344:swarmfunctions.c **** }
 345:swarmfunctions.c **** 
 346:swarmfunctions.c **** 
 347:swarmfunctions.c **** // ============================================================================================
 348:swarmfunctions.c **** // ============================================================================================
 349:swarmfunctions.c **** // SWARM DYNAMICS 1 --- Ken's Swarm Dynamics ---
 350:swarmfunctions.c **** // ============================================================================================
 351:swarmfunctions.c **** // ============================================================================================
 352:swarmfunctions.c **** 
 353:swarmfunctions.c **** // ################### DISORDERED BEHAVIOR ####################
 354:swarmfunctions.c **** void swarm_interaction0(int nei)
 355:swarmfunctions.c **** {
 2081               	.LM171:
 2082               	.LFBB15:
 2083 0000 2F92      		push r2
 2084 0002 3F92      		push r3
 2085 0004 4F92      		push r4
 2086 0006 5F92      		push r5
 2087 0008 6F92      		push r6
 2088 000a 7F92      		push r7
 2089 000c 8F92      		push r8
 2090 000e 9F92      		push r9
 2091 0010 AF92      		push r10
 2092 0012 BF92      		push r11
 2093 0014 CF92      		push r12
 2094 0016 DF92      		push r13
 2095 0018 EF92      		push r14
 2096 001a FF92      		push r15
 2097 001c 0F93      		push r16
 2098 001e 1F93      		push r17
 2099 0020 CF93      		push r28
 2100 0022 DF93      		push r29
 2101 0024 CDB7      		in r28,__SP_L__
 2102 0026 DEB7      		in r29,__SP_H__
 2103 0028 2F97      		sbiw r28,15
 2104 002a CDBF      		out __SP_L__,r28
 2105 002c DEBF      		out __SP_H__,r29
 2106               	/* prologue: function */
 2107               	/* frame size = 15 */
 2108               	/* stack size = 33 */
 2109               	.L__stack_usage = 33
 2110 002e 8C01      		movw r16,r24
 2111               	.LBB51:
 356:swarmfunctions.c **** 	float disx, disy, dis1, dis2, alph, force;
 357:swarmfunctions.c **** 	float di, dj;
 358:swarmfunctions.c **** 	bool flag = true;
 359:swarmfunctions.c **** 
 360:swarmfunctions.c **** 	switch(nei)
 2113               	.LM172:
 2114 0030 8230      		cpi r24,2
 2115 0032 9105      		cpc r25,__zero_reg__
 2116 0034 01F0      		breq .L52
 2117 0036 8330      		cpi r24,3
 2118 0038 9105      		cpc r25,__zero_reg__
 2119 003a 04F4      		brge .L55
 2120 003c 0097      		sbiw r24,0
 2121 003e 01F0      		breq .L51
 2122 0040 00C0      		rjmp .L49
 2123               	.L55:
 2124 0042 8330      		cpi r24,3
 2125 0044 9105      		cpc r25,__zero_reg__
 2126 0046 01F0      		breq .L53
 2127 0048 8430      		cpi r24,4
 2128 004a 9105      		cpc r25,__zero_reg__
 2129 004c 01F0      		breq .+2
 2130 004e 00C0      		rjmp .L49
 2131 0050 00C0      		rjmp .L60
 2132               	.L52:
 361:swarmfunctions.c **** 	{
 362:swarmfunctions.c **** 		case LEFT_BOTTOM : di=-1.000; dj= 0.000; break;
 2134               	.LM173:
 2135 0052 0F2E      		mov __tmp_reg__,r31
 2136 0054 F0E0      		ldi r31,lo8(0x0)
 2137 0056 8F2E      		mov r8,r31
 2138 0058 F0E0      		ldi r31,hi8(0x0)
 2139 005a 9F2E      		mov r9,r31
 2140 005c F0E0      		ldi r31,hlo8(0x0)
 2141 005e AF2E      		mov r10,r31
 2142 0060 F0E0      		ldi r31,hhi8(0x0)
 2143 0062 BF2E      		mov r11,r31
 2144 0064 F02D      		mov r31,__tmp_reg__
 2145 0066 0F2E      		mov __tmp_reg__,r31
 2146 0068 F0E0      		ldi r31,lo8(0xbf800000)
 2147 006a CF2E      		mov r12,r31
 2148 006c F0E0      		ldi r31,hi8(0xbf800000)
 2149 006e DF2E      		mov r13,r31
 2150 0070 F0E8      		ldi r31,hlo8(0xbf800000)
 2151 0072 EF2E      		mov r14,r31
 2152 0074 FFEB      		ldi r31,hhi8(0xbf800000)
 2153 0076 FF2E      		mov r15,r31
 2154 0078 F02D      		mov r31,__tmp_reg__
 2155 007a 00C0      		rjmp .L54
 2156               	.L51:
 363:swarmfunctions.c **** 		case RIGHT_BOTTOM: di= 1.000; dj= 0.000; break;
 364:swarmfunctions.c **** 		case BOTTOM_RIGHT: di= 0.000; dj= 1.000; break;
 2158               	.LM174:
 2159 007c 0F2E      		mov __tmp_reg__,r31
 2160 007e F0E0      		ldi r31,lo8(0x3f800000)
 2161 0080 8F2E      		mov r8,r31
 2162 0082 F0E0      		ldi r31,hi8(0x3f800000)
 2163 0084 9F2E      		mov r9,r31
 2164 0086 F0E8      		ldi r31,hlo8(0x3f800000)
 2165 0088 AF2E      		mov r10,r31
 2166 008a FFE3      		ldi r31,hhi8(0x3f800000)
 2167 008c BF2E      		mov r11,r31
 2168 008e F02D      		mov r31,__tmp_reg__
 2169 0090 00C0      		rjmp .L59
 2170               	.L53:
 365:swarmfunctions.c **** 		case LEFT_TOP    : di= 0.000; dj=-1.000; break;
 2172               	.LM175:
 2173 0092 0F2E      		mov __tmp_reg__,r31
 2174 0094 F0E0      		ldi r31,lo8(0xbf800000)
 2175 0096 8F2E      		mov r8,r31
 2176 0098 F0E0      		ldi r31,hi8(0xbf800000)
 2177 009a 9F2E      		mov r9,r31
 2178 009c F0E8      		ldi r31,hlo8(0xbf800000)
 2179 009e AF2E      		mov r10,r31
 2180 00a0 FFEB      		ldi r31,hhi8(0xbf800000)
 2181 00a2 BF2E      		mov r11,r31
 2182 00a4 F02D      		mov r31,__tmp_reg__
 2183               	.L59:
 2184 00a6 0F2E      		mov __tmp_reg__,r31
 2185 00a8 F0E0      		ldi r31,lo8(0x0)
 2186 00aa CF2E      		mov r12,r31
 2187 00ac F0E0      		ldi r31,hi8(0x0)
 2188 00ae DF2E      		mov r13,r31
 2189 00b0 F0E0      		ldi r31,hlo8(0x0)
 2190 00b2 EF2E      		mov r14,r31
 2191 00b4 F0E0      		ldi r31,hhi8(0x0)
 2192 00b6 FF2E      		mov r15,r31
 2193 00b8 F02D      		mov r31,__tmp_reg__
 2194 00ba 00C0      		rjmp .L54
 2195               	.L60:
 363:swarmfunctions.c **** 		case RIGHT_BOTTOM: di= 1.000; dj= 0.000; break;
 2197               	.LM176:
 2198 00bc 0F2E      		mov __tmp_reg__,r31
 2199 00be F0E0      		ldi r31,lo8(0x0)
 2200 00c0 8F2E      		mov r8,r31
 2201 00c2 F0E0      		ldi r31,hi8(0x0)
 2202 00c4 9F2E      		mov r9,r31
 2203 00c6 F0E0      		ldi r31,hlo8(0x0)
 2204 00c8 AF2E      		mov r10,r31
 2205 00ca F0E0      		ldi r31,hhi8(0x0)
 2206 00cc BF2E      		mov r11,r31
 2207 00ce F02D      		mov r31,__tmp_reg__
 2208 00d0 0F2E      		mov __tmp_reg__,r31
 2209 00d2 F0E0      		ldi r31,lo8(0x3f800000)
 2210 00d4 CF2E      		mov r12,r31
 2211 00d6 F0E0      		ldi r31,hi8(0x3f800000)
 2212 00d8 DF2E      		mov r13,r31
 2213 00da F0E8      		ldi r31,hlo8(0x3f800000)
 2214 00dc EF2E      		mov r14,r31
 2215 00de FFE3      		ldi r31,hhi8(0x3f800000)
 2216 00e0 FF2E      		mov r15,r31
 2217 00e2 F02D      		mov r31,__tmp_reg__
 2218               	.L54:
 366:swarmfunctions.c **** 		default: flag = false;
 367:swarmfunctions.c **** 	}
 368:swarmfunctions.c **** 
 369:swarmfunctions.c **** 	if(flag)
 370:swarmfunctions.c **** 	{
 371:swarmfunctions.c **** 		disx = agent0.neix[nei] - agent0.px + ld * di;
 2220               	.LM177:
 2221 00e4 4090 0000 		lds r4,ld
 2222 00e8 5090 0000 		lds r5,ld+1
 2223 00ec 6090 0000 		lds r6,ld+2
 2224 00f0 7090 0000 		lds r7,ld+3
 2225 00f4 F801      		movw r30,r16
 2226 00f6 EE0F      		lsl r30
 2227 00f8 FF1F      		rol r31
 2228 00fa EE0F      		lsl r30
 2229 00fc FF1F      		rol r31
 2230 00fe E050      		subi r30,lo8(-(agent0+20))
 2231 0100 F040      		sbci r31,hi8(-(agent0+20))
 2232 0102 6081      		ld r22,Z
 2233 0104 7181      		ldd r23,Z+1
 2234 0106 8281      		ldd r24,Z+2
 2235 0108 9381      		ldd r25,Z+3
 2236 010a 2091 0000 		lds r18,agent0
 2237 010e 3091 0000 		lds r19,agent0+1
 2238 0112 4091 0000 		lds r20,agent0+2
 2239 0116 5091 0000 		lds r21,agent0+3
 2240 011a 0E94 0000 		call __subsf3
 2241 011e 6983      		std Y+1,r22
 2242 0120 7A83      		std Y+2,r23
 2243 0122 8B83      		std Y+3,r24
 2244 0124 9C83      		std Y+4,r25
 2245 0126 C301      		movw r24,r6
 2246 0128 B201      		movw r22,r4
 2247 012a A701      		movw r20,r14
 2248 012c 9601      		movw r18,r12
 2249 012e 0E94 0000 		call __mulsf3
 2250 0132 9B01      		movw r18,r22
 2251 0134 AC01      		movw r20,r24
 2252 0136 6981      		ldd r22,Y+1
 2253 0138 7A81      		ldd r23,Y+2
 2254 013a 8B81      		ldd r24,Y+3
 2255 013c 9C81      		ldd r25,Y+4
 2256 013e 0E94 0000 		call __addsf3
 2257 0142 6983      		std Y+1,r22
 2258 0144 7D83      		std Y+5,r23
 2259 0146 8E83      		std Y+6,r24
 2260 0148 9F83      		std Y+7,r25
 372:swarmfunctions.c **** 		disy = agent0.neiy[nei] - agent0.py + ld * dj;
 2262               	.LM178:
 2263 014a F801      		movw r30,r16
 2264 014c EE0F      		lsl r30
 2265 014e FF1F      		rol r31
 2266 0150 EE0F      		lsl r30
 2267 0152 FF1F      		rol r31
 2268 0154 E050      		subi r30,lo8(-(agent0+44))
 2269 0156 F040      		sbci r31,hi8(-(agent0+44))
 2270 0158 6081      		ld r22,Z
 2271 015a 7181      		ldd r23,Z+1
 2272 015c 8281      		ldd r24,Z+2
 2273 015e 9381      		ldd r25,Z+3
 2274 0160 2091 0000 		lds r18,agent0+4
 2275 0164 3091 0000 		lds r19,agent0+4+1
 2276 0168 4091 0000 		lds r20,agent0+4+2
 2277 016c 5091 0000 		lds r21,agent0+4+3
 2278 0170 0E94 0000 		call __subsf3
 2279 0174 6B01      		movw r12,r22
 2280 0176 7C01      		movw r14,r24
 2281 0178 C301      		movw r24,r6
 2282 017a B201      		movw r22,r4
 2283 017c A501      		movw r20,r10
 2284 017e 9401      		movw r18,r8
 2285 0180 0E94 0000 		call __mulsf3
 2286 0184 9B01      		movw r18,r22
 2287 0186 AC01      		movw r20,r24
 2288 0188 C701      		movw r24,r14
 2289 018a B601      		movw r22,r12
 2290 018c 0E94 0000 		call __addsf3
 2291 0190 362E      		mov r3,r22
 2292 0192 272E      		mov r2,r23
 2293 0194 8887      		std Y+8,r24
 2294 0196 9987      		std Y+9,r25
 373:swarmfunctions.c **** 
 374:swarmfunctions.c **** 		dis2 = disx * disx + disy * disy;
 2296               	.LM179:
 2297 0198 5981      		ldd r21,Y+1
 2298 019a 4D81      		ldd r20,Y+5
 2299 019c 3E81      		ldd r19,Y+6
 2300 019e 2F81      		ldd r18,Y+7
 2301 01a0 852F      		mov r24,r21
 2302 01a2 942F      		mov r25,r20
 2303 01a4 A32F      		mov r26,r19
 2304 01a6 B22F      		mov r27,r18
 2305 01a8 BC01      		movw r22,r24
 2306 01aa CD01      		movw r24,r26
 2307 01ac FA01      		movw r30,r20
 2308 01ae 0F2F      		mov r16,r31
 2309 01b0 1E2F      		mov r17,r30
 2310 01b2 232F      		mov r18,r19
 2311 01b4 3B2F      		mov r19,r27
 2312 01b6 A901      		movw r20,r18
 2313 01b8 9801      		movw r18,r16
 2314 01ba 0E94 0000 		call __mulsf3
 2315 01be 6B01      		movw r12,r22
 2316 01c0 7C01      		movw r14,r24
 2317 01c2 A101      		movw r20,r2
 2318 01c4 3885      		ldd r19,Y+8
 2319 01c6 2985      		ldd r18,Y+9
 2320 01c8 852F      		mov r24,r21
 2321 01ca 942F      		mov r25,r20
 2322 01cc A32F      		mov r26,r19
 2323 01ce B22F      		mov r27,r18
 2324 01d0 BC01      		movw r22,r24
 2325 01d2 CD01      		movw r24,r26
 2326 01d4 F101      		movw r30,r2
 2327 01d6 0F2F      		mov r16,r31
 2328 01d8 1E2F      		mov r17,r30
 2329 01da 232F      		mov r18,r19
 2330 01dc 3B2F      		mov r19,r27
 2331 01de A901      		movw r20,r18
 2332 01e0 9801      		movw r18,r16
 2333 01e2 0E94 0000 		call __mulsf3
 2334 01e6 9B01      		movw r18,r22
 2335 01e8 AC01      		movw r20,r24
 2336 01ea C701      		movw r24,r14
 2337 01ec B601      		movw r22,r12
 2338 01ee 0E94 0000 		call __addsf3
 2339 01f2 6E87      		std Y+14,r22
 2340 01f4 7F87      		std Y+15,r23
 2341 01f6 8C01      		movw r16,r24
 375:swarmfunctions.c **** 		dis1 = sqrt(dis2);
 2343               	.LM180:
 2344 01f8 472F      		mov r20,r23
 2345 01fa 862F      		mov r24,r22
 2346 01fc 942F      		mov r25,r20
 2347 01fe A02F      		mov r26,r16
 2348 0200 B12F      		mov r27,r17
 2349 0202 BC01      		movw r22,r24
 2350 0204 CD01      		movw r24,r26
 2351 0206 0E94 0000 		call sqrt
 2352 020a 2B01      		movw r4,r22
 2353 020c 3C01      		movw r6,r24
 376:swarmfunctions.c **** 
 377:swarmfunctions.c **** 		if(dis2!=0.0)
 2355               	.LM181:
 2356 020e 5E85      		ldd r21,Y+14
 2357 0210 4F85      		ldd r20,Y+15
 2358 0212 852F      		mov r24,r21
 2359 0214 942F      		mov r25,r20
 2360 0216 A02F      		mov r26,r16
 2361 0218 B12F      		mov r27,r17
 2362 021a BC01      		movw r22,r24
 2363 021c CD01      		movw r24,r26
 2364 021e 20E0      		ldi r18,lo8(0x0)
 2365 0220 30E0      		ldi r19,hi8(0x0)
 2366 0222 A901      		movw r20,r18
 2367 0224 0E94 0000 		call __nesf2
 2368 0228 8823      		tst r24
 2369 022a 01F4      		brne .+2
 2370 022c 00C0      		rjmp .L49
 378:swarmfunctions.c **** 		{
 379:swarmfunctions.c **** 			alph = 1.0 + d0 * (disx * cos(agent0.hd) + disy * sin(agent0.hd)) / dis1; //inner product
 2372               	.LM182:
 2373 022e C090 0000 		lds r12,agent0+16
 2374 0232 D090 0000 		lds r13,agent0+16+1
 2375 0236 E090 0000 		lds r14,agent0+16+2
 2376 023a F090 0000 		lds r15,agent0+16+3
 2377 023e C701      		movw r24,r14
 2378 0240 B601      		movw r22,r12
 2379 0242 0E94 0000 		call cos
 2380 0246 4B01      		movw r8,r22
 2381 0248 5C01      		movw r10,r24
 2382 024a C701      		movw r24,r14
 2383 024c B601      		movw r22,r12
 2384 024e 0E94 0000 		call sin
 2385 0252 6A87      		std Y+10,r22
 2386 0254 7B87      		std Y+11,r23
 2387 0256 8C87      		std Y+12,r24
 2388 0258 9D87      		std Y+13,r25
 380:swarmfunctions.c **** 			force = -cf * (rc0 / dis1 - 1.0) * rc0 * rc0 / dis2;
 2390               	.LM183:
 2391 025a C090 0000 		lds r12,rc0
 2392 025e D090 0000 		lds r13,rc0+1
 2393 0262 E090 0000 		lds r14,rc0+2
 2394 0266 F090 0000 		lds r15,rc0+3
 379:swarmfunctions.c **** 			alph = 1.0 + d0 * (disx * cos(agent0.hd) + disy * sin(agent0.hd)) / dis1; //inner product
 2396               	.LM184:
 2397 026a 5981      		ldd r21,Y+1
 2398 026c 4D81      		ldd r20,Y+5
 2399 026e 3E81      		ldd r19,Y+6
 2400 0270 2F81      		ldd r18,Y+7
 2401 0272 852F      		mov r24,r21
 2402 0274 942F      		mov r25,r20
 2403 0276 A32F      		mov r26,r19
 2404 0278 B22F      		mov r27,r18
 2405 027a BC01      		movw r22,r24
 2406 027c CD01      		movw r24,r26
 2407 027e A501      		movw r20,r10
 2408 0280 9401      		movw r18,r8
 2409 0282 0E94 0000 		call __mulsf3
 2410 0286 4B01      		movw r8,r22
 2411 0288 5C01      		movw r10,r24
 2412 028a A101      		movw r20,r2
 2413 028c 3885      		ldd r19,Y+8
 2414 028e 2985      		ldd r18,Y+9
 2415 0290 852F      		mov r24,r21
 2416 0292 942F      		mov r25,r20
 2417 0294 A32F      		mov r26,r19
 2418 0296 B22F      		mov r27,r18
 2419 0298 BC01      		movw r22,r24
 2420 029a CD01      		movw r24,r26
 2421 029c 2A85      		ldd r18,Y+10
 2422 029e 3B85      		ldd r19,Y+11
 2423 02a0 4C85      		ldd r20,Y+12
 2424 02a2 5D85      		ldd r21,Y+13
 2425 02a4 0E94 0000 		call __mulsf3
 2426 02a8 9B01      		movw r18,r22
 2427 02aa AC01      		movw r20,r24
 2428 02ac C501      		movw r24,r10
 2429 02ae B401      		movw r22,r8
 2430 02b0 0E94 0000 		call __addsf3
 2431 02b4 2091 0000 		lds r18,d0
 2432 02b8 3091 0000 		lds r19,d0+1
 2433 02bc 4091 0000 		lds r20,d0+2
 2434 02c0 5091 0000 		lds r21,d0+3
 2435 02c4 0E94 0000 		call __mulsf3
 2436 02c8 A301      		movw r20,r6
 2437 02ca 9201      		movw r18,r4
 2438 02cc 0E94 0000 		call __divsf3
 2439 02d0 20E0      		ldi r18,lo8(0x3f800000)
 2440 02d2 30E0      		ldi r19,hi8(0x3f800000)
 2441 02d4 40E8      		ldi r20,hlo8(0x3f800000)
 2442 02d6 5FE3      		ldi r21,hhi8(0x3f800000)
 2443 02d8 0E94 0000 		call __addsf3
 2444 02dc 6A87      		std Y+10,r22
 2445 02de 7B87      		std Y+11,r23
 2446 02e0 8C87      		std Y+12,r24
 2447 02e2 9D87      		std Y+13,r25
 2449               	.LM185:
 2450 02e4 8090 0000 		lds r8,cf
 2451 02e8 9090 0000 		lds r9,cf+1
 2452 02ec A090 0000 		lds r10,cf+2
 2453 02f0 B090 0000 		lds r11,cf+3
 2454 02f4 B7FA      		bst r11,7
 2455 02f6 B094      		com r11
 2456 02f8 B7F8      		bld r11,7
 2457 02fa B094      		com r11
 2458 02fc C701      		movw r24,r14
 2459 02fe B601      		movw r22,r12
 2460 0300 A301      		movw r20,r6
 2461 0302 9201      		movw r18,r4
 2462 0304 0E94 0000 		call __divsf3
 2463 0308 20E0      		ldi r18,lo8(0x3f800000)
 2464 030a 30E0      		ldi r19,hi8(0x3f800000)
 2465 030c 40E8      		ldi r20,hlo8(0x3f800000)
 2466 030e 5FE3      		ldi r21,hhi8(0x3f800000)
 2467 0310 0E94 0000 		call __subsf3
 2468 0314 9B01      		movw r18,r22
 2469 0316 AC01      		movw r20,r24
 2470 0318 C501      		movw r24,r10
 2471 031a B401      		movw r22,r8
 2472 031c 0E94 0000 		call __mulsf3
 2473 0320 A701      		movw r20,r14
 2474 0322 9601      		movw r18,r12
 2475 0324 0E94 0000 		call __mulsf3
 2476 0328 A701      		movw r20,r14
 2477 032a 9601      		movw r18,r12
 2478 032c 0E94 0000 		call __mulsf3
 2479 0330 FE85      		ldd r31,Y+14
 2480 0332 EF85      		ldd r30,Y+15
 2481 0334 502F      		mov r21,r16
 2482 0336 412F      		mov r20,r17
 2483 0338 0F2F      		mov r16,r31
 2484 033a 1E2F      		mov r17,r30
 2485 033c 252F      		mov r18,r21
 2486 033e 342F      		mov r19,r20
 2487 0340 A901      		movw r20,r18
 2488 0342 9801      		movw r18,r16
 2489 0344 0E94 0000 		call __divsf3
 2490 0348 9B01      		movw r18,r22
 2491 034a AC01      		movw r20,r24
 381:swarmfunctions.c **** 			
 382:swarmfunctions.c **** 			forcex += alph * force * disx / dis1;
 2493               	.LM186:
 2494 034c 6A85      		ldd r22,Y+10
 2495 034e 7B85      		ldd r23,Y+11
 2496 0350 8C85      		ldd r24,Y+12
 2497 0352 9D85      		ldd r25,Y+13
 2498 0354 0E94 0000 		call __mulsf3
 2499 0358 C62E      		mov r12,r22
 2500 035a F72E      		mov r15,r23
 2501 035c 882E      		mov r8,r24
 2502 035e E92E      		mov r14,r25
 2503 0360 862F      		mov r24,r22
 2504 0362 9F2D      		mov r25,r15
 2505 0364 A82D      		mov r26,r8
 2506 0366 BE2D      		mov r27,r14
 2507 0368 BC01      		movw r22,r24
 2508 036a CD01      		movw r24,r26
 2509 036c F981      		ldd r31,Y+1
 2510 036e ED81      		ldd r30,Y+5
 2511 0370 5E81      		ldd r21,Y+6
 2512 0372 4F81      		ldd r20,Y+7
 2513 0374 0F2F      		mov r16,r31
 2514 0376 1E2F      		mov r17,r30
 2515 0378 252F      		mov r18,r21
 2516 037a 342F      		mov r19,r20
 2517 037c A901      		movw r20,r18
 2518 037e 9801      		movw r18,r16
 2519 0380 0E94 0000 		call __mulsf3
 2520 0384 A301      		movw r20,r6
 2521 0386 9201      		movw r18,r4
 2522 0388 0E94 0000 		call __divsf3
 2523 038c 9B01      		movw r18,r22
 2524 038e AC01      		movw r20,r24
 2525 0390 6091 0000 		lds r22,forcex
 2526 0394 7091 0000 		lds r23,forcex+1
 2527 0398 8091 0000 		lds r24,forcex+2
 2528 039c 9091 0000 		lds r25,forcex+3
 2529 03a0 0E94 0000 		call __addsf3
 2530 03a4 DC01      		movw r26,r24
 2531 03a6 CB01      		movw r24,r22
 2532 03a8 8093 0000 		sts forcex,r24
 2533 03ac 9093 0000 		sts forcex+1,r25
 2534 03b0 A093 0000 		sts forcex+2,r26
 2535 03b4 B093 0000 		sts forcex+3,r27
 383:swarmfunctions.c **** 			forcey += alph * force * disy / dis1;
 2537               	.LM187:
 2538 03b8 8C2D      		mov r24,r12
 2539 03ba 9F2D      		mov r25,r15
 2540 03bc A82D      		mov r26,r8
 2541 03be BE2D      		mov r27,r14
 2542 03c0 BC01      		movw r22,r24
 2543 03c2 CD01      		movw r24,r26
 2544 03c4 F101      		movw r30,r2
 2545 03c6 5885      		ldd r21,Y+8
 2546 03c8 4985      		ldd r20,Y+9
 2547 03ca 0F2F      		mov r16,r31
 2548 03cc 1E2F      		mov r17,r30
 2549 03ce 252F      		mov r18,r21
 2550 03d0 342F      		mov r19,r20
 2551 03d2 A901      		movw r20,r18
 2552 03d4 9801      		movw r18,r16
 2553 03d6 0E94 0000 		call __mulsf3
 2554 03da A301      		movw r20,r6
 2555 03dc 9201      		movw r18,r4
 2556 03de 0E94 0000 		call __divsf3
 2557 03e2 9B01      		movw r18,r22
 2558 03e4 AC01      		movw r20,r24
 2559 03e6 6091 0000 		lds r22,forcey
 2560 03ea 7091 0000 		lds r23,forcey+1
 2561 03ee 8091 0000 		lds r24,forcey+2
 2562 03f2 9091 0000 		lds r25,forcey+3
 2563 03f6 0E94 0000 		call __addsf3
 2564 03fa DC01      		movw r26,r24
 2565 03fc CB01      		movw r24,r22
 2566 03fe 8093 0000 		sts forcey,r24
 2567 0402 9093 0000 		sts forcey+1,r25
 2568 0406 A093 0000 		sts forcey+2,r26
 2569 040a B093 0000 		sts forcey+3,r27
 2570               	.L49:
 2571               	/* epilogue start */
 2572               	.LBE51:
 384:swarmfunctions.c **** 		}
 385:swarmfunctions.c **** 	}
 386:swarmfunctions.c **** }
 2574               	.LM188:
 2575 040e 2F96      		adiw r28,15
 2576 0410 CDBF      		out __SP_L__,r28
 2577 0412 DEBF      		out __SP_H__,r29
 2578 0414 DF91      		pop r29
 2579 0416 CF91      		pop r28
 2580 0418 1F91      		pop r17
 2581 041a 0F91      		pop r16
 2582 041c FF90      		pop r15
 2583 041e EF90      		pop r14
 2584 0420 DF90      		pop r13
 2585 0422 CF90      		pop r12
 2586 0424 BF90      		pop r11
 2587 0426 AF90      		pop r10
 2588 0428 9F90      		pop r9
 2589 042a 8F90      		pop r8
 2590 042c 7F90      		pop r7
 2591 042e 6F90      		pop r6
 2592 0430 5F90      		pop r5
 2593 0432 4F90      		pop r4
 2594 0434 3F90      		pop r3
 2595 0436 2F90      		pop r2
 2596 0438 0895      		ret
 2603               	.Lscope15:
 2604               		.section	.text._Z16swarm_disorderedv,"ax",@progbits
 2606               	.global	_Z16swarm_disorderedv
 2608               	_Z16swarm_disorderedv:
 387:swarmfunctions.c **** // --------------------------------------------------------------------------------------------
 388:swarmfunctions.c **** float swarm_disordered()
 389:swarmfunctions.c **** {
 2610               	.LM189:
 2611               	.LFBB16:
 2612 0000 2F92      		push r2
 2613 0002 3F92      		push r3
 2614 0004 4F92      		push r4
 2615 0006 5F92      		push r5
 2616 0008 6F92      		push r6
 2617 000a 7F92      		push r7
 2618 000c 8F92      		push r8
 2619 000e 9F92      		push r9
 2620 0010 AF92      		push r10
 2621 0012 BF92      		push r11
 2622 0014 CF92      		push r12
 2623 0016 DF92      		push r13
 2624 0018 EF92      		push r14
 2625 001a FF92      		push r15
 2626 001c 0F93      		push r16
 2627 001e 1F93      		push r17
 2628 0020 CF93      		push r28
 2629 0022 DF93      		push r29
 2630 0024 CDB7      		in r28,__SP_L__
 2631 0026 DEB7      		in r29,__SP_H__
 2632 0028 6E97      		sbiw r28,30
 2633 002a CDBF      		out __SP_L__,r28
 2634 002c DEBF      		out __SP_H__,r29
 2635               	/* prologue: function */
 2636               	/* frame size = 30 */
 2637               	/* stack size = 48 */
 2638               	.L__stack_usage = 48
 2639               	.LBB52:
 390:swarmfunctions.c **** 	int i;
 391:swarmfunctions.c **** 	float dvx, dvy, lx, ly, vabs, ds, fx, fy;
 392:swarmfunctions.c **** 	float dir = agent0.hd;
 2641               	.LM190:
 2642 002e C090 0000 		lds r12,agent0+16
 2643 0032 D090 0000 		lds r13,agent0+16+1
 2644 0036 E090 0000 		lds r14,agent0+16+2
 2645 003a F090 0000 		lds r15,agent0+16+3
 393:swarmfunctions.c **** 
 394:swarmfunctions.c **** 	// ===== calculation of forces =====
 395:swarmfunctions.c **** 	//self-propel force and viscosity
 396:swarmfunctions.c **** 	dvx = acc * cos(dir) - gmma0 * agent0.vx;
 2647               	.LM191:
 2648 003e 8090 0000 		lds r8,acc
 2649 0042 9090 0000 		lds r9,acc+1
 2650 0046 A090 0000 		lds r10,acc+2
 2651 004a B090 0000 		lds r11,acc+3
 2652 004e C701      		movw r24,r14
 2653 0050 B601      		movw r22,r12
 2654 0052 0E94 0000 		call cos
 2655 0056 6D87      		std Y+13,r22
 2656 0058 7E87      		std Y+14,r23
 2657 005a 8F87      		std Y+15,r24
 2658 005c 988B      		std Y+16,r25
 2659 005e 4090 0000 		lds r4,gmma0
 2660 0062 5090 0000 		lds r5,gmma0+1
 2661 0066 6090 0000 		lds r6,gmma0+2
 2662 006a 7090 0000 		lds r7,gmma0+3
 2663 006e C501      		movw r24,r10
 2664 0070 B401      		movw r22,r8
 2665 0072 2D85      		ldd r18,Y+13
 2666 0074 3E85      		ldd r19,Y+14
 2667 0076 4F85      		ldd r20,Y+15
 2668 0078 5889      		ldd r21,Y+16
 2669 007a 0E94 0000 		call __mulsf3
 2670 007e 6983      		std Y+1,r22
 2671 0080 7A83      		std Y+2,r23
 2672 0082 8B83      		std Y+3,r24
 2673 0084 9C83      		std Y+4,r25
 2674 0086 C301      		movw r24,r6
 2675 0088 B201      		movw r22,r4
 2676 008a 2091 0000 		lds r18,agent0+8
 2677 008e 3091 0000 		lds r19,agent0+8+1
 2678 0092 4091 0000 		lds r20,agent0+8+2
 2679 0096 5091 0000 		lds r21,agent0+8+3
 2680 009a 0E94 0000 		call __mulsf3
 2681 009e 9B01      		movw r18,r22
 2682 00a0 AC01      		movw r20,r24
 2683 00a2 6981      		ldd r22,Y+1
 2684 00a4 7A81      		ldd r23,Y+2
 2685 00a6 8B81      		ldd r24,Y+3
 2686 00a8 9C81      		ldd r25,Y+4
 2687 00aa 0E94 0000 		call __subsf3
 2688 00ae 362E      		mov r3,r22
 2689 00b0 272E      		mov r2,r23
 2690 00b2 8983      		std Y+1,r24
 2691 00b4 9987      		std Y+9,r25
 397:swarmfunctions.c **** 	dvy = acc * sin(dir) - gmma0 * agent0.vy;
 2693               	.LM192:
 2694 00b6 C701      		movw r24,r14
 2695 00b8 B601      		movw r22,r12
 2696 00ba 0E94 0000 		call sin
 2697 00be 6D83      		std Y+5,r22
 2698 00c0 7E83      		std Y+6,r23
 2699 00c2 8F83      		std Y+7,r24
 2700 00c4 9887      		std Y+8,r25
 2701 00c6 C501      		movw r24,r10
 2702 00c8 B401      		movw r22,r8
 2703 00ca 2D81      		ldd r18,Y+5
 2704 00cc 3E81      		ldd r19,Y+6
 2705 00ce 4F81      		ldd r20,Y+7
 2706 00d0 5885      		ldd r21,Y+8
 2707 00d2 0E94 0000 		call __mulsf3
 2708 00d6 6B01      		movw r12,r22
 2709 00d8 7C01      		movw r14,r24
 2710 00da C301      		movw r24,r6
 2711 00dc B201      		movw r22,r4
 2712 00de 2091 0000 		lds r18,agent0+12
 2713 00e2 3091 0000 		lds r19,agent0+12+1
 2714 00e6 4091 0000 		lds r20,agent0+12+2
 2715 00ea 5091 0000 		lds r21,agent0+12+3
 2716 00ee 0E94 0000 		call __mulsf3
 2717 00f2 9B01      		movw r18,r22
 2718 00f4 AC01      		movw r20,r24
 2719 00f6 C701      		movw r24,r14
 2720 00f8 B601      		movw r22,r12
 2721 00fa 0E94 0000 		call __subsf3
 2722 00fe F62E      		mov r15,r22
 2723 0100 E72E      		mov r14,r23
 2724 0102 C82E      		mov r12,r24
 2725 0104 892E      		mov r8,r25
 398:swarmfunctions.c **** 
 399:swarmfunctions.c **** 	//interaction force with 6 neighbors
 400:swarmfunctions.c **** 	forcex=0.0; forcey=0.0;
 2727               	.LM193:
 2728 0106 80E0      		ldi r24,lo8(0x0)
 2729 0108 90E0      		ldi r25,hi8(0x0)
 2730 010a DC01      		movw r26,r24
 2731 010c 8093 0000 		sts forcex,r24
 2732 0110 9093 0000 		sts forcex+1,r25
 2733 0114 A093 0000 		sts forcex+2,r26
 2734 0118 B093 0000 		sts forcex+3,r27
 2735 011c 8093 0000 		sts forcey,r24
 2736 0120 9093 0000 		sts forcey+1,r25
 2737 0124 A093 0000 		sts forcey+2,r26
 2738 0128 B093 0000 		sts forcey+3,r27
 2739 012c 00E0      		ldi r16,lo8(connected)
 2740 012e 10E0      		ldi r17,hi8(connected)
 401:swarmfunctions.c **** 
 402:swarmfunctions.c **** 	for(i=0;i<NUM_NEIGHBORS;i++)
 2742               	.LM194:
 2743 0130 80E0      		ldi r24,lo8(0)
 2744 0132 90E0      		ldi r25,hi8(0)
 2745 0134 5C01      		movw r10,r24
 2746               	.L63:
 403:swarmfunctions.c **** 	{
 404:swarmfunctions.c **** 		if(connected[i]){
 2748               	.LM195:
 2749 0136 D801      		movw r26,r16
 2750 0138 8D91      		ld r24,X+
 2751 013a 8D01      		movw r16,r26
 2752 013c 8823      		tst r24
 2753 013e 01F0      		breq .L62
 405:swarmfunctions.c **** 			swarm_interaction0(i);
 2755               	.LM196:
 2756 0140 C501      		movw r24,r10
 2757 0142 0E94 0000 		call _Z18swarm_interaction0i
 2758               	.L62:
 402:swarmfunctions.c **** 	for(i=0;i<NUM_NEIGHBORS;i++)
 2760               	.LM197:
 2761 0146 0894      		sec
 2762 0148 A11C      		adc r10,__zero_reg__
 2763 014a B11C      		adc r11,__zero_reg__
 2764 014c B6E0      		ldi r27,lo8(6)
 2765 014e AB16      		cp r10,r27
 2766 0150 B104      		cpc r11,__zero_reg__
 2767 0152 01F4      		brne .L63
 406:swarmfunctions.c **** 		}
 407:swarmfunctions.c **** 	}
 408:swarmfunctions.c **** 
 409:swarmfunctions.c **** 	dvx = dvx + forcex;
 2769               	.LM198:
 2770 0154 A101      		movw r20,r2
 2771 0156 3981      		ldd r19,Y+1
 2772 0158 2985      		ldd r18,Y+9
 2773 015a 852F      		mov r24,r21
 2774 015c 922D      		mov r25,r2
 2775 015e A32F      		mov r26,r19
 2776 0160 B22F      		mov r27,r18
 2777 0162 BC01      		movw r22,r24
 2778 0164 CD01      		movw r24,r26
 2779 0166 2091 0000 		lds r18,forcex
 2780 016a 3091 0000 		lds r19,forcex+1
 2781 016e 4091 0000 		lds r20,forcex+2
 2782 0172 5091 0000 		lds r21,forcex+3
 2783 0176 0E94 0000 		call __addsf3
 2784 017a 362E      		mov r3,r22
 2785 017c 272E      		mov r2,r23
 2786 017e 182F      		mov r17,r24
 2787 0180 092F      		mov r16,r25
 410:swarmfunctions.c **** 	dvy = dvy + forcey;
 2789               	.LM199:
 2790 0182 A701      		movw r20,r14
 2791 0184 852F      		mov r24,r21
 2792 0186 9E2D      		mov r25,r14
 2793 0188 AC2D      		mov r26,r12
 2794 018a B82D      		mov r27,r8
 2795 018c BC01      		movw r22,r24
 2796 018e CD01      		movw r24,r26
 2797 0190 2091 0000 		lds r18,forcey
 2798 0194 3091 0000 		lds r19,forcey+1
 2799 0198 4091 0000 		lds r20,forcey+2
 2800 019c 5091 0000 		lds r21,forcey+3
 2801 01a0 0E94 0000 		call __addsf3
 2802 01a4 862E      		mov r8,r22
 2803 01a6 472E      		mov r4,r23
 2804 01a8 B82E      		mov r11,r24
 2805 01aa A92E      		mov r10,r25
 411:swarmfunctions.c **** 
 412:swarmfunctions.c **** 	//spring term (Zero-length spring). fixed point = (0,0)
 413:swarmfunctions.c **** 	lx = - agent0.px;
 2807               	.LM200:
 2808 01ac 8091 0000 		lds r24,agent0
 2809 01b0 9091 0000 		lds r25,agent0+1
 2810 01b4 A091 0000 		lds r26,agent0+2
 2811 01b8 B091 0000 		lds r27,agent0+3
 2812 01bc 8987      		std Y+9,r24
 2813 01be 9A87      		std Y+10,r25
 2814 01c0 AB87      		std Y+11,r26
 2815 01c2 BC87      		std Y+12,r27
 414:swarmfunctions.c **** 	ly = - agent0.py;
 2817               	.LM201:
 2818 01c4 8091 0000 		lds r24,agent0+4
 2819 01c8 9091 0000 		lds r25,agent0+4+1
 2820 01cc A091 0000 		lds r26,agent0+4+2
 2821 01d0 B091 0000 		lds r27,agent0+4+3
 2822 01d4 898B      		std Y+17,r24
 2823 01d6 9A8B      		std Y+18,r25
 2824 01d8 AB8B      		std Y+19,r26
 2825 01da BC8B      		std Y+20,r27
 415:swarmfunctions.c **** 	dvx = dvx + ka0 * lx;
 2827               	.LM202:
 2828 01dc C090 0000 		lds r12,ka0
 2829 01e0 D090 0000 		lds r13,ka0+1
 2830 01e4 E090 0000 		lds r14,ka0+2
 2831 01e8 F090 0000 		lds r15,ka0+3
 413:swarmfunctions.c **** 	lx = - agent0.px;
 2833               	.LM203:
 2834 01ec 2985      		ldd r18,Y+9
 2835 01ee 3A85      		ldd r19,Y+10
 2836 01f0 4B85      		ldd r20,Y+11
 2837 01f2 5C85      		ldd r21,Y+12
 2838 01f4 5058      		subi r21,0x80
 2840               	.LM204:
 2841 01f6 C701      		movw r24,r14
 2842 01f8 B601      		movw r22,r12
 2843 01fa 0E94 0000 		call __mulsf3
 2844 01fe 9B01      		movw r18,r22
 2845 0200 AC01      		movw r20,r24
 2846 0202 F101      		movw r30,r2
 2847 0204 B801      		movw r22,r16
 2848 0206 8F2F      		mov r24,r31
 2849 0208 9E2F      		mov r25,r30
 2850 020a A72F      		mov r26,r23
 2851 020c B62F      		mov r27,r22
 2852 020e BC01      		movw r22,r24
 2853 0210 CD01      		movw r24,r26
 2854 0212 0E94 0000 		call __addsf3
 2855 0216 698F      		std Y+25,r22
 2856 0218 7A8F      		std Y+26,r23
 2857 021a 8B8F      		std Y+27,r24
 2858 021c 9C8F      		std Y+28,r25
 414:swarmfunctions.c **** 	ly = - agent0.py;
 2860               	.LM205:
 2861 021e 2989      		ldd r18,Y+17
 2862 0220 3A89      		ldd r19,Y+18
 2863 0222 4B89      		ldd r20,Y+19
 2864 0224 5C89      		ldd r21,Y+20
 2865 0226 5058      		subi r21,0x80
 416:swarmfunctions.c **** 	dvy = dvy + ka0 * ly;
 2867               	.LM206:
 2868 0228 C701      		movw r24,r14
 2869 022a B601      		movw r22,r12
 2870 022c 0E94 0000 		call __mulsf3
 2871 0230 9B01      		movw r18,r22
 2872 0232 AC01      		movw r20,r24
 2873 0234 B501      		movw r22,r10
 2874 0236 882D      		mov r24,r8
 2875 0238 942D      		mov r25,r4
 2876 023a A72F      		mov r26,r23
 2877 023c B62F      		mov r27,r22
 2878 023e BC01      		movw r22,r24
 2879 0240 CD01      		movw r24,r26
 2880 0242 0E94 0000 		call __addsf3
 2881 0246 362E      		mov r3,r22
 2882 0248 272E      		mov r2,r23
 2883 024a 8D8F      		std Y+29,r24
 2884 024c 9E8F      		std Y+30,r25
 417:swarmfunctions.c **** 
 418:swarmfunctions.c **** 	// ===== update =====
 419:swarmfunctions.c **** 	//direction
 420:swarmfunctions.c **** 	vabs = sqrt(agent0.vx * agent0.vx + agent0.vy * agent0.vy);
 2886               	.LM207:
 2887 024e 8090 0000 		lds r8,agent0+8
 2888 0252 9090 0000 		lds r9,agent0+8+1
 2889 0256 A090 0000 		lds r10,agent0+8+2
 2890 025a B090 0000 		lds r11,agent0+8+3
 2891 025e 8091 0000 		lds r24,agent0+12
 2892 0262 9091 0000 		lds r25,agent0+12+1
 2893 0266 A091 0000 		lds r26,agent0+12+2
 2894 026a B091 0000 		lds r27,agent0+12+3
 2895 026e 8983      		std Y+1,r24
 2896 0270 9A83      		std Y+2,r25
 2897 0272 AB83      		std Y+3,r26
 2898 0274 BC83      		std Y+4,r27
 2899 0276 C501      		movw r24,r10
 2900 0278 B401      		movw r22,r8
 2901 027a A501      		movw r20,r10
 2902 027c 9401      		movw r18,r8
 2903 027e 0E94 0000 		call __mulsf3
 2904 0282 6B01      		movw r12,r22
 2905 0284 7C01      		movw r14,r24
 2906 0286 6981      		ldd r22,Y+1
 2907 0288 7A81      		ldd r23,Y+2
 2908 028a 8B81      		ldd r24,Y+3
 2909 028c 9C81      		ldd r25,Y+4
 2910 028e 9B01      		movw r18,r22
 2911 0290 AC01      		movw r20,r24
 2912 0292 0E94 0000 		call __mulsf3
 2913 0296 9B01      		movw r18,r22
 2914 0298 AC01      		movw r20,r24
 2915 029a C701      		movw r24,r14
 2916 029c B601      		movw r22,r12
 2917 029e 0E94 0000 		call __addsf3
 2918 02a2 0E94 0000 		call sqrt
 2919 02a6 6B01      		movw r12,r22
 2920 02a8 7C01      		movw r14,r24
 421:swarmfunctions.c **** 
 422:swarmfunctions.c **** 	fx = agent0.vx / vabs;
 423:swarmfunctions.c **** 	fy = agent0.vy / vabs;
 424:swarmfunctions.c **** 	ds = -1.0 / tau0 * (sin(dir)*fx-cos(dir)*fy); // get sin value by cross product
 425:swarmfunctions.c **** 
 426:swarmfunctions.c **** 	agent0.hd += ds * dt;
 2922               	.LM208:
 2923 02aa 4090 0000 		lds r4,dt
 2924 02ae 5090 0000 		lds r5,dt+1
 2925 02b2 6090 0000 		lds r6,dt+2
 2926 02b6 7090 0000 		lds r7,dt+3
 424:swarmfunctions.c **** 	ds = -1.0 / tau0 * (sin(dir)*fx-cos(dir)*fy); // get sin value by cross product
 2928               	.LM209:
 2929 02ba 60E0      		ldi r22,lo8(0xbf800000)
 2930 02bc 70E0      		ldi r23,hi8(0xbf800000)
 2931 02be 80E8      		ldi r24,hlo8(0xbf800000)
 2932 02c0 9FEB      		ldi r25,hhi8(0xbf800000)
 2933 02c2 2091 0000 		lds r18,tau0
 2934 02c6 3091 0000 		lds r19,tau0+1
 2935 02ca 4091 0000 		lds r20,tau0+2
 2936 02ce 5091 0000 		lds r21,tau0+3
 2937 02d2 0E94 0000 		call __divsf3
 2938 02d6 6D8B      		std Y+21,r22
 2939 02d8 7E8B      		std Y+22,r23
 2940 02da 8F8B      		std Y+23,r24
 2941 02dc 988F      		std Y+24,r25
 422:swarmfunctions.c **** 	fx = agent0.vx / vabs;
 2943               	.LM210:
 2944 02de C501      		movw r24,r10
 2945 02e0 B401      		movw r22,r8
 2946 02e2 A701      		movw r20,r14
 2947 02e4 9601      		movw r18,r12
 2948 02e6 0E94 0000 		call __divsf3
 2949 02ea 9B01      		movw r18,r22
 2950 02ec AC01      		movw r20,r24
 424:swarmfunctions.c **** 	ds = -1.0 / tau0 * (sin(dir)*fx-cos(dir)*fy); // get sin value by cross product
 2952               	.LM211:
 2953 02ee 6D81      		ldd r22,Y+5
 2954 02f0 7E81      		ldd r23,Y+6
 2955 02f2 8F81      		ldd r24,Y+7
 2956 02f4 9885      		ldd r25,Y+8
 2957 02f6 0E94 0000 		call __mulsf3
 2958 02fa 6D83      		std Y+5,r22
 2959 02fc 7E83      		std Y+6,r23
 2960 02fe 8F83      		std Y+7,r24
 2961 0300 9887      		std Y+8,r25
 423:swarmfunctions.c **** 	fy = agent0.vy / vabs;
 2963               	.LM212:
 2964 0302 6981      		ldd r22,Y+1
 2965 0304 7A81      		ldd r23,Y+2
 2966 0306 8B81      		ldd r24,Y+3
 2967 0308 9C81      		ldd r25,Y+4
 2968 030a A701      		movw r20,r14
 2969 030c 9601      		movw r18,r12
 2970 030e 0E94 0000 		call __divsf3
 2971 0312 9B01      		movw r18,r22
 2972 0314 AC01      		movw r20,r24
 424:swarmfunctions.c **** 	ds = -1.0 / tau0 * (sin(dir)*fx-cos(dir)*fy); // get sin value by cross product
 2974               	.LM213:
 2975 0316 6D85      		ldd r22,Y+13
 2976 0318 7E85      		ldd r23,Y+14
 2977 031a 8F85      		ldd r24,Y+15
 2978 031c 9889      		ldd r25,Y+16
 2979 031e 0E94 0000 		call __mulsf3
 2980 0322 9B01      		movw r18,r22
 2981 0324 AC01      		movw r20,r24
 2982 0326 6D81      		ldd r22,Y+5
 2983 0328 7E81      		ldd r23,Y+6
 2984 032a 8F81      		ldd r24,Y+7
 2985 032c 9885      		ldd r25,Y+8
 2986 032e 0E94 0000 		call __subsf3
 2987 0332 9B01      		movw r18,r22
 2988 0334 AC01      		movw r20,r24
 2989 0336 6D89      		ldd r22,Y+21
 2990 0338 7E89      		ldd r23,Y+22
 2991 033a 8F89      		ldd r24,Y+23
 2992 033c 988D      		ldd r25,Y+24
 2993 033e 0E94 0000 		call __mulsf3
 2995               	.LM214:
 2996 0342 A301      		movw r20,r6
 2997 0344 9201      		movw r18,r4
 2998 0346 0E94 0000 		call __mulsf3
 2999 034a 2091 0000 		lds r18,agent0+16
 3000 034e 3091 0000 		lds r19,agent0+16+1
 3001 0352 4091 0000 		lds r20,agent0+16+2
 3002 0356 5091 0000 		lds r21,agent0+16+3
 3003 035a 0E94 0000 		call __addsf3
 3004 035e 8B01      		movw r16,r22
 3005 0360 7C01      		movw r14,r24
 3006 0362 862F      		mov r24,r22
 3007 0364 912F      		mov r25,r17
 3008 0366 AE2D      		mov r26,r14
 3009 0368 BF2D      		mov r27,r15
 3010 036a 8093 0000 		sts agent0+16,r24
 3011 036e 9093 0000 		sts agent0+16+1,r25
 3012 0372 A093 0000 		sts agent0+16+2,r26
 3013 0376 B093 0000 		sts agent0+16+3,r27
 427:swarmfunctions.c **** 
 428:swarmfunctions.c **** 	if(agent0.hd > 2.0 * PI)	agent0.hd -= 2.0 * PI;
 3015               	.LM215:
 3016 037a BC01      		movw r22,r24
 3017 037c CD01      		movw r24,r26
 3018 037e 20ED      		ldi r18,lo8(0x40c90fd0)
 3019 0380 3FE0      		ldi r19,hi8(0x40c90fd0)
 3020 0382 49EC      		ldi r20,hlo8(0x40c90fd0)
 3021 0384 50E4      		ldi r21,hhi8(0x40c90fd0)
 3022 0386 0E94 0000 		call __gtsf2
 3023 038a 1816      		cp __zero_reg__,r24
 3024 038c 04F4      		brge .L64
 3026               	.LM216:
 3027 038e 802F      		mov r24,r16
 3028 0390 912F      		mov r25,r17
 3029 0392 AE2D      		mov r26,r14
 3030 0394 BF2D      		mov r27,r15
 3031 0396 BC01      		movw r22,r24
 3032 0398 CD01      		movw r24,r26
 3033 039a 20ED      		ldi r18,lo8(0x40c90fd0)
 3034 039c 3FE0      		ldi r19,hi8(0x40c90fd0)
 3035 039e 49EC      		ldi r20,hlo8(0x40c90fd0)
 3036 03a0 50E4      		ldi r21,hhi8(0x40c90fd0)
 3037 03a2 0E94 0000 		call __subsf3
 3038 03a6 DC01      		movw r26,r24
 3039 03a8 CB01      		movw r24,r22
 3040 03aa 8093 0000 		sts agent0+16,r24
 3041 03ae 9093 0000 		sts agent0+16+1,r25
 3042 03b2 A093 0000 		sts agent0+16+2,r26
 3043 03b6 B093 0000 		sts agent0+16+3,r27
 3044               	.L64:
 429:swarmfunctions.c **** 	if(agent0.hd < 0 ) 			agent0.hd += 2.0 * PI;
 3046               	.LM217:
 3047 03ba C090 0000 		lds r12,agent0+16
 3048 03be D090 0000 		lds r13,agent0+16+1
 3049 03c2 E090 0000 		lds r14,agent0+16+2
 3050 03c6 F090 0000 		lds r15,agent0+16+3
 3051 03ca C701      		movw r24,r14
 3052 03cc B601      		movw r22,r12
 3053 03ce 20E0      		ldi r18,lo8(0x0)
 3054 03d0 30E0      		ldi r19,hi8(0x0)
 3055 03d2 A901      		movw r20,r18
 3056 03d4 0E94 0000 		call __ltsf2
 3057 03d8 87FF      		sbrs r24,7
 3058 03da 00C0      		rjmp .L66
 3060               	.LM218:
 3061 03dc C701      		movw r24,r14
 3062 03de B601      		movw r22,r12
 3063 03e0 20ED      		ldi r18,lo8(0x40c90fd0)
 3064 03e2 3FE0      		ldi r19,hi8(0x40c90fd0)
 3065 03e4 49EC      		ldi r20,hlo8(0x40c90fd0)
 3066 03e6 50E4      		ldi r21,hhi8(0x40c90fd0)
 3067 03e8 0E94 0000 		call __addsf3
 3068 03ec DC01      		movw r26,r24
 3069 03ee CB01      		movw r24,r22
 3070 03f0 8093 0000 		sts agent0+16,r24
 3071 03f4 9093 0000 		sts agent0+16+1,r25
 3072 03f8 A093 0000 		sts agent0+16+2,r26
 3073 03fc B093 0000 		sts agent0+16+3,r27
 3074               	.L66:
 430:swarmfunctions.c **** 
 431:swarmfunctions.c **** 	//velocity
 432:swarmfunctions.c **** 	agent0.vx += dvx * dt;
 3076               	.LM219:
 3077 0400 598D      		ldd r21,Y+25
 3078 0402 4A8D      		ldd r20,Y+26
 3079 0404 3B8D      		ldd r19,Y+27
 3080 0406 2C8D      		ldd r18,Y+28
 3081 0408 852F      		mov r24,r21
 3082 040a 942F      		mov r25,r20
 3083 040c A32F      		mov r26,r19
 3084 040e B22F      		mov r27,r18
 3085 0410 BC01      		movw r22,r24
 3086 0412 CD01      		movw r24,r26
 3087 0414 A301      		movw r20,r6
 3088 0416 9201      		movw r18,r4
 3089 0418 0E94 0000 		call __mulsf3
 3090 041c 9B01      		movw r18,r22
 3091 041e AC01      		movw r20,r24
 3092 0420 C501      		movw r24,r10
 3093 0422 B401      		movw r22,r8
 3094 0424 0E94 0000 		call __addsf3
 3095 0428 062F      		mov r16,r22
 3096 042a B72E      		mov r11,r23
 3097 042c C82E      		mov r12,r24
 3098 042e A92E      		mov r10,r25
 3099 0430 862F      		mov r24,r22
 3100 0432 9B2D      		mov r25,r11
 3101 0434 AC2D      		mov r26,r12
 3102 0436 BA2D      		mov r27,r10
 3103 0438 8093 0000 		sts agent0+8,r24
 3104 043c 9093 0000 		sts agent0+8+1,r25
 3105 0440 A093 0000 		sts agent0+8+2,r26
 3106 0444 B093 0000 		sts agent0+8+3,r27
 433:swarmfunctions.c **** 	agent0.vy += dvy * dt;
 3108               	.LM220:
 3109 0448 A101      		movw r20,r2
 3110 044a 3D8D      		ldd r19,Y+29
 3111 044c 2E8D      		ldd r18,Y+30
 3112 044e 852F      		mov r24,r21
 3113 0450 922D      		mov r25,r2
 3114 0452 A32F      		mov r26,r19
 3115 0454 B22F      		mov r27,r18
 3116 0456 BC01      		movw r22,r24
 3117 0458 CD01      		movw r24,r26
 3118 045a A301      		movw r20,r6
 3119 045c 9201      		movw r18,r4
 3120 045e 0E94 0000 		call __mulsf3
 3121 0462 9B01      		movw r18,r22
 3122 0464 AC01      		movw r20,r24
 3123 0466 6981      		ldd r22,Y+1
 3124 0468 7A81      		ldd r23,Y+2
 3125 046a 8B81      		ldd r24,Y+3
 3126 046c 9C81      		ldd r25,Y+4
 3127 046e 0E94 0000 		call __addsf3
 3128 0472 162F      		mov r17,r22
 3129 0474 872E      		mov r8,r23
 3130 0476 F82E      		mov r15,r24
 3131 0478 E92E      		mov r14,r25
 3132 047a 9701      		movw r18,r14
 3133 047c 862F      		mov r24,r22
 3134 047e 982D      		mov r25,r8
 3135 0480 A32F      		mov r26,r19
 3136 0482 B22F      		mov r27,r18
 3137 0484 8093 0000 		sts agent0+12,r24
 3138 0488 9093 0000 		sts agent0+12+1,r25
 3139 048c A093 0000 		sts agent0+12+2,r26
 3140 0490 B093 0000 		sts agent0+12+3,r27
 434:swarmfunctions.c **** 
 435:swarmfunctions.c **** 
 436:swarmfunctions.c **** 	//position
 437:swarmfunctions.c **** 	agent0.px += agent0.vx * dt;
 3142               	.LM221:
 3143 0494 802F      		mov r24,r16
 3144 0496 9B2D      		mov r25,r11
 3145 0498 AC2D      		mov r26,r12
 3146 049a BA2D      		mov r27,r10
 3147 049c BC01      		movw r22,r24
 3148 049e CD01      		movw r24,r26
 3149 04a0 A301      		movw r20,r6
 3150 04a2 9201      		movw r18,r4
 3151 04a4 0E94 0000 		call __mulsf3
 3152 04a8 9B01      		movw r18,r22
 3153 04aa AC01      		movw r20,r24
 3154 04ac 6985      		ldd r22,Y+9
 3155 04ae 7A85      		ldd r23,Y+10
 3156 04b0 8B85      		ldd r24,Y+11
 3157 04b2 9C85      		ldd r25,Y+12
 3158 04b4 0E94 0000 		call __addsf3
 3159 04b8 DC01      		movw r26,r24
 3160 04ba CB01      		movw r24,r22
 3161 04bc 8093 0000 		sts agent0,r24
 3162 04c0 9093 0000 		sts agent0+1,r25
 3163 04c4 A093 0000 		sts agent0+2,r26
 3164 04c8 B093 0000 		sts agent0+3,r27
 438:swarmfunctions.c **** 	agent0.py += agent0.vy * dt;
 3166               	.LM222:
 3167 04cc 9701      		movw r18,r14
 3168 04ce 812F      		mov r24,r17
 3169 04d0 982D      		mov r25,r8
 3170 04d2 A32F      		mov r26,r19
 3171 04d4 B22F      		mov r27,r18
 3172 04d6 BC01      		movw r22,r24
 3173 04d8 CD01      		movw r24,r26
 3174 04da A301      		movw r20,r6
 3175 04dc 9201      		movw r18,r4
 3176 04de 0E94 0000 		call __mulsf3
 3177 04e2 9B01      		movw r18,r22
 3178 04e4 AC01      		movw r20,r24
 3179 04e6 6989      		ldd r22,Y+17
 3180 04e8 7A89      		ldd r23,Y+18
 3181 04ea 8B89      		ldd r24,Y+19
 3182 04ec 9C89      		ldd r25,Y+20
 3183 04ee 0E94 0000 		call __addsf3
 3184 04f2 DC01      		movw r26,r24
 3185 04f4 CB01      		movw r24,r22
 3186 04f6 8093 0000 		sts agent0+4,r24
 3187 04fa 9093 0000 		sts agent0+4+1,r25
 3188 04fe A093 0000 		sts agent0+4+2,r26
 3189 0502 B093 0000 		sts agent0+4+3,r27
 3190               	.LBE52:
 439:swarmfunctions.c **** 
 440:swarmfunctions.c **** 	return agent0.hd;
 441:swarmfunctions.c **** }
 3192               	.LM223:
 3193 0506 5091 0000 		lds r21,agent0+16
 3194 050a 4091 0000 		lds r20,agent0+17
 3195 050e 3091 0000 		lds r19,agent0+18
 3196 0512 2091 0000 		lds r18,agent0+19
 3197 0516 852F      		mov r24,r21
 3198 0518 942F      		mov r25,r20
 3199 051a A32F      		mov r26,r19
 3200 051c B22F      		mov r27,r18
 3201 051e BC01      		movw r22,r24
 3202 0520 CD01      		movw r24,r26
 3203               	/* epilogue start */
 3204 0522 6E96      		adiw r28,30
 3205 0524 CDBF      		out __SP_L__,r28
 3206 0526 DEBF      		out __SP_H__,r29
 3207 0528 DF91      		pop r29
 3208 052a CF91      		pop r28
 3209 052c 1F91      		pop r17
 3210 052e 0F91      		pop r16
 3211 0530 FF90      		pop r15
 3212 0532 EF90      		pop r14
 3213 0534 DF90      		pop r13
 3214 0536 CF90      		pop r12
 3215 0538 BF90      		pop r11
 3216 053a AF90      		pop r10
 3217 053c 9F90      		pop r9
 3218 053e 8F90      		pop r8
 3219 0540 7F90      		pop r7
 3220 0542 6F90      		pop r6
 3221 0544 5F90      		pop r5
 3222 0546 4F90      		pop r4
 3223 0548 3F90      		pop r3
 3224 054a 2F90      		pop r2
 3225 054c 0895      		ret
 3232               	.Lscope16:
 3233               		.section	.text._Z18swarm_interaction1i,"ax",@progbits
 3236               	.global	_Z18swarm_interaction1i
 3238               	_Z18swarm_interaction1i:
 442:swarmfunctions.c **** 
 443:swarmfunctions.c **** // ################### SYNCHRONIZED BEHAVIOR ####################
 444:swarmfunctions.c **** void swarm_interaction1(int nei)
 445:swarmfunctions.c **** {
 3240               	.LM224:
 3241               	.LFBB17:
 3242 0000 2F92      		push r2
 3243 0002 3F92      		push r3
 3244 0004 4F92      		push r4
 3245 0006 5F92      		push r5
 3246 0008 6F92      		push r6
 3247 000a 7F92      		push r7
 3248 000c 8F92      		push r8
 3249 000e 9F92      		push r9
 3250 0010 AF92      		push r10
 3251 0012 BF92      		push r11
 3252 0014 CF92      		push r12
 3253 0016 DF92      		push r13
 3254 0018 EF92      		push r14
 3255 001a FF92      		push r15
 3256 001c 0F93      		push r16
 3257 001e 1F93      		push r17
 3258 0020 CF93      		push r28
 3259 0022 DF93      		push r29
 3260 0024 CDB7      		in r28,__SP_L__
 3261 0026 DEB7      		in r29,__SP_H__
 3262 0028 2F97      		sbiw r28,15
 3263 002a CDBF      		out __SP_L__,r28
 3264 002c DEBF      		out __SP_H__,r29
 3265               	/* prologue: function */
 3266               	/* frame size = 15 */
 3267               	/* stack size = 33 */
 3268               	.L__stack_usage = 33
 3269 002e 8C01      		movw r16,r24
 3270               	.LBB53:
 446:swarmfunctions.c **** 	float disx, disy, dis1, dis2, alph, force;
 447:swarmfunctions.c **** 	float di, dj;
 448:swarmfunctions.c **** 	bool flag = true;
 449:swarmfunctions.c **** 
 450:swarmfunctions.c **** 	switch(nei)
 3272               	.LM225:
 3273 0030 8230      		cpi r24,2
 3274 0032 9105      		cpc r25,__zero_reg__
 3275 0034 01F0      		breq .L74
 3276 0036 8330      		cpi r24,3
 3277 0038 9105      		cpc r25,__zero_reg__
 3278 003a 04F4      		brge .L77
 3279 003c 0097      		sbiw r24,0
 3280 003e 01F0      		breq .L73
 3281 0040 00C0      		rjmp .L71
 3282               	.L77:
 3283 0042 8330      		cpi r24,3
 3284 0044 9105      		cpc r25,__zero_reg__
 3285 0046 01F0      		breq .L75
 3286 0048 8430      		cpi r24,4
 3287 004a 9105      		cpc r25,__zero_reg__
 3288 004c 01F0      		breq .+2
 3289 004e 00C0      		rjmp .L71
 3290 0050 00C0      		rjmp .L82
 3291               	.L74:
 451:swarmfunctions.c **** 	{/* //in case of 6 neighbors
 452:swarmfunctions.c **** 		case BOTTOM_RIGHT: di= 0.866; dj= 0.500; break;
 453:swarmfunctions.c **** 		case BOTTOM_LEFT : di=-0.866; dj= 0.500; break;
 454:swarmfunctions.c **** 		case LEFT_BOTTOM : di=-1.000; dj= 0.000; break;
 455:swarmfunctions.c **** 		case LEFT_TOP    : di=-0.866; dj=-0.500; break;
 456:swarmfunctions.c **** 		case RIGHT_BOTTOM: di= 1.000; dj= 0.000; break;
 457:swarmfunctions.c **** 		case RIGHT_TOP   : di= 0.866; dj=-0.500; break;
 458:swarmfunctions.c **** 	*/
 459:swarmfunctions.c **** 		//in case of 4 neighbors
 460:swarmfunctions.c **** 		case LEFT_BOTTOM : di=-1.000; dj= 0.000; break;
 3293               	.LM226:
 3294 0052 0F2E      		mov __tmp_reg__,r31
 3295 0054 F0E0      		ldi r31,lo8(0x0)
 3296 0056 8F2E      		mov r8,r31
 3297 0058 F0E0      		ldi r31,hi8(0x0)
 3298 005a 9F2E      		mov r9,r31
 3299 005c F0E0      		ldi r31,hlo8(0x0)
 3300 005e AF2E      		mov r10,r31
 3301 0060 F0E0      		ldi r31,hhi8(0x0)
 3302 0062 BF2E      		mov r11,r31
 3303 0064 F02D      		mov r31,__tmp_reg__
 3304 0066 0F2E      		mov __tmp_reg__,r31
 3305 0068 F0E0      		ldi r31,lo8(0xbf800000)
 3306 006a CF2E      		mov r12,r31
 3307 006c F0E0      		ldi r31,hi8(0xbf800000)
 3308 006e DF2E      		mov r13,r31
 3309 0070 F0E8      		ldi r31,hlo8(0xbf800000)
 3310 0072 EF2E      		mov r14,r31
 3311 0074 FFEB      		ldi r31,hhi8(0xbf800000)
 3312 0076 FF2E      		mov r15,r31
 3313 0078 F02D      		mov r31,__tmp_reg__
 3314 007a 00C0      		rjmp .L76
 3315               	.L73:
 461:swarmfunctions.c **** 		case RIGHT_BOTTOM: di= 1.000; dj= 0.000; break;
 462:swarmfunctions.c **** 		case BOTTOM_RIGHT: di= 0.000; dj= 1.000; break;
 3317               	.LM227:
 3318 007c 0F2E      		mov __tmp_reg__,r31
 3319 007e F0E0      		ldi r31,lo8(0x3f800000)
 3320 0080 8F2E      		mov r8,r31
 3321 0082 F0E0      		ldi r31,hi8(0x3f800000)
 3322 0084 9F2E      		mov r9,r31
 3323 0086 F0E8      		ldi r31,hlo8(0x3f800000)
 3324 0088 AF2E      		mov r10,r31
 3325 008a FFE3      		ldi r31,hhi8(0x3f800000)
 3326 008c BF2E      		mov r11,r31
 3327 008e F02D      		mov r31,__tmp_reg__
 3328 0090 00C0      		rjmp .L81
 3329               	.L75:
 463:swarmfunctions.c **** 		case LEFT_TOP    : di= 0.000; dj=-1.000; break;
 3331               	.LM228:
 3332 0092 0F2E      		mov __tmp_reg__,r31
 3333 0094 F0E0      		ldi r31,lo8(0xbf800000)
 3334 0096 8F2E      		mov r8,r31
 3335 0098 F0E0      		ldi r31,hi8(0xbf800000)
 3336 009a 9F2E      		mov r9,r31
 3337 009c F0E8      		ldi r31,hlo8(0xbf800000)
 3338 009e AF2E      		mov r10,r31
 3339 00a0 FFEB      		ldi r31,hhi8(0xbf800000)
 3340 00a2 BF2E      		mov r11,r31
 3341 00a4 F02D      		mov r31,__tmp_reg__
 3342               	.L81:
 3343 00a6 0F2E      		mov __tmp_reg__,r31
 3344 00a8 F0E0      		ldi r31,lo8(0x0)
 3345 00aa CF2E      		mov r12,r31
 3346 00ac F0E0      		ldi r31,hi8(0x0)
 3347 00ae DF2E      		mov r13,r31
 3348 00b0 F0E0      		ldi r31,hlo8(0x0)
 3349 00b2 EF2E      		mov r14,r31
 3350 00b4 F0E0      		ldi r31,hhi8(0x0)
 3351 00b6 FF2E      		mov r15,r31
 3352 00b8 F02D      		mov r31,__tmp_reg__
 3353 00ba 00C0      		rjmp .L76
 3354               	.L82:
 461:swarmfunctions.c **** 		case RIGHT_BOTTOM: di= 1.000; dj= 0.000; break;
 3356               	.LM229:
 3357 00bc 0F2E      		mov __tmp_reg__,r31
 3358 00be F0E0      		ldi r31,lo8(0x0)
 3359 00c0 8F2E      		mov r8,r31
 3360 00c2 F0E0      		ldi r31,hi8(0x0)
 3361 00c4 9F2E      		mov r9,r31
 3362 00c6 F0E0      		ldi r31,hlo8(0x0)
 3363 00c8 AF2E      		mov r10,r31
 3364 00ca F0E0      		ldi r31,hhi8(0x0)
 3365 00cc BF2E      		mov r11,r31
 3366 00ce F02D      		mov r31,__tmp_reg__
 3367 00d0 0F2E      		mov __tmp_reg__,r31
 3368 00d2 F0E0      		ldi r31,lo8(0x3f800000)
 3369 00d4 CF2E      		mov r12,r31
 3370 00d6 F0E0      		ldi r31,hi8(0x3f800000)
 3371 00d8 DF2E      		mov r13,r31
 3372 00da F0E8      		ldi r31,hlo8(0x3f800000)
 3373 00dc EF2E      		mov r14,r31
 3374 00de FFE3      		ldi r31,hhi8(0x3f800000)
 3375 00e0 FF2E      		mov r15,r31
 3376 00e2 F02D      		mov r31,__tmp_reg__
 3377               	.L76:
 464:swarmfunctions.c **** 		default: flag = false;
 465:swarmfunctions.c **** 	}
 466:swarmfunctions.c **** 
 467:swarmfunctions.c **** 	if(flag)
 468:swarmfunctions.c **** 	{
 469:swarmfunctions.c **** 		disx = agent1.neix[nei] - agent1.px + ld * di;
 3379               	.LM230:
 3380 00e4 4090 0000 		lds r4,ld
 3381 00e8 5090 0000 		lds r5,ld+1
 3382 00ec 6090 0000 		lds r6,ld+2
 3383 00f0 7090 0000 		lds r7,ld+3
 3384 00f4 F801      		movw r30,r16
 3385 00f6 EE0F      		lsl r30
 3386 00f8 FF1F      		rol r31
 3387 00fa EE0F      		lsl r30
 3388 00fc FF1F      		rol r31
 3389 00fe E050      		subi r30,lo8(-(agent1+20))
 3390 0100 F040      		sbci r31,hi8(-(agent1+20))
 3391 0102 6081      		ld r22,Z
 3392 0104 7181      		ldd r23,Z+1
 3393 0106 8281      		ldd r24,Z+2
 3394 0108 9381      		ldd r25,Z+3
 3395 010a 2091 0000 		lds r18,agent1
 3396 010e 3091 0000 		lds r19,agent1+1
 3397 0112 4091 0000 		lds r20,agent1+2
 3398 0116 5091 0000 		lds r21,agent1+3
 3399 011a 0E94 0000 		call __subsf3
 3400 011e 6983      		std Y+1,r22
 3401 0120 7A83      		std Y+2,r23
 3402 0122 8B83      		std Y+3,r24
 3403 0124 9C83      		std Y+4,r25
 3404 0126 C301      		movw r24,r6
 3405 0128 B201      		movw r22,r4
 3406 012a A701      		movw r20,r14
 3407 012c 9601      		movw r18,r12
 3408 012e 0E94 0000 		call __mulsf3
 3409 0132 9B01      		movw r18,r22
 3410 0134 AC01      		movw r20,r24
 3411 0136 6981      		ldd r22,Y+1
 3412 0138 7A81      		ldd r23,Y+2
 3413 013a 8B81      		ldd r24,Y+3
 3414 013c 9C81      		ldd r25,Y+4
 3415 013e 0E94 0000 		call __addsf3
 3416 0142 6983      		std Y+1,r22
 3417 0144 7D83      		std Y+5,r23
 3418 0146 8E83      		std Y+6,r24
 3419 0148 9F83      		std Y+7,r25
 470:swarmfunctions.c **** 		disy = agent1.neiy[nei] - agent1.py + ld * dj;
 3421               	.LM231:
 3422 014a F801      		movw r30,r16
 3423 014c EE0F      		lsl r30
 3424 014e FF1F      		rol r31
 3425 0150 EE0F      		lsl r30
 3426 0152 FF1F      		rol r31
 3427 0154 E050      		subi r30,lo8(-(agent1+44))
 3428 0156 F040      		sbci r31,hi8(-(agent1+44))
 3429 0158 6081      		ld r22,Z
 3430 015a 7181      		ldd r23,Z+1
 3431 015c 8281      		ldd r24,Z+2
 3432 015e 9381      		ldd r25,Z+3
 3433 0160 2091 0000 		lds r18,agent1+4
 3434 0164 3091 0000 		lds r19,agent1+4+1
 3435 0168 4091 0000 		lds r20,agent1+4+2
 3436 016c 5091 0000 		lds r21,agent1+4+3
 3437 0170 0E94 0000 		call __subsf3
 3438 0174 6B01      		movw r12,r22
 3439 0176 7C01      		movw r14,r24
 3440 0178 C301      		movw r24,r6
 3441 017a B201      		movw r22,r4
 3442 017c A501      		movw r20,r10
 3443 017e 9401      		movw r18,r8
 3444 0180 0E94 0000 		call __mulsf3
 3445 0184 9B01      		movw r18,r22
 3446 0186 AC01      		movw r20,r24
 3447 0188 C701      		movw r24,r14
 3448 018a B601      		movw r22,r12
 3449 018c 0E94 0000 		call __addsf3
 3450 0190 362E      		mov r3,r22
 3451 0192 272E      		mov r2,r23
 3452 0194 8887      		std Y+8,r24
 3453 0196 9987      		std Y+9,r25
 471:swarmfunctions.c **** 
 472:swarmfunctions.c **** 		dis2 = disx * disx + disy * disy;
 3455               	.LM232:
 3456 0198 5981      		ldd r21,Y+1
 3457 019a 4D81      		ldd r20,Y+5
 3458 019c 3E81      		ldd r19,Y+6
 3459 019e 2F81      		ldd r18,Y+7
 3460 01a0 852F      		mov r24,r21
 3461 01a2 942F      		mov r25,r20
 3462 01a4 A32F      		mov r26,r19
 3463 01a6 B22F      		mov r27,r18
 3464 01a8 BC01      		movw r22,r24
 3465 01aa CD01      		movw r24,r26
 3466 01ac FA01      		movw r30,r20
 3467 01ae 0F2F      		mov r16,r31
 3468 01b0 1E2F      		mov r17,r30
 3469 01b2 232F      		mov r18,r19
 3470 01b4 3B2F      		mov r19,r27
 3471 01b6 A901      		movw r20,r18
 3472 01b8 9801      		movw r18,r16
 3473 01ba 0E94 0000 		call __mulsf3
 3474 01be 6B01      		movw r12,r22
 3475 01c0 7C01      		movw r14,r24
 3476 01c2 A101      		movw r20,r2
 3477 01c4 3885      		ldd r19,Y+8
 3478 01c6 2985      		ldd r18,Y+9
 3479 01c8 852F      		mov r24,r21
 3480 01ca 942F      		mov r25,r20
 3481 01cc A32F      		mov r26,r19
 3482 01ce B22F      		mov r27,r18
 3483 01d0 BC01      		movw r22,r24
 3484 01d2 CD01      		movw r24,r26
 3485 01d4 F101      		movw r30,r2
 3486 01d6 0F2F      		mov r16,r31
 3487 01d8 1E2F      		mov r17,r30
 3488 01da 232F      		mov r18,r19
 3489 01dc 3B2F      		mov r19,r27
 3490 01de A901      		movw r20,r18
 3491 01e0 9801      		movw r18,r16
 3492 01e2 0E94 0000 		call __mulsf3
 3493 01e6 9B01      		movw r18,r22
 3494 01e8 AC01      		movw r20,r24
 3495 01ea C701      		movw r24,r14
 3496 01ec B601      		movw r22,r12
 3497 01ee 0E94 0000 		call __addsf3
 3498 01f2 6E87      		std Y+14,r22
 3499 01f4 7F87      		std Y+15,r23
 3500 01f6 8C01      		movw r16,r24
 473:swarmfunctions.c **** 		dis1 = sqrt(dis2);
 3502               	.LM233:
 3503 01f8 472F      		mov r20,r23
 3504 01fa 862F      		mov r24,r22
 3505 01fc 942F      		mov r25,r20
 3506 01fe A02F      		mov r26,r16
 3507 0200 B12F      		mov r27,r17
 3508 0202 BC01      		movw r22,r24
 3509 0204 CD01      		movw r24,r26
 3510 0206 0E94 0000 		call sqrt
 3511 020a 2B01      		movw r4,r22
 3512 020c 3C01      		movw r6,r24
 474:swarmfunctions.c **** 
 475:swarmfunctions.c **** 		if(dis2!=0.0)
 3514               	.LM234:
 3515 020e 5E85      		ldd r21,Y+14
 3516 0210 4F85      		ldd r20,Y+15
 3517 0212 852F      		mov r24,r21
 3518 0214 942F      		mov r25,r20
 3519 0216 A02F      		mov r26,r16
 3520 0218 B12F      		mov r27,r17
 3521 021a BC01      		movw r22,r24
 3522 021c CD01      		movw r24,r26
 3523 021e 20E0      		ldi r18,lo8(0x0)
 3524 0220 30E0      		ldi r19,hi8(0x0)
 3525 0222 A901      		movw r20,r18
 3526 0224 0E94 0000 		call __nesf2
 3527 0228 8823      		tst r24
 3528 022a 01F4      		brne .+2
 3529 022c 00C0      		rjmp .L71
 476:swarmfunctions.c **** 		{
 477:swarmfunctions.c **** 			alph = 1.0 + d1 * (disx * cos(agent1.hd) + disy * sin(agent1.hd)) / dis1; //inner product
 3531               	.LM235:
 3532 022e C090 0000 		lds r12,agent1+16
 3533 0232 D090 0000 		lds r13,agent1+16+1
 3534 0236 E090 0000 		lds r14,agent1+16+2
 3535 023a F090 0000 		lds r15,agent1+16+3
 3536 023e C701      		movw r24,r14
 3537 0240 B601      		movw r22,r12
 3538 0242 0E94 0000 		call cos
 3539 0246 4B01      		movw r8,r22
 3540 0248 5C01      		movw r10,r24
 3541 024a C701      		movw r24,r14
 3542 024c B601      		movw r22,r12
 3543 024e 0E94 0000 		call sin
 3544 0252 6A87      		std Y+10,r22
 3545 0254 7B87      		std Y+11,r23
 3546 0256 8C87      		std Y+12,r24
 3547 0258 9D87      		std Y+13,r25
 478:swarmfunctions.c **** 			force = -cf * (rc1 / dis1 - 1.0) * rc1 * rc1 / dis2;
 3549               	.LM236:
 3550 025a C090 0000 		lds r12,rc1
 3551 025e D090 0000 		lds r13,rc1+1
 3552 0262 E090 0000 		lds r14,rc1+2
 3553 0266 F090 0000 		lds r15,rc1+3
 477:swarmfunctions.c **** 			alph = 1.0 + d1 * (disx * cos(agent1.hd) + disy * sin(agent1.hd)) / dis1; //inner product
 3555               	.LM237:
 3556 026a 5981      		ldd r21,Y+1
 3557 026c 4D81      		ldd r20,Y+5
 3558 026e 3E81      		ldd r19,Y+6
 3559 0270 2F81      		ldd r18,Y+7
 3560 0272 852F      		mov r24,r21
 3561 0274 942F      		mov r25,r20
 3562 0276 A32F      		mov r26,r19
 3563 0278 B22F      		mov r27,r18
 3564 027a BC01      		movw r22,r24
 3565 027c CD01      		movw r24,r26
 3566 027e A501      		movw r20,r10
 3567 0280 9401      		movw r18,r8
 3568 0282 0E94 0000 		call __mulsf3
 3569 0286 4B01      		movw r8,r22
 3570 0288 5C01      		movw r10,r24
 3571 028a A101      		movw r20,r2
 3572 028c 3885      		ldd r19,Y+8
 3573 028e 2985      		ldd r18,Y+9
 3574 0290 852F      		mov r24,r21
 3575 0292 942F      		mov r25,r20
 3576 0294 A32F      		mov r26,r19
 3577 0296 B22F      		mov r27,r18
 3578 0298 BC01      		movw r22,r24
 3579 029a CD01      		movw r24,r26
 3580 029c 2A85      		ldd r18,Y+10
 3581 029e 3B85      		ldd r19,Y+11
 3582 02a0 4C85      		ldd r20,Y+12
 3583 02a2 5D85      		ldd r21,Y+13
 3584 02a4 0E94 0000 		call __mulsf3
 3585 02a8 9B01      		movw r18,r22
 3586 02aa AC01      		movw r20,r24
 3587 02ac C501      		movw r24,r10
 3588 02ae B401      		movw r22,r8
 3589 02b0 0E94 0000 		call __addsf3
 3590 02b4 2091 0000 		lds r18,d1
 3591 02b8 3091 0000 		lds r19,d1+1
 3592 02bc 4091 0000 		lds r20,d1+2
 3593 02c0 5091 0000 		lds r21,d1+3
 3594 02c4 0E94 0000 		call __mulsf3
 3595 02c8 A301      		movw r20,r6
 3596 02ca 9201      		movw r18,r4
 3597 02cc 0E94 0000 		call __divsf3
 3598 02d0 20E0      		ldi r18,lo8(0x3f800000)
 3599 02d2 30E0      		ldi r19,hi8(0x3f800000)
 3600 02d4 40E8      		ldi r20,hlo8(0x3f800000)
 3601 02d6 5FE3      		ldi r21,hhi8(0x3f800000)
 3602 02d8 0E94 0000 		call __addsf3
 3603 02dc 6A87      		std Y+10,r22
 3604 02de 7B87      		std Y+11,r23
 3605 02e0 8C87      		std Y+12,r24
 3606 02e2 9D87      		std Y+13,r25
 3608               	.LM238:
 3609 02e4 8090 0000 		lds r8,cf
 3610 02e8 9090 0000 		lds r9,cf+1
 3611 02ec A090 0000 		lds r10,cf+2
 3612 02f0 B090 0000 		lds r11,cf+3
 3613 02f4 B7FA      		bst r11,7
 3614 02f6 B094      		com r11
 3615 02f8 B7F8      		bld r11,7
 3616 02fa B094      		com r11
 3617 02fc C701      		movw r24,r14
 3618 02fe B601      		movw r22,r12
 3619 0300 A301      		movw r20,r6
 3620 0302 9201      		movw r18,r4
 3621 0304 0E94 0000 		call __divsf3
 3622 0308 20E0      		ldi r18,lo8(0x3f800000)
 3623 030a 30E0      		ldi r19,hi8(0x3f800000)
 3624 030c 40E8      		ldi r20,hlo8(0x3f800000)
 3625 030e 5FE3      		ldi r21,hhi8(0x3f800000)
 3626 0310 0E94 0000 		call __subsf3
 3627 0314 9B01      		movw r18,r22
 3628 0316 AC01      		movw r20,r24
 3629 0318 C501      		movw r24,r10
 3630 031a B401      		movw r22,r8
 3631 031c 0E94 0000 		call __mulsf3
 3632 0320 A701      		movw r20,r14
 3633 0322 9601      		movw r18,r12
 3634 0324 0E94 0000 		call __mulsf3
 3635 0328 A701      		movw r20,r14
 3636 032a 9601      		movw r18,r12
 3637 032c 0E94 0000 		call __mulsf3
 3638 0330 FE85      		ldd r31,Y+14
 3639 0332 EF85      		ldd r30,Y+15
 3640 0334 502F      		mov r21,r16
 3641 0336 412F      		mov r20,r17
 3642 0338 0F2F      		mov r16,r31
 3643 033a 1E2F      		mov r17,r30
 3644 033c 252F      		mov r18,r21
 3645 033e 342F      		mov r19,r20
 3646 0340 A901      		movw r20,r18
 3647 0342 9801      		movw r18,r16
 3648 0344 0E94 0000 		call __divsf3
 3649 0348 9B01      		movw r18,r22
 3650 034a AC01      		movw r20,r24
 479:swarmfunctions.c **** 			
 480:swarmfunctions.c **** 			forcex += alph * force * disx / dis1;
 3652               	.LM239:
 3653 034c 6A85      		ldd r22,Y+10
 3654 034e 7B85      		ldd r23,Y+11
 3655 0350 8C85      		ldd r24,Y+12
 3656 0352 9D85      		ldd r25,Y+13
 3657 0354 0E94 0000 		call __mulsf3
 3658 0358 C62E      		mov r12,r22
 3659 035a F72E      		mov r15,r23
 3660 035c 882E      		mov r8,r24
 3661 035e E92E      		mov r14,r25
 3662 0360 862F      		mov r24,r22
 3663 0362 9F2D      		mov r25,r15
 3664 0364 A82D      		mov r26,r8
 3665 0366 BE2D      		mov r27,r14
 3666 0368 BC01      		movw r22,r24
 3667 036a CD01      		movw r24,r26
 3668 036c F981      		ldd r31,Y+1
 3669 036e ED81      		ldd r30,Y+5
 3670 0370 5E81      		ldd r21,Y+6
 3671 0372 4F81      		ldd r20,Y+7
 3672 0374 0F2F      		mov r16,r31
 3673 0376 1E2F      		mov r17,r30
 3674 0378 252F      		mov r18,r21
 3675 037a 342F      		mov r19,r20
 3676 037c A901      		movw r20,r18
 3677 037e 9801      		movw r18,r16
 3678 0380 0E94 0000 		call __mulsf3
 3679 0384 A301      		movw r20,r6
 3680 0386 9201      		movw r18,r4
 3681 0388 0E94 0000 		call __divsf3
 3682 038c 9B01      		movw r18,r22
 3683 038e AC01      		movw r20,r24
 3684 0390 6091 0000 		lds r22,forcex
 3685 0394 7091 0000 		lds r23,forcex+1
 3686 0398 8091 0000 		lds r24,forcex+2
 3687 039c 9091 0000 		lds r25,forcex+3
 3688 03a0 0E94 0000 		call __addsf3
 3689 03a4 DC01      		movw r26,r24
 3690 03a6 CB01      		movw r24,r22
 3691 03a8 8093 0000 		sts forcex,r24
 3692 03ac 9093 0000 		sts forcex+1,r25
 3693 03b0 A093 0000 		sts forcex+2,r26
 3694 03b4 B093 0000 		sts forcex+3,r27
 481:swarmfunctions.c **** 			forcey += alph * force * disy / dis1;
 3696               	.LM240:
 3697 03b8 8C2D      		mov r24,r12
 3698 03ba 9F2D      		mov r25,r15
 3699 03bc A82D      		mov r26,r8
 3700 03be BE2D      		mov r27,r14
 3701 03c0 BC01      		movw r22,r24
 3702 03c2 CD01      		movw r24,r26
 3703 03c4 F101      		movw r30,r2
 3704 03c6 5885      		ldd r21,Y+8
 3705 03c8 4985      		ldd r20,Y+9
 3706 03ca 0F2F      		mov r16,r31
 3707 03cc 1E2F      		mov r17,r30
 3708 03ce 252F      		mov r18,r21
 3709 03d0 342F      		mov r19,r20
 3710 03d2 A901      		movw r20,r18
 3711 03d4 9801      		movw r18,r16
 3712 03d6 0E94 0000 		call __mulsf3
 3713 03da A301      		movw r20,r6
 3714 03dc 9201      		movw r18,r4
 3715 03de 0E94 0000 		call __divsf3
 3716 03e2 9B01      		movw r18,r22
 3717 03e4 AC01      		movw r20,r24
 3718 03e6 6091 0000 		lds r22,forcey
 3719 03ea 7091 0000 		lds r23,forcey+1
 3720 03ee 8091 0000 		lds r24,forcey+2
 3721 03f2 9091 0000 		lds r25,forcey+3
 3722 03f6 0E94 0000 		call __addsf3
 3723 03fa DC01      		movw r26,r24
 3724 03fc CB01      		movw r24,r22
 3725 03fe 8093 0000 		sts forcey,r24
 3726 0402 9093 0000 		sts forcey+1,r25
 3727 0406 A093 0000 		sts forcey+2,r26
 3728 040a B093 0000 		sts forcey+3,r27
 3729               	.L71:
 3730               	/* epilogue start */
 3731               	.LBE53:
 482:swarmfunctions.c **** 		}
 483:swarmfunctions.c **** 	}
 484:swarmfunctions.c **** }
 3733               	.LM241:
 3734 040e 2F96      		adiw r28,15
 3735 0410 CDBF      		out __SP_L__,r28
 3736 0412 DEBF      		out __SP_H__,r29
 3737 0414 DF91      		pop r29
 3738 0416 CF91      		pop r28
 3739 0418 1F91      		pop r17
 3740 041a 0F91      		pop r16
 3741 041c FF90      		pop r15
 3742 041e EF90      		pop r14
 3743 0420 DF90      		pop r13
 3744 0422 CF90      		pop r12
 3745 0424 BF90      		pop r11
 3746 0426 AF90      		pop r10
 3747 0428 9F90      		pop r9
 3748 042a 8F90      		pop r8
 3749 042c 7F90      		pop r7
 3750 042e 6F90      		pop r6
 3751 0430 5F90      		pop r5
 3752 0432 4F90      		pop r4
 3753 0434 3F90      		pop r3
 3754 0436 2F90      		pop r2
 3755 0438 0895      		ret
 3762               	.Lscope17:
 3763               		.section	.text._Z18swarm_synchronizedv,"ax",@progbits
 3765               	.global	_Z18swarm_synchronizedv
 3767               	_Z18swarm_synchronizedv:
 485:swarmfunctions.c **** // --------------------------------------------------------------------------------------------
 486:swarmfunctions.c **** float swarm_synchronized()
 487:swarmfunctions.c **** {
 3769               	.LM242:
 3770               	.LFBB18:
 3771 0000 2F92      		push r2
 3772 0002 3F92      		push r3
 3773 0004 4F92      		push r4
 3774 0006 5F92      		push r5
 3775 0008 6F92      		push r6
 3776 000a 7F92      		push r7
 3777 000c 8F92      		push r8
 3778 000e 9F92      		push r9
 3779 0010 AF92      		push r10
 3780 0012 BF92      		push r11
 3781 0014 CF92      		push r12
 3782 0016 DF92      		push r13
 3783 0018 EF92      		push r14
 3784 001a FF92      		push r15
 3785 001c 0F93      		push r16
 3786 001e 1F93      		push r17
 3787 0020 CF93      		push r28
 3788 0022 DF93      		push r29
 3789 0024 CDB7      		in r28,__SP_L__
 3790 0026 DEB7      		in r29,__SP_H__
 3791 0028 6E97      		sbiw r28,30
 3792 002a CDBF      		out __SP_L__,r28
 3793 002c DEBF      		out __SP_H__,r29
 3794               	/* prologue: function */
 3795               	/* frame size = 30 */
 3796               	/* stack size = 48 */
 3797               	.L__stack_usage = 48
 3798               	.LBB54:
 488:swarmfunctions.c **** 	int i;
 489:swarmfunctions.c **** 	float dvx, dvy, lx, ly, vabs, ds, fx, fy;
 490:swarmfunctions.c **** 	float dir = agent1.hd;
 3800               	.LM243:
 3801 002e C090 0000 		lds r12,agent1+16
 3802 0032 D090 0000 		lds r13,agent1+16+1
 3803 0036 E090 0000 		lds r14,agent1+16+2
 3804 003a F090 0000 		lds r15,agent1+16+3
 491:swarmfunctions.c **** 
 492:swarmfunctions.c **** 	// ===== calculation of forces =====
 493:swarmfunctions.c **** 	//self-propel force and viscosity
 494:swarmfunctions.c **** 	dvx = acc * cos(dir) - gmma1 * agent1.vx;
 3806               	.LM244:
 3807 003e 8090 0000 		lds r8,acc
 3808 0042 9090 0000 		lds r9,acc+1
 3809 0046 A090 0000 		lds r10,acc+2
 3810 004a B090 0000 		lds r11,acc+3
 3811 004e C701      		movw r24,r14
 3812 0050 B601      		movw r22,r12
 3813 0052 0E94 0000 		call cos
 3814 0056 6D87      		std Y+13,r22
 3815 0058 7E87      		std Y+14,r23
 3816 005a 8F87      		std Y+15,r24
 3817 005c 988B      		std Y+16,r25
 3818 005e 4090 0000 		lds r4,gmma1
 3819 0062 5090 0000 		lds r5,gmma1+1
 3820 0066 6090 0000 		lds r6,gmma1+2
 3821 006a 7090 0000 		lds r7,gmma1+3
 3822 006e C501      		movw r24,r10
 3823 0070 B401      		movw r22,r8
 3824 0072 2D85      		ldd r18,Y+13
 3825 0074 3E85      		ldd r19,Y+14
 3826 0076 4F85      		ldd r20,Y+15
 3827 0078 5889      		ldd r21,Y+16
 3828 007a 0E94 0000 		call __mulsf3
 3829 007e 6983      		std Y+1,r22
 3830 0080 7A83      		std Y+2,r23
 3831 0082 8B83      		std Y+3,r24
 3832 0084 9C83      		std Y+4,r25
 3833 0086 C301      		movw r24,r6
 3834 0088 B201      		movw r22,r4
 3835 008a 2091 0000 		lds r18,agent1+8
 3836 008e 3091 0000 		lds r19,agent1+8+1
 3837 0092 4091 0000 		lds r20,agent1+8+2
 3838 0096 5091 0000 		lds r21,agent1+8+3
 3839 009a 0E94 0000 		call __mulsf3
 3840 009e 9B01      		movw r18,r22
 3841 00a0 AC01      		movw r20,r24
 3842 00a2 6981      		ldd r22,Y+1
 3843 00a4 7A81      		ldd r23,Y+2
 3844 00a6 8B81      		ldd r24,Y+3
 3845 00a8 9C81      		ldd r25,Y+4
 3846 00aa 0E94 0000 		call __subsf3
 3847 00ae 362E      		mov r3,r22
 3848 00b0 272E      		mov r2,r23
 3849 00b2 8983      		std Y+1,r24
 3850 00b4 9987      		std Y+9,r25
 495:swarmfunctions.c **** 	dvy = acc * sin(dir) - gmma1 * agent1.vy;
 3852               	.LM245:
 3853 00b6 C701      		movw r24,r14
 3854 00b8 B601      		movw r22,r12
 3855 00ba 0E94 0000 		call sin
 3856 00be 6D83      		std Y+5,r22
 3857 00c0 7E83      		std Y+6,r23
 3858 00c2 8F83      		std Y+7,r24
 3859 00c4 9887      		std Y+8,r25
 3860 00c6 C501      		movw r24,r10
 3861 00c8 B401      		movw r22,r8
 3862 00ca 2D81      		ldd r18,Y+5
 3863 00cc 3E81      		ldd r19,Y+6
 3864 00ce 4F81      		ldd r20,Y+7
 3865 00d0 5885      		ldd r21,Y+8
 3866 00d2 0E94 0000 		call __mulsf3
 3867 00d6 6B01      		movw r12,r22
 3868 00d8 7C01      		movw r14,r24
 3869 00da C301      		movw r24,r6
 3870 00dc B201      		movw r22,r4
 3871 00de 2091 0000 		lds r18,agent1+12
 3872 00e2 3091 0000 		lds r19,agent1+12+1
 3873 00e6 4091 0000 		lds r20,agent1+12+2
 3874 00ea 5091 0000 		lds r21,agent1+12+3
 3875 00ee 0E94 0000 		call __mulsf3
 3876 00f2 9B01      		movw r18,r22
 3877 00f4 AC01      		movw r20,r24
 3878 00f6 C701      		movw r24,r14
 3879 00f8 B601      		movw r22,r12
 3880 00fa 0E94 0000 		call __subsf3
 3881 00fe F62E      		mov r15,r22
 3882 0100 E72E      		mov r14,r23
 3883 0102 C82E      		mov r12,r24
 3884 0104 892E      		mov r8,r25
 496:swarmfunctions.c **** 
 497:swarmfunctions.c **** 	//interaction force with 6 neighbors
 498:swarmfunctions.c **** 	forcex=0.0; forcey=0.0;
 3886               	.LM246:
 3887 0106 80E0      		ldi r24,lo8(0x0)
 3888 0108 90E0      		ldi r25,hi8(0x0)
 3889 010a DC01      		movw r26,r24
 3890 010c 8093 0000 		sts forcex,r24
 3891 0110 9093 0000 		sts forcex+1,r25
 3892 0114 A093 0000 		sts forcex+2,r26
 3893 0118 B093 0000 		sts forcex+3,r27
 3894 011c 8093 0000 		sts forcey,r24
 3895 0120 9093 0000 		sts forcey+1,r25
 3896 0124 A093 0000 		sts forcey+2,r26
 3897 0128 B093 0000 		sts forcey+3,r27
 3898 012c 00E0      		ldi r16,lo8(connected)
 3899 012e 10E0      		ldi r17,hi8(connected)
 499:swarmfunctions.c **** 
 500:swarmfunctions.c **** 	for(i=0;i<NUM_NEIGHBORS;i++)
 3901               	.LM247:
 3902 0130 80E0      		ldi r24,lo8(0)
 3903 0132 90E0      		ldi r25,hi8(0)
 3904 0134 5C01      		movw r10,r24
 3905               	.L85:
 501:swarmfunctions.c **** 	{
 502:swarmfunctions.c **** 		if(connected[i]){
 3907               	.LM248:
 3908 0136 D801      		movw r26,r16
 3909 0138 8D91      		ld r24,X+
 3910 013a 8D01      		movw r16,r26
 3911 013c 8823      		tst r24
 3912 013e 01F0      		breq .L84
 503:swarmfunctions.c **** 			swarm_interaction1(i);
 3914               	.LM249:
 3915 0140 C501      		movw r24,r10
 3916 0142 0E94 0000 		call _Z18swarm_interaction1i
 3917               	.L84:
 500:swarmfunctions.c **** 	for(i=0;i<NUM_NEIGHBORS;i++)
 3919               	.LM250:
 3920 0146 0894      		sec
 3921 0148 A11C      		adc r10,__zero_reg__
 3922 014a B11C      		adc r11,__zero_reg__
 3923 014c B6E0      		ldi r27,lo8(6)
 3924 014e AB16      		cp r10,r27
 3925 0150 B104      		cpc r11,__zero_reg__
 3926 0152 01F4      		brne .L85
 504:swarmfunctions.c **** 		}
 505:swarmfunctions.c **** 	}
 506:swarmfunctions.c **** 
 507:swarmfunctions.c **** 	dvx = dvx + forcex;
 3928               	.LM251:
 3929 0154 A101      		movw r20,r2
 3930 0156 3981      		ldd r19,Y+1
 3931 0158 2985      		ldd r18,Y+9
 3932 015a 852F      		mov r24,r21
 3933 015c 922D      		mov r25,r2
 3934 015e A32F      		mov r26,r19
 3935 0160 B22F      		mov r27,r18
 3936 0162 BC01      		movw r22,r24
 3937 0164 CD01      		movw r24,r26
 3938 0166 2091 0000 		lds r18,forcex
 3939 016a 3091 0000 		lds r19,forcex+1
 3940 016e 4091 0000 		lds r20,forcex+2
 3941 0172 5091 0000 		lds r21,forcex+3
 3942 0176 0E94 0000 		call __addsf3
 3943 017a 362E      		mov r3,r22
 3944 017c 272E      		mov r2,r23
 3945 017e 182F      		mov r17,r24
 3946 0180 092F      		mov r16,r25
 508:swarmfunctions.c **** 	dvy = dvy + forcey;
 3948               	.LM252:
 3949 0182 A701      		movw r20,r14
 3950 0184 852F      		mov r24,r21
 3951 0186 9E2D      		mov r25,r14
 3952 0188 AC2D      		mov r26,r12
 3953 018a B82D      		mov r27,r8
 3954 018c BC01      		movw r22,r24
 3955 018e CD01      		movw r24,r26
 3956 0190 2091 0000 		lds r18,forcey
 3957 0194 3091 0000 		lds r19,forcey+1
 3958 0198 4091 0000 		lds r20,forcey+2
 3959 019c 5091 0000 		lds r21,forcey+3
 3960 01a0 0E94 0000 		call __addsf3
 3961 01a4 862E      		mov r8,r22
 3962 01a6 472E      		mov r4,r23
 3963 01a8 B82E      		mov r11,r24
 3964 01aa A92E      		mov r10,r25
 509:swarmfunctions.c **** 
 510:swarmfunctions.c **** 	//spring term (Zero-length spring). fixed point = (0,0)
 511:swarmfunctions.c **** 	lx = - agent1.px;
 3966               	.LM253:
 3967 01ac 8091 0000 		lds r24,agent1
 3968 01b0 9091 0000 		lds r25,agent1+1
 3969 01b4 A091 0000 		lds r26,agent1+2
 3970 01b8 B091 0000 		lds r27,agent1+3
 3971 01bc 8987      		std Y+9,r24
 3972 01be 9A87      		std Y+10,r25
 3973 01c0 AB87      		std Y+11,r26
 3974 01c2 BC87      		std Y+12,r27
 512:swarmfunctions.c **** 	ly = - agent1.py;
 3976               	.LM254:
 3977 01c4 8091 0000 		lds r24,agent1+4
 3978 01c8 9091 0000 		lds r25,agent1+4+1
 3979 01cc A091 0000 		lds r26,agent1+4+2
 3980 01d0 B091 0000 		lds r27,agent1+4+3
 3981 01d4 898B      		std Y+17,r24
 3982 01d6 9A8B      		std Y+18,r25
 3983 01d8 AB8B      		std Y+19,r26
 3984 01da BC8B      		std Y+20,r27
 513:swarmfunctions.c **** 	dvx = dvx + ka1 * lx;
 3986               	.LM255:
 3987 01dc C090 0000 		lds r12,ka1
 3988 01e0 D090 0000 		lds r13,ka1+1
 3989 01e4 E090 0000 		lds r14,ka1+2
 3990 01e8 F090 0000 		lds r15,ka1+3
 511:swarmfunctions.c **** 	lx = - agent1.px;
 3992               	.LM256:
 3993 01ec 2985      		ldd r18,Y+9
 3994 01ee 3A85      		ldd r19,Y+10
 3995 01f0 4B85      		ldd r20,Y+11
 3996 01f2 5C85      		ldd r21,Y+12
 3997 01f4 5058      		subi r21,0x80
 3999               	.LM257:
 4000 01f6 C701      		movw r24,r14
 4001 01f8 B601      		movw r22,r12
 4002 01fa 0E94 0000 		call __mulsf3
 4003 01fe 9B01      		movw r18,r22
 4004 0200 AC01      		movw r20,r24
 4005 0202 F101      		movw r30,r2
 4006 0204 B801      		movw r22,r16
 4007 0206 8F2F      		mov r24,r31
 4008 0208 9E2F      		mov r25,r30
 4009 020a A72F      		mov r26,r23
 4010 020c B62F      		mov r27,r22
 4011 020e BC01      		movw r22,r24
 4012 0210 CD01      		movw r24,r26
 4013 0212 0E94 0000 		call __addsf3
 4014 0216 698F      		std Y+25,r22
 4015 0218 7A8F      		std Y+26,r23
 4016 021a 8B8F      		std Y+27,r24
 4017 021c 9C8F      		std Y+28,r25
 512:swarmfunctions.c **** 	ly = - agent1.py;
 4019               	.LM258:
 4020 021e 2989      		ldd r18,Y+17
 4021 0220 3A89      		ldd r19,Y+18
 4022 0222 4B89      		ldd r20,Y+19
 4023 0224 5C89      		ldd r21,Y+20
 4024 0226 5058      		subi r21,0x80
 514:swarmfunctions.c **** 	dvy = dvy + ka1 * ly;
 4026               	.LM259:
 4027 0228 C701      		movw r24,r14
 4028 022a B601      		movw r22,r12
 4029 022c 0E94 0000 		call __mulsf3
 4030 0230 9B01      		movw r18,r22
 4031 0232 AC01      		movw r20,r24
 4032 0234 B501      		movw r22,r10
 4033 0236 882D      		mov r24,r8
 4034 0238 942D      		mov r25,r4
 4035 023a A72F      		mov r26,r23
 4036 023c B62F      		mov r27,r22
 4037 023e BC01      		movw r22,r24
 4038 0240 CD01      		movw r24,r26
 4039 0242 0E94 0000 		call __addsf3
 4040 0246 362E      		mov r3,r22
 4041 0248 272E      		mov r2,r23
 4042 024a 8D8F      		std Y+29,r24
 4043 024c 9E8F      		std Y+30,r25
 515:swarmfunctions.c **** 
 516:swarmfunctions.c **** 	// ===== update =====
 517:swarmfunctions.c **** 	//direction
 518:swarmfunctions.c **** 	vabs = sqrt(agent1.vx * agent1.vx + agent1.vy * agent1.vy);
 4045               	.LM260:
 4046 024e 8090 0000 		lds r8,agent1+8
 4047 0252 9090 0000 		lds r9,agent1+8+1
 4048 0256 A090 0000 		lds r10,agent1+8+2
 4049 025a B090 0000 		lds r11,agent1+8+3
 4050 025e 8091 0000 		lds r24,agent1+12
 4051 0262 9091 0000 		lds r25,agent1+12+1
 4052 0266 A091 0000 		lds r26,agent1+12+2
 4053 026a B091 0000 		lds r27,agent1+12+3
 4054 026e 8983      		std Y+1,r24
 4055 0270 9A83      		std Y+2,r25
 4056 0272 AB83      		std Y+3,r26
 4057 0274 BC83      		std Y+4,r27
 4058 0276 C501      		movw r24,r10
 4059 0278 B401      		movw r22,r8
 4060 027a A501      		movw r20,r10
 4061 027c 9401      		movw r18,r8
 4062 027e 0E94 0000 		call __mulsf3
 4063 0282 6B01      		movw r12,r22
 4064 0284 7C01      		movw r14,r24
 4065 0286 6981      		ldd r22,Y+1
 4066 0288 7A81      		ldd r23,Y+2
 4067 028a 8B81      		ldd r24,Y+3
 4068 028c 9C81      		ldd r25,Y+4
 4069 028e 9B01      		movw r18,r22
 4070 0290 AC01      		movw r20,r24
 4071 0292 0E94 0000 		call __mulsf3
 4072 0296 9B01      		movw r18,r22
 4073 0298 AC01      		movw r20,r24
 4074 029a C701      		movw r24,r14
 4075 029c B601      		movw r22,r12
 4076 029e 0E94 0000 		call __addsf3
 4077 02a2 0E94 0000 		call sqrt
 4078 02a6 6B01      		movw r12,r22
 4079 02a8 7C01      		movw r14,r24
 519:swarmfunctions.c **** 
 520:swarmfunctions.c **** 	fx = agent1.vx / vabs;
 521:swarmfunctions.c **** 	fy = agent1.vy / vabs;
 522:swarmfunctions.c **** 	ds = -1.0 / tau1 * (sin(dir)*fx-cos(dir)*fy); // get sin value by cross product
 523:swarmfunctions.c **** 
 524:swarmfunctions.c **** 	agent1.hd += ds * dt;
 4081               	.LM261:
 4082 02aa 4090 0000 		lds r4,dt
 4083 02ae 5090 0000 		lds r5,dt+1
 4084 02b2 6090 0000 		lds r6,dt+2
 4085 02b6 7090 0000 		lds r7,dt+3
 522:swarmfunctions.c **** 	ds = -1.0 / tau1 * (sin(dir)*fx-cos(dir)*fy); // get sin value by cross product
 4087               	.LM262:
 4088 02ba 60E0      		ldi r22,lo8(0xbf800000)
 4089 02bc 70E0      		ldi r23,hi8(0xbf800000)
 4090 02be 80E8      		ldi r24,hlo8(0xbf800000)
 4091 02c0 9FEB      		ldi r25,hhi8(0xbf800000)
 4092 02c2 2091 0000 		lds r18,tau1
 4093 02c6 3091 0000 		lds r19,tau1+1
 4094 02ca 4091 0000 		lds r20,tau1+2
 4095 02ce 5091 0000 		lds r21,tau1+3
 4096 02d2 0E94 0000 		call __divsf3
 4097 02d6 6D8B      		std Y+21,r22
 4098 02d8 7E8B      		std Y+22,r23
 4099 02da 8F8B      		std Y+23,r24
 4100 02dc 988F      		std Y+24,r25
 520:swarmfunctions.c **** 	fx = agent1.vx / vabs;
 4102               	.LM263:
 4103 02de C501      		movw r24,r10
 4104 02e0 B401      		movw r22,r8
 4105 02e2 A701      		movw r20,r14
 4106 02e4 9601      		movw r18,r12
 4107 02e6 0E94 0000 		call __divsf3
 4108 02ea 9B01      		movw r18,r22
 4109 02ec AC01      		movw r20,r24
 522:swarmfunctions.c **** 	ds = -1.0 / tau1 * (sin(dir)*fx-cos(dir)*fy); // get sin value by cross product
 4111               	.LM264:
 4112 02ee 6D81      		ldd r22,Y+5
 4113 02f0 7E81      		ldd r23,Y+6
 4114 02f2 8F81      		ldd r24,Y+7
 4115 02f4 9885      		ldd r25,Y+8
 4116 02f6 0E94 0000 		call __mulsf3
 4117 02fa 6D83      		std Y+5,r22
 4118 02fc 7E83      		std Y+6,r23
 4119 02fe 8F83      		std Y+7,r24
 4120 0300 9887      		std Y+8,r25
 521:swarmfunctions.c **** 	fy = agent1.vy / vabs;
 4122               	.LM265:
 4123 0302 6981      		ldd r22,Y+1
 4124 0304 7A81      		ldd r23,Y+2
 4125 0306 8B81      		ldd r24,Y+3
 4126 0308 9C81      		ldd r25,Y+4
 4127 030a A701      		movw r20,r14
 4128 030c 9601      		movw r18,r12
 4129 030e 0E94 0000 		call __divsf3
 4130 0312 9B01      		movw r18,r22
 4131 0314 AC01      		movw r20,r24
 522:swarmfunctions.c **** 	ds = -1.0 / tau1 * (sin(dir)*fx-cos(dir)*fy); // get sin value by cross product
 4133               	.LM266:
 4134 0316 6D85      		ldd r22,Y+13
 4135 0318 7E85      		ldd r23,Y+14
 4136 031a 8F85      		ldd r24,Y+15
 4137 031c 9889      		ldd r25,Y+16
 4138 031e 0E94 0000 		call __mulsf3
 4139 0322 9B01      		movw r18,r22
 4140 0324 AC01      		movw r20,r24
 4141 0326 6D81      		ldd r22,Y+5
 4142 0328 7E81      		ldd r23,Y+6
 4143 032a 8F81      		ldd r24,Y+7
 4144 032c 9885      		ldd r25,Y+8
 4145 032e 0E94 0000 		call __subsf3
 4146 0332 9B01      		movw r18,r22
 4147 0334 AC01      		movw r20,r24
 4148 0336 6D89      		ldd r22,Y+21
 4149 0338 7E89      		ldd r23,Y+22
 4150 033a 8F89      		ldd r24,Y+23
 4151 033c 988D      		ldd r25,Y+24
 4152 033e 0E94 0000 		call __mulsf3
 4154               	.LM267:
 4155 0342 A301      		movw r20,r6
 4156 0344 9201      		movw r18,r4
 4157 0346 0E94 0000 		call __mulsf3
 4158 034a 2091 0000 		lds r18,agent1+16
 4159 034e 3091 0000 		lds r19,agent1+16+1
 4160 0352 4091 0000 		lds r20,agent1+16+2
 4161 0356 5091 0000 		lds r21,agent1+16+3
 4162 035a 0E94 0000 		call __addsf3
 4163 035e 8B01      		movw r16,r22
 4164 0360 7C01      		movw r14,r24
 4165 0362 862F      		mov r24,r22
 4166 0364 912F      		mov r25,r17
 4167 0366 AE2D      		mov r26,r14
 4168 0368 BF2D      		mov r27,r15
 4169 036a 8093 0000 		sts agent1+16,r24
 4170 036e 9093 0000 		sts agent1+16+1,r25
 4171 0372 A093 0000 		sts agent1+16+2,r26
 4172 0376 B093 0000 		sts agent1+16+3,r27
 525:swarmfunctions.c **** 
 526:swarmfunctions.c **** 	if(agent1.hd > 2.0 * PI)	agent1.hd -= 2.0 * PI;
 4174               	.LM268:
 4175 037a BC01      		movw r22,r24
 4176 037c CD01      		movw r24,r26
 4177 037e 20ED      		ldi r18,lo8(0x40c90fd0)
 4178 0380 3FE0      		ldi r19,hi8(0x40c90fd0)
 4179 0382 49EC      		ldi r20,hlo8(0x40c90fd0)
 4180 0384 50E4      		ldi r21,hhi8(0x40c90fd0)
 4181 0386 0E94 0000 		call __gtsf2
 4182 038a 1816      		cp __zero_reg__,r24
 4183 038c 04F4      		brge .L86
 4185               	.LM269:
 4186 038e 802F      		mov r24,r16
 4187 0390 912F      		mov r25,r17
 4188 0392 AE2D      		mov r26,r14
 4189 0394 BF2D      		mov r27,r15
 4190 0396 BC01      		movw r22,r24
 4191 0398 CD01      		movw r24,r26
 4192 039a 20ED      		ldi r18,lo8(0x40c90fd0)
 4193 039c 3FE0      		ldi r19,hi8(0x40c90fd0)
 4194 039e 49EC      		ldi r20,hlo8(0x40c90fd0)
 4195 03a0 50E4      		ldi r21,hhi8(0x40c90fd0)
 4196 03a2 0E94 0000 		call __subsf3
 4197 03a6 DC01      		movw r26,r24
 4198 03a8 CB01      		movw r24,r22
 4199 03aa 8093 0000 		sts agent1+16,r24
 4200 03ae 9093 0000 		sts agent1+16+1,r25
 4201 03b2 A093 0000 		sts agent1+16+2,r26
 4202 03b6 B093 0000 		sts agent1+16+3,r27
 4203               	.L86:
 527:swarmfunctions.c **** 	if(agent1.hd < 0 ) 			agent1.hd += 2.0 * PI;
 4205               	.LM270:
 4206 03ba C090 0000 		lds r12,agent1+16
 4207 03be D090 0000 		lds r13,agent1+16+1
 4208 03c2 E090 0000 		lds r14,agent1+16+2
 4209 03c6 F090 0000 		lds r15,agent1+16+3
 4210 03ca C701      		movw r24,r14
 4211 03cc B601      		movw r22,r12
 4212 03ce 20E0      		ldi r18,lo8(0x0)
 4213 03d0 30E0      		ldi r19,hi8(0x0)
 4214 03d2 A901      		movw r20,r18
 4215 03d4 0E94 0000 		call __ltsf2
 4216 03d8 87FF      		sbrs r24,7
 4217 03da 00C0      		rjmp .L88
 4219               	.LM271:
 4220 03dc C701      		movw r24,r14
 4221 03de B601      		movw r22,r12
 4222 03e0 20ED      		ldi r18,lo8(0x40c90fd0)
 4223 03e2 3FE0      		ldi r19,hi8(0x40c90fd0)
 4224 03e4 49EC      		ldi r20,hlo8(0x40c90fd0)
 4225 03e6 50E4      		ldi r21,hhi8(0x40c90fd0)
 4226 03e8 0E94 0000 		call __addsf3
 4227 03ec DC01      		movw r26,r24
 4228 03ee CB01      		movw r24,r22
 4229 03f0 8093 0000 		sts agent1+16,r24
 4230 03f4 9093 0000 		sts agent1+16+1,r25
 4231 03f8 A093 0000 		sts agent1+16+2,r26
 4232 03fc B093 0000 		sts agent1+16+3,r27
 4233               	.L88:
 528:swarmfunctions.c **** 
 529:swarmfunctions.c **** 	//velocity
 530:swarmfunctions.c **** 	agent1.vx += dvx * dt;
 4235               	.LM272:
 4236 0400 598D      		ldd r21,Y+25
 4237 0402 4A8D      		ldd r20,Y+26
 4238 0404 3B8D      		ldd r19,Y+27
 4239 0406 2C8D      		ldd r18,Y+28
 4240 0408 852F      		mov r24,r21
 4241 040a 942F      		mov r25,r20
 4242 040c A32F      		mov r26,r19
 4243 040e B22F      		mov r27,r18
 4244 0410 BC01      		movw r22,r24
 4245 0412 CD01      		movw r24,r26
 4246 0414 A301      		movw r20,r6
 4247 0416 9201      		movw r18,r4
 4248 0418 0E94 0000 		call __mulsf3
 4249 041c 9B01      		movw r18,r22
 4250 041e AC01      		movw r20,r24
 4251 0420 C501      		movw r24,r10
 4252 0422 B401      		movw r22,r8
 4253 0424 0E94 0000 		call __addsf3
 4254 0428 062F      		mov r16,r22
 4255 042a B72E      		mov r11,r23
 4256 042c C82E      		mov r12,r24
 4257 042e A92E      		mov r10,r25
 4258 0430 862F      		mov r24,r22
 4259 0432 9B2D      		mov r25,r11
 4260 0434 AC2D      		mov r26,r12
 4261 0436 BA2D      		mov r27,r10
 4262 0438 8093 0000 		sts agent1+8,r24
 4263 043c 9093 0000 		sts agent1+8+1,r25
 4264 0440 A093 0000 		sts agent1+8+2,r26
 4265 0444 B093 0000 		sts agent1+8+3,r27
 531:swarmfunctions.c **** 	agent1.vy += dvy * dt;
 4267               	.LM273:
 4268 0448 A101      		movw r20,r2
 4269 044a 3D8D      		ldd r19,Y+29
 4270 044c 2E8D      		ldd r18,Y+30
 4271 044e 852F      		mov r24,r21
 4272 0450 922D      		mov r25,r2
 4273 0452 A32F      		mov r26,r19
 4274 0454 B22F      		mov r27,r18
 4275 0456 BC01      		movw r22,r24
 4276 0458 CD01      		movw r24,r26
 4277 045a A301      		movw r20,r6
 4278 045c 9201      		movw r18,r4
 4279 045e 0E94 0000 		call __mulsf3
 4280 0462 9B01      		movw r18,r22
 4281 0464 AC01      		movw r20,r24
 4282 0466 6981      		ldd r22,Y+1
 4283 0468 7A81      		ldd r23,Y+2
 4284 046a 8B81      		ldd r24,Y+3
 4285 046c 9C81      		ldd r25,Y+4
 4286 046e 0E94 0000 		call __addsf3
 4287 0472 162F      		mov r17,r22
 4288 0474 872E      		mov r8,r23
 4289 0476 F82E      		mov r15,r24
 4290 0478 E92E      		mov r14,r25
 4291 047a 9701      		movw r18,r14
 4292 047c 862F      		mov r24,r22
 4293 047e 982D      		mov r25,r8
 4294 0480 A32F      		mov r26,r19
 4295 0482 B22F      		mov r27,r18
 4296 0484 8093 0000 		sts agent1+12,r24
 4297 0488 9093 0000 		sts agent1+12+1,r25
 4298 048c A093 0000 		sts agent1+12+2,r26
 4299 0490 B093 0000 		sts agent1+12+3,r27
 532:swarmfunctions.c **** 
 533:swarmfunctions.c **** 
 534:swarmfunctions.c **** 	//position
 535:swarmfunctions.c **** 	agent1.px += agent1.vx * dt;
 4301               	.LM274:
 4302 0494 802F      		mov r24,r16
 4303 0496 9B2D      		mov r25,r11
 4304 0498 AC2D      		mov r26,r12
 4305 049a BA2D      		mov r27,r10
 4306 049c BC01      		movw r22,r24
 4307 049e CD01      		movw r24,r26
 4308 04a0 A301      		movw r20,r6
 4309 04a2 9201      		movw r18,r4
 4310 04a4 0E94 0000 		call __mulsf3
 4311 04a8 9B01      		movw r18,r22
 4312 04aa AC01      		movw r20,r24
 4313 04ac 6985      		ldd r22,Y+9
 4314 04ae 7A85      		ldd r23,Y+10
 4315 04b0 8B85      		ldd r24,Y+11
 4316 04b2 9C85      		ldd r25,Y+12
 4317 04b4 0E94 0000 		call __addsf3
 4318 04b8 DC01      		movw r26,r24
 4319 04ba CB01      		movw r24,r22
 4320 04bc 8093 0000 		sts agent1,r24
 4321 04c0 9093 0000 		sts agent1+1,r25
 4322 04c4 A093 0000 		sts agent1+2,r26
 4323 04c8 B093 0000 		sts agent1+3,r27
 536:swarmfunctions.c **** 	agent1.py += agent1.vy * dt;
 4325               	.LM275:
 4326 04cc 9701      		movw r18,r14
 4327 04ce 812F      		mov r24,r17
 4328 04d0 982D      		mov r25,r8
 4329 04d2 A32F      		mov r26,r19
 4330 04d4 B22F      		mov r27,r18
 4331 04d6 BC01      		movw r22,r24
 4332 04d8 CD01      		movw r24,r26
 4333 04da A301      		movw r20,r6
 4334 04dc 9201      		movw r18,r4
 4335 04de 0E94 0000 		call __mulsf3
 4336 04e2 9B01      		movw r18,r22
 4337 04e4 AC01      		movw r20,r24
 4338 04e6 6989      		ldd r22,Y+17
 4339 04e8 7A89      		ldd r23,Y+18
 4340 04ea 8B89      		ldd r24,Y+19
 4341 04ec 9C89      		ldd r25,Y+20
 4342 04ee 0E94 0000 		call __addsf3
 4343 04f2 DC01      		movw r26,r24
 4344 04f4 CB01      		movw r24,r22
 4345 04f6 8093 0000 		sts agent1+4,r24
 4346 04fa 9093 0000 		sts agent1+4+1,r25
 4347 04fe A093 0000 		sts agent1+4+2,r26
 4348 0502 B093 0000 		sts agent1+4+3,r27
 4349               	.LBE54:
 537:swarmfunctions.c **** 
 538:swarmfunctions.c **** 	return agent1.hd;
 539:swarmfunctions.c **** }
 4351               	.LM276:
 4352 0506 5091 0000 		lds r21,agent1+16
 4353 050a 4091 0000 		lds r20,agent1+17
 4354 050e 3091 0000 		lds r19,agent1+18
 4355 0512 2091 0000 		lds r18,agent1+19
 4356 0516 852F      		mov r24,r21
 4357 0518 942F      		mov r25,r20
 4358 051a A32F      		mov r26,r19
 4359 051c B22F      		mov r27,r18
 4360 051e BC01      		movw r22,r24
 4361 0520 CD01      		movw r24,r26
 4362               	/* epilogue start */
 4363 0522 6E96      		adiw r28,30
 4364 0524 CDBF      		out __SP_L__,r28
 4365 0526 DEBF      		out __SP_H__,r29
 4366 0528 DF91      		pop r29
 4367 052a CF91      		pop r28
 4368 052c 1F91      		pop r17
 4369 052e 0F91      		pop r16
 4370 0530 FF90      		pop r15
 4371 0532 EF90      		pop r14
 4372 0534 DF90      		pop r13
 4373 0536 CF90      		pop r12
 4374 0538 BF90      		pop r11
 4375 053a AF90      		pop r10
 4376 053c 9F90      		pop r9
 4377 053e 8F90      		pop r8
 4378 0540 7F90      		pop r7
 4379 0542 6F90      		pop r6
 4380 0544 5F90      		pop r5
 4381 0546 4F90      		pop r4
 4382 0548 3F90      		pop r3
 4383 054a 2F90      		pop r2
 4384 054c 0895      		ret
 4391               	.Lscope18:
 4392               		.section	.text._Z12send_messagehhiPKc,"ax",@progbits
 4397               	.global	_Z12send_messagehhiPKc
 4399               	_Z12send_messagehhiPKc:
 4401               	.Ltext4:
   1:communication.c **** // ============================================================================================
   2:communication.c **** // send packet
   3:communication.c **** // ============================================================================================
   4:communication.c **** void send_message(uint8_t MessageType, uint8_t direction, int dist, const char str[])
   5:communication.c **** {
 4403               	.LM277:
 4404               	.LFBB19:
 4405 0000 CF93      		push r28
 4406 0002 DF93      		push r29
 4407 0004 CDB7      		in r28,__SP_L__
 4408 0006 DEB7      		in r29,__SP_H__
 4409 0008 2C97      		sbiw r28,12
 4410 000a CDBF      		out __SP_L__,r28
 4411 000c DEBF      		out __SP_H__,r29
 4412               	/* prologue: function */
 4413               	/* frame size = 12 */
 4414               	/* stack size = 14 */
 4415               	.L__stack_usage = 14
 4416 000e 562F      		mov r21,r22
 4417               	.LBB55:
   6:communication.c **** 	Xgrid::Packet pkt;
   7:communication.c **** 	pkt.type = MessageType;
 4419               	.LM278:
 4420 0010 8B83      		std Y+3,r24
   8:communication.c **** 	pkt.flags = 0;	
 4422               	.LM279:
 4423 0012 1D82      		std Y+5,__zero_reg__
   9:communication.c **** 
  10:communication.c **** 	switch(MessageType)
 4425               	.LM280:
 4426 0014 8823      		tst r24
 4427 0016 01F0      		breq .L95
 4428 0018 8130      		cpi r24,lo8(1)
 4429 001a 01F0      		breq .+2
 4430 001c 00C0      		rjmp .L94
  11:communication.c **** 	{
  12:communication.c **** 		case MESSAGE_COMMAND:
  13:communication.c **** 			pkt.data = (uint8_t*)str;
 4432               	.LM281:
 4433 001e 2F83      		std Y+7,r18
 4434 0020 3887      		std Y+8,r19
  14:communication.c **** 			pkt.radius = dist;
 4436               	.LM282:
 4437 0022 4E83      		std Y+6,r20
  15:communication.c **** 			pkt.data_len = sizeof(str);
 4439               	.LM283:
 4440 0024 82E0      		ldi r24,lo8(2)
 4441 0026 90E0      		ldi r25,hi8(2)
 4442 0028 00C0      		rjmp .L97
 4443               	.L95:
  16:communication.c **** 			break;
  17:communication.c **** 
  18:communication.c **** 		case MESSAGE_NUMDATA:
  19:communication.c **** 			mdata.x0 = agent0.px;	mdata.y0 = agent0.py;
 4445               	.LM284:
 4446 002a 8091 0000 		lds r24,agent0
 4447 002e 9091 0000 		lds r25,agent0+1
 4448 0032 A091 0000 		lds r26,agent0+2
 4449 0036 B091 0000 		lds r27,agent0+3
 4450 003a 8093 0000 		sts mdata+8,r24
 4451 003e 9093 0000 		sts mdata+8+1,r25
 4452 0042 A093 0000 		sts mdata+8+2,r26
 4453 0046 B093 0000 		sts mdata+8+3,r27
 4454 004a 8091 0000 		lds r24,agent0+4
 4455 004e 9091 0000 		lds r25,agent0+4+1
 4456 0052 A091 0000 		lds r26,agent0+4+2
 4457 0056 B091 0000 		lds r27,agent0+4+3
 4458 005a 8093 0000 		sts mdata+12,r24
 4459 005e 9093 0000 		sts mdata+12+1,r25
 4460 0062 A093 0000 		sts mdata+12+2,r26
 4461 0066 B093 0000 		sts mdata+12+3,r27
  20:communication.c **** 			mdata.x1 = agent1.px;	mdata.y1 = agent1.py;
 4463               	.LM285:
 4464 006a E0E0      		ldi r30,lo8(mdata)
 4465 006c F0E0      		ldi r31,hi8(mdata)
 4466 006e 8091 0000 		lds r24,agent1
 4467 0072 9091 0000 		lds r25,agent1+1
 4468 0076 A091 0000 		lds r26,agent1+2
 4469 007a B091 0000 		lds r27,agent1+3
 4470 007e 8093 0000 		sts mdata,r24
 4471 0082 9093 0000 		sts mdata+1,r25
 4472 0086 A093 0000 		sts mdata+2,r26
 4473 008a B093 0000 		sts mdata+3,r27
 4474 008e 8091 0000 		lds r24,agent1+4
 4475 0092 9091 0000 		lds r25,agent1+4+1
 4476 0096 A091 0000 		lds r26,agent1+4+2
 4477 009a B091 0000 		lds r27,agent1+4+3
 4478 009e 8483      		std Z+4,r24
 4479 00a0 9583      		std Z+5,r25
 4480 00a2 A683      		std Z+6,r26
 4481 00a4 B783      		std Z+7,r27
  21:communication.c **** 
  22:communication.c **** 			pkt.data = (uint8_t *)&mdata;
 4483               	.LM286:
 4484 00a6 EF83      		std Y+7,r30
 4485 00a8 F887      		std Y+8,r31
  23:communication.c **** 			pkt.radius = dist;
 4487               	.LM287:
 4488 00aa 4E83      		std Y+6,r20
  24:communication.c **** 			pkt.data_len = sizeof(point);
 4490               	.LM288:
 4491 00ac 80E1      		ldi r24,lo8(16)
 4492 00ae 90E0      		ldi r25,hi8(16)
 4493               	.L97:
 4494 00b0 8987      		std Y+9,r24
 4495 00b2 9A87      		std Y+10,r25
 4496               	.L94:
  25:communication.c **** 			break;
  26:communication.c **** 	}
  27:communication.c **** 									
  28:communication.c **** 	xgrid.send_packet(&pkt, direction);	// send to all neighbors
 4498               	.LM289:
 4499 00b4 80E0      		ldi r24,lo8(xgrid)
 4500 00b6 90E0      		ldi r25,hi8(xgrid)
 4501 00b8 BE01      		movw r22,r28
 4502 00ba 6F5F      		subi r22,lo8(-(1))
 4503 00bc 7F4F      		sbci r23,hi8(-(1))
 4504 00be 452F      		mov r20,r21
 4505 00c0 50E0      		ldi r21,lo8(0)
 4506 00c2 0E94 0000 		call _ZN5Xgrid11send_packetEPNS_6PacketEj
 4507               	/* epilogue start */
 4508               	.LBE55:
  29:communication.c **** 
  30:communication.c **** 	//LED_PORT.OUTTGL = LED_USR_2_PIN_bm;	//green LED
  31:communication.c **** }
 4510               	.LM290:
 4511 00c6 2C96      		adiw r28,12
 4512 00c8 CDBF      		out __SP_L__,r28
 4513 00ca DEBF      		out __SP_H__,r29
 4514 00cc DF91      		pop r29
 4515 00ce CF91      		pop r28
 4516 00d0 0895      		ret
 4521               	.Lscope19:
 4522               		.data
 4523               	.LC0:
 4524 0000 00        		.string	""
 4525               	.LC1:
 4526 0001 6300      		.string	"c"
 4527               		.section	.text._Z9avalanchev,"ax",@progbits
 4529               	.global	_Z9avalanchev
 4531               	_Z9avalanchev:
 4533               	.Ltext5:
 540:swarmfunctions.c **** 
 541:swarmfunctions.c **** // ################### COMBINATION OF SYNC AND DISORDER BEHAVIOR ####################
 542:swarmfunctions.c **** float Sync_Disorder(int ClosingTime)
 543:swarmfunctions.c **** {
 544:swarmfunctions.c **** 	float dir1, dir2, angle, speed = 150.0;
 545:swarmfunctions.c **** 	int range;
 546:swarmfunctions.c **** 
 547:swarmfunctions.c **** 	dir1 = swarm_synchronized();
 548:swarmfunctions.c **** 	dir2 = swarm_disordered();
 549:swarmfunctions.c **** 	send_message(MESSAGE_NUMDATA, ALL_DIRECTION, NULL, "");
 550:swarmfunctions.c **** 
 551:swarmfunctions.c **** 	// The amplitude gradually increases, and decay in last 10 sec 
 552:swarmfunctions.c **** 	if(sec_counter < ClosingTime-15)
 553:swarmfunctions.c **** 	{
 554:swarmfunctions.c **** 		decay_tim = 0;
 555:swarmfunctions.c **** 		global_amp += 0.005; 
 556:swarmfunctions.c **** 		if(global_amp > 1.0) global_amp = 1.0;
 557:swarmfunctions.c **** 	}
 558:swarmfunctions.c **** 	else
 559:swarmfunctions.c **** 	{
 560:swarmfunctions.c **** 		decay_tim += 0.05;
 561:swarmfunctions.c **** 		global_amp = exp(-0.4 * decay_tim);
 562:swarmfunctions.c **** 	}
 563:swarmfunctions.c **** 
 564:swarmfunctions.c **** 	if(sonar_attached && use_sensor_data_on && sec_counter > STGtime4)
 565:swarmfunctions.c **** 	{
 566:swarmfunctions.c **** 		if(sensor_value_trichk >= RANGE1 && sensor_value_trichk < RANGE2)
 567:swarmfunctions.c **** 		{
 568:swarmfunctions.c **** 			send_message(MESSAGE_COMMAND, ALL_DIRECTION, 4, "c");
 569:swarmfunctions.c **** 			sync = false;
 570:swarmfunctions.c **** 		}
 571:swarmfunctions.c **** 		if(sensor_value_trichk >= RANGE2 && sensor_value_trichk < RANGE3)
 572:swarmfunctions.c **** 		{
 573:swarmfunctions.c **** 			send_message(MESSAGE_COMMAND, ALL_DIRECTION, 2, "c");
 574:swarmfunctions.c **** 			sync = false;
 575:swarmfunctions.c **** 		}
 576:swarmfunctions.c **** 		use_sensor_data_on = false;
 577:swarmfunctions.c **** 	}
 578:swarmfunctions.c **** 
 579:swarmfunctions.c **** 	if(sync) 	angle = global_amp * cos(dir1 * speed);
 580:swarmfunctions.c **** 	else 		angle = global_amp * cos(dir2 * speed);
 581:swarmfunctions.c **** 
 582:swarmfunctions.c **** 	return angle;
 583:swarmfunctions.c **** }
 584:swarmfunctions.c **** 
 585:swarmfunctions.c **** // ============================================================================================
 586:swarmfunctions.c **** // ============================================================================================
 587:swarmfunctions.c **** // SWARM DYNAMICS 6 --- Avalanche like behavior based on Ken's Swarm Dynamics ---
 588:swarmfunctions.c **** // ============================================================================================
 589:swarmfunctions.c **** // ============================================================================================
 590:swarmfunctions.c **** float avalanche()
 591:swarmfunctions.c **** {
 4535               	.LM291:
 4536               	.LFBB20:
 4537 0000 CF92      		push r12
 4538 0002 DF92      		push r13
 4539 0004 EF92      		push r14
 4540 0006 FF92      		push r15
 4541               	/* prologue: function */
 4542               	/* frame size = 0 */
 4543               	/* stack size = 4 */
 4544               	.L__stack_usage = 4
 4545               	.LBB56:
 592:swarmfunctions.c **** 	float angle, dir, threshold = 0.999, speed1 = 150.0, speed2 = 50.0;
 593:swarmfunctions.c **** 
 594:swarmfunctions.c **** 	dir = swarm_disordered();
 4547               	.LM292:
 4548 0008 0E94 0000 		call _Z16swarm_disorderedv
 4549 000c 6B01      		movw r12,r22
 4550 000e 7C01      		movw r14,r24
 595:swarmfunctions.c **** 	send_message(MESSAGE_NUMDATA, ALL_DIRECTION, NULL, "");	//It should be included...
 4552               	.LM293:
 4553 0010 80E0      		ldi r24,lo8(0)
 4554 0012 6FE3      		ldi r22,lo8(63)
 4555 0014 40E0      		ldi r20,lo8(0)
 4556 0016 50E0      		ldi r21,hi8(0)
 4557 0018 20E0      		ldi r18,lo8(.LC0)
 4558 001a 30E0      		ldi r19,hi8(.LC0)
 4559 001c 0E94 0000 		call _Z12send_messagehhiPKc
 596:swarmfunctions.c **** 
 597:swarmfunctions.c **** 	if(sonar_attached && use_sensor_data_on)
 4561               	.LM294:
 4562 0020 8091 0000 		lds r24,sonar_attached
 4563 0024 8823      		tst r24
 4564 0026 01F0      		breq .L99
 4566               	.LM295:
 4567 0028 8091 0000 		lds r24,use_sensor_data_on
 4568 002c 8823      		tst r24
 4569 002e 01F0      		breq .L99
 598:swarmfunctions.c **** 	{
 599:swarmfunctions.c **** 		if(sensor_value_dblchk >= RANGE1 && sensor_value_dblchk < RANGE3)
 4571               	.LM296:
 4572 0030 8091 0000 		lds r24,sensor_value_dblchk
 4573 0034 9091 0000 		lds r25,sensor_value_dblchk+1
 4574 0038 C297      		sbiw r24,50
 4575 003a 883C      		cpi r24,200
 4576 003c 9105      		cpc r25,__zero_reg__
 4577 003e 00F4      		brsh .L100
 600:swarmfunctions.c **** 		{
 601:swarmfunctions.c **** 			send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, "c");
 4579               	.LM297:
 4580 0040 81E0      		ldi r24,lo8(1)
 4581 0042 6FE3      		ldi r22,lo8(63)
 4582 0044 44E1      		ldi r20,lo8(20)
 4583 0046 50E0      		ldi r21,hi8(20)
 4584 0048 20E0      		ldi r18,lo8(.LC1)
 4585 004a 30E0      		ldi r19,hi8(.LC1)
 4586 004c 0E94 0000 		call _Z12send_messagehhiPKc
 602:swarmfunctions.c **** 			sync = false;
 4588               	.LM298:
 4589 0050 1092 0000 		sts sync,__zero_reg__
 4590               	.L100:
 603:swarmfunctions.c **** 		}
 604:swarmfunctions.c **** 		use_sensor_data_on = false;
 4592               	.LM299:
 4593 0054 1092 0000 		sts use_sensor_data_on,__zero_reg__
 4594               	.L99:
 605:swarmfunctions.c **** 	}
 606:swarmfunctions.c **** 
 607:swarmfunctions.c **** 	if(!sync) angle = cos(dir * speed1);
 4596               	.LM300:
 4597 0058 8091 0000 		lds r24,sync
 4598 005c 8823      		tst r24
 4599 005e 01F4      		brne .L101
 4601               	.LM301:
 4602 0060 C701      		movw r24,r14
 4603 0062 B601      		movw r22,r12
 4604 0064 20E0      		ldi r18,lo8(0x43160000)
 4605 0066 30E0      		ldi r19,hi8(0x43160000)
 4606 0068 46E1      		ldi r20,hlo8(0x43160000)
 4607 006a 53E4      		ldi r21,hhi8(0x43160000)
 4608 006c 0E94 0000 		call __mulsf3
 4609 0070 0E94 0000 		call cos
 4610 0074 6B01      		movw r12,r22
 4611 0076 7C01      		movw r14,r24
 4612 0078 00C0      		rjmp .L102
 4613               	.L101:
 608:swarmfunctions.c **** 	else
 609:swarmfunctions.c **** 	{
 610:swarmfunctions.c **** 		angle = cos(dir * speed2);
 4615               	.LM302:
 4616 007a C701      		movw r24,r14
 4617 007c B601      		movw r22,r12
 4618 007e 20E0      		ldi r18,lo8(0x42480000)
 4619 0080 30E0      		ldi r19,hi8(0x42480000)
 4620 0082 48E4      		ldi r20,hlo8(0x42480000)
 4621 0084 52E4      		ldi r21,hhi8(0x42480000)
 4622 0086 0E94 0000 		call __mulsf3
 4623 008a 0E94 0000 		call cos
 4624 008e 6B01      		movw r12,r22
 4625 0090 7C01      		movw r14,r24
 611:swarmfunctions.c **** 		if(fabs(angle) < threshold) angle = 0;
 4627               	.LM303:
 4628 0092 9F77      		andi r25,0x7f
 4629 0094 27E7      		ldi r18,lo8(0x3f7fbe77)
 4630 0096 3EEB      		ldi r19,hi8(0x3f7fbe77)
 4631 0098 4FE7      		ldi r20,hlo8(0x3f7fbe77)
 4632 009a 5FE3      		ldi r21,hhi8(0x3f7fbe77)
 4633 009c 0E94 0000 		call __ltsf2
 4634 00a0 87FF      		sbrs r24,7
 4635 00a2 00C0      		rjmp .L102
 4636 00a4 0F2E      		mov __tmp_reg__,r31
 4637 00a6 F0E0      		ldi r31,lo8(0x0)
 4638 00a8 CF2E      		mov r12,r31
 4639 00aa F0E0      		ldi r31,hi8(0x0)
 4640 00ac DF2E      		mov r13,r31
 4641 00ae F0E0      		ldi r31,hlo8(0x0)
 4642 00b0 EF2E      		mov r14,r31
 4643 00b2 F0E0      		ldi r31,hhi8(0x0)
 4644 00b4 FF2E      		mov r15,r31
 4645 00b6 F02D      		mov r31,__tmp_reg__
 4646               	.L102:
 4647               	.LBE56:
 612:swarmfunctions.c **** 	}
 613:swarmfunctions.c **** 
 614:swarmfunctions.c **** 	return angle;
 615:swarmfunctions.c **** }
 4649               	.LM304:
 4650 00b8 8C2D      		mov r24,r12
 4651 00ba 9D2D      		mov r25,r13
 4652 00bc AE2D      		mov r26,r14
 4653 00be BF2D      		mov r27,r15
 4654 00c0 BC01      		movw r22,r24
 4655 00c2 CD01      		movw r24,r26
 4656               	/* epilogue start */
 4657 00c4 FF90      		pop r15
 4658 00c6 EF90      		pop r14
 4659 00c8 DF90      		pop r13
 4660 00ca CF90      		pop r12
 4661 00cc 0895      		ret
 4667               	.Lscope20:
 4668               		.section	.text._Z13Sync_Disorderi,"ax",@progbits
 4671               	.global	_Z13Sync_Disorderi
 4673               	_Z13Sync_Disorderi:
 543:swarmfunctions.c **** {
 4675               	.LM305:
 4676               	.LFBB21:
 4677 0000 8F92      		push r8
 4678 0002 9F92      		push r9
 4679 0004 AF92      		push r10
 4680 0006 BF92      		push r11
 4681 0008 CF92      		push r12
 4682 000a DF92      		push r13
 4683 000c EF92      		push r14
 4684 000e FF92      		push r15
 4685 0010 CF93      		push r28
 4686 0012 DF93      		push r29
 4687               	/* prologue: function */
 4688               	/* frame size = 0 */
 4689               	/* stack size = 10 */
 4690               	.L__stack_usage = 10
 4691 0014 EC01      		movw r28,r24
 4692               	.LBB57:
 547:swarmfunctions.c **** 	dir1 = swarm_synchronized();
 4694               	.LM306:
 4695 0016 0E94 0000 		call _Z18swarm_synchronizedv
 4696 001a 6B01      		movw r12,r22
 4697 001c 7C01      		movw r14,r24
 548:swarmfunctions.c **** 	dir2 = swarm_disordered();
 4699               	.LM307:
 4700 001e 0E94 0000 		call _Z16swarm_disorderedv
 4701 0022 4B01      		movw r8,r22
 4702 0024 5C01      		movw r10,r24
 549:swarmfunctions.c **** 	send_message(MESSAGE_NUMDATA, ALL_DIRECTION, NULL, "");
 4704               	.LM308:
 4705 0026 80E0      		ldi r24,lo8(0)
 4706 0028 6FE3      		ldi r22,lo8(63)
 4707 002a 40E0      		ldi r20,lo8(0)
 4708 002c 50E0      		ldi r21,hi8(0)
 4709 002e 20E0      		ldi r18,lo8(.LC0)
 4710 0030 30E0      		ldi r19,hi8(.LC0)
 4711 0032 0E94 0000 		call _Z12send_messagehhiPKc
 552:swarmfunctions.c **** 	if(sec_counter < ClosingTime-15)
 4713               	.LM309:
 4714 0036 2F97      		sbiw r28,15
 4715 0038 8091 0000 		lds r24,sec_counter
 4716 003c 9091 0000 		lds r25,sec_counter+1
 4717 0040 8C17      		cp r24,r28
 4718 0042 9D07      		cpc r25,r29
 4719 0044 04F4      		brge .L105
 554:swarmfunctions.c **** 		decay_tim = 0;
 4721               	.LM310:
 4722 0046 80E0      		ldi r24,lo8(0x0)
 4723 0048 90E0      		ldi r25,hi8(0x0)
 4724 004a DC01      		movw r26,r24
 4725 004c 8093 0000 		sts decay_tim,r24
 4726 0050 9093 0000 		sts decay_tim+1,r25
 4727 0054 A093 0000 		sts decay_tim+2,r26
 4728 0058 B093 0000 		sts decay_tim+3,r27
 555:swarmfunctions.c **** 		global_amp += 0.005; 
 4730               	.LM311:
 4731 005c 6091 0000 		lds r22,global_amp
 4732 0060 7091 0000 		lds r23,global_amp+1
 4733 0064 8091 0000 		lds r24,global_amp+2
 4734 0068 9091 0000 		lds r25,global_amp+3
 4735 006c 2AE0      		ldi r18,lo8(0x3ba3d70a)
 4736 006e 37ED      		ldi r19,hi8(0x3ba3d70a)
 4737 0070 43EA      		ldi r20,hlo8(0x3ba3d70a)
 4738 0072 5BE3      		ldi r21,hhi8(0x3ba3d70a)
 4739 0074 0E94 0000 		call __addsf3
 4740 0078 9B01      		movw r18,r22
 4741 007a F82F      		mov r31,r24
 4742 007c E92F      		mov r30,r25
 4743 007e 462F      		mov r20,r22
 4744 0080 532F      		mov r21,r19
 4745 0082 682F      		mov r22,r24
 4746 0084 792F      		mov r23,r25
 4747 0086 4093 0000 		sts global_amp,r20
 4748 008a 5093 0000 		sts global_amp+1,r21
 4749 008e 6093 0000 		sts global_amp+2,r22
 4750 0092 7093 0000 		sts global_amp+3,r23
 556:swarmfunctions.c **** 		if(global_amp > 1.0) global_amp = 1.0;
 4752               	.LM312:
 4753 0096 822F      		mov r24,r18
 4754 0098 932F      		mov r25,r19
 4755 009a AF2F      		mov r26,r31
 4756 009c BE2F      		mov r27,r30
 4757 009e BC01      		movw r22,r24
 4758 00a0 CD01      		movw r24,r26
 4759 00a2 20E0      		ldi r18,lo8(0x3f800000)
 4760 00a4 30E0      		ldi r19,hi8(0x3f800000)
 4761 00a6 40E8      		ldi r20,hlo8(0x3f800000)
 4762 00a8 5FE3      		ldi r21,hhi8(0x3f800000)
 4763 00aa 0E94 0000 		call __gtsf2
 4764 00ae 1816      		cp __zero_reg__,r24
 4765 00b0 04F4      		brge .L106
 556:swarmfunctions.c **** 		if(global_amp > 1.0) global_amp = 1.0;
 4767               	.LM313:
 4768 00b2 80E0      		ldi r24,lo8(0x3f800000)
 4769 00b4 90E0      		ldi r25,hi8(0x3f800000)
 4770 00b6 A0E8      		ldi r26,hlo8(0x3f800000)
 4771 00b8 BFE3      		ldi r27,hhi8(0x3f800000)
 4772 00ba 00C0      		rjmp .L114
 4773               	.L105:
 560:swarmfunctions.c **** 		decay_tim += 0.05;
 4775               	.LM314:
 4776 00bc 6091 0000 		lds r22,decay_tim
 4777 00c0 7091 0000 		lds r23,decay_tim+1
 4778 00c4 8091 0000 		lds r24,decay_tim+2
 4779 00c8 9091 0000 		lds r25,decay_tim+3
 4780 00cc 2DEC      		ldi r18,lo8(0x3d4ccccd)
 4781 00ce 3CEC      		ldi r19,hi8(0x3d4ccccd)
 4782 00d0 4CE4      		ldi r20,hlo8(0x3d4ccccd)
 4783 00d2 5DE3      		ldi r21,hhi8(0x3d4ccccd)
 4784 00d4 0E94 0000 		call __addsf3
 4785 00d8 9B01      		movw r18,r22
 4786 00da F82F      		mov r31,r24
 4787 00dc E92F      		mov r30,r25
 4788 00de 462F      		mov r20,r22
 4789 00e0 532F      		mov r21,r19
 4790 00e2 682F      		mov r22,r24
 4791 00e4 792F      		mov r23,r25
 4792 00e6 4093 0000 		sts decay_tim,r20
 4793 00ea 5093 0000 		sts decay_tim+1,r21
 4794 00ee 6093 0000 		sts decay_tim+2,r22
 4795 00f2 7093 0000 		sts decay_tim+3,r23
 561:swarmfunctions.c **** 		global_amp = exp(-0.4 * decay_tim);
 4797               	.LM315:
 4798 00f6 822F      		mov r24,r18
 4799 00f8 932F      		mov r25,r19
 4800 00fa AF2F      		mov r26,r31
 4801 00fc BE2F      		mov r27,r30
 4802 00fe BC01      		movw r22,r24
 4803 0100 CD01      		movw r24,r26
 4804 0102 2DEC      		ldi r18,lo8(0xbecccccd)
 4805 0104 3CEC      		ldi r19,hi8(0xbecccccd)
 4806 0106 4CEC      		ldi r20,hlo8(0xbecccccd)
 4807 0108 5EEB      		ldi r21,hhi8(0xbecccccd)
 4808 010a 0E94 0000 		call __mulsf3
 4809 010e 0E94 0000 		call exp
 4810 0112 DC01      		movw r26,r24
 4811 0114 CB01      		movw r24,r22
 4812               	.L114:
 4813 0116 8093 0000 		sts global_amp,r24
 4814 011a 9093 0000 		sts global_amp+1,r25
 4815 011e A093 0000 		sts global_amp+2,r26
 4816 0122 B093 0000 		sts global_amp+3,r27
 4817               	.L106:
 564:swarmfunctions.c **** 	if(sonar_attached && use_sensor_data_on && sec_counter > STGtime4)
 4819               	.LM316:
 4820 0126 8091 0000 		lds r24,sonar_attached
 4821 012a 8823      		tst r24
 4822 012c 01F0      		breq .L108
 564:swarmfunctions.c **** 	if(sonar_attached && use_sensor_data_on && sec_counter > STGtime4)
 4824               	.LM317:
 4825 012e 8091 0000 		lds r24,use_sensor_data_on
 4826 0132 8823      		tst r24
 4827 0134 01F0      		breq .L108
 564:swarmfunctions.c **** 	if(sonar_attached && use_sensor_data_on && sec_counter > STGtime4)
 4829               	.LM318:
 4830 0136 8091 0000 		lds r24,sec_counter
 4831 013a 9091 0000 		lds r25,sec_counter+1
 4832 013e 21E0      		ldi r18,hi8(271)
 4833 0140 8F30      		cpi r24,lo8(271)
 4834 0142 9207      		cpc r25,r18
 4835 0144 04F0      		brlt .L108
 566:swarmfunctions.c **** 		if(sensor_value_trichk >= RANGE1 && sensor_value_trichk < RANGE2)
 4837               	.LM319:
 4838 0146 8091 0000 		lds r24,sensor_value_trichk
 4839 014a 9091 0000 		lds r25,sensor_value_trichk+1
 4840 014e C297      		sbiw r24,50
 4841 0150 8436      		cpi r24,100
 4842 0152 9105      		cpc r25,__zero_reg__
 4843 0154 00F4      		brsh .L109
 568:swarmfunctions.c **** 			send_message(MESSAGE_COMMAND, ALL_DIRECTION, 4, "c");
 4845               	.LM320:
 4846 0156 81E0      		ldi r24,lo8(1)
 4847 0158 6FE3      		ldi r22,lo8(63)
 4848 015a 44E0      		ldi r20,lo8(4)
 4849 015c 50E0      		ldi r21,hi8(4)
 4850 015e 20E0      		ldi r18,lo8(.LC1)
 4851 0160 30E0      		ldi r19,hi8(.LC1)
 4852 0162 0E94 0000 		call _Z12send_messagehhiPKc
 569:swarmfunctions.c **** 			sync = false;
 4854               	.LM321:
 4855 0166 1092 0000 		sts sync,__zero_reg__
 4856               	.L109:
 571:swarmfunctions.c **** 		if(sensor_value_trichk >= RANGE2 && sensor_value_trichk < RANGE3)
 4858               	.LM322:
 4859 016a 8091 0000 		lds r24,sensor_value_trichk
 4860 016e 9091 0000 		lds r25,sensor_value_trichk+1
 4861 0172 8659      		subi r24,lo8(-(-150))
 4862 0174 9040      		sbci r25,hi8(-(-150))
 4863 0176 8436      		cpi r24,100
 4864 0178 9105      		cpc r25,__zero_reg__
 4865 017a 00F4      		brsh .L110
 573:swarmfunctions.c **** 			send_message(MESSAGE_COMMAND, ALL_DIRECTION, 2, "c");
 4867               	.LM323:
 4868 017c 81E0      		ldi r24,lo8(1)
 4869 017e 6FE3      		ldi r22,lo8(63)
 4870 0180 42E0      		ldi r20,lo8(2)
 4871 0182 50E0      		ldi r21,hi8(2)
 4872 0184 20E0      		ldi r18,lo8(.LC1)
 4873 0186 30E0      		ldi r19,hi8(.LC1)
 4874 0188 0E94 0000 		call _Z12send_messagehhiPKc
 574:swarmfunctions.c **** 			sync = false;
 4876               	.LM324:
 4877 018c 1092 0000 		sts sync,__zero_reg__
 4878               	.L110:
 576:swarmfunctions.c **** 		use_sensor_data_on = false;
 4880               	.LM325:
 4881 0190 1092 0000 		sts use_sensor_data_on,__zero_reg__
 4882               	.L108:
 579:swarmfunctions.c **** 	if(sync) 	angle = global_amp * cos(dir1 * speed);
 4884               	.LM326:
 4885 0194 8091 0000 		lds r24,sync
 4886 0198 8823      		tst r24
 4887 019a 01F0      		breq .L111
 579:swarmfunctions.c **** 	if(sync) 	angle = global_amp * cos(dir1 * speed);
 4889               	.LM327:
 4890 019c C701      		movw r24,r14
 4891 019e B601      		movw r22,r12
 4892 01a0 00C0      		rjmp .L115
 4893               	.L111:
 580:swarmfunctions.c **** 	else 		angle = global_amp * cos(dir2 * speed);
 4895               	.LM328:
 4896 01a2 C501      		movw r24,r10
 4897 01a4 B401      		movw r22,r8
 4898               	.L115:
 4899 01a6 20E0      		ldi r18,lo8(0x43160000)
 4900 01a8 30E0      		ldi r19,hi8(0x43160000)
 4901 01aa 46E1      		ldi r20,hlo8(0x43160000)
 4902 01ac 53E4      		ldi r21,hhi8(0x43160000)
 4903 01ae 0E94 0000 		call __mulsf3
 4904 01b2 0E94 0000 		call cos
 4905 01b6 2091 0000 		lds r18,global_amp
 4906 01ba 3091 0000 		lds r19,global_amp+1
 4907 01be 4091 0000 		lds r20,global_amp+2
 4908 01c2 5091 0000 		lds r21,global_amp+3
 4909 01c6 0E94 0000 		call __mulsf3
 4910               	.LBE57:
 583:swarmfunctions.c **** }
 4912               	.LM329:
 4913 01ca 472F      		mov r20,r23
 4914 01cc 382F      		mov r19,r24
 4915 01ce 292F      		mov r18,r25
 4916 01d0 862F      		mov r24,r22
 4917 01d2 942F      		mov r25,r20
 4918 01d4 A32F      		mov r26,r19
 4919 01d6 B22F      		mov r27,r18
 4920 01d8 BC01      		movw r22,r24
 4921 01da CD01      		movw r24,r26
 4922               	/* epilogue start */
 4923 01dc DF91      		pop r29
 4924 01de CF91      		pop r28
 4925 01e0 FF90      		pop r15
 4926 01e2 EF90      		pop r14
 4927 01e4 DF90      		pop r13
 4928 01e6 CF90      		pop r12
 4929 01e8 BF90      		pop r11
 4930 01ea AF90      		pop r10
 4931 01ec 9F90      		pop r9
 4932 01ee 8F90      		pop r8
 4933 01f0 0895      		ret
 4939               	.Lscope21:
 4940               		.data
 4941               	.LC2:
 4942 0003 6100      		.string	"a"
 4943               		.section	.text._Z4wavev,"ax",@progbits
 4945               	.global	_Z4wavev
 4947               	_Z4wavev:
 296:swarmfunctions.c **** {
 4949               	.LM330:
 4950               	.LFBB22:
 4951 0000 4F92      		push r4
 4952 0002 5F92      		push r5
 4953 0004 6F92      		push r6
 4954 0006 7F92      		push r7
 4955 0008 8F92      		push r8
 4956 000a 9F92      		push r9
 4957 000c AF92      		push r10
 4958 000e BF92      		push r11
 4959 0010 CF92      		push r12
 4960 0012 DF92      		push r13
 4961 0014 EF92      		push r14
 4962 0016 FF92      		push r15
 4963 0018 1F93      		push r17
 4964 001a CF93      		push r28
 4965 001c DF93      		push r29
 4966               	/* prologue: function */
 4967               	/* frame size = 0 */
 4968               	/* stack size = 15 */
 4969               	.L__stack_usage = 15
 4970               	.LBB58:
 300:swarmfunctions.c **** 	if(!agent2.flg)
 4972               	.LM331:
 4973 001e 8091 0000 		lds r24,agent2+8
 4974 0022 8823      		tst r24
 4975 0024 01F4      		brne .L117
 302:swarmfunctions.c **** 		agent2.tim1 = 0;
 4977               	.LM332:
 4978 0026 80E0      		ldi r24,lo8(0x0)
 4979 0028 90E0      		ldi r25,hi8(0x0)
 4980 002a DC01      		movw r26,r24
 4981 002c 8093 0000 		sts agent2,r24
 4982 0030 9093 0000 		sts agent2+1,r25
 4983 0034 A093 0000 		sts agent2+2,r26
 4984 0038 B093 0000 		sts agent2+3,r27
 303:swarmfunctions.c **** 		agent2.tim2 = 0;
 4986               	.LM333:
 4987 003c 8093 0000 		sts agent2+4,r24
 4988 0040 9093 0000 		sts agent2+4+1,r25
 4989 0044 A093 0000 		sts agent2+4+2,r26
 4990 0048 B093 0000 		sts agent2+4+3,r27
 304:swarmfunctions.c **** 		wave_ping = false;
 4992               	.LM334:
 4993 004c 1092 0000 		sts wave_ping,__zero_reg__
 307:swarmfunctions.c **** 		if(wave_flg) agent2.flg = true;
 4995               	.LM335:
 4996 0050 8091 0000 		lds r24,wave_flg
 4997 0054 8823      		tst r24
 4998 0056 01F4      		brne .L129
 4999               	.L118:
 308:swarmfunctions.c **** 		else if(sonar_attached) //not receive 'a', but detect audience by myself
 5001               	.LM336:
 5002 0058 8091 0000 		lds r24,sonar_attached
 5003 005c 8823      		tst r24
 5004 005e 01F4      		brne .+2
 5005 0060 00C0      		rjmp .L119
 310:swarmfunctions.c **** 			if(sensor_value_dblchk >= RANGE2 && sensor_value_dblchk <= RANGE3) agent2.flg = true;
 5007               	.LM337:
 5008 0062 8091 0000 		lds r24,sensor_value_dblchk
 5009 0066 9091 0000 		lds r25,sensor_value_dblchk+1
 5010 006a 8659      		subi r24,lo8(-(-150))
 5011 006c 9040      		sbci r25,hi8(-(-150))
 5012 006e 8536      		cpi r24,101
 5013 0070 9105      		cpc r25,__zero_reg__
 5014 0072 00F0      		brlo .+2
 5015 0074 00C0      		rjmp .L119
 5016               	.L129:
 310:swarmfunctions.c **** 			if(sensor_value_dblchk >= RANGE2 && sensor_value_dblchk <= RANGE3) agent2.flg = true;
 5018               	.LM338:
 5019 0076 81E0      		ldi r24,lo8(1)
 5020 0078 8093 0000 		sts agent2+8,r24
 5021 007c 00C0      		rjmp .L119
 5022               	.L117:
 315:swarmfunctions.c **** 		if(sonar_attached) period = 8.0; else period = 7.0;
 5024               	.LM339:
 5025 007e 8091 0000 		lds r24,sonar_attached
 5026 0082 8823      		tst r24
 5027 0084 01F0      		breq .L125
 5028 0086 0F2E      		mov __tmp_reg__,r31
 5029 0088 F0E0      		ldi r31,lo8(0x41000000)
 5030 008a CF2E      		mov r12,r31
 5031 008c F0E0      		ldi r31,hi8(0x41000000)
 5032 008e DF2E      		mov r13,r31
 5033 0090 F0E0      		ldi r31,hlo8(0x41000000)
 5034 0092 EF2E      		mov r14,r31
 5035 0094 F1E4      		ldi r31,hhi8(0x41000000)
 5036 0096 FF2E      		mov r15,r31
 5037 0098 F02D      		mov r31,__tmp_reg__
 5038 009a 00C0      		rjmp .L120
 5039               	.L125:
 5040 009c 0F2E      		mov __tmp_reg__,r31
 5041 009e F0E0      		ldi r31,lo8(0x40e00000)
 5042 00a0 CF2E      		mov r12,r31
 5043 00a2 F0E0      		ldi r31,hi8(0x40e00000)
 5044 00a4 DF2E      		mov r13,r31
 5045 00a6 F0EE      		ldi r31,hlo8(0x40e00000)
 5046 00a8 EF2E      		mov r14,r31
 5047 00aa F0E4      		ldi r31,hhi8(0x40e00000)
 5048 00ac FF2E      		mov r15,r31
 5049 00ae F02D      		mov r31,__tmp_reg__
 5050               	.L120:
 317:swarmfunctions.c **** 		if(agent2.tim2 < period)
 5052               	.LM340:
 5053 00b0 8090 0000 		lds r8,agent2+4
 5054 00b4 9090 0000 		lds r9,agent2+4+1
 5055 00b8 A090 0000 		lds r10,agent2+4+2
 5056 00bc B090 0000 		lds r11,agent2+4+3
 5057 00c0 C501      		movw r24,r10
 5058 00c2 B401      		movw r22,r8
 5059 00c4 A701      		movw r20,r14
 5060 00c6 9601      		movw r18,r12
 5061 00c8 0E94 0000 		call __ltsf2
 5062 00cc 87FF      		sbrs r24,7
 5063 00ce 00C0      		rjmp .L121
 319:swarmfunctions.c **** 			agent2.tim1 += 0.5;
 5065               	.LM341:
 5066 00d0 6091 0000 		lds r22,agent2
 5067 00d4 7091 0000 		lds r23,agent2+1
 5068 00d8 8091 0000 		lds r24,agent2+2
 5069 00dc 9091 0000 		lds r25,agent2+3
 5070 00e0 20E0      		ldi r18,lo8(0x3f000000)
 5071 00e2 30E0      		ldi r19,hi8(0x3f000000)
 5072 00e4 40E0      		ldi r20,hlo8(0x3f000000)
 5073 00e6 5FE3      		ldi r21,hhi8(0x3f000000)
 5074 00e8 0E94 0000 		call __addsf3
 5075 00ec DC01      		movw r26,r24
 5076 00ee CB01      		movw r24,r22
 5077 00f0 8093 0000 		sts agent2,r24
 5078 00f4 9093 0000 		sts agent2+1,r25
 5079 00f8 A093 0000 		sts agent2+2,r26
 5080 00fc B093 0000 		sts agent2+3,r27
 320:swarmfunctions.c **** 			agent2.tim2 += 0.1;
 5082               	.LM342:
 5083 0100 C501      		movw r24,r10
 5084 0102 B401      		movw r22,r8
 5085 0104 2DEC      		ldi r18,lo8(0x3dcccccd)
 5086 0106 3CEC      		ldi r19,hi8(0x3dcccccd)
 5087 0108 4CEC      		ldi r20,hlo8(0x3dcccccd)
 5088 010a 5DE3      		ldi r21,hhi8(0x3dcccccd)
 5089 010c 0E94 0000 		call __addsf3
 5090 0110 862E      		mov r8,r22
 5091 0112 C72F      		mov r28,r23
 5092 0114 D82F      		mov r29,r24
 5093 0116 192F      		mov r17,r25
 5094 0118 862F      		mov r24,r22
 5095 011a 9C2F      		mov r25,r28
 5096 011c AD2F      		mov r26,r29
 5097 011e B12F      		mov r27,r17
 5098 0120 8093 0000 		sts agent2+4,r24
 5099 0124 9093 0000 		sts agent2+4+1,r25
 5100 0128 A093 0000 		sts agent2+4+2,r26
 5101 012c B093 0000 		sts agent2+4+3,r27
 323:swarmfunctions.c **** 			if(agent2.tim2 > period / 4.0)
 5103               	.LM343:
 5104 0130 C701      		movw r24,r14
 5105 0132 B601      		movw r22,r12
 5106 0134 20E0      		ldi r18,lo8(0x3e800000)
 5107 0136 30E0      		ldi r19,hi8(0x3e800000)
 5108 0138 40E8      		ldi r20,hlo8(0x3e800000)
 5109 013a 5EE3      		ldi r21,hhi8(0x3e800000)
 5110 013c 0E94 0000 		call __mulsf3
 5111 0140 9B01      		movw r18,r22
 5112 0142 AC01      		movw r20,r24
 5113 0144 882D      		mov r24,r8
 5114 0146 9C2F      		mov r25,r28
 5115 0148 AD2F      		mov r26,r29
 5116 014a B12F      		mov r27,r17
 5117 014c BC01      		movw r22,r24
 5118 014e CD01      		movw r24,r26
 5119 0150 0E94 0000 		call __gtsf2
 5120 0154 1816      		cp __zero_reg__,r24
 5121 0156 04F4      		brge .L121
 325:swarmfunctions.c **** 				if(!wave_ping)
 5123               	.LM344:
 5124 0158 8091 0000 		lds r24,wave_ping
 5125 015c 8823      		tst r24
 5126 015e 01F4      		brne .L121
 327:swarmfunctions.c **** 					send_message(MESSAGE_COMMAND, ALL_DIRECTION, 1, "a");
 5128               	.LM345:
 5129 0160 81E0      		ldi r24,lo8(1)
 5130 0162 6FE3      		ldi r22,lo8(63)
 5131 0164 41E0      		ldi r20,lo8(1)
 5132 0166 50E0      		ldi r21,hi8(1)
 5133 0168 20E0      		ldi r18,lo8(.LC2)
 5134 016a 30E0      		ldi r19,hi8(.LC2)
 5135 016c 0E94 0000 		call _Z12send_messagehhiPKc
 328:swarmfunctions.c **** 					wave_ping = true;
 5137               	.LM346:
 5138 0170 81E0      		ldi r24,lo8(1)
 5139 0172 8093 0000 		sts wave_ping,r24
 5140               	.L121:
 333:swarmfunctions.c **** 		if(agent2.tim2 >= period)
 5142               	.LM347:
 5143 0176 6091 0000 		lds r22,agent2+4
 5144 017a 7091 0000 		lds r23,agent2+4+1
 5145 017e 8091 0000 		lds r24,agent2+4+2
 5146 0182 9091 0000 		lds r25,agent2+4+3
 5147 0186 A701      		movw r20,r14
 5148 0188 9601      		movw r18,r12
 5149 018a 0E94 0000 		call __gesf2
 5150 018e 87FD      		sbrc r24,7
 5151 0190 00C0      		rjmp .L119
 335:swarmfunctions.c **** 			agent2.flg = false;
 5153               	.LM348:
 5154 0192 1092 0000 		sts agent2+8,__zero_reg__
 336:swarmfunctions.c **** 			wave_flg = false;
 5156               	.LM349:
 5157 0196 1092 0000 		sts wave_flg,__zero_reg__
 5158               	.L119:
 340:swarmfunctions.c **** 	ampl = agent2.tim2 * exp(-decay * agent2.tim2) * 2.7;
 5160               	.LM350:
 5161 019a C090 0000 		lds r12,agent2+4
 5162 019e D090 0000 		lds r13,agent2+4+1
 5163 01a2 E090 0000 		lds r14,agent2+4+2
 5164 01a6 F090 0000 		lds r15,agent2+4+3
 5165 01aa C701      		movw r24,r14
 5166 01ac B601      		movw r22,r12
 5167 01ae 9058      		subi r25,0x80
 5168 01b0 0E94 0000 		call exp
 5169 01b4 4B01      		movw r8,r22
 5170 01b6 5C01      		movw r10,r24
 341:swarmfunctions.c **** 	angle = ampl * sin(agent2.tim1);
 5172               	.LM351:
 5173 01b8 6091 0000 		lds r22,agent2
 5174 01bc 7091 0000 		lds r23,agent2+1
 5175 01c0 8091 0000 		lds r24,agent2+2
 5176 01c4 9091 0000 		lds r25,agent2+3
 5177 01c8 0E94 0000 		call sin
 5178 01cc 2B01      		movw r4,r22
 5179 01ce 3C01      		movw r6,r24
 340:swarmfunctions.c **** 	ampl = agent2.tim2 * exp(-decay * agent2.tim2) * 2.7;
 5181               	.LM352:
 5182 01d0 C701      		movw r24,r14
 5183 01d2 B601      		movw r22,r12
 5184 01d4 A501      		movw r20,r10
 5185 01d6 9401      		movw r18,r8
 5186 01d8 0E94 0000 		call __mulsf3
 5187 01dc 2DEC      		ldi r18,lo8(0x402ccccd)
 5188 01de 3CEC      		ldi r19,hi8(0x402ccccd)
 5189 01e0 4CE2      		ldi r20,hlo8(0x402ccccd)
 5190 01e2 50E4      		ldi r21,hhi8(0x402ccccd)
 5191 01e4 0E94 0000 		call __mulsf3
 341:swarmfunctions.c **** 	angle = ampl * sin(agent2.tim1);
 5193               	.LM353:
 5194 01e8 A301      		movw r20,r6
 5195 01ea 9201      		movw r18,r4
 5196 01ec 0E94 0000 		call __mulsf3
 5197               	.LBE58:
 344:swarmfunctions.c **** }
 5199               	.LM354:
 5200 01f0 462F      		mov r20,r22
 5201 01f2 572F      		mov r21,r23
 5202 01f4 682F      		mov r22,r24
 5203 01f6 792F      		mov r23,r25
 5204 01f8 CB01      		movw r24,r22
 5205 01fa BA01      		movw r22,r20
 5206               	/* epilogue start */
 5207 01fc DF91      		pop r29
 5208 01fe CF91      		pop r28
 5209 0200 1F91      		pop r17
 5210 0202 FF90      		pop r15
 5211 0204 EF90      		pop r14
 5212 0206 DF90      		pop r13
 5213 0208 CF90      		pop r12
 5214 020a BF90      		pop r11
 5215 020c AF90      		pop r10
 5216 020e 9F90      		pop r9
 5217 0210 8F90      		pop r8
 5218 0212 7F90      		pop r7
 5219 0214 6F90      		pop r6
 5220 0216 5F90      		pop r5
 5221 0218 4F90      		pop r4
 5222 021a 0895      		ret
 5227               	.Lscope22:
 5228               		.data
 5229               	.LC3:
 5230 0005 6200      		.string	"b"
 5231               		.section	.text._Z6columnv,"ax",@progbits
 5233               	.global	_Z6columnv
 5235               	_Z6columnv:
 249:swarmfunctions.c **** {
 5237               	.LM355:
 5238               	.LFBB23:
 5239 0000 4F92      		push r4
 5240 0002 5F92      		push r5
 5241 0004 6F92      		push r6
 5242 0006 7F92      		push r7
 5243 0008 8F92      		push r8
 5244 000a 9F92      		push r9
 5245 000c AF92      		push r10
 5246 000e BF92      		push r11
 5247 0010 CF92      		push r12
 5248 0012 DF92      		push r13
 5249 0014 EF92      		push r14
 5250 0016 FF92      		push r15
 5251 0018 0F93      		push r16
 5252 001a 1F93      		push r17
 5253 001c CF93      		push r28
 5254 001e DF93      		push r29
 5255               	/* prologue: function */
 5256               	/* frame size = 0 */
 5257               	/* stack size = 16 */
 5258               	.L__stack_usage = 16
 5259               	.LBB59:
 253:swarmfunctions.c **** 	if(sonar_attached)
 5261               	.LM356:
 5262 0020 8091 0000 		lds r24,sonar_attached
 5263 0024 8823      		tst r24
 5264 0026 01F0      		breq .L131
 255:swarmfunctions.c **** 		if(sensor_value_dblchk >= RANGE1 && sensor_value_dblchk <= RANGE3)
 5266               	.LM357:
 5267 0028 8091 0000 		lds r24,sensor_value_dblchk
 5268 002c 9091 0000 		lds r25,sensor_value_dblchk+1
 5269 0030 C297      		sbiw r24,50
 5270 0032 893C      		cpi r24,201
 5271 0034 9105      		cpc r25,__zero_reg__
 5272 0036 00F4      		brsh .L131
 258:swarmfunctions.c **** 			if(use_sensor_data_on)
 5274               	.LM358:
 5275 0038 8091 0000 		lds r24,use_sensor_data_on
 5276 003c 8823      		tst r24
 5277 003e 01F0      		breq .L131
 260:swarmfunctions.c **** 				send_message(MESSAGE_COMMAND, 0b00001000, 1, "b");
 5279               	.LM359:
 5280 0040 81E0      		ldi r24,lo8(1)
 5281 0042 68E0      		ldi r22,lo8(8)
 5282 0044 41E0      		ldi r20,lo8(1)
 5283 0046 50E0      		ldi r21,hi8(1)
 5284 0048 20E0      		ldi r18,lo8(.LC3)
 5285 004a 30E0      		ldi r19,hi8(.LC3)
 5286 004c 0E94 0000 		call _Z12send_messagehhiPKc
 261:swarmfunctions.c **** 				agent3.tim2 = 0;
 5288               	.LM360:
 5289 0050 80E0      		ldi r24,lo8(0x0)
 5290 0052 90E0      		ldi r25,hi8(0x0)
 5291 0054 DC01      		movw r26,r24
 5292 0056 8093 0000 		sts agent3+4,r24
 5293 005a 9093 0000 		sts agent3+4+1,r25
 5294 005e A093 0000 		sts agent3+4+2,r26
 5295 0062 B093 0000 		sts agent3+4+3,r27
 262:swarmfunctions.c **** 				use_sensor_data_on = false;
 5297               	.LM361:
 5298 0066 1092 0000 		sts use_sensor_data_on,__zero_reg__
 5299               	.L131:
 267:swarmfunctions.c **** 	if(column_flg)
 5301               	.LM362:
 5302 006a 8091 0000 		lds r24,column_flg
 5303 006e 8823      		tst r24
 5304 0070 01F0      		breq .L132
 269:swarmfunctions.c **** 		agent3.tim2 = 0;
 5306               	.LM363:
 5307 0072 80E0      		ldi r24,lo8(0x0)
 5308 0074 90E0      		ldi r25,hi8(0x0)
 5309 0076 DC01      		movw r26,r24
 5310 0078 8093 0000 		sts agent3+4,r24
 5311 007c 9093 0000 		sts agent3+4+1,r25
 5312 0080 A093 0000 		sts agent3+4+2,r26
 5313 0084 B093 0000 		sts agent3+4+3,r27
 272:swarmfunctions.c **** 		if(use_sensor_data_on)
 5315               	.LM364:
 5316 0088 8091 0000 		lds r24,use_sensor_data_on
 5317 008c 8823      		tst r24
 5318 008e 01F0      		breq .L132
 274:swarmfunctions.c **** 			column_flg = false;
 5320               	.LM365:
 5321 0090 1092 0000 		sts column_flg,__zero_reg__
 275:swarmfunctions.c **** 			use_sensor_data_on = false;
 5323               	.LM366:
 5324 0094 1092 0000 		sts use_sensor_data_on,__zero_reg__
 276:swarmfunctions.c **** 			send_message(MESSAGE_COMMAND, 0b00001000, 1, "b");
 5326               	.LM367:
 5327 0098 81E0      		ldi r24,lo8(1)
 5328 009a 68E0      		ldi r22,lo8(8)
 5329 009c 41E0      		ldi r20,lo8(1)
 5330 009e 50E0      		ldi r21,hi8(1)
 5331 00a0 20E0      		ldi r18,lo8(.LC3)
 5332 00a2 30E0      		ldi r19,hi8(.LC3)
 5333 00a4 0E94 0000 		call _Z12send_messagehhiPKc
 5334               	.L132:
 280:swarmfunctions.c **** 	ampl = exp(-decay * agent3.tim2);
 5336               	.LM368:
 5337 00a8 8090 0000 		lds r8,agent3+4
 5338 00ac 9090 0000 		lds r9,agent3+4+1
 5339 00b0 A090 0000 		lds r10,agent3+4+2
 5340 00b4 B090 0000 		lds r11,agent3+4+3
 5341 00b8 C501      		movw r24,r10
 5342 00ba B401      		movw r22,r8
 5343 00bc 9058      		subi r25,0x80
 5344 00be 0E94 0000 		call exp
 5345 00c2 2B01      		movw r4,r22
 5346 00c4 3C01      		movw r6,r24
 281:swarmfunctions.c **** 	angle = ampl * sin(agent3.tim1);
 5348               	.LM369:
 5349 00c6 C090 0000 		lds r12,agent3
 5350 00ca D090 0000 		lds r13,agent3+1
 5351 00ce E090 0000 		lds r14,agent3+2
 5352 00d2 F090 0000 		lds r15,agent3+3
 5353 00d6 C701      		movw r24,r14
 5354 00d8 B601      		movw r22,r12
 5355 00da 0E94 0000 		call sin
 5356 00de 9B01      		movw r18,r22
 5357 00e0 AC01      		movw r20,r24
 5358 00e2 C301      		movw r24,r6
 5359 00e4 B201      		movw r22,r4
 5360 00e6 0E94 0000 		call __mulsf3
 5361 00ea 462E      		mov r4,r22
 5362 00ec 072F      		mov r16,r23
 5363 00ee 782E      		mov r7,r24
 5364 00f0 692E      		mov r6,r25
 283:swarmfunctions.c **** 	agent3.tim1 += 1.0; if(agent3.tim1 > 2.0*PI) agent3.tim1 -= 2.0*PI;
 5366               	.LM370:
 5367 00f2 C701      		movw r24,r14
 5368 00f4 B601      		movw r22,r12
 5369 00f6 20E0      		ldi r18,lo8(0x3f800000)
 5370 00f8 30E0      		ldi r19,hi8(0x3f800000)
 5371 00fa 40E8      		ldi r20,hlo8(0x3f800000)
 5372 00fc 5FE3      		ldi r21,hhi8(0x3f800000)
 5373 00fe 0E94 0000 		call __addsf3
 5374 0102 162F      		mov r17,r22
 5375 0104 D72F      		mov r29,r23
 5376 0106 C82F      		mov r28,r24
 5377 0108 C92E      		mov r12,r25
 5378 010a 862F      		mov r24,r22
 5379 010c 9D2F      		mov r25,r29
 5380 010e AC2F      		mov r26,r28
 5381 0110 BC2D      		mov r27,r12
 5382 0112 8093 0000 		sts agent3,r24
 5383 0116 9093 0000 		sts agent3+1,r25
 5384 011a A093 0000 		sts agent3+2,r26
 5385 011e B093 0000 		sts agent3+3,r27
 5386 0122 BC01      		movw r22,r24
 5387 0124 CD01      		movw r24,r26
 5388 0126 20ED      		ldi r18,lo8(0x40c90fd0)
 5389 0128 3FE0      		ldi r19,hi8(0x40c90fd0)
 5390 012a 49EC      		ldi r20,hlo8(0x40c90fd0)
 5391 012c 50E4      		ldi r21,hhi8(0x40c90fd0)
 5392 012e 0E94 0000 		call __gtsf2
 5393 0132 1816      		cp __zero_reg__,r24
 5394 0134 04F4      		brge .L133
 283:swarmfunctions.c **** 	agent3.tim1 += 1.0; if(agent3.tim1 > 2.0*PI) agent3.tim1 -= 2.0*PI;
 5396               	.LM371:
 5397 0136 812F      		mov r24,r17
 5398 0138 9D2F      		mov r25,r29
 5399 013a AC2F      		mov r26,r28
 5400 013c BC2D      		mov r27,r12
 5401 013e BC01      		movw r22,r24
 5402 0140 CD01      		movw r24,r26
 5403 0142 20ED      		ldi r18,lo8(0x40c90fd0)
 5404 0144 3FE0      		ldi r19,hi8(0x40c90fd0)
 5405 0146 49EC      		ldi r20,hlo8(0x40c90fd0)
 5406 0148 50E4      		ldi r21,hhi8(0x40c90fd0)
 5407 014a 0E94 0000 		call __subsf3
 5408 014e DC01      		movw r26,r24
 5409 0150 CB01      		movw r24,r22
 5410 0152 8093 0000 		sts agent3,r24
 5411 0156 9093 0000 		sts agent3+1,r25
 5412 015a A093 0000 		sts agent3+2,r26
 5413 015e B093 0000 		sts agent3+3,r27
 5414               	.L133:
 284:swarmfunctions.c **** 	agent3.tim2 += 0.1; if(agent3.tim2 > 20.0) agent3.tim2 = 20.0;
 5416               	.LM372:
 5417 0162 C501      		movw r24,r10
 5418 0164 B401      		movw r22,r8
 5419 0166 2DEC      		ldi r18,lo8(0x3dcccccd)
 5420 0168 3CEC      		ldi r19,hi8(0x3dcccccd)
 5421 016a 4CEC      		ldi r20,hlo8(0x3dcccccd)
 5422 016c 5DE3      		ldi r21,hhi8(0x3dcccccd)
 5423 016e 0E94 0000 		call __addsf3
 5424 0172 9B01      		movw r18,r22
 5425 0174 F82F      		mov r31,r24
 5426 0176 E92F      		mov r30,r25
 5427 0178 462F      		mov r20,r22
 5428 017a 532F      		mov r21,r19
 5429 017c 682F      		mov r22,r24
 5430 017e 792F      		mov r23,r25
 5431 0180 4093 0000 		sts agent3+4,r20
 5432 0184 5093 0000 		sts agent3+4+1,r21
 5433 0188 6093 0000 		sts agent3+4+2,r22
 5434 018c 7093 0000 		sts agent3+4+3,r23
 5435 0190 822F      		mov r24,r18
 5436 0192 932F      		mov r25,r19
 5437 0194 AF2F      		mov r26,r31
 5438 0196 BE2F      		mov r27,r30
 5439 0198 BC01      		movw r22,r24
 5440 019a CD01      		movw r24,r26
 5441 019c 20E0      		ldi r18,lo8(0x41a00000)
 5442 019e 30E0      		ldi r19,hi8(0x41a00000)
 5443 01a0 40EA      		ldi r20,hlo8(0x41a00000)
 5444 01a2 51E4      		ldi r21,hhi8(0x41a00000)
 5445 01a4 0E94 0000 		call __gtsf2
 5446 01a8 1816      		cp __zero_reg__,r24
 5447 01aa 04F4      		brge .L135
 284:swarmfunctions.c **** 	agent3.tim2 += 0.1; if(agent3.tim2 > 20.0) agent3.tim2 = 20.0;
 5449               	.LM373:
 5450 01ac 80E0      		ldi r24,lo8(0x41a00000)
 5451 01ae 90E0      		ldi r25,hi8(0x41a00000)
 5452 01b0 A0EA      		ldi r26,hlo8(0x41a00000)
 5453 01b2 B1E4      		ldi r27,hhi8(0x41a00000)
 5454 01b4 8093 0000 		sts agent3+4,r24
 5455 01b8 9093 0000 		sts agent3+4+1,r25
 5456 01bc A093 0000 		sts agent3+4+2,r26
 5457 01c0 B093 0000 		sts agent3+4+3,r27
 5458               	.L135:
 5459               	.LBE59:
 287:swarmfunctions.c **** }
 5461               	.LM374:
 5462 01c4 9301      		movw r18,r6
 5463 01c6 842D      		mov r24,r4
 5464 01c8 902F      		mov r25,r16
 5465 01ca A32F      		mov r26,r19
 5466 01cc B62D      		mov r27,r6
 5467 01ce BC01      		movw r22,r24
 5468 01d0 CD01      		movw r24,r26
 5469               	/* epilogue start */
 5470 01d2 DF91      		pop r29
 5471 01d4 CF91      		pop r28
 5472 01d6 1F91      		pop r17
 5473 01d8 0F91      		pop r16
 5474 01da FF90      		pop r15
 5475 01dc EF90      		pop r14
 5476 01de DF90      		pop r13
 5477 01e0 CF90      		pop r12
 5478 01e2 BF90      		pop r11
 5479 01e4 AF90      		pop r10
 5480 01e6 9F90      		pop r9
 5481 01e8 8F90      		pop r8
 5482 01ea 7F90      		pop r7
 5483 01ec 6F90      		pop r6
 5484 01ee 5F90      		pop r5
 5485 01f0 4F90      		pop r4
 5486 01f2 0895      		ret
 5491               	.Lscope23:
 5492               		.section	.text._Z10plane_wavev,"ax",@progbits
 5494               	.global	_Z10plane_wavev
 5496               	_Z10plane_wavev:
 162:swarmfunctions.c **** {
 5498               	.LM375:
 5499               	.LFBB24:
 5500 0000 4F92      		push r4
 5501 0002 5F92      		push r5
 5502 0004 6F92      		push r6
 5503 0006 7F92      		push r7
 5504 0008 8F92      		push r8
 5505 000a 9F92      		push r9
 5506 000c AF92      		push r10
 5507 000e BF92      		push r11
 5508 0010 CF92      		push r12
 5509 0012 DF92      		push r13
 5510 0014 EF92      		push r14
 5511 0016 FF92      		push r15
 5512               	/* prologue: function */
 5513               	/* frame size = 0 */
 5514               	/* stack size = 12 */
 5515               	.L__stack_usage = 12
 5516               	.LBB60:
 167:swarmfunctions.c **** 	if(!agent2.flg)
 5518               	.LM376:
 5519 0018 8091 0000 		lds r24,agent2+8
 5520 001c 8823      		tst r24
 5521 001e 01F0      		breq .+2
 5522 0020 00C0      		rjmp .L140
 169:swarmfunctions.c **** 		agent2.tim1 = 0;
 5524               	.LM377:
 5525 0022 80E0      		ldi r24,lo8(0x0)
 5526 0024 90E0      		ldi r25,hi8(0x0)
 5527 0026 DC01      		movw r26,r24
 5528 0028 8093 0000 		sts agent2,r24
 5529 002c 9093 0000 		sts agent2+1,r25
 5530 0030 A093 0000 		sts agent2+2,r26
 5531 0034 B093 0000 		sts agent2+3,r27
 170:swarmfunctions.c **** 		agent2.tim2 = 0;
 5533               	.LM378:
 5534 0038 8093 0000 		sts agent2+4,r24
 5535 003c 9093 0000 		sts agent2+4+1,r25
 5536 0040 A093 0000 		sts agent2+4+2,r26
 5537 0044 B093 0000 		sts agent2+4+3,r27
 171:swarmfunctions.c **** 		wave_ping = false;
 5539               	.LM379:
 5540 0048 1092 0000 		sts wave_ping,__zero_reg__
 174:swarmfunctions.c **** 		if(sonar_attached)
 5542               	.LM380:
 5543 004c 8091 0000 		lds r24,sonar_attached
 5544 0050 8823      		tst r24
 5545 0052 01F0      		breq .L141
 177:swarmfunctions.c **** 			if(wave_flg) agent2.flg = true;
 5547               	.LM381:
 5548 0054 8091 0000 		lds r24,wave_flg
 5549 0058 8823      		tst r24
 5550 005a 01F4      		brne .L155
 5551               	.L142:
 179:swarmfunctions.c **** 			else if(sensor_value_trichk >= RANGE1 && sensor_value_trichk <= RANGE3)
 5553               	.LM382:
 5554 005c 8091 0000 		lds r24,sensor_value_trichk
 5555 0060 9091 0000 		lds r25,sensor_value_trichk+1
 5556 0064 C297      		sbiw r24,50
 5557 0066 893C      		cpi r24,201
 5558 0068 9105      		cpc r25,__zero_reg__
 5559 006a 00F0      		brlo .+2
 5560 006c 00C0      		rjmp .L143
 181:swarmfunctions.c **** 				column_flg = true;
 5562               	.LM383:
 5563 006e 81E0      		ldi r24,lo8(1)
 5564 0070 8093 0000 		sts column_flg,r24
 182:swarmfunctions.c **** 				agent2.flg = true;
 5566               	.LM384:
 5567 0074 8093 0000 		sts agent2+8,r24
 5568               	.LBB61:
 5569               	.LBB62:
 5571               	.Ltext6:
   1:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
   6:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
   9:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  12:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****      distribution.
  16:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  17:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  21:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  33:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  35:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  38:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #endif
  41:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  42:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #include <math.h>
  45:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  46:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** /** \file */
  47:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     \code
  49:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     \endcode
  53:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  54:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     used.
  58:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  59:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  68:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  77:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  81:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** */
  82:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  83:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #endif
  87:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  88:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #endif
  93:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  94:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #endif
  97:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
  98:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #  include <math.h>
 102:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #endif
 103:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 104:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** /**
 105:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 107:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 109:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 112:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 114:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 120:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 125:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 129:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 132:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 140:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****  */
 141:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** void
 142:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** {
 144:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	uint16_t __ticks;
 145:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	double __tmp ; 
 146:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h ****   __STDC_HOSTED__
 149:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 150:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 153:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 156:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 159:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	#else
 160:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 		//round up by default
 161:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	#endif
 163:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 
 164:/usr/local/CrossPack-AVR-20121207/lib/gcc/avr/4.6.2/../../../../avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 5573               	.LM385:
 5574 0078 8FEF      		 ldi r24,lo8(3199999)
 5575 007a 93ED      	    ldi r25,hi8(3199999)
 5576 007c A0E3      	    ldi r26,hlo8(3199999)
 5577 007e 8150      	    1:subi r24,1
 5578 0080 9040      	    sbci r25,0
 5579 0082 A040      	    sbci r26,0
 5580 0084 01F4      	    brne 1b
 5581 0086 00C0      		rjmp .
 5582 0088 0000      		nop
 5583               	.LBE62:
 5584               	.LBE61:
 5586               	.Ltext7:
 184:swarmfunctions.c **** 				send_message(MESSAGE_COMMAND, 0b00001000, 1, "b");
 5588               	.LM386:
 5589 008a 81E0      		ldi r24,lo8(1)
 5590 008c 68E0      		ldi r22,lo8(8)
 5591 008e 41E0      		ldi r20,lo8(1)
 5592 0090 50E0      		ldi r21,hi8(1)
 5593 0092 20E0      		ldi r18,lo8(.LC3)
 5594 0094 30E0      		ldi r19,hi8(.LC3)
 5595 0096 0E94 0000 		call _Z12send_messagehhiPKc
 5596 009a 00C0      		rjmp .L143
 5597               	.L141:
 191:swarmfunctions.c **** 			if(column_flg)
 5599               	.LM387:
 5600 009c 8091 0000 		lds r24,column_flg
 5601 00a0 8823      		tst r24
 5602 00a2 01F0      		breq .L144
 193:swarmfunctions.c **** 				agent2.flg = true;
 5604               	.LM388:
 5605 00a4 81E0      		ldi r24,lo8(1)
 5606 00a6 8093 0000 		sts agent2+8,r24
 194:swarmfunctions.c **** 				send_message(MESSAGE_COMMAND, 0b00001000, 1, "b");
 5608               	.LM389:
 5609 00aa 68E0      		ldi r22,lo8(8)
 5610 00ac 41E0      		ldi r20,lo8(1)
 5611 00ae 50E0      		ldi r21,hi8(1)
 5612 00b0 20E0      		ldi r18,lo8(.LC3)
 5613 00b2 30E0      		ldi r19,hi8(.LC3)
 5614 00b4 0E94 0000 		call _Z12send_messagehhiPKc
 5615               	.L144:
 198:swarmfunctions.c **** 			if(wave_flg) agent2.flg = true;
 5617               	.LM390:
 5618 00b8 8091 0000 		lds r24,wave_flg
 5619 00bc 8823      		tst r24
 5620 00be 01F4      		brne .+2
 5621 00c0 00C0      		rjmp .L143
 5622               	.L155:
 198:swarmfunctions.c **** 			if(wave_flg) agent2.flg = true;
 5624               	.LM391:
 5625 00c2 81E0      		ldi r24,lo8(1)
 5626 00c4 8093 0000 		sts agent2+8,r24
 5627 00c8 00C0      		rjmp .L143
 5628               	.L140:
 205:swarmfunctions.c **** 		if(agent2.tim2 < period)
 5630               	.LM392:
 5631 00ca C090 0000 		lds r12,agent2+4
 5632 00ce D090 0000 		lds r13,agent2+4+1
 5633 00d2 E090 0000 		lds r14,agent2+4+2
 5634 00d6 F090 0000 		lds r15,agent2+4+3
 5635 00da C701      		movw r24,r14
 5636 00dc B601      		movw r22,r12
 5637 00de 20E0      		ldi r18,lo8(0x40e00000)
 5638 00e0 30E0      		ldi r19,hi8(0x40e00000)
 5639 00e2 40EE      		ldi r20,hlo8(0x40e00000)
 5640 00e4 50E4      		ldi r21,hhi8(0x40e00000)
 5641 00e6 0E94 0000 		call __ltsf2
 5642 00ea 87FF      		sbrs r24,7
 5643 00ec 00C0      		rjmp .L145
 207:swarmfunctions.c **** 			agent2.tim1 += 0.5;
 5645               	.LM393:
 5646 00ee 6091 0000 		lds r22,agent2
 5647 00f2 7091 0000 		lds r23,agent2+1
 5648 00f6 8091 0000 		lds r24,agent2+2
 5649 00fa 9091 0000 		lds r25,agent2+3
 5650 00fe 20E0      		ldi r18,lo8(0x3f000000)
 5651 0100 30E0      		ldi r19,hi8(0x3f000000)
 5652 0102 40E0      		ldi r20,hlo8(0x3f000000)
 5653 0104 5FE3      		ldi r21,hhi8(0x3f000000)
 5654 0106 0E94 0000 		call __addsf3
 5655 010a DC01      		movw r26,r24
 5656 010c CB01      		movw r24,r22
 5657 010e 8093 0000 		sts agent2,r24
 5658 0112 9093 0000 		sts agent2+1,r25
 5659 0116 A093 0000 		sts agent2+2,r26
 5660 011a B093 0000 		sts agent2+3,r27
 208:swarmfunctions.c **** 			agent2.tim2 += 0.1;
 5662               	.LM394:
 5663 011e C701      		movw r24,r14
 5664 0120 B601      		movw r22,r12
 5665 0122 2DEC      		ldi r18,lo8(0x3dcccccd)
 5666 0124 3CEC      		ldi r19,hi8(0x3dcccccd)
 5667 0126 4CEC      		ldi r20,hlo8(0x3dcccccd)
 5668 0128 5DE3      		ldi r21,hhi8(0x3dcccccd)
 5669 012a 0E94 0000 		call __addsf3
 5670 012e 9B01      		movw r18,r22
 5671 0130 F82F      		mov r31,r24
 5672 0132 E92F      		mov r30,r25
 5673 0134 462F      		mov r20,r22
 5674 0136 532F      		mov r21,r19
 5675 0138 682F      		mov r22,r24
 5676 013a 792F      		mov r23,r25
 5677 013c 4093 0000 		sts agent2+4,r20
 5678 0140 5093 0000 		sts agent2+4+1,r21
 5679 0144 6093 0000 		sts agent2+4+2,r22
 5680 0148 7093 0000 		sts agent2+4+3,r23
 211:swarmfunctions.c **** 			if(agent2.tim2 > period / 4.0)
 5682               	.LM395:
 5683 014c 822F      		mov r24,r18
 5684 014e 932F      		mov r25,r19
 5685 0150 AF2F      		mov r26,r31
 5686 0152 BE2F      		mov r27,r30
 5687 0154 BC01      		movw r22,r24
 5688 0156 CD01      		movw r24,r26
 5689 0158 20E0      		ldi r18,lo8(0x3fe00000)
 5690 015a 30E0      		ldi r19,hi8(0x3fe00000)
 5691 015c 40EE      		ldi r20,hlo8(0x3fe00000)
 5692 015e 5FE3      		ldi r21,hhi8(0x3fe00000)
 5693 0160 0E94 0000 		call __gtsf2
 5694 0164 1816      		cp __zero_reg__,r24
 5695 0166 04F4      		brge .L145
 213:swarmfunctions.c **** 				if(!wave_ping)
 5697               	.LM396:
 5698 0168 8091 0000 		lds r24,wave_ping
 5699 016c 8823      		tst r24
 5700 016e 01F4      		brne .L145
 215:swarmfunctions.c **** 					wave_ping = true; //send message only once
 5702               	.LM397:
 5703 0170 81E0      		ldi r24,lo8(1)
 5704 0172 8093 0000 		sts wave_ping,r24
 218:swarmfunctions.c **** 					if(column_flg) wave_dir = 0b00010100;
 5706               	.LM398:
 5707 0176 8091 0000 		lds r24,column_flg
 5708 017a 8823      		tst r24
 5709 017c 01F4      		brne .L150
 221:swarmfunctions.c **** 						if(wave_port==2)	wave_dir = 0b00010000;
 5711               	.LM399:
 5712 017e 8091 0000 		lds r24,wave_port
 5713 0182 8230      		cpi r24,lo8(2)
 5714 0184 01F4      		brne .L151
 5715 0186 60E1      		ldi r22,lo8(16)
 5716 0188 00C0      		rjmp .L148
 5717               	.L150:
 218:swarmfunctions.c **** 					if(column_flg) wave_dir = 0b00010100;
 5719               	.LM400:
 5720 018a 64E1      		ldi r22,lo8(20)
 5721 018c 00C0      		rjmp .L148
 5722               	.L151:
 222:swarmfunctions.c **** 						else				wave_dir = 0b00000100;
 5724               	.LM401:
 5725 018e 64E0      		ldi r22,lo8(4)
 5726               	.L148:
 224:swarmfunctions.c **** 					send_message(MESSAGE_COMMAND, wave_dir, 1, "a");	
 5728               	.LM402:
 5729 0190 81E0      		ldi r24,lo8(1)
 5730 0192 41E0      		ldi r20,lo8(1)
 5731 0194 50E0      		ldi r21,hi8(1)
 5732 0196 20E0      		ldi r18,lo8(.LC2)
 5733 0198 30E0      		ldi r19,hi8(.LC2)
 5734 019a 0E94 0000 		call _Z12send_messagehhiPKc
 5735               	.L145:
 228:swarmfunctions.c **** 		if(agent2.tim2 >= period)
 5737               	.LM403:
 5738 019e 6091 0000 		lds r22,agent2+4
 5739 01a2 7091 0000 		lds r23,agent2+4+1
 5740 01a6 8091 0000 		lds r24,agent2+4+2
 5741 01aa 9091 0000 		lds r25,agent2+4+3
 5742 01ae 20E0      		ldi r18,lo8(0x40e00000)
 5743 01b0 30E0      		ldi r19,hi8(0x40e00000)
 5744 01b2 40EE      		ldi r20,hlo8(0x40e00000)
 5745 01b4 50E4      		ldi r21,hhi8(0x40e00000)
 5746 01b6 0E94 0000 		call __gesf2
 5747 01ba 87FD      		sbrc r24,7
 5748 01bc 00C0      		rjmp .L143
 230:swarmfunctions.c **** 			agent2.flg = false;
 5750               	.LM404:
 5751 01be 1092 0000 		sts agent2+8,__zero_reg__
 231:swarmfunctions.c **** 			wave_flg = false;
 5753               	.LM405:
 5754 01c2 1092 0000 		sts wave_flg,__zero_reg__
 232:swarmfunctions.c **** 			column_flg = false;
 5756               	.LM406:
 5757 01c6 1092 0000 		sts column_flg,__zero_reg__
 5758               	.L143:
 236:swarmfunctions.c **** 	ampl = agent2.tim2 * exp(-decay * agent2.tim2) * 2.7;
 5760               	.LM407:
 5761 01ca C090 0000 		lds r12,agent2+4
 5762 01ce D090 0000 		lds r13,agent2+4+1
 5763 01d2 E090 0000 		lds r14,agent2+4+2
 5764 01d6 F090 0000 		lds r15,agent2+4+3
 5765 01da C701      		movw r24,r14
 5766 01dc B601      		movw r22,r12
 5767 01de 9058      		subi r25,0x80
 5768 01e0 0E94 0000 		call exp
 5769 01e4 4B01      		movw r8,r22
 5770 01e6 5C01      		movw r10,r24
 237:swarmfunctions.c **** 	angle = ampl * sin(agent2.tim1);
 5772               	.LM408:
 5773 01e8 6091 0000 		lds r22,agent2
 5774 01ec 7091 0000 		lds r23,agent2+1
 5775 01f0 8091 0000 		lds r24,agent2+2
 5776 01f4 9091 0000 		lds r25,agent2+3
 5777 01f8 0E94 0000 		call sin
 5778 01fc 2B01      		movw r4,r22
 5779 01fe 3C01      		movw r6,r24
 236:swarmfunctions.c **** 	ampl = agent2.tim2 * exp(-decay * agent2.tim2) * 2.7;
 5781               	.LM409:
 5782 0200 C701      		movw r24,r14
 5783 0202 B601      		movw r22,r12
 5784 0204 A501      		movw r20,r10
 5785 0206 9401      		movw r18,r8
 5786 0208 0E94 0000 		call __mulsf3
 5787 020c 2DEC      		ldi r18,lo8(0x402ccccd)
 5788 020e 3CEC      		ldi r19,hi8(0x402ccccd)
 5789 0210 4CE2      		ldi r20,hlo8(0x402ccccd)
 5790 0212 50E4      		ldi r21,hhi8(0x402ccccd)
 5791 0214 0E94 0000 		call __mulsf3
 237:swarmfunctions.c **** 	angle = ampl * sin(agent2.tim1);
 5793               	.LM410:
 5794 0218 A301      		movw r20,r6
 5795 021a 9201      		movw r18,r4
 5796 021c 0E94 0000 		call __mulsf3
 5797               	.LBE60:
 240:swarmfunctions.c **** }
 5799               	.LM411:
 5800 0220 462F      		mov r20,r22
 5801 0222 572F      		mov r21,r23
 5802 0224 682F      		mov r22,r24
 5803 0226 792F      		mov r23,r25
 5804 0228 CB01      		movw r24,r22
 5805 022a BA01      		movw r22,r20
 5806               	/* epilogue start */
 5807 022c FF90      		pop r15
 5808 022e EF90      		pop r14
 5809 0230 DF90      		pop r13
 5810 0232 CF90      		pop r12
 5811 0234 BF90      		pop r11
 5812 0236 AF90      		pop r10
 5813 0238 9F90      		pop r9
 5814 023a 8F90      		pop r8
 5815 023c 7F90      		pop r7
 5816 023e 6F90      		pop r6
 5817 0240 5F90      		pop r5
 5818 0242 4F90      		pop r4
 5819 0244 0895      		ret
 5824               	.Lscope24:
 5825               		.section	.text._Z6rhythmf,"ax",@progbits
 5828               	.global	_Z6rhythmf
 5830               	_Z6rhythmf:
  62:swarmfunctions.c **** {
 5832               	.LM412:
 5833               	.LFBB25:
 5834 0000 8F92      		push r8
 5835 0002 9F92      		push r9
 5836 0004 AF92      		push r10
 5837 0006 BF92      		push r11
 5838 0008 CF92      		push r12
 5839 000a DF92      		push r13
 5840 000c EF92      		push r14
 5841 000e FF92      		push r15
 5842 0010 0F93      		push r16
 5843 0012 1F93      		push r17
 5844 0014 CF93      		push r28
 5845 0016 DF93      		push r29
 5846               	/* prologue: function */
 5847               	/* frame size = 0 */
 5848               	/* stack size = 12 */
 5849               	.L__stack_usage = 12
 5850 0018 4B01      		movw r8,r22
 5851 001a 5C01      		movw r10,r24
 5852               	.LBB63:
  65:swarmfunctions.c **** 	if(special)
 5854               	.LM413:
 5855 001c 8091 0000 		lds r24,special
 5856 0020 8823      		tst r24
 5857 0022 01F4      		brne .+2
 5858 0024 00C0      		rjmp .L157
  67:swarmfunctions.c **** 		self = agent0.py;
 5860               	.LM414:
 5861 0026 C090 0000 		lds r12,agent0+4
 5862 002a D090 0000 		lds r13,agent0+4+1
 5863 002e E090 0000 		lds r14,agent0+4+2
 5864 0032 F090 0000 		lds r15,agent0+4+3
  68:swarmfunctions.c **** 		agent0.px = agent0.py - shift;
 5866               	.LM415:
 5867 0036 C701      		movw r24,r14
 5868 0038 B601      		movw r22,r12
 5869 003a 20E0      		ldi r18,lo8(0x3f800000)
 5870 003c 30E0      		ldi r19,hi8(0x3f800000)
 5871 003e 40E8      		ldi r20,hlo8(0x3f800000)
 5872 0040 5FE3      		ldi r21,hhi8(0x3f800000)
 5873 0042 0E94 0000 		call __subsf3
 5874 0046 DC01      		movw r26,r24
 5875 0048 CB01      		movw r24,r22
 5876 004a 8093 0000 		sts agent0,r24
 5877 004e 9093 0000 		sts agent0+1,r25
 5878 0052 A093 0000 		sts agent0+2,r26
 5879 0056 B093 0000 		sts agent0+3,r27
  69:swarmfunctions.c **** 		send_message(MESSAGE_NUMDATA, 0b00011100, NULL, "");
 5881               	.LM416:
 5882 005a 80E0      		ldi r24,lo8(0)
 5883 005c 6CE1      		ldi r22,lo8(28)
 5884 005e 40E0      		ldi r20,lo8(0)
 5885 0060 50E0      		ldi r21,hi8(0)
 5886 0062 20E0      		ldi r18,lo8(.LC0)
 5887 0064 30E0      		ldi r19,hi8(.LC0)
 5888 0066 0E94 0000 		call _Z12send_messagehhiPKc
  71:swarmfunctions.c **** 		agent0.py += stp;
 5890               	.LM417:
 5891 006a C501      		movw r24,r10
 5892 006c B401      		movw r22,r8
 5893 006e 2091 0000 		lds r18,agent0+4
 5894 0072 3091 0000 		lds r19,agent0+4+1
 5895 0076 4091 0000 		lds r20,agent0+4+2
 5896 007a 5091 0000 		lds r21,agent0+4+3
 5897 007e 0E94 0000 		call __addsf3
 5898 0082 D62F      		mov r29,r22
 5899 0084 C72F      		mov r28,r23
 5900 0086 182F      		mov r17,r24
 5901 0088 092F      		mov r16,r25
 5902 008a AE01      		movw r20,r28
 5903 008c 9801      		movw r18,r16
 5904 008e 852F      		mov r24,r21
 5905 0090 942F      		mov r25,r20
 5906 0092 A32F      		mov r26,r19
 5907 0094 B22F      		mov r27,r18
 5908 0096 8093 0000 		sts agent0+4,r24
 5909 009a 9093 0000 		sts agent0+4+1,r25
 5910 009e A093 0000 		sts agent0+4+2,r26
 5911 00a2 B093 0000 		sts agent0+4+3,r27
  72:swarmfunctions.c **** 		if(agent0.py > 2.0 * PI) agent0.py -= 2.0 * PI;
 5913               	.LM418:
 5914 00a6 BC01      		movw r22,r24
 5915 00a8 CD01      		movw r24,r26
 5916 00aa 20ED      		ldi r18,lo8(0x40c90fd0)
 5917 00ac 3FE0      		ldi r19,hi8(0x40c90fd0)
 5918 00ae 49EC      		ldi r20,hlo8(0x40c90fd0)
 5919 00b0 50E4      		ldi r21,hhi8(0x40c90fd0)
 5920 00b2 0E94 0000 		call __gtsf2
 5921 00b6 1816      		cp __zero_reg__,r24
 5922 00b8 04F0      		brlt .+2
 5923 00ba 00C0      		rjmp .L158
  72:swarmfunctions.c **** 		if(agent0.py > 2.0 * PI) agent0.py -= 2.0 * PI;
 5925               	.LM419:
 5926 00bc AE01      		movw r20,r28
 5927 00be 9801      		movw r18,r16
 5928 00c0 852F      		mov r24,r21
 5929 00c2 942F      		mov r25,r20
 5930 00c4 A32F      		mov r26,r19
 5931 00c6 B22F      		mov r27,r18
 5932 00c8 BC01      		movw r22,r24
 5933 00ca CD01      		movw r24,r26
 5934 00cc 20ED      		ldi r18,lo8(0x40c90fd0)
 5935 00ce 3FE0      		ldi r19,hi8(0x40c90fd0)
 5936 00d0 49EC      		ldi r20,hlo8(0x40c90fd0)
 5937 00d2 50E4      		ldi r21,hhi8(0x40c90fd0)
 5938 00d4 0E94 0000 		call __subsf3
 5939 00d8 DC01      		movw r26,r24
 5940 00da CB01      		movw r24,r22
 5941 00dc 8093 0000 		sts agent0+4,r24
 5942 00e0 9093 0000 		sts agent0+4+1,r25
 5943 00e4 A093 0000 		sts agent0+4+2,r26
 5944 00e8 B093 0000 		sts agent0+4+3,r27
 5945 00ec 00C0      		rjmp .L158
 5946               	.L157:
  76:swarmfunctions.c **** 		if(agent0.neix[0]!=0)
 5948               	.LM420:
 5949 00ee 6091 0000 		lds r22,agent0+20
 5950 00f2 7091 0000 		lds r23,agent0+20+1
 5951 00f6 8091 0000 		lds r24,agent0+20+2
 5952 00fa 9091 0000 		lds r25,agent0+20+3
 5953 00fe 20E0      		ldi r18,lo8(0x0)
 5954 0100 30E0      		ldi r19,hi8(0x0)
 5955 0102 A901      		movw r20,r18
 5956 0104 0E94 0000 		call __nesf2
 5957 0108 8823      		tst r24
 5958 010a 01F0      		breq .L170
  78:swarmfunctions.c **** 			self = agent0.neiy[0];
 5960               	.LM421:
 5961 010c C090 0000 		lds r12,agent0+44
 5962 0110 D090 0000 		lds r13,agent0+44+1
 5963 0114 E090 0000 		lds r14,agent0+44+2
 5964 0118 F090 0000 		lds r15,agent0+44+3
  80:swarmfunctions.c **** 			agent0.py = self;
 5966               	.LM422:
 5967 011c C092 0000 		sts agent0+4,r12
 5968 0120 D092 0000 		sts agent0+4+1,r13
 5969 0124 E092 0000 		sts agent0+4+2,r14
 5970 0128 F092 0000 		sts agent0+4+3,r15
  81:swarmfunctions.c **** 			agent0.px = self - shift;
 5972               	.LM423:
 5973 012c C701      		movw r24,r14
 5974 012e B601      		movw r22,r12
 5975 0130 20E0      		ldi r18,lo8(0x3f800000)
 5976 0132 30E0      		ldi r19,hi8(0x3f800000)
 5977 0134 40E8      		ldi r20,hlo8(0x3f800000)
 5978 0136 5FE3      		ldi r21,hhi8(0x3f800000)
 5979 0138 0E94 0000 		call __subsf3
 5980 013c DC01      		movw r26,r24
 5981 013e CB01      		movw r24,r22
 5982 0140 8093 0000 		sts agent0,r24
 5983 0144 9093 0000 		sts agent0+1,r25
 5984 0148 A093 0000 		sts agent0+2,r26
 5985 014c B093 0000 		sts agent0+3,r27
  82:swarmfunctions.c **** 			send_message(MESSAGE_NUMDATA, 0b00011100, NULL, "");	
 5987               	.LM424:
 5988 0150 80E0      		ldi r24,lo8(0)
 5989 0152 6CE1      		ldi r22,lo8(28)
 5990 0154 00C0      		rjmp .L173
 5991               	.L170:
  84:swarmfunctions.c **** 		else if(agent0.neix[2]!=0)
 5993               	.LM425:
 5994 0156 C090 0000 		lds r12,agent0+28
 5995 015a D090 0000 		lds r13,agent0+28+1
 5996 015e E090 0000 		lds r14,agent0+28+2
 5997 0162 F090 0000 		lds r15,agent0+28+3
 5998 0166 C701      		movw r24,r14
 5999 0168 B601      		movw r22,r12
 6000 016a 20E0      		ldi r18,lo8(0x0)
 6001 016c 30E0      		ldi r19,hi8(0x0)
 6002 016e A901      		movw r20,r18
 6003 0170 0E94 0000 		call __nesf2
 6004 0174 8823      		tst r24
 6005 0176 01F0      		breq .L171
  87:swarmfunctions.c **** 			agent0.px = self - shift;
 6007               	.LM426:
 6008 0178 C701      		movw r24,r14
 6009 017a B601      		movw r22,r12
 6010 017c 20E0      		ldi r18,lo8(0x3f800000)
 6011 017e 30E0      		ldi r19,hi8(0x3f800000)
 6012 0180 40E8      		ldi r20,hlo8(0x3f800000)
 6013 0182 5FE3      		ldi r21,hhi8(0x3f800000)
 6014 0184 0E94 0000 		call __subsf3
 6015 0188 DC01      		movw r26,r24
 6016 018a CB01      		movw r24,r22
 6017 018c 8093 0000 		sts agent0,r24
 6018 0190 9093 0000 		sts agent0+1,r25
 6019 0194 A093 0000 		sts agent0+2,r26
 6020 0198 B093 0000 		sts agent0+3,r27
  88:swarmfunctions.c **** 			send_message(MESSAGE_NUMDATA, 0b00010000, NULL, "");
 6022               	.LM427:
 6023 019c 80E0      		ldi r24,lo8(0)
 6024 019e 60E1      		ldi r22,lo8(16)
 6025               	.L173:
 6026 01a0 40E0      		ldi r20,lo8(0)
 6027 01a2 50E0      		ldi r21,hi8(0)
 6028 01a4 20E0      		ldi r18,lo8(.LC0)
 6029 01a6 30E0      		ldi r19,hi8(.LC0)
 6030 01a8 0E94 0000 		call _Z12send_messagehhiPKc
 6031 01ac 00C0      		rjmp .L158
 6032               	.L171:
  90:swarmfunctions.c **** 		else if(agent0.neix[4]!=0)
 6034               	.LM428:
 6035 01ae C090 0000 		lds r12,agent0+36
 6036 01b2 D090 0000 		lds r13,agent0+36+1
 6037 01b6 E090 0000 		lds r14,agent0+36+2
 6038 01ba F090 0000 		lds r15,agent0+36+3
 6039 01be C701      		movw r24,r14
 6040 01c0 B601      		movw r22,r12
 6041 01c2 20E0      		ldi r18,lo8(0x0)
 6042 01c4 30E0      		ldi r19,hi8(0x0)
 6043 01c6 A901      		movw r20,r18
 6044 01c8 0E94 0000 		call __nesf2
 6045 01cc 8823      		tst r24
 6046 01ce 01F0      		breq .L172
  93:swarmfunctions.c **** 			agent0.px = self - shift;
 6048               	.LM429:
 6049 01d0 C701      		movw r24,r14
 6050 01d2 B601      		movw r22,r12
 6051 01d4 20E0      		ldi r18,lo8(0x3f800000)
 6052 01d6 30E0      		ldi r19,hi8(0x3f800000)
 6053 01d8 40E8      		ldi r20,hlo8(0x3f800000)
 6054 01da 5FE3      		ldi r21,hhi8(0x3f800000)
 6055 01dc 0E94 0000 		call __subsf3
 6056 01e0 DC01      		movw r26,r24
 6057 01e2 CB01      		movw r24,r22
 6058 01e4 8093 0000 		sts agent0,r24
 6059 01e8 9093 0000 		sts agent0+1,r25
 6060 01ec A093 0000 		sts agent0+2,r26
 6061 01f0 B093 0000 		sts agent0+3,r27
  94:swarmfunctions.c **** 			send_message(MESSAGE_NUMDATA, 0b00000100, NULL, "");
 6063               	.LM430:
 6064 01f4 80E0      		ldi r24,lo8(0)
 6065 01f6 64E0      		ldi r22,lo8(4)
 6066 01f8 00C0      		rjmp .L173
 6067               	.L172:
  63:swarmfunctions.c **** 	float self = 0, shift = 1.0;
 6069               	.LM431:
 6070 01fa 0F2E      		mov __tmp_reg__,r31
 6071 01fc F0E0      		ldi r31,lo8(0x0)
 6072 01fe CF2E      		mov r12,r31
 6073 0200 F0E0      		ldi r31,hi8(0x0)
 6074 0202 DF2E      		mov r13,r31
 6075 0204 F0E0      		ldi r31,hlo8(0x0)
 6076 0206 EF2E      		mov r14,r31
 6077 0208 F0E0      		ldi r31,hhi8(0x0)
 6078 020a FF2E      		mov r15,r31
 6079 020c F02D      		mov r31,__tmp_reg__
 6080               	.L158:
  98:swarmfunctions.c **** 	return sin(self);
 6082               	.LM432:
 6083 020e C701      		movw r24,r14
 6084 0210 B601      		movw r22,r12
 6085 0212 0E94 0000 		call sin
 6086               	.LBE63:
  99:swarmfunctions.c **** }
 6088               	.LM433:
 6089 0216 462F      		mov r20,r22
 6090 0218 572F      		mov r21,r23
 6091 021a 682F      		mov r22,r24
 6092 021c 792F      		mov r23,r25
 6093 021e CB01      		movw r24,r22
 6094 0220 BA01      		movw r22,r20
 6095               	/* epilogue start */
 6096 0222 DF91      		pop r29
 6097 0224 CF91      		pop r28
 6098 0226 1F91      		pop r17
 6099 0228 0F91      		pop r16
 6100 022a FF90      		pop r15
 6101 022c EF90      		pop r14
 6102 022e DF90      		pop r13
 6103 0230 CF90      		pop r12
 6104 0232 BF90      		pop r11
 6105 0234 AF90      		pop r10
 6106 0236 9F90      		pop r9
 6107 0238 8F90      		pop r8
 6108 023a 0895      		ret
 6113               	.Lscope25:
 6114               		.section	.text._Z15rhythm_control3v,"ax",@progbits
 6116               	.global	_Z15rhythm_control3v
 6118               	_Z15rhythm_control3v:
 140:swarmfunctions.c **** {
 6120               	.LM434:
 6121               	.LFBB26:
 6122               	/* prologue: function */
 6123               	/* frame size = 0 */
 6124               	/* stack size = 0 */
 6125               	.L__stack_usage = 0
 6126               	.LBB64:
 147:swarmfunctions.c **** 	if(rhythm_on)
 6128               	.LM435:
 6129 0000 8091 0000 		lds r24,rhythm_on
 6130 0004 8823      		tst r24
 6131 0006 01F0      		breq .L175
 149:swarmfunctions.c **** 		timestep++;
 6133               	.LM436:
 6134 0008 8091 0000 		lds r24,_ZZ15rhythm_control3vE8timestep
 6135 000c 9091 0000 		lds r25,_ZZ15rhythm_control3vE8timestep+1
 6136 0010 0196      		adiw r24,1
 6137 0012 8093 0000 		sts _ZZ15rhythm_control3vE8timestep,r24
 6138 0016 9093 0000 		sts _ZZ15rhythm_control3vE8timestep+1,r25
 150:swarmfunctions.c **** 		rhythm_on = false;
 6140               	.LM437:
 6141 001a 1092 0000 		sts rhythm_on,__zero_reg__
 6142               	.L175:
 153:swarmfunctions.c **** 	return rhythm(stp);
 6144               	.LM438:
 6145 001e 6DEC      		ldi r22,lo8(0x3e4ccccd)
 6146 0020 7CEC      		ldi r23,hi8(0x3e4ccccd)
 6147 0022 8CE4      		ldi r24,hlo8(0x3e4ccccd)
 6148 0024 9EE3      		ldi r25,hhi8(0x3e4ccccd)
 6149 0026 0E94 0000 		call _Z6rhythmf
 6150               	.LBE64:
 154:swarmfunctions.c **** }
 6152               	.LM439:
 6153 002a 462F      		mov r20,r22
 6154 002c 572F      		mov r21,r23
 6155 002e 682F      		mov r22,r24
 6156 0030 792F      		mov r23,r25
 6157 0032 CB01      		movw r24,r22
 6158 0034 BA01      		movw r22,r20
 6159               	/* epilogue start */
 6160 0036 0895      		ret
 6165               	.Lscope26:
 6166               		.section	.text._Z15rhythm_control2v,"ax",@progbits
 6168               	.global	_Z15rhythm_control2v
 6170               	_Z15rhythm_control2v:
 122:swarmfunctions.c **** {
 6172               	.LM440:
 6173               	.LFBB27:
 6174 0000 CF93      		push r28
 6175 0002 DF93      		push r29
 6176               	/* prologue: function */
 6177               	/* frame size = 0 */
 6178               	/* stack size = 2 */
 6179               	.L__stack_usage = 2
 6180               	.LBB65:
 126:swarmfunctions.c **** 	tim = (float)timestep * dtim;
 6182               	.LM441:
 6183 0004 C091 0000 		lds r28,_ZZ15rhythm_control2vE8timestep
 6184 0008 D091 0000 		lds r29,_ZZ15rhythm_control2vE8timestep+1
 6185 000c BE01      		movw r22,r28
 6186 000e 8827      		clr r24
 6187 0010 77FD      		sbrc r23,7
 6188 0012 8095      		com r24
 6189 0014 982F      		mov r25,r24
 6190 0016 0E94 0000 		call __floatsisf
 6191 001a 24E4      		ldi r18,lo8(0x3e567744)
 6192 001c 37E7      		ldi r19,hi8(0x3e567744)
 6193 001e 46E5      		ldi r20,hlo8(0x3e567744)
 6194 0020 5EE3      		ldi r21,hhi8(0x3e567744)
 6195 0022 0E94 0000 		call __mulsf3
 127:swarmfunctions.c **** 	stp = 0.6 + 0.4 * cos(tim);
 6197               	.LM442:
 6198 0026 0E94 0000 		call cos
 6199 002a 2DEC      		ldi r18,lo8(0x3ecccccd)
 6200 002c 3CEC      		ldi r19,hi8(0x3ecccccd)
 6201 002e 4CEC      		ldi r20,hlo8(0x3ecccccd)
 6202 0030 5EE3      		ldi r21,hhi8(0x3ecccccd)
 6203 0032 0E94 0000 		call __mulsf3
 6204 0036 2AE9      		ldi r18,lo8(0x3f19999a)
 6205 0038 39E9      		ldi r19,hi8(0x3f19999a)
 6206 003a 49E1      		ldi r20,hlo8(0x3f19999a)
 6207 003c 5FE3      		ldi r21,hhi8(0x3f19999a)
 6208 003e 0E94 0000 		call __addsf3
 129:swarmfunctions.c **** 	if(rhythm_on)
 6210               	.LM443:
 6211 0042 2091 0000 		lds r18,rhythm_on
 6212 0046 2223      		tst r18
 6213 0048 01F0      		breq .L177
 131:swarmfunctions.c **** 		timestep++;
 6215               	.LM444:
 6216 004a 2196      		adiw r28,1
 6217 004c C093 0000 		sts _ZZ15rhythm_control2vE8timestep,r28
 6218 0050 D093 0000 		sts _ZZ15rhythm_control2vE8timestep+1,r29
 132:swarmfunctions.c **** 		rhythm_on = false;
 6220               	.LM445:
 6221 0054 1092 0000 		sts rhythm_on,__zero_reg__
 6222               	.L177:
 135:swarmfunctions.c **** 	return rhythm(stp);
 6224               	.LM446:
 6225 0058 382F      		mov r19,r24
 6226 005a 292F      		mov r18,r25
 6227 005c 862F      		mov r24,r22
 6228 005e 972F      		mov r25,r23
 6229 0060 A32F      		mov r26,r19
 6230 0062 B22F      		mov r27,r18
 6231 0064 BC01      		movw r22,r24
 6232 0066 CD01      		movw r24,r26
 6233 0068 0E94 0000 		call _Z6rhythmf
 6234               	.LBE65:
 136:swarmfunctions.c **** }
 6236               	.LM447:
 6237 006c 462F      		mov r20,r22
 6238 006e 572F      		mov r21,r23
 6239 0070 682F      		mov r22,r24
 6240 0072 792F      		mov r23,r25
 6241 0074 CB01      		movw r24,r22
 6242 0076 BA01      		movw r22,r20
 6243               	/* epilogue start */
 6244 0078 DF91      		pop r29
 6245 007a CF91      		pop r28
 6246 007c 0895      		ret
 6251               	.Lscope27:
 6252               		.section	.text._Z15rhythm_control1v,"ax",@progbits
 6254               	.global	_Z15rhythm_control1v
 6256               	_Z15rhythm_control1v:
 103:swarmfunctions.c **** {
 6258               	.LM448:
 6259               	.LFBB28:
 6260 0000 CF92      		push r12
 6261 0002 DF92      		push r13
 6262 0004 EF92      		push r14
 6263 0006 FF92      		push r15
 6264               	/* prologue: function */
 6265               	/* frame size = 0 */
 6266               	/* stack size = 4 */
 6267               	.L__stack_usage = 4
 6268               	.LBB66:
 107:swarmfunctions.c **** 	tim = (float)timestep * dtim;
 6270               	.LM449:
 6271 0008 C090 0000 		lds r12,_ZZ15rhythm_control1vE8timestep
 6272 000c D090 0000 		lds r13,_ZZ15rhythm_control1vE8timestep+1
 6273 0010 B601      		movw r22,r12
 6274 0012 8827      		clr r24
 6275 0014 77FD      		sbrc r23,7
 6276 0016 8095      		com r24
 6277 0018 982F      		mov r25,r24
 6278 001a 0E94 0000 		call __floatsisf
 6279 001e 24E4      		ldi r18,lo8(0x3e567744)
 6280 0020 37E7      		ldi r19,hi8(0x3e567744)
 6281 0022 46E5      		ldi r20,hlo8(0x3e567744)
 6282 0024 5EE3      		ldi r21,hhi8(0x3e567744)
 6283 0026 0E94 0000 		call __mulsf3
 108:swarmfunctions.c **** 	global_amp = sin(tim) * sin(tim);
 6285               	.LM450:
 6286 002a 0E94 0000 		call sin
 6287 002e 9B01      		movw r18,r22
 6288 0030 AC01      		movw r20,r24
 6289 0032 0E94 0000 		call __mulsf3
 6290 0036 9B01      		movw r18,r22
 6291 0038 F82F      		mov r31,r24
 6292 003a E92F      		mov r30,r25
 6293 003c 462F      		mov r20,r22
 6294 003e 532F      		mov r21,r19
 6295 0040 682F      		mov r22,r24
 6296 0042 792F      		mov r23,r25
 6297 0044 4093 0000 		sts global_amp,r20
 6298 0048 5093 0000 		sts global_amp+1,r21
 6299 004c 6093 0000 		sts global_amp+2,r22
 6300 0050 7093 0000 		sts global_amp+3,r23
 109:swarmfunctions.c **** 	if(global_amp < 0.1) global_amp = 0.1; // to avoid complete stop
 6302               	.LM451:
 6303 0054 822F      		mov r24,r18
 6304 0056 932F      		mov r25,r19
 6305 0058 AF2F      		mov r26,r31
 6306 005a BE2F      		mov r27,r30
 6307 005c BC01      		movw r22,r24
 6308 005e CD01      		movw r24,r26
 6309 0060 2DEC      		ldi r18,lo8(0x3dcccccd)
 6310 0062 3CEC      		ldi r19,hi8(0x3dcccccd)
 6311 0064 4CEC      		ldi r20,hlo8(0x3dcccccd)
 6312 0066 5DE3      		ldi r21,hhi8(0x3dcccccd)
 6313 0068 0E94 0000 		call __ltsf2
 6314 006c 87FF      		sbrs r24,7
 6315 006e 00C0      		rjmp .L179
 109:swarmfunctions.c **** 	if(global_amp < 0.1) global_amp = 0.1; // to avoid complete stop
 6317               	.LM452:
 6318 0070 8DEC      		ldi r24,lo8(0x3dcccccd)
 6319 0072 9CEC      		ldi r25,hi8(0x3dcccccd)
 6320 0074 ACEC      		ldi r26,hlo8(0x3dcccccd)
 6321 0076 BDE3      		ldi r27,hhi8(0x3dcccccd)
 6322 0078 8093 0000 		sts global_amp,r24
 6323 007c 9093 0000 		sts global_amp+1,r25
 6324 0080 A093 0000 		sts global_amp+2,r26
 6325 0084 B093 0000 		sts global_amp+3,r27
 6326               	.L179:
 111:swarmfunctions.c **** 	if(rhythm_on)
 6328               	.LM453:
 6329 0088 8091 0000 		lds r24,rhythm_on
 6330 008c 8823      		tst r24
 6331 008e 01F0      		breq .L181
 113:swarmfunctions.c **** 		timestep++;
 6333               	.LM454:
 6334 0090 0894      		sec
 6335 0092 C11C      		adc r12,__zero_reg__
 6336 0094 D11C      		adc r13,__zero_reg__
 6337 0096 C092 0000 		sts _ZZ15rhythm_control1vE8timestep,r12
 6338 009a D092 0000 		sts _ZZ15rhythm_control1vE8timestep+1,r13
 114:swarmfunctions.c **** 		rhythm_on = false;
 6340               	.LM455:
 6341 009e 1092 0000 		sts rhythm_on,__zero_reg__
 6342               	.L181:
 117:swarmfunctions.c **** 	return global_amp * rhythm(0.6);
 6344               	.LM456:
 6345 00a2 C090 0000 		lds r12,global_amp
 6346 00a6 D090 0000 		lds r13,global_amp+1
 6347 00aa E090 0000 		lds r14,global_amp+2
 6348 00ae F090 0000 		lds r15,global_amp+3
 6349 00b2 6AE9      		ldi r22,lo8(0x3f19999a)
 6350 00b4 79E9      		ldi r23,hi8(0x3f19999a)
 6351 00b6 89E1      		ldi r24,hlo8(0x3f19999a)
 6352 00b8 9FE3      		ldi r25,hhi8(0x3f19999a)
 6353 00ba 0E94 0000 		call _Z6rhythmf
 6354 00be 9B01      		movw r18,r22
 6355 00c0 AC01      		movw r20,r24
 6356 00c2 C701      		movw r24,r14
 6357 00c4 B601      		movw r22,r12
 6358 00c6 0E94 0000 		call __mulsf3
 6359               	.LBE66:
 118:swarmfunctions.c **** }
 6361               	.LM457:
 6362 00ca 462F      		mov r20,r22
 6363 00cc 572F      		mov r21,r23
 6364 00ce 682F      		mov r22,r24
 6365 00d0 792F      		mov r23,r25
 6366 00d2 CB01      		movw r24,r22
 6367 00d4 BA01      		movw r22,r20
 6368               	/* epilogue start */
 6369 00d6 FF90      		pop r15
 6370 00d8 EF90      		pop r14
 6371 00da DF90      		pop r13
 6372 00dc CF90      		pop r12
 6373 00de 0895      		ret
 6378               	.Lscope28:
 6379               		.data
 6380               	.LC4:
 6381 0007 6900      		.string	"i"
 6382               		.section	.text._Z14init_variablesv,"ax",@progbits
 6384               	.global	_Z14init_variablesv
 6386               	_Z14init_variablesv:
  14:swarmfunctions.c **** {
 6388               	.LM458:
 6389               	.LFBB29:
 6390 0000 4F92      		push r4
 6391 0002 5F92      		push r5
 6392 0004 6F92      		push r6
 6393 0006 7F92      		push r7
 6394 0008 8F92      		push r8
 6395 000a 9F92      		push r9
 6396 000c AF92      		push r10
 6397 000e BF92      		push r11
 6398 0010 CF92      		push r12
 6399 0012 DF92      		push r13
 6400 0014 EF92      		push r14
 6401 0016 FF92      		push r15
 6402 0018 0F93      		push r16
 6403 001a 1F93      		push r17
 6404 001c CF93      		push r28
 6405 001e DF93      		push r29
 6406               	/* prologue: function */
 6407               	/* frame size = 0 */
 6408               	/* stack size = 16 */
 6409               	.L__stack_usage = 16
 6410               	.LBB67:
  17:swarmfunctions.c **** 	if(special) 
 6412               	.LM459:
 6413 0020 8091 0000 		lds r24,special
 6414 0024 8823      		tst r24
 6415 0026 01F0      		breq .L184
  18:swarmfunctions.c **** 		send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, "i");
 6417               	.LM460:
 6418 0028 81E0      		ldi r24,lo8(1)
 6419 002a 6FE3      		ldi r22,lo8(63)
 6420 002c 44E1      		ldi r20,lo8(20)
 6421 002e 50E0      		ldi r21,hi8(20)
 6422 0030 20E0      		ldi r18,lo8(.LC4)
 6423 0032 30E0      		ldi r19,hi8(.LC4)
 6424 0034 0E94 0000 		call _Z12send_messagehhiPKc
 6425               	.L184:
  18:swarmfunctions.c **** 		send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, "i");
 6427               	.LM461:
 6428 0038 E0E0      		ldi r30,lo8(agent0+20)
 6429 003a F0E0      		ldi r31,hi8(agent0+20)
 6430 003c 78E1      		ldi r23,lo8(24)
 6431 003e C72E      		mov r12,r23
 6432 0040 D12C      		mov r13,__zero_reg__
 6433 0042 CE0E      		add r12,r30
 6434 0044 DF1E      		adc r13,r31
 6435 0046 A0E0      		ldi r26,lo8(agent1+20)
 6436 0048 B0E0      		ldi r27,hi8(agent1+20)
 6437 004a CD01      		movw r24,r26
 6438 004c 4896      		adiw r24,24
 6439 004e 00E0      		ldi r16,lo8(connected)
 6440 0050 10E0      		ldi r17,hi8(connected)
 6441               	.LBE67:
  14:swarmfunctions.c **** {
 6443               	.LM462:
 6444 0052 26E0      		ldi r18,lo8(6)
 6445 0054 30E0      		ldi r19,hi8(6)
 6446               	.LBB68:
  22:swarmfunctions.c **** 		agent0.neix[i] = 0.0;	agent0.neiy[i] = 0.0;
 6448               	.LM463:
 6449 0056 40E0      		ldi r20,lo8(0x0)
 6450 0058 50E0      		ldi r21,hi8(0x0)
 6451 005a BA01      		movw r22,r20
 6452               	.L185:
  22:swarmfunctions.c **** 		agent0.neix[i] = 0.0;	agent0.neiy[i] = 0.0;
 6454               	.LM464:
 6455 005c 4193      		st Z+,r20
 6456 005e 5193      		st Z+,r21
 6457 0060 6193      		st Z+,r22
 6458 0062 7193      		st Z+,r23
 6459 0064 E601      		movw r28,r12
 6460 0066 4993      		st Y+,r20
 6461 0068 5993      		st Y+,r21
 6462 006a 6993      		st Y+,r22
 6463 006c 7993      		st Y+,r23
 6464 006e 6E01      		movw r12,r28
  23:swarmfunctions.c **** 		agent1.neix[i] = 0.0;	agent1.neiy[i] = 0.0;
 6466               	.LM465:
 6467 0070 4D93      		st X+,r20
 6468 0072 5D93      		st X+,r21
 6469 0074 6D93      		st X+,r22
 6470 0076 7D93      		st X+,r23
 6471 0078 EC01      		movw r28,r24
 6472 007a 4993      		st Y+,r20
 6473 007c 5993      		st Y+,r21
 6474 007e 6993      		st Y+,r22
 6475 0080 7993      		st Y+,r23
 6476 0082 CE01      		movw r24,r28
  24:swarmfunctions.c **** 		connected[i] = false;
 6478               	.LM466:
 6479 0084 E801      		movw r28,r16
 6480 0086 1992      		st Y+,__zero_reg__
 6481 0088 8E01      		movw r16,r28
 6482 008a 2150      		subi r18,lo8(-(-1))
 6483 008c 3040      		sbci r19,hi8(-(-1))
  20:swarmfunctions.c **** 	for(i=0;i<NUM_NEIGHBORS;i++)
 6485               	.LM467:
 6486 008e 01F4      		brne .L185
  28:swarmfunctions.c **** 	agent0.px = 22.0; agent0.py = 40.0; agent0.vx = 0.186; agent0.vy = -4.8; agent0.hd = 4.75;
 6488               	.LM468:
 6489 0090 40E0      		ldi r20,lo8(0x41b00000)
 6490 0092 50E0      		ldi r21,hi8(0x41b00000)
 6491 0094 60EB      		ldi r22,hlo8(0x41b00000)
 6492 0096 71E4      		ldi r23,hhi8(0x41b00000)
 6493 0098 4093 0000 		sts agent0,r20
 6494 009c 5093 0000 		sts agent0+1,r21
 6495 00a0 6093 0000 		sts agent0+2,r22
 6496 00a4 7093 0000 		sts agent0+3,r23
 6497 00a8 80E0      		ldi r24,lo8(0x42200000)
 6498 00aa 90E0      		ldi r25,hi8(0x42200000)
 6499 00ac A0E2      		ldi r26,hlo8(0x42200000)
 6500 00ae B2E4      		ldi r27,hhi8(0x42200000)
 6501 00b0 8093 0000 		sts agent0+4,r24
 6502 00b4 9093 0000 		sts agent0+4+1,r25
 6503 00b8 A093 0000 		sts agent0+4+2,r26
 6504 00bc B093 0000 		sts agent0+4+3,r27
 6505 00c0 0F2E      		mov __tmp_reg__,r31
 6506 00c2 F9EC      		ldi r31,lo8(0x3e3e76c9)
 6507 00c4 CF2E      		mov r12,r31
 6508 00c6 F6E7      		ldi r31,hi8(0x3e3e76c9)
 6509 00c8 DF2E      		mov r13,r31
 6510 00ca FEE3      		ldi r31,hlo8(0x3e3e76c9)
 6511 00cc EF2E      		mov r14,r31
 6512 00ce FEE3      		ldi r31,hhi8(0x3e3e76c9)
 6513 00d0 FF2E      		mov r15,r31
 6514 00d2 F02D      		mov r31,__tmp_reg__
 6515 00d4 C092 0000 		sts agent0+8,r12
 6516 00d8 D092 0000 		sts agent0+8+1,r13
 6517 00dc E092 0000 		sts agent0+8+2,r14
 6518 00e0 F092 0000 		sts agent0+8+3,r15
 6519 00e4 0F2E      		mov __tmp_reg__,r31
 6520 00e6 FAE9      		ldi r31,lo8(0xc099999a)
 6521 00e8 8F2E      		mov r8,r31
 6522 00ea F9E9      		ldi r31,hi8(0xc099999a)
 6523 00ec 9F2E      		mov r9,r31
 6524 00ee F9E9      		ldi r31,hlo8(0xc099999a)
 6525 00f0 AF2E      		mov r10,r31
 6526 00f2 F0EC      		ldi r31,hhi8(0xc099999a)
 6527 00f4 BF2E      		mov r11,r31
 6528 00f6 F02D      		mov r31,__tmp_reg__
 6529 00f8 8092 0000 		sts agent0+12,r8
 6530 00fc 9092 0000 		sts agent0+12+1,r9
 6531 0100 A092 0000 		sts agent0+12+2,r10
 6532 0104 B092 0000 		sts agent0+12+3,r11
 6533 0108 0F2E      		mov __tmp_reg__,r31
 6534 010a F0E0      		ldi r31,lo8(0x40980000)
 6535 010c 4F2E      		mov r4,r31
 6536 010e F0E0      		ldi r31,hi8(0x40980000)
 6537 0110 5F2E      		mov r5,r31
 6538 0112 F8E9      		ldi r31,hlo8(0x40980000)
 6539 0114 6F2E      		mov r6,r31
 6540 0116 F0E4      		ldi r31,hhi8(0x40980000)
 6541 0118 7F2E      		mov r7,r31
 6542 011a F02D      		mov r31,__tmp_reg__
 6543 011c 4092 0000 		sts agent0+16,r4
 6544 0120 5092 0000 		sts agent0+16+1,r5
 6545 0124 6092 0000 		sts agent0+16+2,r6
 6546 0128 7092 0000 		sts agent0+16+3,r7
  31:swarmfunctions.c **** 	if(sec_counter < STGtime4)
 6548               	.LM469:
 6549 012c 2091 0000 		lds r18,sec_counter
 6550 0130 3091 0000 		lds r19,sec_counter+1
 6551 0134 D1E0      		ldi r29,hi8(270)
 6552 0136 2E30      		cpi r18,lo8(270)
 6553 0138 3D07      		cpc r19,r29
 6554 013a 04F4      		brge .L186
  33:swarmfunctions.c **** 		agent1.px =  2.7; agent1.py = 75.6; agent1.vx = 3.8;   agent1.vy = 1.3;	 agent1.hd = 0.0;
 6556               	.LM470:
 6557 013c 8DEC      		ldi r24,lo8(0x402ccccd)
 6558 013e 9CEC      		ldi r25,hi8(0x402ccccd)
 6559 0140 ACE2      		ldi r26,hlo8(0x402ccccd)
 6560 0142 B0E4      		ldi r27,hhi8(0x402ccccd)
 6561 0144 8093 0000 		sts agent1,r24
 6562 0148 9093 0000 		sts agent1+1,r25
 6563 014c A093 0000 		sts agent1+2,r26
 6564 0150 B093 0000 		sts agent1+3,r27
 6565 0154 83E3      		ldi r24,lo8(0x42973333)
 6566 0156 93E3      		ldi r25,hi8(0x42973333)
 6567 0158 A7E9      		ldi r26,hlo8(0x42973333)
 6568 015a B2E4      		ldi r27,hhi8(0x42973333)
 6569 015c 8093 0000 		sts agent1+4,r24
 6570 0160 9093 0000 		sts agent1+4+1,r25
 6571 0164 A093 0000 		sts agent1+4+2,r26
 6572 0168 B093 0000 		sts agent1+4+3,r27
 6573 016c 83E3      		ldi r24,lo8(0x40733333)
 6574 016e 93E3      		ldi r25,hi8(0x40733333)
 6575 0170 A3E7      		ldi r26,hlo8(0x40733333)
 6576 0172 B0E4      		ldi r27,hhi8(0x40733333)
 6577 0174 8093 0000 		sts agent1+8,r24
 6578 0178 9093 0000 		sts agent1+8+1,r25
 6579 017c A093 0000 		sts agent1+8+2,r26
 6580 0180 B093 0000 		sts agent1+8+3,r27
 6581 0184 86E6      		ldi r24,lo8(0x3fa66666)
 6582 0186 96E6      		ldi r25,hi8(0x3fa66666)
 6583 0188 A6EA      		ldi r26,hlo8(0x3fa66666)
 6584 018a BFE3      		ldi r27,hhi8(0x3fa66666)
 6585 018c 8093 0000 		sts agent1+12,r24
 6586 0190 9093 0000 		sts agent1+12+1,r25
 6587 0194 A093 0000 		sts agent1+12+2,r26
 6588 0198 B093 0000 		sts agent1+12+3,r27
 6589 019c 80E0      		ldi r24,lo8(0x0)
 6590 019e 90E0      		ldi r25,hi8(0x0)
 6591 01a0 DC01      		movw r26,r24
 6592 01a2 8093 0000 		sts agent1+16,r24
 6593 01a6 9093 0000 		sts agent1+16+1,r25
 6594 01aa A093 0000 		sts agent1+16+2,r26
 6595 01ae B093 0000 		sts agent1+16+3,r27
 6596 01b2 00C0      		rjmp .L187
 6597               	.L186:
  37:swarmfunctions.c **** 		agent1.px = 22.0; agent1.py = 40.0; agent1.vx = 0.186; agent1.vy = -4.8; agent1.hd = 4.75;
 6599               	.LM471:
 6600 01b4 4093 0000 		sts agent1,r20
 6601 01b8 5093 0000 		sts agent1+1,r21
 6602 01bc 6093 0000 		sts agent1+2,r22
 6603 01c0 7093 0000 		sts agent1+3,r23
 6604 01c4 8093 0000 		sts agent1+4,r24
 6605 01c8 9093 0000 		sts agent1+4+1,r25
 6606 01cc A093 0000 		sts agent1+4+2,r26
 6607 01d0 B093 0000 		sts agent1+4+3,r27
 6608 01d4 C092 0000 		sts agent1+8,r12
 6609 01d8 D092 0000 		sts agent1+8+1,r13
 6610 01dc E092 0000 		sts agent1+8+2,r14
 6611 01e0 F092 0000 		sts agent1+8+3,r15
 6612 01e4 8092 0000 		sts agent1+12,r8
 6613 01e8 9092 0000 		sts agent1+12+1,r9
 6614 01ec A092 0000 		sts agent1+12+2,r10
 6615 01f0 B092 0000 		sts agent1+12+3,r11
 6616 01f4 4092 0000 		sts agent1+16,r4
 6617 01f8 5092 0000 		sts agent1+16+1,r5
 6618 01fc 6092 0000 		sts agent1+16+2,r6
 6619 0200 7092 0000 		sts agent1+16+3,r7
 6620               	.L187:
  40:swarmfunctions.c **** 	wave_flg = false; 
 6622               	.LM472:
 6623 0204 1092 0000 		sts wave_flg,__zero_reg__
  41:swarmfunctions.c **** 	wave_ping = false;
 6625               	.LM473:
 6626 0208 1092 0000 		sts wave_ping,__zero_reg__
  42:swarmfunctions.c **** 	column_flg = false;
 6628               	.LM474:
 6629 020c 1092 0000 		sts column_flg,__zero_reg__
  43:swarmfunctions.c **** 	rhythm_on = false;
 6631               	.LM475:
 6632 0210 1092 0000 		sts rhythm_on,__zero_reg__
  45:swarmfunctions.c **** 	agent2.flg = false;
 6634               	.LM476:
 6635 0214 1092 0000 		sts agent2+8,__zero_reg__
  47:swarmfunctions.c **** 	agent3.tim2 = 20.0;
 6637               	.LM477:
 6638 0218 80E0      		ldi r24,lo8(0x41a00000)
 6639 021a 90E0      		ldi r25,hi8(0x41a00000)
 6640 021c A0EA      		ldi r26,hlo8(0x41a00000)
 6641 021e B1E4      		ldi r27,hhi8(0x41a00000)
 6642 0220 8093 0000 		sts agent3+4,r24
 6643 0224 9093 0000 		sts agent3+4+1,r25
 6644 0228 A093 0000 		sts agent3+4+2,r26
 6645 022c B093 0000 		sts agent3+4+3,r27
  49:swarmfunctions.c **** 	global_amp = 0;
 6647               	.LM478:
 6648 0230 80E0      		ldi r24,lo8(0x0)
 6649 0232 90E0      		ldi r25,hi8(0x0)
 6650 0234 DC01      		movw r26,r24
 6651 0236 8093 0000 		sts global_amp,r24
 6652 023a 9093 0000 		sts global_amp+1,r25
 6653 023e A093 0000 		sts global_amp+2,r26
 6654 0242 B093 0000 		sts global_amp+3,r27
  51:swarmfunctions.c **** 	enable_servo();
 6656               	.LM479:
 6657 0246 0E94 0000 		call enable_servo
  53:swarmfunctions.c **** 	set_servo_position(0);
 6659               	.LM480:
 6660 024a 60E0      		ldi r22,lo8(0x0)
 6661 024c 70E0      		ldi r23,hi8(0x0)
 6662 024e CB01      		movw r24,r22
 6663 0250 0E94 0000 		call set_servo_position
 6664               	/* epilogue start */
 6665               	.LBE68:
  54:swarmfunctions.c **** }
 6667               	.LM481:
 6668 0254 DF91      		pop r29
 6669 0256 CF91      		pop r28
 6670 0258 1F91      		pop r17
 6671 025a 0F91      		pop r16
 6672 025c FF90      		pop r15
 6673 025e EF90      		pop r14
 6674 0260 DF90      		pop r13
 6675 0262 CF90      		pop r12
 6676 0264 BF90      		pop r11
 6677 0266 AF90      		pop r10
 6678 0268 9F90      		pop r9
 6679 026a 8F90      		pop r8
 6680 026c 7F90      		pop r7
 6681 026e 6F90      		pop r6
 6682 0270 5F90      		pop r5
 6683 0272 4F90      		pop r4
 6684 0274 0895      		ret
 6686               	.Lscope29:
 6687               		.section	.text._Z6rx_pktPN5Xgrid6PacketE,"ax",@progbits
 6690               	.global	_Z6rx_pktPN5Xgrid6PacketE
 6692               	_Z6rx_pktPN5Xgrid6PacketE:
 6694               	.Ltext8:
  32:communication.c **** 
  33:communication.c **** // ============================================================================================
  34:communication.c **** // receive packet
  35:communication.c **** // ============================================================================================
  36:communication.c **** void rx_pkt(Xgrid::Packet *pkt)
  37:communication.c **** {
 6696               	.LM482:
 6697               	.LFBB30:
 6698 0000 0F93      		push r16
 6699 0002 1F93      		push r17
 6700 0004 CF93      		push r28
 6701 0006 DF93      		push r29
 6702               	/* prologue: function */
 6703               	/* frame size = 0 */
 6704               	/* stack size = 4 */
 6705               	.L__stack_usage = 4
 6706 0008 8C01      		movw r16,r24
 6707               	.LBB69:
  38:communication.c **** 	uint8_t port = pkt->rx_node;	//pkt->rx_node
 6709               	.LM483:
 6710 000a DC01      		movw r26,r24
 6711 000c 1A96      		adiw r26,10
 6712 000e CC91      		ld r28,X
 6713 0010 1A97      		sbiw r26,10
 6714               	.LBB70:
  39:communication.c **** 	char command;
  40:communication.c **** 
  41:communication.c **** 	if(port >= 0 && port < NUM_NEIGHBORS){
 6716               	.LM484:
 6717 0012 C630      		cpi r28,lo8(6)
 6718 0014 00F0      		brlo .+2
 6719 0016 00C0      		rjmp .L189
 6720               	.LBB71:
  42:communication.c **** 
  43:communication.c **** 		if(pkt->type == MESSAGE_COMMAND)
 6722               	.LM485:
 6723 0018 1296      		adiw r26,2
 6724 001a 9C91      		ld r25,X
 6725 001c 1297      		sbiw r26,2
 6726 001e 9130      		cpi r25,lo8(1)
 6727 0020 01F0      		breq .+2
 6728 0022 00C0      		rjmp .L191
 6729               	.LBB72:
  44:communication.c **** 		{
  45:communication.c **** 			char* char_ptr = (char*) pkt->data;
  46:communication.c **** 			command = *char_ptr;
 6731               	.LM486:
 6732 0024 1696      		adiw r26,6
 6733 0026 ED91      		ld r30,X+
 6734 0028 FC91      		ld r31,X
 6735 002a 1797      		sbiw r26,6+1
 6736 002c 8081      		ld r24,Z
  47:communication.c **** 			
  48:communication.c **** 			connected[port] = true;
 6738               	.LM487:
 6739 002e EC2F      		mov r30,r28
 6740 0030 F0E0      		ldi r31,lo8(0)
 6741 0032 E050      		subi r30,lo8(-(connected))
 6742 0034 F040      		sbci r31,hi8(-(connected))
 6743 0036 9083      		st Z,r25
  49:communication.c **** 
  50:communication.c **** 			switch(command)
 6745               	.LM488:
 6746 0038 8933      		cpi r24,lo8(57)
 6747 003a 01F4      		brne .+2
 6748 003c 00C0      		rjmp .L201
 6749 003e 8A33      		cpi r24,lo8(58)
 6750 0040 00F4      		brsh .L211
 6751 0042 8433      		cpi r24,lo8(52)
 6752 0044 01F4      		brne .+2
 6753 0046 00C0      		rjmp .L196
 6754 0048 8533      		cpi r24,lo8(53)
 6755 004a 00F4      		brsh .L212
 6756 004c 8133      		cpi r24,lo8(49)
 6757 004e 01F4      		brne .+2
 6758 0050 00C0      		rjmp .L193
 6759 0052 8233      		cpi r24,lo8(50)
 6760 0054 00F4      		brsh .L213
 6761 0056 8033      		cpi r24,lo8(48)
 6762 0058 01F0      		breq .+2
 6763 005a 00C0      		rjmp .L191
 6764 005c 00C0      		rjmp .L219
 6765               	.L213:
 6766 005e 8233      		cpi r24,lo8(50)
 6767 0060 01F4      		brne .+2
 6768 0062 00C0      		rjmp .L194
 6769 0064 8333      		cpi r24,lo8(51)
 6770 0066 01F0      		breq .+2
 6771 0068 00C0      		rjmp .L191
 6772 006a 00C0      		rjmp .L220
 6773               	.L212:
 6774 006c 8633      		cpi r24,lo8(54)
 6775 006e 01F4      		brne .+2
 6776 0070 00C0      		rjmp .L198
 6777 0072 8633      		cpi r24,lo8(54)
 6778 0074 00F4      		brsh .+2
 6779 0076 00C0      		rjmp .L197
 6780 0078 8733      		cpi r24,lo8(55)
 6781 007a 01F4      		brne .+2
 6782 007c 00C0      		rjmp .L199
 6783 007e 8833      		cpi r24,lo8(56)
 6784 0080 01F0      		breq .+2
 6785 0082 00C0      		rjmp .L191
 6786 0084 00C0      		rjmp .L221
 6787               	.L211:
 6788 0086 8136      		cpi r24,lo8(97)
 6789 0088 01F0      		breq .L206
 6790 008a 8236      		cpi r24,lo8(98)
 6791 008c 00F4      		brsh .L214
 6792 008e 8934      		cpi r24,lo8(73)
 6793 0090 01F0      		breq .L203
 6794 0092 8A34      		cpi r24,lo8(74)
 6795 0094 00F4      		brsh .L215
 6796 0096 8434      		cpi r24,lo8(68)
 6797 0098 01F0      		breq .+2
 6798 009a 00C0      		rjmp .L191
 6799 009c 00C0      		rjmp .L202
 6800               	.L215:
 6801 009e 8235      		cpi r24,lo8(82)
 6802 00a0 01F0      		breq .L204
 6803 00a2 8A35      		cpi r24,lo8(90)
 6804 00a4 01F0      		breq .+2
 6805 00a6 00C0      		rjmp .L191
 6806 00a8 00C0      		rjmp .L222
 6807               	.L214:
 6808 00aa 8336      		cpi r24,lo8(99)
 6809 00ac 01F0      		breq .L208
 6810 00ae 8336      		cpi r24,lo8(99)
 6811 00b0 00F0      		brlo .L207
 6812 00b2 8936      		cpi r24,lo8(105)
 6813 00b4 01F4      		brne .+2
 6814 00b6 00C0      		rjmp .L217
 6815 00b8 8237      		cpi r24,lo8(114)
 6816 00ba 01F0      		breq .+2
 6817 00bc 00C0      		rjmp .L191
 6818 00be 00C0      		rjmp .L218
 6819               	.L222:
  51:communication.c **** 			{
  52:communication.c **** 				case 'Z': reboot_on = true;
 6821               	.LM489:
 6822 00c0 81E0      		ldi r24,lo8(1)
 6823 00c2 8093 0000 		sts reboot_on,r24
 6824               	.L202:
  53:communication.c **** 
  54:communication.c **** 				case 'D':	speedup_on = false;	communication_on = false;	
 6826               	.LM490:
 6827 00c6 1092 0000 		sts speedup_on,__zero_reg__
 6828 00ca 1092 0000 		sts communication_on,__zero_reg__
  55:communication.c **** 							disable_servo();	break;
 6830               	.LM491:
 6831 00ce 0E94 0000 		call disable_servo
 6832 00d2 00C0      		rjmp .L191
 6833               	.L204:
  56:communication.c **** 				case 'R':	speedup_on = true;	communication_on = true;
 6835               	.LM492:
 6836 00d4 9093 0000 		sts speedup_on,r25
 6837 00d8 9093 0000 		sts communication_on,r25
  57:communication.c **** 							enable_servo();		break;
 6839               	.LM493:
 6840 00dc 0E94 0000 		call enable_servo
 6841 00e0 00C0      		rjmp .L191
 6842               	.L203:
  58:communication.c **** 
  59:communication.c **** 				case 'i':	init_variables();	break;
  60:communication.c **** 				case 'r':	sec_counter = 0;	break;
  61:communication.c **** 				case 'I':	init_variables();	sec_counter = 0;	break;
 6844               	.LM494:
 6845 00e2 0E94 0000 		call _Z14init_variablesv
 6846               	.L218:
 6847 00e6 1092 0000 		sts sec_counter,__zero_reg__
 6848 00ea 1092 0000 		sts sec_counter+1,__zero_reg__
 6849 00ee 00C0      		rjmp .L191
 6850               	.L206:
  62:communication.c **** 
  63:communication.c **** 				case 'a':	wave_flg = true;	wave_port = port;	break;
 6852               	.LM495:
 6853 00f0 9093 0000 		sts wave_flg,r25
 6854 00f4 C093 0000 		sts wave_port,r28
 6855 00f8 00C0      		rjmp .L191
 6856               	.L207:
  64:communication.c **** 				case 'b':	column_flg = true;	break;
 6858               	.LM496:
 6859 00fa 9093 0000 		sts column_flg,r25
 6860 00fe 00C0      		rjmp .L191
 6861               	.L208:
  65:communication.c **** 
  66:communication.c **** 				case 'c':	sync = false;		break;
 6863               	.LM497:
 6864 0100 1092 0000 		sts sync,__zero_reg__
 6865 0104 00C0      		rjmp .L191
 6866               	.L193:
  67:communication.c **** 
  68:communication.c **** 				case '1':	sec_counter = STGtime1;	init_variables();	break;
 6868               	.LM498:
 6869 0106 1092 0000 		sts sec_counter,__zero_reg__
 6870 010a 1092 0000 		sts sec_counter+1,__zero_reg__
 6871 010e 00C0      		rjmp .L217
 6872               	.L194:
  69:communication.c **** 				case '2':	sec_counter = STGtime2;	init_variables();	break;
 6874               	.LM499:
 6875 0110 86E9      		ldi r24,lo8(150)
 6876 0112 90E0      		ldi r25,hi8(150)
 6877 0114 00C0      		rjmp .L216
 6878               	.L220:
  70:communication.c **** 				case '3':	sec_counter = STGtime3;	init_variables();	break;
 6880               	.LM500:
 6881 0116 82ED      		ldi r24,lo8(210)
 6882 0118 90E0      		ldi r25,hi8(210)
 6883 011a 00C0      		rjmp .L216
 6884               	.L196:
  71:communication.c **** 				case '4':	sec_counter = STGtime4;	init_variables();	break;
 6886               	.LM501:
 6887 011c 8EE0      		ldi r24,lo8(270)
 6888 011e 91E0      		ldi r25,hi8(270)
 6889 0120 00C0      		rjmp .L216
 6890               	.L197:
  72:communication.c **** 				case '5':	sec_counter = STGtime5;	init_variables();	break;
 6892               	.LM502:
 6893 0122 8CE2      		ldi r24,lo8(300)
 6894 0124 91E0      		ldi r25,hi8(300)
 6895 0126 00C0      		rjmp .L216
 6896               	.L198:
  73:communication.c **** 				case '6':	sec_counter = STGtime6;	init_variables();	break;
 6898               	.LM503:
 6899 0128 88E6      		ldi r24,lo8(360)
 6900 012a 91E0      		ldi r25,hi8(360)
 6901 012c 00C0      		rjmp .L216
 6902               	.L199:
  74:communication.c **** 				case '7':	sec_counter = STGtime7;	init_variables();	break;
 6904               	.LM504:
 6905 012e 84EA      		ldi r24,lo8(420)
 6906 0130 91E0      		ldi r25,hi8(420)
 6907 0132 00C0      		rjmp .L216
 6908               	.L221:
  75:communication.c **** 				case '8':	sec_counter = STGtime8;	init_variables();	break;
 6910               	.LM505:
 6911 0134 80EE      		ldi r24,lo8(480)
 6912 0136 91E0      		ldi r25,hi8(480)
 6913 0138 00C0      		rjmp .L216
 6914               	.L201:
  76:communication.c **** 				case '9':	sec_counter = STGtime9;	init_variables();	break;
 6916               	.LM506:
 6917 013a 8AE3      		ldi r24,lo8(570)
 6918 013c 92E0      		ldi r25,hi8(570)
 6919 013e 00C0      		rjmp .L216
 6920               	.L219:
  77:communication.c **** 				case '0':	sec_counter = LASTtime;	init_variables();	break;
 6922               	.LM507:
 6923 0140 86E7      		ldi r24,lo8(630)
 6924 0142 92E0      		ldi r25,hi8(630)
 6925               	.L216:
 6926 0144 8093 0000 		sts sec_counter,r24
 6927 0148 9093 0000 		sts sec_counter+1,r25
 6928               	.L217:
 6929 014c 0E94 0000 		call _Z14init_variablesv
 6930               	.L191:
 6931               	.LBE72:
 6932               	.LBE71:
 6933               	.LBB73:
  78:communication.c **** 
  79:communication.c **** 			}
  80:communication.c **** 		}
  81:communication.c **** 		
  82:communication.c **** 		if(pkt->type == MESSAGE_NUMDATA)
 6935               	.LM508:
 6936 0150 F801      		movw r30,r16
 6937 0152 8281      		ldd r24,Z+2
 6938 0154 8823      		tst r24
 6939 0156 01F0      		breq .+2
 6940 0158 00C0      		rjmp .L189
 6941               	.LBB74:
  83:communication.c **** 		{
  84:communication.c **** 			connected[port] = true;
 6943               	.LM509:
 6944 015a D0E0      		ldi r29,lo8(0)
 6945 015c FE01      		movw r30,r28
 6946 015e E050      		subi r30,lo8(-(connected))
 6947 0160 F040      		sbci r31,hi8(-(connected))
 6948 0162 81E0      		ldi r24,lo8(1)
 6949 0164 8083      		st Z,r24
  85:communication.c **** 
  86:communication.c **** 			point* pt_ptr = (point*) pkt->data;
 6951               	.LM510:
 6952 0166 D801      		movw r26,r16
 6953 0168 1696      		adiw r26,6
 6954 016a 4D91      		ld r20,X+
 6955 016c 5C91      		ld r21,X
 6956 016e 1797      		sbiw r26,6+1
  87:communication.c **** 
  88:communication.c **** 			agent0.neix[port] = pt_ptr->x0;
 6958               	.LM511:
 6959 0170 9E01      		movw r18,r28
 6960 0172 2B5F      		subi r18,lo8(-(5))
 6961 0174 3F4F      		sbci r19,hi8(-(5))
 6962 0176 220F      		lsl r18
 6963 0178 331F      		rol r19
 6964 017a 220F      		lsl r18
 6965 017c 331F      		rol r19
 6966 017e B901      		movw r22,r18
 6967 0180 6050      		subi r22,lo8(-(agent0))
 6968 0182 7040      		sbci r23,hi8(-(agent0))
 6969 0184 FA01      		movw r30,r20
 6970 0186 8085      		ldd r24,Z+8
 6971 0188 9185      		ldd r25,Z+9
 6972 018a A285      		ldd r26,Z+10
 6973 018c B385      		ldd r27,Z+11
 6974 018e FB01      		movw r30,r22
 6975 0190 8083      		st Z,r24
 6976 0192 9183      		std Z+1,r25
 6977 0194 A283      		std Z+2,r26
 6978 0196 B383      		std Z+3,r27
  89:communication.c **** 			agent0.neiy[port] = pt_ptr->y0;
 6980               	.LM512:
 6981 0198 2B96      		adiw r28,11
 6982 019a CC0F      		lsl r28
 6983 019c DD1F      		rol r29
 6984 019e CC0F      		lsl r28
 6985 01a0 DD1F      		rol r29
 6986 01a2 BE01      		movw r22,r28
 6987 01a4 6050      		subi r22,lo8(-(agent0))
 6988 01a6 7040      		sbci r23,hi8(-(agent0))
 6989 01a8 FA01      		movw r30,r20
 6990 01aa 8485      		ldd r24,Z+12
 6991 01ac 9585      		ldd r25,Z+13
 6992 01ae A685      		ldd r26,Z+14
 6993 01b0 B785      		ldd r27,Z+15
 6994 01b2 FB01      		movw r30,r22
 6995 01b4 8083      		st Z,r24
 6996 01b6 9183      		std Z+1,r25
 6997 01b8 A283      		std Z+2,r26
 6998 01ba B383      		std Z+3,r27
  90:communication.c **** 			
  91:communication.c **** 			agent1.neix[port] = pt_ptr->x1;
 7000               	.LM513:
 7001 01bc 2050      		subi r18,lo8(-(agent1))
 7002 01be 3040      		sbci r19,hi8(-(agent1))
 7003 01c0 FA01      		movw r30,r20
 7004 01c2 8081      		ld r24,Z
 7005 01c4 9181      		ldd r25,Z+1
 7006 01c6 A281      		ldd r26,Z+2
 7007 01c8 B381      		ldd r27,Z+3
 7008 01ca F901      		movw r30,r18
 7009 01cc 8083      		st Z,r24
 7010 01ce 9183      		std Z+1,r25
 7011 01d0 A283      		std Z+2,r26
 7012 01d2 B383      		std Z+3,r27
  92:communication.c **** 			agent1.neiy[port] = pt_ptr->y1;
 7014               	.LM514:
 7015 01d4 C050      		subi r28,lo8(-(agent1))
 7016 01d6 D040      		sbci r29,hi8(-(agent1))
 7017 01d8 FA01      		movw r30,r20
 7018 01da 8481      		ldd r24,Z+4
 7019 01dc 9581      		ldd r25,Z+5
 7020 01de A681      		ldd r26,Z+6
 7021 01e0 B781      		ldd r27,Z+7
 7022 01e2 8883      		st Y,r24
 7023 01e4 9983      		std Y+1,r25
 7024 01e6 AA83      		std Y+2,r26
 7025 01e8 BB83      		std Y+3,r27
 7026               	.L189:
 7027               	/* epilogue start */
 7028               	.LBE74:
 7029               	.LBE73:
 7030               	.LBE70:
 7031               	.LBE69:
  93:communication.c **** 		}
  94:communication.c **** 		
  95:communication.c **** 		//LED_PORT.OUTTGL = LED_USR_2_PIN_bm;	//green LED
  96:communication.c **** 	}
  97:communication.c **** }
 7033               	.LM515:
 7034 01ea DF91      		pop r29
 7035 01ec CF91      		pop r28
 7036 01ee 1F91      		pop r17
 7037 01f0 0F91      		pop r16
 7038 01f2 0895      		ret
 7047               	.Lscope30:
 7048               		.data
 7049               	.LC5:
 7050 0009 5A00      		.string	"Z"
 7051               	.LC6:
 7052 000b 4400      		.string	"D"
 7053               	.LC7:
 7054 000d 5200      		.string	"R"
 7055               	.LC8:
 7056 000f 4900      		.string	"I"
 7057               	.LC9:
 7058 0011 7200      		.string	"r"
 7059               	.LC10:
 7060 0013 3100      		.string	"1"
 7061               	.LC11:
 7062 0015 3200      		.string	"2"
 7063               	.LC12:
 7064 0017 3300      		.string	"3"
 7065               	.LC13:
 7066 0019 3400      		.string	"4"
 7067               	.LC14:
 7068 001b 3500      		.string	"5"
 7069               	.LC15:
 7070 001d 3600      		.string	"6"
 7071               	.LC16:
 7072 001f 3700      		.string	"7"
 7073               	.LC17:
 7074 0021 3800      		.string	"8"
 7075               	.LC18:
 7076 0023 3900      		.string	"9"
 7077               	.LC19:
 7078 0025 3000      		.string	"0"
 7079               		.section	.text._Z9key_inputv,"ax",@progbits
 7081               	.global	_Z9key_inputv
 7083               	_Z9key_inputv:
  98:communication.c **** 
  99:communication.c **** // ============================================================================================
 100:communication.c **** // KEY INPUT PROCESS
 101:communication.c **** // ============================================================================================
 102:communication.c **** void key_input()
 103:communication.c **** {
 7085               	.LM516:
 7086               	.LFBB31:
 7087               	/* prologue: function */
 7088               	/* frame size = 0 */
 7089               	/* stack size = 0 */
 7090               	.L__stack_usage = 0
 7091               	.LBB75:
 104:communication.c **** 	char input_char = 0;
 105:communication.c **** 	
 106:communication.c **** 	if (usart.available()) input_char = usart.get();
 7093               	.LM517:
 7094 0000 80E0      		ldi r24,lo8(usart)
 7095 0002 90E0      		ldi r25,hi8(usart)
 7096 0004 0E94 0000 		call _ZN5Usart9availableEv
 7097 0008 0097      		sbiw r24,0
 7098 000a 01F4      		brne .+2
 7099 000c 00C0      		rjmp .L223
 7101               	.LM518:
 7102 000e 80E0      		ldi r24,lo8(usart)
 7103 0010 90E0      		ldi r25,hi8(usart)
 7104 0012 0E94 0000 		call _ZN5Usart3getEv
 107:communication.c **** 	
 108:communication.c **** 	if(input_char == 0x1b) xboot_reset(); //reboot the board
 7106               	.LM519:
 7107 0016 8B31      		cpi r24,lo8(27)
 7108 0018 01F4      		brne .+2
 7109 001a 00C0      		rjmp .L251
 7110               	.L225:
 109:communication.c **** 
 110:communication.c **** 	if(input_char == 'Z')	//Reboot whole system
 7112               	.LM520:
 7113 001c 8A35      		cpi r24,lo8(90)
 7114 001e 01F0      		breq .+2
 7115 0020 00C0      		rjmp .L226
 111:communication.c **** 	{
 112:communication.c **** 		send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, "Z");
 7117               	.LM521:
 7118 0022 81E0      		ldi r24,lo8(1)
 7119 0024 6FE3      		ldi r22,lo8(63)
 7120 0026 44E1      		ldi r20,lo8(20)
 7121 0028 50E0      		ldi r21,hi8(20)
 7122 002a 20E0      		ldi r18,lo8(.LC5)
 7123 002c 30E0      		ldi r19,hi8(.LC5)
 7124 002e 0E94 0000 		call _Z12send_messagehhiPKc
 113:communication.c **** 		temp_time = jiffies + 3000;
 7126               	.LM522:
 7127 0032 8091 0000 		lds r24,jiffies
 7128 0036 9091 0000 		lds r25,jiffies+1
 7129 003a A091 0000 		lds r26,jiffies+2
 7130 003e B091 0000 		lds r27,jiffies+3
 7131 0042 8854      		subi r24,lo8(-(3000))
 7132 0044 944F      		sbci r25,hi8(-(3000))
 7133 0046 AF4F      		sbci r26,hlo8(-(3000))
 7134 0048 BF4F      		sbci r27,hhi8(-(3000))
 7135 004a 8093 0000 		sts temp_time,r24
 7136 004e 9093 0000 		sts temp_time+1,r25
 7137 0052 A093 0000 		sts temp_time+2,r26
 7138 0056 B093 0000 		sts temp_time+3,r27
 114:communication.c **** 		while(jiffies < temp_time)
 115:communication.c **** 		{
 116:communication.c **** 			LED_PORT.OUTTGL = LED_USR_1_PIN_bm; _delay_ms(100);
 7140               	.LM523:
 7141 005a E0E2      		ldi r30,lo8(1568)
 7142 005c F6E0      		ldi r31,hi8(1568)
 7143 005e 22E0      		ldi r18,lo8(2)
 114:communication.c **** 		while(jiffies < temp_time)
 7145               	.LM524:
 7146 0060 00C0      		rjmp .L227
 7147               	.L228:
 7149               	.LM525:
 7150 0062 2783      		std Z+7,r18
 7151               	.LBB76:
 7152               	.LBB77:
 7154               	.Ltext9:
 7156               	.LM526:
 7157 0064 8FEF      		 ldi r24,lo8(639999)
 7158 0066 93EC      	    ldi r25,hi8(639999)
 7159 0068 A9E0      	    ldi r26,hlo8(639999)
 7160 006a 8150      	    1:subi r24,1
 7161 006c 9040      	    sbci r25,0
 7162 006e A040      	    sbci r26,0
 7163 0070 01F4      	    brne 1b
 7164 0072 00C0      		rjmp .
 7165 0074 0000      		nop
 7166               	.L227:
 7167               	.LBE77:
 7168               	.LBE76:
 7170               	.Ltext10:
 114:communication.c **** 		while(jiffies < temp_time)
 7172               	.LM527:
 7173 0076 4091 0000 		lds r20,jiffies
 7174 007a 5091 0000 		lds r21,jiffies+1
 7175 007e 6091 0000 		lds r22,jiffies+2
 7176 0082 7091 0000 		lds r23,jiffies+3
 7177 0086 8091 0000 		lds r24,temp_time
 7178 008a 9091 0000 		lds r25,temp_time+1
 7179 008e A091 0000 		lds r26,temp_time+2
 7180 0092 B091 0000 		lds r27,temp_time+3
 7181 0096 4817      		cp r20,r24
 7182 0098 5907      		cpc r21,r25
 7183 009a 6A07      		cpc r22,r26
 7184 009c 7B07      		cpc r23,r27
 7185 009e 00F0      		brlo .L228
 7186               	.L251:
 117:communication.c **** 		}
 118:communication.c **** 		xboot_reset();
 7188               	.LM528:
 7189 00a0 0E94 0000 		call xboot_reset
 7190               	.L226:
 119:communication.c **** 	}
 120:communication.c **** 
 121:communication.c **** 	if(input_char == 'D')	//Debug Mode
 7192               	.LM529:
 7193 00a4 8434      		cpi r24,lo8(68)
 7194 00a6 01F4      		brne .L229
 122:communication.c **** 	{
 123:communication.c **** 		speedup_on = false;
 7196               	.LM530:
 7197 00a8 1092 0000 		sts speedup_on,__zero_reg__
 124:communication.c **** 		communication_on = false;
 7199               	.LM531:
 7200 00ac 1092 0000 		sts communication_on,__zero_reg__
 125:communication.c **** 		send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, "D");
 7202               	.LM532:
 7203 00b0 81E0      		ldi r24,lo8(1)
 7204 00b2 6FE3      		ldi r22,lo8(63)
 7205 00b4 44E1      		ldi r20,lo8(20)
 7206 00b6 50E0      		ldi r21,hi8(20)
 7207 00b8 20E0      		ldi r18,lo8(.LC6)
 7208 00ba 30E0      		ldi r19,hi8(.LC6)
 7209 00bc 00C0      		rjmp .L250
 7210               	.L229:
 126:communication.c **** 	}
 127:communication.c **** 
 128:communication.c **** 	if(input_char == 'R')	//Run Mode
 7212               	.LM533:
 7213 00be 8235      		cpi r24,lo8(82)
 7214 00c0 01F4      		brne .L224
 129:communication.c **** 	{
 130:communication.c **** 		speedup_on = true;
 7216               	.LM534:
 7217 00c2 81E0      		ldi r24,lo8(1)
 7218 00c4 8093 0000 		sts speedup_on,r24
 131:communication.c **** 		communication_on = true;
 7220               	.LM535:
 7221 00c8 8093 0000 		sts communication_on,r24
 132:communication.c **** 		send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, "R");
 7223               	.LM536:
 7224 00cc 6FE3      		ldi r22,lo8(63)
 7225 00ce 44E1      		ldi r20,lo8(20)
 7226 00d0 50E0      		ldi r21,hi8(20)
 7227 00d2 20E0      		ldi r18,lo8(.LC7)
 7228 00d4 30E0      		ldi r19,hi8(.LC7)
 7229               	.L250:
 7230 00d6 0E94 0000 		call _Z12send_messagehhiPKc
 7231 00da 0895      		ret
 7232               	.L224:
 7233               	.LBB78:
 133:communication.c **** 	}
 134:communication.c **** 
 135:communication.c **** 	if(input_char == 'v')
 7235               	.LM537:
 7236 00dc 8637      		cpi r24,lo8(118)
 7237 00de 01F4      		brne .L231
 7238               	.LBB79:
 136:communication.c **** 		fprintf_P(&usart_stream, PSTR("build number = %ld\r\n"), (unsigned long) &__BUILD_NUMBER);
 7240               	.LM538:
 7241 00e0 ADB7      		in r26,__SP_L__
 7242 00e2 BEB7      		in r27,__SP_H__
 7243 00e4 1897      		sbiw r26,8
 7244 00e6 ADBF      		out __SP_L__,r26
 7245 00e8 BEBF      		out __SP_H__,r27
 7246 00ea EDB7      		in r30,__SP_L__
 7247 00ec FEB7      		in r31,__SP_H__
 7248 00ee 3196      		adiw r30,1
 7249 00f0 80E0      		ldi r24,lo8(usart_stream)
 7250 00f2 90E0      		ldi r25,hi8(usart_stream)
 7251 00f4 1196      		adiw r26,1
 7252 00f6 8D93      		st X+,r24
 7253 00f8 9C93      		st X,r25
 7254 00fa 1297      		sbiw r26,1+1
 7255 00fc 80E0      		ldi r24,lo8(_ZZ9key_inputvE3__c)
 7256 00fe 90E0      		ldi r25,hi8(_ZZ9key_inputvE3__c)
 7257 0100 8283      		std Z+2,r24
 7258 0102 9383      		std Z+3,r25
 7259 0104 80E0      		ldi r24,lo8(__BUILD_NUMBER)
 7260 0106 90E0      		ldi r25,hi8(__BUILD_NUMBER)
 7261 0108 AA27      		clr r26
 7262 010a 97FD      		sbrc r25,7
 7263 010c A095      		com r26
 7264 010e BA2F      		mov r27,r26
 7265 0110 8483      		std Z+4,r24
 7266 0112 9583      		std Z+5,r25
 7267 0114 A683      		std Z+6,r26
 7268 0116 B783      		std Z+7,r27
 7269 0118 0E94 0000 		call fprintf_P
 7270 011c 8DB7      		in r24,__SP_L__
 7271 011e 9EB7      		in r25,__SP_H__
 7272 0120 0896      		adiw r24,8
 7273 0122 8DBF      		out __SP_L__,r24
 7274 0124 9EBF      		out __SP_H__,r25
 7275 0126 0895      		ret
 7276               	.L231:
 7277               	.LBE79:
 7278               	.LBE78:
 137:communication.c **** 
 138:communication.c **** 	if(input_char == 'd')
 7280               	.LM539:
 7281 0128 8436      		cpi r24,lo8(100)
 7282 012a 01F4      		brne .L233
 139:communication.c **** 	{
 140:communication.c **** 		if(display) display = false;
 7284               	.LM540:
 7285 012c 8091 0000 		lds r24,display
 7286 0130 8823      		tst r24
 7287 0132 01F0      		breq .L234
 7289               	.LM541:
 7290 0134 1092 0000 		sts display,__zero_reg__
 7291 0138 0895      		ret
 7292               	.L234:
 141:communication.c **** 		else		display = true;
 7294               	.LM542:
 7295 013a 81E0      		ldi r24,lo8(1)
 7296 013c 8093 0000 		sts display,r24
 7297 0140 0895      		ret
 7298               	.L233:
 142:communication.c **** 	}
 143:communication.c **** 
 144:communication.c **** 	if(input_char == 'I')	//initialization
 7300               	.LM543:
 7301 0142 8934      		cpi r24,lo8(73)
 7302 0144 01F4      		brne .L236
 145:communication.c **** 	{
 146:communication.c **** 		send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, "I");	
 7304               	.LM544:
 7305 0146 81E0      		ldi r24,lo8(1)
 7306 0148 6FE3      		ldi r22,lo8(63)
 7307 014a 44E1      		ldi r20,lo8(20)
 7308 014c 50E0      		ldi r21,hi8(20)
 7309 014e 20E0      		ldi r18,lo8(.LC8)
 7310 0150 30E0      		ldi r19,hi8(.LC8)
 7311 0152 00C0      		rjmp .L253
 7312               	.L236:
 147:communication.c **** 		init_variables();
 148:communication.c **** 		sec_counter = 0;
 149:communication.c **** 	}
 150:communication.c **** 
 151:communication.c **** 	if(input_char == 'i')	//reset variables
 7314               	.LM545:
 7315 0154 8936      		cpi r24,lo8(105)
 7316 0156 01F4      		brne .L232
 152:communication.c **** 	{
 153:communication.c **** 		send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, "i");	
 7318               	.LM546:
 7319 0158 81E0      		ldi r24,lo8(1)
 7320 015a 6FE3      		ldi r22,lo8(63)
 7321 015c 44E1      		ldi r20,lo8(20)
 7322 015e 50E0      		ldi r21,hi8(20)
 7323 0160 20E0      		ldi r18,lo8(.LC4)
 7324 0162 30E0      		ldi r19,hi8(.LC4)
 7325 0164 0E94 0000 		call _Z12send_messagehhiPKc
 154:communication.c **** 		init_variables();
 7327               	.LM547:
 7328 0168 0E94 0000 		call _Z14init_variablesv
 7329 016c 0895      		ret
 7330               	.L232:
 155:communication.c **** 	}
 156:communication.c **** 
 157:communication.c **** 	if(input_char == 'r')	//set sec_counter as 0
 7332               	.LM548:
 7333 016e 8237      		cpi r24,lo8(114)
 7334 0170 01F4      		brne .L239
 158:communication.c **** 	{
 159:communication.c **** 		send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, "r");	
 7336               	.LM549:
 7337 0172 81E0      		ldi r24,lo8(1)
 7338 0174 6FE3      		ldi r22,lo8(63)
 7339 0176 44E1      		ldi r20,lo8(20)
 7340 0178 50E0      		ldi r21,hi8(20)
 7341 017a 20E0      		ldi r18,lo8(.LC9)
 7342 017c 30E0      		ldi r19,hi8(.LC9)
 7343 017e 0E94 0000 		call _Z12send_messagehhiPKc
 7344 0182 00C0      		rjmp .L252
 7345               	.L239:
 160:communication.c **** 		sec_counter = 0;
 161:communication.c **** 	}
 162:communication.c **** 
 163:communication.c **** 	if(input_char == '1')
 7347               	.LM550:
 7348 0184 8133      		cpi r24,lo8(49)
 7349 0186 01F4      		brne .L241
 164:communication.c **** 	{
 165:communication.c **** 		send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, "1");	
 7351               	.LM551:
 7352 0188 81E0      		ldi r24,lo8(1)
 7353 018a 6FE3      		ldi r22,lo8(63)
 7354 018c 44E1      		ldi r20,lo8(20)
 7355 018e 50E0      		ldi r21,hi8(20)
 7356 0190 20E0      		ldi r18,lo8(.LC10)
 7357 0192 30E0      		ldi r19,hi8(.LC10)
 7358               	.L253:
 7359 0194 0E94 0000 		call _Z12send_messagehhiPKc
 166:communication.c **** 		init_variables();
 7361               	.LM552:
 7362 0198 0E94 0000 		call _Z14init_variablesv
 7363               	.L252:
 167:communication.c **** 		sec_counter = STGtime1;
 7365               	.LM553:
 7366 019c 1092 0000 		sts sec_counter,__zero_reg__
 7367 01a0 1092 0000 		sts sec_counter+1,__zero_reg__
 7368 01a4 0895      		ret
 7369               	.L241:
 168:communication.c **** 	}
 169:communication.c **** 
 170:communication.c **** 	if(input_char == '2')
 7371               	.LM554:
 7372 01a6 8233      		cpi r24,lo8(50)
 7373 01a8 01F4      		brne .L237
 171:communication.c **** 	{
 172:communication.c **** 		send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, "2");	
 7375               	.LM555:
 7376 01aa 81E0      		ldi r24,lo8(1)
 7377 01ac 6FE3      		ldi r22,lo8(63)
 7378 01ae 44E1      		ldi r20,lo8(20)
 7379 01b0 50E0      		ldi r21,hi8(20)
 7380 01b2 20E0      		ldi r18,lo8(.LC11)
 7381 01b4 30E0      		ldi r19,hi8(.LC11)
 7382 01b6 0E94 0000 		call _Z12send_messagehhiPKc
 173:communication.c **** 		init_variables();
 7384               	.LM556:
 7385 01ba 0E94 0000 		call _Z14init_variablesv
 174:communication.c **** 		sec_counter = STGtime2;
 7387               	.LM557:
 7388 01be 86E9      		ldi r24,lo8(150)
 7389 01c0 90E0      		ldi r25,hi8(150)
 7390 01c2 00C0      		rjmp .L249
 7391               	.L237:
 175:communication.c **** 	}
 176:communication.c **** 
 177:communication.c **** 	if(input_char == '3')
 7393               	.LM558:
 7394 01c4 8333      		cpi r24,lo8(51)
 7395 01c6 01F4      		brne .L238
 178:communication.c **** 	{
 179:communication.c **** 		send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, "3");	
 7397               	.LM559:
 7398 01c8 81E0      		ldi r24,lo8(1)
 7399 01ca 6FE3      		ldi r22,lo8(63)
 7400 01cc 44E1      		ldi r20,lo8(20)
 7401 01ce 50E0      		ldi r21,hi8(20)
 7402 01d0 20E0      		ldi r18,lo8(.LC12)
 7403 01d2 30E0      		ldi r19,hi8(.LC12)
 7404 01d4 0E94 0000 		call _Z12send_messagehhiPKc
 180:communication.c **** 		init_variables();
 7406               	.LM560:
 7407 01d8 0E94 0000 		call _Z14init_variablesv
 181:communication.c **** 		sec_counter = STGtime3;
 7409               	.LM561:
 7410 01dc 82ED      		ldi r24,lo8(210)
 7411 01de 90E0      		ldi r25,hi8(210)
 7412 01e0 00C0      		rjmp .L249
 7413               	.L238:
 182:communication.c **** 	}
 183:communication.c **** 
 184:communication.c **** 	if(input_char == '4')	//initialization
 7415               	.LM562:
 7416 01e2 8433      		cpi r24,lo8(52)
 7417 01e4 01F4      		brne .L240
 185:communication.c **** 	{
 186:communication.c **** 		send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, "4");	
 7419               	.LM563:
 7420 01e6 81E0      		ldi r24,lo8(1)
 7421 01e8 6FE3      		ldi r22,lo8(63)
 7422 01ea 44E1      		ldi r20,lo8(20)
 7423 01ec 50E0      		ldi r21,hi8(20)
 7424 01ee 20E0      		ldi r18,lo8(.LC13)
 7425 01f0 30E0      		ldi r19,hi8(.LC13)
 7426 01f2 0E94 0000 		call _Z12send_messagehhiPKc
 187:communication.c **** 		init_variables();
 7428               	.LM564:
 7429 01f6 0E94 0000 		call _Z14init_variablesv
 188:communication.c **** 		sec_counter = STGtime4;
 7431               	.LM565:
 7432 01fa 8EE0      		ldi r24,lo8(270)
 7433 01fc 91E0      		ldi r25,hi8(270)
 7434 01fe 00C0      		rjmp .L249
 7435               	.L240:
 189:communication.c **** 	}
 190:communication.c **** 
 191:communication.c **** 	if(input_char == '5')	//initialization
 7437               	.LM566:
 7438 0200 8533      		cpi r24,lo8(53)
 7439 0202 01F4      		brne .L242
 192:communication.c **** 	{
 193:communication.c **** 		send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, "5");	
 7441               	.LM567:
 7442 0204 81E0      		ldi r24,lo8(1)
 7443 0206 6FE3      		ldi r22,lo8(63)
 7444 0208 44E1      		ldi r20,lo8(20)
 7445 020a 50E0      		ldi r21,hi8(20)
 7446 020c 20E0      		ldi r18,lo8(.LC14)
 7447 020e 30E0      		ldi r19,hi8(.LC14)
 7448 0210 0E94 0000 		call _Z12send_messagehhiPKc
 194:communication.c **** 		init_variables();
 7450               	.LM568:
 7451 0214 0E94 0000 		call _Z14init_variablesv
 195:communication.c **** 		sec_counter = STGtime5;
 7453               	.LM569:
 7454 0218 8CE2      		ldi r24,lo8(300)
 7455 021a 91E0      		ldi r25,hi8(300)
 7456 021c 00C0      		rjmp .L249
 7457               	.L242:
 196:communication.c **** 	}
 197:communication.c **** 
 198:communication.c **** 	if(input_char == '6')	//initialization
 7459               	.LM570:
 7460 021e 8633      		cpi r24,lo8(54)
 7461 0220 01F4      		brne .L243
 199:communication.c **** 	{
 200:communication.c **** 		send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, "6");	
 7463               	.LM571:
 7464 0222 81E0      		ldi r24,lo8(1)
 7465 0224 6FE3      		ldi r22,lo8(63)
 7466 0226 44E1      		ldi r20,lo8(20)
 7467 0228 50E0      		ldi r21,hi8(20)
 7468 022a 20E0      		ldi r18,lo8(.LC15)
 7469 022c 30E0      		ldi r19,hi8(.LC15)
 7470 022e 0E94 0000 		call _Z12send_messagehhiPKc
 201:communication.c **** 		init_variables();
 7472               	.LM572:
 7473 0232 0E94 0000 		call _Z14init_variablesv
 202:communication.c **** 		sec_counter = STGtime6;
 7475               	.LM573:
 7476 0236 88E6      		ldi r24,lo8(360)
 7477 0238 91E0      		ldi r25,hi8(360)
 7478 023a 00C0      		rjmp .L249
 7479               	.L243:
 203:communication.c **** 	}
 204:communication.c **** 
 205:communication.c **** 	if(input_char == '7')	//initialization
 7481               	.LM574:
 7482 023c 8733      		cpi r24,lo8(55)
 7483 023e 01F4      		brne .L244
 206:communication.c **** 	{
 207:communication.c **** 		send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, "7");	
 7485               	.LM575:
 7486 0240 81E0      		ldi r24,lo8(1)
 7487 0242 6FE3      		ldi r22,lo8(63)
 7488 0244 44E1      		ldi r20,lo8(20)
 7489 0246 50E0      		ldi r21,hi8(20)
 7490 0248 20E0      		ldi r18,lo8(.LC16)
 7491 024a 30E0      		ldi r19,hi8(.LC16)
 7492 024c 0E94 0000 		call _Z12send_messagehhiPKc
 208:communication.c **** 		init_variables();
 7494               	.LM576:
 7495 0250 0E94 0000 		call _Z14init_variablesv
 209:communication.c **** 		sec_counter = STGtime7;
 7497               	.LM577:
 7498 0254 84EA      		ldi r24,lo8(420)
 7499 0256 91E0      		ldi r25,hi8(420)
 7500 0258 00C0      		rjmp .L249
 7501               	.L244:
 210:communication.c **** 	}
 211:communication.c **** 
 212:communication.c **** 	if(input_char == '8')	//initialization
 7503               	.LM578:
 7504 025a 8833      		cpi r24,lo8(56)
 7505 025c 01F4      		brne .L245
 213:communication.c **** 	{
 214:communication.c **** 		send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, "8");	
 7507               	.LM579:
 7508 025e 81E0      		ldi r24,lo8(1)
 7509 0260 6FE3      		ldi r22,lo8(63)
 7510 0262 44E1      		ldi r20,lo8(20)
 7511 0264 50E0      		ldi r21,hi8(20)
 7512 0266 20E0      		ldi r18,lo8(.LC17)
 7513 0268 30E0      		ldi r19,hi8(.LC17)
 7514 026a 0E94 0000 		call _Z12send_messagehhiPKc
 215:communication.c **** 		init_variables();
 7516               	.LM580:
 7517 026e 0E94 0000 		call _Z14init_variablesv
 216:communication.c **** 		sec_counter = STGtime8;
 7519               	.LM581:
 7520 0272 80EE      		ldi r24,lo8(480)
 7521 0274 91E0      		ldi r25,hi8(480)
 7522 0276 00C0      		rjmp .L249
 7523               	.L245:
 217:communication.c **** 	}
 218:communication.c **** 
 219:communication.c **** 	if(input_char == '9')	//initialization
 7525               	.LM582:
 7526 0278 8933      		cpi r24,lo8(57)
 7527 027a 01F4      		brne .L246
 220:communication.c **** 	{
 221:communication.c **** 		send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, "9");	
 7529               	.LM583:
 7530 027c 81E0      		ldi r24,lo8(1)
 7531 027e 6FE3      		ldi r22,lo8(63)
 7532 0280 44E1      		ldi r20,lo8(20)
 7533 0282 50E0      		ldi r21,hi8(20)
 7534 0284 20E0      		ldi r18,lo8(.LC18)
 7535 0286 30E0      		ldi r19,hi8(.LC18)
 7536 0288 0E94 0000 		call _Z12send_messagehhiPKc
 222:communication.c **** 		init_variables();
 7538               	.LM584:
 7539 028c 0E94 0000 		call _Z14init_variablesv
 223:communication.c **** 		sec_counter = STGtime9;
 7541               	.LM585:
 7542 0290 8AE3      		ldi r24,lo8(570)
 7543 0292 92E0      		ldi r25,hi8(570)
 7544               	.L249:
 7545 0294 8093 0000 		sts sec_counter,r24
 7546 0298 9093 0000 		sts sec_counter+1,r25
 7547 029c 0895      		ret
 7548               	.L246:
 224:communication.c **** 	}
 225:communication.c **** 
 226:communication.c **** 	if(input_char == '0')	//initialization
 7550               	.LM586:
 7551 029e 8033      		cpi r24,lo8(48)
 7552 02a0 01F4      		brne .L223
 227:communication.c **** 	{
 228:communication.c **** 		send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, "0");	
 7554               	.LM587:
 7555 02a2 81E0      		ldi r24,lo8(1)
 7556 02a4 6FE3      		ldi r22,lo8(63)
 7557 02a6 44E1      		ldi r20,lo8(20)
 7558 02a8 50E0      		ldi r21,hi8(20)
 7559 02aa 20E0      		ldi r18,lo8(.LC19)
 7560 02ac 30E0      		ldi r19,hi8(.LC19)
 7561 02ae 0E94 0000 		call _Z12send_messagehhiPKc
 229:communication.c **** 		init_variables();
 7563               	.LM588:
 7564 02b2 0E94 0000 		call _Z14init_variablesv
 230:communication.c **** 		sec_counter = LASTtime;
 7566               	.LM589:
 7567 02b6 86E7      		ldi r24,lo8(630)
 7568 02b8 92E0      		ldi r25,hi8(630)
 7569 02ba 8093 0000 		sts sec_counter,r24
 7570 02be 9093 0000 		sts sec_counter+1,r25
 7571               	.L223:
 7572 02c2 0895      		ret
 7573               	.LBE75:
 7578               	.Lscope31:
 7579               		.section	.text.__vector_14,"ax",@progbits
 7581               	.global	__vector_14
 7583               	__vector_14:
 7585               	.Ltext11:
  17:main.cpp      **** {
 7587               	.LM590:
 7588               	.LFBB32:
 7589 0000 1F92      		push r1
 7590 0002 0F92      		push r0
 7591 0004 0FB6      		in r0,__SREG__
 7592 0006 0F92      		push r0
 7593 0008 0BB6      		in r0,59-0
 7594 000a 0F92      		push r0
 7595 000c 1124      		clr __zero_reg__
 7596 000e 2F93      		push r18
 7597 0010 3F93      		push r19
 7598 0012 4F93      		push r20
 7599 0014 5F93      		push r21
 7600 0016 6F93      		push r22
 7601 0018 7F93      		push r23
 7602 001a 8F93      		push r24
 7603 001c 9F93      		push r25
 7604 001e AF93      		push r26
 7605 0020 BF93      		push r27
 7606 0022 EF93      		push r30
 7607 0024 FF93      		push r31
 7608               	/* prologue: Signal */
 7609               	/* frame size = 0 */
 7610               	/* stack size = 16 */
 7611               	.L__stack_usage = 16
  18:main.cpp      **** 	jiffies++;	// Timers
 7613               	.LM591:
 7614 0026 8091 0000 		lds r24,jiffies
 7615 002a 9091 0000 		lds r25,jiffies+1
 7616 002e A091 0000 		lds r26,jiffies+2
 7617 0032 B091 0000 		lds r27,jiffies+3
 7618 0036 0196      		adiw r24,1
 7619 0038 A11D      		adc r26,__zero_reg__
 7620 003a B11D      		adc r27,__zero_reg__
 7621 003c 8093 0000 		sts jiffies,r24
 7622 0040 9093 0000 		sts jiffies+1,r25
 7623 0044 A093 0000 		sts jiffies+2,r26
 7624 0048 B093 0000 		sts jiffies+3,r27
  20:main.cpp      **** 	if(jiffies%100 == 0)
 7626               	.LM592:
 7627 004c 6091 0000 		lds r22,jiffies
 7628 0050 7091 0000 		lds r23,jiffies+1
 7629 0054 8091 0000 		lds r24,jiffies+2
 7630 0058 9091 0000 		lds r25,jiffies+3
 7631 005c 24E6      		ldi r18,lo8(100)
 7632 005e 30E0      		ldi r19,hi8(100)
 7633 0060 40E0      		ldi r20,hlo8(100)
 7634 0062 50E0      		ldi r21,hhi8(100)
 7635 0064 0E94 0000 		call __udivmodsi4
 7636 0068 DC01      		movw r26,r24
 7637 006a CB01      		movw r24,r22
 7638 006c 0097      		sbiw r24,0
 7639 006e A105      		cpc r26,__zero_reg__
 7640 0070 B105      		cpc r27,__zero_reg__
 7641 0072 01F4      		brne .L255
  22:main.cpp      **** 		servo_motor_on   = true;
 7643               	.LM593:
 7644 0074 81E0      		ldi r24,lo8(1)
 7645 0076 8093 0000 		sts servo_motor_on,r24
  23:main.cpp      **** 		sendmessage_fast = true;	
 7647               	.LM594:
 7648 007a 8093 0000 		sts sendmessage_fast,r24
 7649               	.L255:
  26:main.cpp      **** 	if(jiffies%200 == 0)
 7651               	.LM595:
 7652 007e 6091 0000 		lds r22,jiffies
 7653 0082 7091 0000 		lds r23,jiffies+1
 7654 0086 8091 0000 		lds r24,jiffies+2
 7655 008a 9091 0000 		lds r25,jiffies+3
 7656 008e 28EC      		ldi r18,lo8(200)
 7657 0090 30E0      		ldi r19,hi8(200)
 7658 0092 40E0      		ldi r20,hlo8(200)
 7659 0094 50E0      		ldi r21,hhi8(200)
 7660 0096 0E94 0000 		call __udivmodsi4
 7661 009a DC01      		movw r26,r24
 7662 009c CB01      		movw r24,r22
 7663 009e 0097      		sbiw r24,0
 7664 00a0 A105      		cpc r26,__zero_reg__
 7665 00a2 B105      		cpc r27,__zero_reg__
 7666 00a4 01F0      		breq .+2
 7667 00a6 00C0      		rjmp .L256
  28:main.cpp      **** 		use_sensor_data_on = true;
 7669               	.LM596:
 7670 00a8 81E0      		ldi r24,lo8(1)
 7671 00aa 8093 0000 		sts use_sensor_data_on,r24
  29:main.cpp      **** 		cnt4sensor++;
 7673               	.LM597:
 7674 00ae 8091 0000 		lds r24,cnt4sensor
 7675 00b2 9091 0000 		lds r25,cnt4sensor+1
 7676 00b6 A091 0000 		lds r26,cnt4sensor+2
 7677 00ba B091 0000 		lds r27,cnt4sensor+3
 7678 00be 0196      		adiw r24,1
 7679 00c0 A11D      		adc r26,__zero_reg__
 7680 00c2 B11D      		adc r27,__zero_reg__
 7681 00c4 8093 0000 		sts cnt4sensor,r24
 7682 00c8 9093 0000 		sts cnt4sensor+1,r25
 7683 00cc A093 0000 		sts cnt4sensor+2,r26
 7684 00d0 B093 0000 		sts cnt4sensor+3,r27
  31:main.cpp      **** 		if(sonar_attached)
 7686               	.LM598:
 7687 00d4 8091 0000 		lds r24,sonar_attached
 7688 00d8 8823      		tst r24
 7689 00da 01F4      		brne .+2
 7690 00dc 00C0      		rjmp .L257
  33:main.cpp      **** 			sensor_value = get_sonar_value();
 7692               	.LM599:
 7693 00de 0E94 0000 		call _Z15get_sonar_valuev
 7694 00e2 8093 0000 		sts sensor_value,r24
 7695 00e6 9093 0000 		sts sensor_value+1,r25
  35:main.cpp      **** 			if(sensor_value != 0 && sensor_value < RANGE3)
 7697               	.LM600:
 7698 00ea 9C01      		movw r18,r24
 7699 00ec 2150      		subi r18,lo8(-(-1))
 7700 00ee 3040      		sbci r19,hi8(-(-1))
 7701 00f0 293F      		cpi r18,249
 7702 00f2 3105      		cpc r19,__zero_reg__
 7703 00f4 00F4      		brsh .L258
  37:main.cpp      **** 				sensor_value_now = sensor_value;
 7705               	.LM601:
 7706 00f6 8093 0000 		sts sensor_value_now,r24
 7707 00fa 9093 0000 		sts sensor_value_now+1,r25
  38:main.cpp      **** 				if(dblchk) sum_dbl += sensor_value_now;
 7709               	.LM602:
 7710 00fe 2091 0000 		lds r18,dblchk
 7711 0102 2223      		tst r18
 7712 0104 01F0      		breq .L259
  38:main.cpp      **** 				if(dblchk) sum_dbl += sensor_value_now;
 7714               	.LM603:
 7715 0106 2091 0000 		lds r18,sum_dbl
 7716 010a 3091 0000 		lds r19,sum_dbl+1
 7717 010e 280F      		add r18,r24
 7718 0110 391F      		adc r19,r25
 7719 0112 2093 0000 		sts sum_dbl,r18
 7720 0116 3093 0000 		sts sum_dbl+1,r19
 7721               	.L259:
  39:main.cpp      **** 				if(trichk) sum_tri += sensor_value_now;
 7723               	.LM604:
 7724 011a 2091 0000 		lds r18,trichk
 7725 011e 2223      		tst r18
 7726 0120 01F0      		breq .L260
  39:main.cpp      **** 				if(trichk) sum_tri += sensor_value_now;
 7728               	.LM605:
 7729 0122 2091 0000 		lds r18,sum_tri
 7730 0126 3091 0000 		lds r19,sum_tri+1
 7731 012a 280F      		add r18,r24
 7732 012c 391F      		adc r19,r25
 7733 012e 2093 0000 		sts sum_tri,r18
 7734 0132 3093 0000 		sts sum_tri+1,r19
 7735 0136 00C0      		rjmp .L260
 7736               	.L258:
  41:main.cpp      **** 			else {dblchk = false; trichk = false;}
 7738               	.LM606:
 7739 0138 1092 0000 		sts dblchk,__zero_reg__
 7740 013c 1092 0000 		sts trichk,__zero_reg__
 7741               	.L260:
  43:main.cpp      **** 			if(cnt4sensor%2 == 0)
 7743               	.LM607:
 7744 0140 8091 0000 		lds r24,cnt4sensor
 7745 0144 9091 0000 		lds r25,cnt4sensor+1
 7746 0148 A091 0000 		lds r26,cnt4sensor+2
 7747 014c B091 0000 		lds r27,cnt4sensor+3
 7748 0150 80FD      		sbrc r24,0
 7749 0152 00C0      		rjmp .L261
  45:main.cpp      **** 				if(dblchk) 	sensor_value_dblchk = sum_dbl / 2;
 7751               	.LM608:
 7752 0154 8091 0000 		lds r24,dblchk
 7753 0158 8823      		tst r24
 7754 015a 01F0      		breq .L262
  45:main.cpp      **** 				if(dblchk) 	sensor_value_dblchk = sum_dbl / 2;
 7756               	.LM609:
 7757 015c 8091 0000 		lds r24,sum_dbl
 7758 0160 9091 0000 		lds r25,sum_dbl+1
 7759 0164 9695      		lsr r25
 7760 0166 8795      		ror r24
 7761 0168 8093 0000 		sts sensor_value_dblchk,r24
 7762 016c 9093 0000 		sts sensor_value_dblchk+1,r25
 7763 0170 00C0      		rjmp .L263
 7764               	.L262:
  46:main.cpp      **** 				else 		sensor_value_dblchk = 0;
 7766               	.LM610:
 7767 0172 1092 0000 		sts sensor_value_dblchk,__zero_reg__
 7768 0176 1092 0000 		sts sensor_value_dblchk+1,__zero_reg__
 7769               	.L263:
  47:main.cpp      **** 				sum_dbl = 0;
 7771               	.LM611:
 7772 017a 1092 0000 		sts sum_dbl,__zero_reg__
 7773 017e 1092 0000 		sts sum_dbl+1,__zero_reg__
  48:main.cpp      **** 				dblchk = true;
 7775               	.LM612:
 7776 0182 81E0      		ldi r24,lo8(1)
 7777 0184 8093 0000 		sts dblchk,r24
 7778               	.L261:
  51:main.cpp      **** 			if(cnt4sensor%3 == 0)
 7780               	.LM613:
 7781 0188 6091 0000 		lds r22,cnt4sensor
 7782 018c 7091 0000 		lds r23,cnt4sensor+1
 7783 0190 8091 0000 		lds r24,cnt4sensor+2
 7784 0194 9091 0000 		lds r25,cnt4sensor+3
 7785 0198 23E0      		ldi r18,lo8(3)
 7786 019a 30E0      		ldi r19,hi8(3)
 7787 019c 40E0      		ldi r20,hlo8(3)
 7788 019e 50E0      		ldi r21,hhi8(3)
 7789 01a0 0E94 0000 		call __udivmodsi4
 7790 01a4 DC01      		movw r26,r24
 7791 01a6 CB01      		movw r24,r22
 7792 01a8 0097      		sbiw r24,0
 7793 01aa A105      		cpc r26,__zero_reg__
 7794 01ac B105      		cpc r27,__zero_reg__
 7795 01ae 01F4      		brne .L257
  53:main.cpp      **** 				if(trichk) 	sensor_value_trichk = sum_tri / 3;
 7797               	.LM614:
 7798 01b0 8091 0000 		lds r24,trichk
 7799 01b4 8823      		tst r24
 7800 01b6 01F0      		breq .L264
  53:main.cpp      **** 				if(trichk) 	sensor_value_trichk = sum_tri / 3;
 7802               	.LM615:
 7803 01b8 8091 0000 		lds r24,sum_tri
 7804 01bc 9091 0000 		lds r25,sum_tri+1
 7805 01c0 63E0      		ldi r22,lo8(3)
 7806 01c2 70E0      		ldi r23,hi8(3)
 7807 01c4 0E94 0000 		call __udivmodhi4
 7808 01c8 6093 0000 		sts sensor_value_trichk,r22
 7809 01cc 7093 0000 		sts sensor_value_trichk+1,r23
 7810 01d0 00C0      		rjmp .L265
 7811               	.L264:
  54:main.cpp      **** 				else 		sensor_value_trichk = 0;
 7813               	.LM616:
 7814 01d2 1092 0000 		sts sensor_value_trichk,__zero_reg__
 7815 01d6 1092 0000 		sts sensor_value_trichk+1,__zero_reg__
 7816               	.L265:
  55:main.cpp      **** 				sum_tri = 0;
 7818               	.LM617:
 7819 01da 1092 0000 		sts sum_tri,__zero_reg__
 7820 01de 1092 0000 		sts sum_tri+1,__zero_reg__
  56:main.cpp      **** 				trichk = true;
 7822               	.LM618:
 7823 01e2 81E0      		ldi r24,lo8(1)
 7824 01e4 8093 0000 		sts trichk,r24
 7825               	.L257:
  60:main.cpp      **** 		display_on = true;
 7827               	.LM619:
 7828 01e8 81E0      		ldi r24,lo8(1)
 7829 01ea 8093 0000 		sts display_on,r24
 7830               	.L256:
  71:main.cpp      **** 	if(jiffies%1000 == 0)
 7832               	.LM620:
 7833 01ee 6091 0000 		lds r22,jiffies
 7834 01f2 7091 0000 		lds r23,jiffies+1
 7835 01f6 8091 0000 		lds r24,jiffies+2
 7836 01fa 9091 0000 		lds r25,jiffies+3
 7837 01fe 28EE      		ldi r18,lo8(1000)
 7838 0200 33E0      		ldi r19,hi8(1000)
 7839 0202 40E0      		ldi r20,hlo8(1000)
 7840 0204 50E0      		ldi r21,hhi8(1000)
 7841 0206 0E94 0000 		call __udivmodsi4
 7842 020a DC01      		movw r26,r24
 7843 020c CB01      		movw r24,r22
 7844 020e 0097      		sbiw r24,0
 7845 0210 A105      		cpc r26,__zero_reg__
 7846 0212 B105      		cpc r27,__zero_reg__
 7847 0214 01F4      		brne .L266
  73:main.cpp      **** 		if(communication_on) sec_counter++;
 7849               	.LM621:
 7850 0216 2091 0000 		lds r18,communication_on
 7851 021a 2223      		tst r18
 7852 021c 01F0      		breq .L267
  73:main.cpp      **** 		if(communication_on) sec_counter++;
 7854               	.LM622:
 7855 021e 8091 0000 		lds r24,sec_counter
 7856 0222 9091 0000 		lds r25,sec_counter+1
 7857 0226 0196      		adiw r24,1
 7858 0228 8093 0000 		sts sec_counter,r24
 7859 022c 9093 0000 		sts sec_counter+1,r25
 7860               	.L267:
  74:main.cpp      **** 		sync = true;		//synchro bit should be set every 1 sec
 7862               	.LM623:
 7863 0230 81E0      		ldi r24,lo8(1)
 7864 0232 8093 0000 		sts sync,r24
  75:main.cpp      **** 		rhythm_on = true;
 7866               	.LM624:
 7867 0236 8093 0000 		sts rhythm_on,r24
  76:main.cpp      **** 		sensor_value_now = 0;
 7869               	.LM625:
 7870 023a 1092 0000 		sts sensor_value_now,__zero_reg__
 7871 023e 1092 0000 		sts sensor_value_now+1,__zero_reg__
  78:main.cpp      **** 		if(!communication_on) LED_PORT.OUT =  LED_USR_0_PIN_bm;
 7873               	.LM626:
 7874 0242 E0E2      		ldi r30,lo8(1568)
 7875 0244 F6E0      		ldi r31,hi8(1568)
 7876 0246 2223      		tst r18
 7877 0248 01F4      		brne .L268
  78:main.cpp      **** 		if(!communication_on) LED_PORT.OUT =  LED_USR_0_PIN_bm;
 7879               	.LM627:
 7880 024a 8483      		std Z+4,r24
 7881 024c 00C0      		rjmp .L266
 7882               	.L268:
  79:main.cpp      **** 		if(communication_on)  LED_PORT.OUT = !LED_USR_0_PIN_bm;		
 7884               	.LM628:
 7885 024e 1482      		std Z+4,__zero_reg__
 7886               	.L266:
  81:main.cpp      **** 	xgrid.process();
 7888               	.LM629:
 7889 0250 80E0      		ldi r24,lo8(xgrid)
 7890 0252 90E0      		ldi r25,hi8(xgrid)
 7891 0254 0E94 0000 		call _ZN5Xgrid7processEv
 7892               	/* epilogue start */
  82:main.cpp      **** }
 7894               	.LM630:
 7895 0258 FF91      		pop r31
 7896 025a EF91      		pop r30
 7897 025c BF91      		pop r27
 7898 025e AF91      		pop r26
 7899 0260 9F91      		pop r25
 7900 0262 8F91      		pop r24
 7901 0264 7F91      		pop r23
 7902 0266 6F91      		pop r22
 7903 0268 5F91      		pop r21
 7904 026a 4F91      		pop r20
 7905 026c 3F91      		pop r19
 7906 026e 2F91      		pop r18
 7907 0270 0F90      		pop r0
 7908 0272 0BBE      		out 59-0,r0
 7909 0274 0F90      		pop r0
 7910 0276 0FBE      		out __SREG__,r0
 7911 0278 0F90      		pop r0
 7912 027a 1F90      		pop r1
 7913 027c 1895      		reti
 7915               	.Lscope32:
 7916               		.section	.text._Z9StageInitiPKc,"ax",@progbits
 7920               	.global	_Z9StageInitiPKc
 7922               	_Z9StageInitiPKc:
  85:main.cpp      **** {
 7924               	.LM631:
 7925               	.LFBB33:
 7926               	/* prologue: function */
 7927               	/* frame size = 0 */
 7928               	/* stack size = 0 */
 7929               	.L__stack_usage = 0
 7930 0000 9B01      		movw r18,r22
  86:main.cpp      **** 	if(sec_counter == StageTime && special)
 7932               	.LM632:
 7933 0002 4091 0000 		lds r20,sec_counter
 7934 0006 5091 0000 		lds r21,sec_counter+1
 7935 000a 4817      		cp r20,r24
 7936 000c 5907      		cpc r21,r25
 7937 000e 01F4      		brne .L269
  86:main.cpp      **** 	if(sec_counter == StageTime && special)
 7939               	.LM633:
 7940 0010 8091 0000 		lds r24,special
 7941 0014 8823      		tst r24
 7942 0016 01F0      		breq .L269
 7943               	.LBB82:
 7944               	.LBB83:
  88:main.cpp      **** 		send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, str);
 7946               	.LM634:
 7947 0018 81E0      		ldi r24,lo8(1)
 7948 001a 6FE3      		ldi r22,lo8(63)
 7949 001c 44E1      		ldi r20,lo8(20)
 7950 001e 50E0      		ldi r21,hi8(20)
 7951 0020 0E94 0000 		call _Z12send_messagehhiPKc
  89:main.cpp      **** 		init_variables();
 7953               	.LM635:
 7954 0024 0E94 0000 		call _Z14init_variablesv
 7955               	.L269:
 7956 0028 0895      		ret
 7957               	.LBE83:
 7958               	.LBE82:
 7960               	.Lscope33:
 7961               		.data
 7962               	.LC20:
 7963 0027 4000      		.string	"@"
 7964               		.section	.text.startup.main,"ax",@progbits
 7966               	.global	main
 7968               	main:
  97:main.cpp      **** {
 7970               	.LM636:
 7971               	.LFBB34:
 7972               	/* prologue: function */
 7973               	/* frame size = 0 */
 7974               	/* stack size = 0 */
 7975               	.L__stack_usage = 0
 7976               	.LBB84:
 100:main.cpp      **** 	xgrid.rx_pkt = &rx_pkt;
 7978               	.LM637:
 7979 0000 80E0      		ldi r24,lo8(gs(_Z6rx_pktPN5Xgrid6PacketE))
 7980 0002 90E0      		ldi r25,hi8(gs(_Z6rx_pktPN5Xgrid6PacketE))
 7981 0004 8093 0000 		sts xgrid+1543,r24
 7982 0008 9093 0000 		sts xgrid+1543+1,r25
 7983               	.LBB85:
 7984               	.LBB86:
 7986               	.Ltext12:
 7988               	.LM638:
 7989 000c 8FEF      		 ldi r24,lo8(319999)
 7990 000e 91EE      	    ldi r25,hi8(319999)
 7991 0010 A4E0      	    ldi r26,hlo8(319999)
 7992 0012 8150      	    1:subi r24,1
 7993 0014 9040      	    sbci r25,0
 7994 0016 A040      	    sbci r26,0
 7995 0018 01F4      	    brne 1b
 7996 001a 00C0      		rjmp .
 7997 001c 0000      		nop
 7998               	.LBE86:
 7999               	.LBE85:
 8001               	.Ltext13:
 105:main.cpp      ****     init();				//for board
 8003               	.LM639:
 8004 001e 0E94 0000 		call _Z4initv
 106:main.cpp      **** 	init_servo();		//for servo
 8006               	.LM640:
 8007 0022 0E94 0000 		call init_servo
 107:main.cpp      **** 	init_variables();	//for program
 8009               	.LM641:
 8010 0026 0E94 0000 		call _Z14init_variablesv
 108:main.cpp      **** 	init_sonar();		//for sensor
 8012               	.LM642:
 8013 002a 0E94 0000 		call _Z10init_sonarv
 110:main.cpp      **** 	fprintf_P(&usart_stream, PSTR("START (build number : %ld)\r\n"), (unsigned long) &__BUILD_NUMBER);
 8015               	.LM643:
 8016 002e ADB7      		in r26,__SP_L__
 8017 0030 BEB7      		in r27,__SP_H__
 8018 0032 1897      		sbiw r26,8
 8019 0034 ADBF      		out __SP_L__,r26
 8020 0036 BEBF      		out __SP_H__,r27
 8021 0038 EDB7      		in r30,__SP_L__
 8022 003a FEB7      		in r31,__SP_H__
 8023 003c 3196      		adiw r30,1
 8024 003e 80E0      		ldi r24,lo8(usart_stream)
 8025 0040 90E0      		ldi r25,hi8(usart_stream)
 8026 0042 1196      		adiw r26,1
 8027 0044 8D93      		st X+,r24
 8028 0046 9C93      		st X,r25
 8029 0048 1297      		sbiw r26,1+1
 8030 004a 80E0      		ldi r24,lo8(_ZZ4mainE3__c)
 8031 004c 90E0      		ldi r25,hi8(_ZZ4mainE3__c)
 8032 004e 8283      		std Z+2,r24
 8033 0050 9383      		std Z+3,r25
 8034 0052 80E0      		ldi r24,lo8(__BUILD_NUMBER)
 8035 0054 90E0      		ldi r25,hi8(__BUILD_NUMBER)
 8036 0056 AA27      		clr r26
 8037 0058 97FD      		sbrc r25,7
 8038 005a A095      		com r26
 8039 005c BA2F      		mov r27,r26
 8040 005e 8483      		std Z+4,r24
 8041 0060 9583      		std Z+5,r25
 8042 0062 A683      		std Z+6,r26
 8043 0064 B783      		std Z+7,r27
 8044 0066 0E94 0000 		call fprintf_P
 113:main.cpp      **** 	sonar_attached = check_sonar_attached();	//1:attached, 0:no
 8046               	.LM644:
 8047 006a EDB7      		in r30,__SP_L__
 8048 006c FEB7      		in r31,__SP_H__
 8049 006e 3896      		adiw r30,8
 8050 0070 EDBF      		out __SP_L__,r30
 8051 0072 FEBF      		out __SP_H__,r31
 8052 0074 0E94 0000 		call _Z20check_sonar_attachedv
 8053 0078 8093 0000 		sts sonar_attached,r24
 115:main.cpp      **** 	if(sonar_attached)	{LED_PORT.OUT = LED_USR_2_PIN_bm; _delay_ms(2000);}
 8055               	.LM645:
 8056 007c 8823      		tst r24
 8057 007e 01F0      		breq .L272
 115:main.cpp      **** 	if(sonar_attached)	{LED_PORT.OUT = LED_USR_2_PIN_bm; _delay_ms(2000);}
 8059               	.LM646:
 8060 0080 88E0      		ldi r24,lo8(8)
 8061 0082 00C0      		rjmp .L305
 8062               	.L272:
 116:main.cpp      **** 	else				{LED_PORT.OUT = LED_USR_0_PIN_bm; _delay_ms(2000);}
 8064               	.LM647:
 8065 0084 81E0      		ldi r24,lo8(1)
 8066               	.L305:
 8067 0086 E0E2      		ldi r30,lo8(1568)
 8068 0088 F6E0      		ldi r31,hi8(1568)
 8069 008a 8483      		std Z+4,r24
 8070               	.LBB87:
 8071               	.LBB88:
 8073               	.Ltext14:
 8075               	.LM648:
 8076 008c 8FEF      		 ldi r24,lo8(12799999)
 8077 008e 9FE4      	    ldi r25,hi8(12799999)
 8078 0090 A3EC      	    ldi r26,hlo8(12799999)
 8079 0092 8150      	    1:subi r24,1
 8080 0094 9040      	    sbci r25,0
 8081 0096 A040      	    sbci r26,0
 8082 0098 01F4      	    brne 1b
 8083 009a 00C0      		rjmp .
 8084 009c 0000      		nop
 8085               	.LBE88:
 8086               	.LBE87:
 8088               	.Ltext15:
 122:main.cpp      **** 	temp_time = jiffies + 2000;
 8090               	.LM649:
 8091 009e 8091 0000 		lds r24,jiffies
 8092 00a2 9091 0000 		lds r25,jiffies+1
 8093 00a6 A091 0000 		lds r26,jiffies+2
 8094 00aa B091 0000 		lds r27,jiffies+3
 8095 00ae 8053      		subi r24,lo8(-(2000))
 8096 00b0 984F      		sbci r25,hi8(-(2000))
 8097 00b2 AF4F      		sbci r26,hlo8(-(2000))
 8098 00b4 BF4F      		sbci r27,hhi8(-(2000))
 8099 00b6 8093 0000 		sts temp_time,r24
 8100 00ba 9093 0000 		sts temp_time+1,r25
 8101 00be A093 0000 		sts temp_time+2,r26
 8102 00c2 B093 0000 		sts temp_time+3,r27
 123:main.cpp      **** 	while(jiffies < temp_time)
 8104               	.LM650:
 8105 00c6 00C0      		rjmp .L274
 8106               	.L276:
 126:main.cpp      **** 		if(sendmessage_fast)
 8108               	.LM651:
 8109 00c8 2223      		tst r18
 8110 00ca 01F0      		breq .L275
 128:main.cpp      **** 			send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, "@");
 8112               	.LM652:
 8113 00cc 81E0      		ldi r24,lo8(1)
 8114 00ce 6FE3      		ldi r22,lo8(63)
 8115 00d0 44E1      		ldi r20,lo8(20)
 8116 00d2 50E0      		ldi r21,hi8(20)
 8117 00d4 20E0      		ldi r18,lo8(.LC20)
 8118 00d6 30E0      		ldi r19,hi8(.LC20)
 8119 00d8 0E94 0000 		call _Z12send_messagehhiPKc
 129:main.cpp      **** 			sendmessage_fast = false;
 8121               	.LM653:
 8122 00dc 1092 0000 		sts sendmessage_fast,__zero_reg__
 8123               	.L274:
 126:main.cpp      **** 		if(sendmessage_fast)
 8125               	.LM654:
 8126 00e0 2091 0000 		lds r18,sendmessage_fast
 8127               	.L275:
 123:main.cpp      **** 	while(jiffies < temp_time)
 8129               	.LM655:
 8130 00e4 4091 0000 		lds r20,jiffies
 8131 00e8 5091 0000 		lds r21,jiffies+1
 8132 00ec 6091 0000 		lds r22,jiffies+2
 8133 00f0 7091 0000 		lds r23,jiffies+3
 8134 00f4 8091 0000 		lds r24,temp_time
 8135 00f8 9091 0000 		lds r25,temp_time+1
 8136 00fc A091 0000 		lds r26,temp_time+2
 8137 0100 B091 0000 		lds r27,temp_time+3
 8138 0104 4817      		cp r20,r24
 8139 0106 5907      		cpc r21,r25
 8140 0108 6A07      		cpc r22,r26
 8141 010a 7B07      		cpc r23,r27
 8142 010c 00F0      		brlo .L276
 132:main.cpp      **** 	if(!connected[0] && connected[2] && connected[3] && !connected[4]) special = true;
 8144               	.LM656:
 8145 010e 8091 0000 		lds r24,connected
 8146 0112 8823      		tst r24
 8147 0114 01F4      		brne .L277
 132:main.cpp      **** 	if(!connected[0] && connected[2] && connected[3] && !connected[4]) special = true;
 8149               	.LM657:
 8150 0116 8091 0000 		lds r24,connected+2
 8151 011a 8823      		tst r24
 8152 011c 01F0      		breq .L277
 132:main.cpp      **** 	if(!connected[0] && connected[2] && connected[3] && !connected[4]) special = true;
 8154               	.LM658:
 8155 011e 8091 0000 		lds r24,connected+3
 8156 0122 8823      		tst r24
 8157 0124 01F0      		breq .L277
 132:main.cpp      **** 	if(!connected[0] && connected[2] && connected[3] && !connected[4]) special = true;
 8159               	.LM659:
 8160 0126 8091 0000 		lds r24,connected+4
 8161 012a 8823      		tst r24
 8162 012c 01F4      		brne .L277
 132:main.cpp      **** 	if(!connected[0] && connected[2] && connected[3] && !connected[4]) special = true;
 8164               	.LM660:
 8165 012e 81E0      		ldi r24,lo8(1)
 8166 0130 8093 0000 		sts special,r24
 8167               	.L277:
 8168               	.LBE84:
  97:main.cpp      **** {
 8170               	.LM661:
 8171 0134 C0E0      		ldi r28,lo8(0)
 8172 0136 D0E0      		ldi r29,lo8(0)
 8173 0138 10E0      		ldi r17,lo8(0)
 8174 013a 00E0      		ldi r16,lo8(0)
 8175 013c 30E0      		ldi r19,lo8(usart_stream)
 8176 013e E32E      		mov r14,r19
 8177 0140 30E0      		ldi r19,hi8(usart_stream)
 8178 0142 F32E      		mov r15,r19
 8179               	.LBB108:
 8180               	.LBB89:
 8181               	.LBB90:
 8182               	.LBB91:
 8183               	.LBB92:
 8184               	.LBB93:
 8185               	.LBB94:
 254:main.cpp      **** 				fprintf_P(&usart_stream, PSTR("sec cnt=%d\r\n"),sec_counter);
 8187               	.LM662:
 8188 0144 40E0      		ldi r20,lo8(_ZZ4mainE3__c_2)
 8189 0146 C42E      		mov r12,r20
 8190 0148 40E0      		ldi r20,hi8(_ZZ4mainE3__c_2)
 8191 014a D42E      		mov r13,r20
 8192               	.LBE94:
 8193               	.LBB95:
 252:main.cpp      **** 				fprintf_P(&usart_stream, PSTR("sec cnt=%d SONAR=%d, dblchk=%d,trichk=%d\r\n"),sec_counter, sens
 8195               	.LM663:
 8196 014c 50E0      		ldi r21,lo8(_ZZ4mainE3__c_1)
 8197 014e A52E      		mov r10,r21
 8198 0150 50E0      		ldi r21,hi8(_ZZ4mainE3__c_1)
 8199 0152 B52E      		mov r11,r21
 8200               	.LBE95:
 8201               	.LBE93:
 8202               	.LBB98:
 248:main.cpp      **** 			if(!communication_on) fprintf_P(&usart_stream, PSTR("NO COMM.\r\n"));
 8204               	.LM664:
 8205 0154 60E0      		ldi r22,lo8(_ZZ4mainE3__c_0)
 8206 0156 862E      		mov r8,r22
 8207 0158 60E0      		ldi r22,hi8(_ZZ4mainE3__c_0)
 8208 015a 962E      		mov r9,r22
 8209               	.L304:
 8210               	.LBE98:
 8211               	.LBE92:
 8212               	.LBE91:
 8213               	.LBE90:
 140:main.cpp      **** 		if(reboot_on)
 8215               	.LM665:
 8216 015c 8091 0000 		lds r24,reboot_on
 8217 0160 8823      		tst r24
 8218 0162 01F0      		breq .L279
 142:main.cpp      **** 			temp_time = jiffies + 3000;
 8220               	.LM666:
 8221 0164 8091 0000 		lds r24,jiffies
 8222 0168 9091 0000 		lds r25,jiffies+1
 8223 016c A091 0000 		lds r26,jiffies+2
 8224 0170 B091 0000 		lds r27,jiffies+3
 8225 0174 8854      		subi r24,lo8(-(3000))
 8226 0176 944F      		sbci r25,hi8(-(3000))
 8227 0178 AF4F      		sbci r26,hlo8(-(3000))
 8228 017a BF4F      		sbci r27,hhi8(-(3000))
 8229 017c 8093 0000 		sts temp_time,r24
 8230 0180 9093 0000 		sts temp_time+1,r25
 8231 0184 A093 0000 		sts temp_time+2,r26
 8232 0188 B093 0000 		sts temp_time+3,r27
 143:main.cpp      **** 			while(jiffies < temp_time){LED_PORT.OUTTGL = LED_USR_1_PIN_bm; _delay_ms(100);}
 8234               	.LM667:
 8235 018c E0E2      		ldi r30,lo8(1568)
 8236 018e F6E0      		ldi r31,hi8(1568)
 8237 0190 22E0      		ldi r18,lo8(2)
 8238 0192 00C0      		rjmp .L280
 8239               	.L281:
 143:main.cpp      **** 			while(jiffies < temp_time){LED_PORT.OUTTGL = LED_USR_1_PIN_bm; _delay_ms(100);}
 8241               	.LM668:
 8242 0194 2783      		std Z+7,r18
 8243               	.LBB103:
 8244               	.LBB104:
 8246               	.Ltext16:
 8248               	.LM669:
 8249 0196 8FEF      		 ldi r24,lo8(639999)
 8250 0198 93EC      	    ldi r25,hi8(639999)
 8251 019a A9E0      	    ldi r26,hlo8(639999)
 8252 019c 8150      	    1:subi r24,1
 8253 019e 9040      	    sbci r25,0
 8254 01a0 A040      	    sbci r26,0
 8255 01a2 01F4      	    brne 1b
 8256 01a4 00C0      		rjmp .
 8257 01a6 0000      		nop
 8258               	.L280:
 8259               	.LBE104:
 8260               	.LBE103:
 8262               	.Ltext17:
 143:main.cpp      **** 			while(jiffies < temp_time){LED_PORT.OUTTGL = LED_USR_1_PIN_bm; _delay_ms(100);}
 8264               	.LM670:
 8265 01a8 4091 0000 		lds r20,jiffies
 8266 01ac 5091 0000 		lds r21,jiffies+1
 8267 01b0 6091 0000 		lds r22,jiffies+2
 8268 01b4 7091 0000 		lds r23,jiffies+3
 8269 01b8 8091 0000 		lds r24,temp_time
 8270 01bc 9091 0000 		lds r25,temp_time+1
 8271 01c0 A091 0000 		lds r26,temp_time+2
 8272 01c4 B091 0000 		lds r27,temp_time+3
 8273 01c8 4817      		cp r20,r24
 8274 01ca 5907      		cpc r21,r25
 8275 01cc 6A07      		cpc r22,r26
 8276 01ce 7B07      		cpc r23,r27
 8277 01d0 00F0      		brlo .L281
 8278 01d2 00C0      		rjmp .L307
 8279               	.L279:
 148:main.cpp      **** 		key_input();
 8281               	.LM671:
 8282 01d4 0E94 0000 		call _Z9key_inputv
 151:main.cpp      **** 		if(sonar_attached && !communication_on)
 8284               	.LM672:
 8285 01d8 8091 0000 		lds r24,sonar_attached
 8286 01dc 8823      		tst r24
 8287 01de 01F0      		breq .L282
 151:main.cpp      **** 		if(sonar_attached && !communication_on)
 8289               	.LM673:
 8290 01e0 8091 0000 		lds r24,communication_on
 8291 01e4 8823      		tst r24
 8292 01e6 01F4      		brne .L282
 153:main.cpp      **** 			if(sensor_value_trichk > RANGE1 && sensor_value_trichk < RANGE3)
 8294               	.LM674:
 8295 01e8 8091 0000 		lds r24,sensor_value_trichk
 8296 01ec 9091 0000 		lds r25,sensor_value_trichk+1
 8297 01f0 C397      		sbiw r24,51
 8298 01f2 873C      		cpi r24,199
 8299 01f4 9105      		cpc r25,__zero_reg__
 8300 01f6 00F4      		brsh .L282
 155:main.cpp      **** 				send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, "R");
 8302               	.LM675:
 8303 01f8 81E0      		ldi r24,lo8(1)
 8304 01fa 6FE3      		ldi r22,lo8(63)
 8305 01fc 44E1      		ldi r20,lo8(20)
 8306 01fe 50E0      		ldi r21,hi8(20)
 8307 0200 20E0      		ldi r18,lo8(.LC7)
 8308 0202 30E0      		ldi r19,hi8(.LC7)
 8309 0204 0E94 0000 		call _Z12send_messagehhiPKc
 8310               	.LBB105:
 8311               	.LBB106:
 8313               	.Ltext18:
 8315               	.LM676:
 8316 0208 8FEF      		 ldi r24,lo8(639999)
 8317 020a 93EC      	    ldi r25,hi8(639999)
 8318 020c A9E0      	    ldi r26,hlo8(639999)
 8319 020e 8150      	    1:subi r24,1
 8320 0210 9040      	    sbci r25,0
 8321 0212 A040      	    sbci r26,0
 8322 0214 01F4      	    brne 1b
 8323 0216 00C0      		rjmp .
 8324 0218 0000      		nop
 8325               	.LBE106:
 8326               	.LBE105:
 8328               	.Ltext19:
 157:main.cpp      **** 				send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, "1");
 8330               	.LM677:
 8331 021a 81E0      		ldi r24,lo8(1)
 8332 021c 6FE3      		ldi r22,lo8(63)
 8333 021e 44E1      		ldi r20,lo8(20)
 8334 0220 50E0      		ldi r21,hi8(20)
 8335 0222 20E0      		ldi r18,lo8(.LC10)
 8336 0224 30E0      		ldi r19,hi8(.LC10)
 8337 0226 0E94 0000 		call _Z12send_messagehhiPKc
 158:main.cpp      **** 				communication_on = true;
 8339               	.LM678:
 8340 022a 81E0      		ldi r24,lo8(1)
 8341 022c 8093 0000 		sts communication_on,r24
 8342               	.L282:
 162:main.cpp      **** 		if(communication_on)
 8344               	.LM679:
 8345 0230 8091 0000 		lds r24,communication_on
 8346 0234 8823      		tst r24
 8347 0236 01F4      		brne .+2
 8348 0238 00C0      		rjmp .L283
 168:main.cpp      **** 			if(sendmessage_fast)
 8350               	.LM680:
 8351 023a 8091 0000 		lds r24,sendmessage_fast
 8352 023e 8823      		tst r24
 8353 0240 01F4      		brne .+2
 8354 0242 00C0      		rjmp .L284
 172:main.cpp      **** 				if(sec_counter < STGtime2) 
 8356               	.LM681:
 8357 0244 8091 0000 		lds r24,sec_counter
 8358 0248 9091 0000 		lds r25,sec_counter+1
 8359 024c 8639      		cpi r24,150
 8360 024e 9105      		cpc r25,__zero_reg__
 8361 0250 04F4      		brge .L285
 173:main.cpp      **** 					angle = 90 * Sync_Disorder(STGtime2);
 8363               	.LM682:
 8364 0252 86E9      		ldi r24,lo8(150)
 8365 0254 90E0      		ldi r25,hi8(150)
 8366 0256 0E94 0000 		call _Z13Sync_Disorderi
 8367 025a 20E0      		ldi r18,lo8(0x42b40000)
 8368 025c 30E0      		ldi r19,hi8(0x42b40000)
 8369 025e 44EB      		ldi r20,hlo8(0x42b40000)
 8370 0260 52E4      		ldi r21,hhi8(0x42b40000)
 8371 0262 0E94 0000 		call __mulsf3
 8372 0266 EB01      		movw r28,r22
 8373 0268 182F      		mov r17,r24
 8374 026a 092F      		mov r16,r25
 8375               	.L285:
 177:main.cpp      **** 				StageInit(STGtime2, "2");
 8377               	.LM683:
 8378 026c 86E9      		ldi r24,lo8(150)
 8379 026e 90E0      		ldi r25,hi8(150)
 8380 0270 60E0      		ldi r22,lo8(.LC11)
 8381 0272 70E0      		ldi r23,hi8(.LC11)
 8382 0274 0E94 0000 		call _Z9StageInitiPKc
 178:main.cpp      **** 				if(sec_counter > STGtime2 && sec_counter < STGtime3)
 8384               	.LM684:
 8385 0278 8091 0000 		lds r24,sec_counter
 8386 027c 9091 0000 		lds r25,sec_counter+1
 8387 0280 8759      		subi r24,lo8(-(-151))
 8388 0282 9040      		sbci r25,hi8(-(-151))
 8389 0284 8B33      		cpi r24,59
 8390 0286 9105      		cpc r25,__zero_reg__
 8391 0288 00F4      		brsh .L286
 179:main.cpp      **** 					angle = 45 * rhythm_control2();
 8393               	.LM685:
 8394 028a 0E94 0000 		call _Z15rhythm_control2v
 8395 028e 20E0      		ldi r18,lo8(0x42340000)
 8396 0290 30E0      		ldi r19,hi8(0x42340000)
 8397 0292 44E3      		ldi r20,hlo8(0x42340000)
 8398 0294 52E4      		ldi r21,hhi8(0x42340000)
 8399 0296 0E94 0000 		call __mulsf3
 8400 029a EB01      		movw r28,r22
 8401 029c 182F      		mov r17,r24
 8402 029e 092F      		mov r16,r25
 8403               	.L286:
 183:main.cpp      **** 				StageInit(STGtime3, "3");
 8405               	.LM686:
 8406 02a0 82ED      		ldi r24,lo8(210)
 8407 02a2 90E0      		ldi r25,hi8(210)
 8408 02a4 60E0      		ldi r22,lo8(.LC12)
 8409 02a6 70E0      		ldi r23,hi8(.LC12)
 8410 02a8 0E94 0000 		call _Z9StageInitiPKc
 184:main.cpp      **** 				if(sec_counter > STGtime3 && sec_counter < STGtime4)
 8412               	.LM687:
 8413 02ac 8091 0000 		lds r24,sec_counter
 8414 02b0 9091 0000 		lds r25,sec_counter+1
 8415 02b4 835D      		subi r24,lo8(-(-211))
 8416 02b6 9040      		sbci r25,hi8(-(-211))
 8417 02b8 8B33      		cpi r24,59
 8418 02ba 9105      		cpc r25,__zero_reg__
 8419 02bc 00F4      		brsh .L287
 185:main.cpp      **** 					angle = 90 * rhythm_control1();
 8421               	.LM688:
 8422 02be 0E94 0000 		call _Z15rhythm_control1v
 8423 02c2 20E0      		ldi r18,lo8(0x42b40000)
 8424 02c4 30E0      		ldi r19,hi8(0x42b40000)
 8425 02c6 44EB      		ldi r20,hlo8(0x42b40000)
 8426 02c8 52E4      		ldi r21,hhi8(0x42b40000)
 8427 02ca 0E94 0000 		call __mulsf3
 8428 02ce EB01      		movw r28,r22
 8429 02d0 182F      		mov r17,r24
 8430 02d2 092F      		mov r16,r25
 8431               	.L287:
 189:main.cpp      **** 				StageInit(STGtime4, "4");
 8433               	.LM689:
 8434 02d4 8EE0      		ldi r24,lo8(270)
 8435 02d6 91E0      		ldi r25,hi8(270)
 8436 02d8 60E0      		ldi r22,lo8(.LC13)
 8437 02da 70E0      		ldi r23,hi8(.LC13)
 8438 02dc 0E94 0000 		call _Z9StageInitiPKc
 190:main.cpp      **** 				if(sec_counter > STGtime4 && sec_counter < STGtime5)
 8440               	.LM690:
 8441 02e0 8091 0000 		lds r24,sec_counter
 8442 02e4 9091 0000 		lds r25,sec_counter+1
 8443 02e8 8F50      		subi r24,lo8(-(-271))
 8444 02ea 9140      		sbci r25,hi8(-(-271))
 8445 02ec 8D31      		cpi r24,29
 8446 02ee 9105      		cpc r25,__zero_reg__
 8447 02f0 00F4      		brsh .L288
 191:main.cpp      **** 					disable_servo();
 8449               	.LM691:
 8450 02f2 0E94 0000 		call disable_servo
 8451               	.L288:
 195:main.cpp      **** 				StageInit(STGtime5, "5");
 8453               	.LM692:
 8454 02f6 8CE2      		ldi r24,lo8(300)
 8455 02f8 91E0      		ldi r25,hi8(300)
 8456 02fa 60E0      		ldi r22,lo8(.LC14)
 8457 02fc 70E0      		ldi r23,hi8(.LC14)
 8458 02fe 0E94 0000 		call _Z9StageInitiPKc
 196:main.cpp      **** 				if(sec_counter > STGtime5 && sec_counter < STGtime6)
 8460               	.LM693:
 8461 0302 8091 0000 		lds r24,sec_counter
 8462 0306 9091 0000 		lds r25,sec_counter+1
 8463 030a 8D52      		subi r24,lo8(-(-301))
 8464 030c 9140      		sbci r25,hi8(-(-301))
 8465 030e 8B33      		cpi r24,59
 8466 0310 9105      		cpc r25,__zero_reg__
 8467 0312 00F4      		brsh .L289
 197:main.cpp      **** 					angle = 75 * Sync_Disorder(STGtime6);
 8469               	.LM694:
 8470 0314 88E6      		ldi r24,lo8(360)
 8471 0316 91E0      		ldi r25,hi8(360)
 8472 0318 0E94 0000 		call _Z13Sync_Disorderi
 8473 031c 20E0      		ldi r18,lo8(0x42960000)
 8474 031e 30E0      		ldi r19,hi8(0x42960000)
 8475 0320 46E9      		ldi r20,hlo8(0x42960000)
 8476 0322 52E4      		ldi r21,hhi8(0x42960000)
 8477 0324 0E94 0000 		call __mulsf3
 8478 0328 EB01      		movw r28,r22
 8479 032a 182F      		mov r17,r24
 8480 032c 092F      		mov r16,r25
 8481               	.L289:
 201:main.cpp      **** 				StageInit(STGtime6, "6");
 8483               	.LM695:
 8484 032e 88E6      		ldi r24,lo8(360)
 8485 0330 91E0      		ldi r25,hi8(360)
 8486 0332 60E0      		ldi r22,lo8(.LC15)
 8487 0334 70E0      		ldi r23,hi8(.LC15)
 8488 0336 0E94 0000 		call _Z9StageInitiPKc
 202:main.cpp      **** 				if(sec_counter > STGtime6 && sec_counter < STGtime7)
 8490               	.LM696:
 8491 033a 8091 0000 		lds r24,sec_counter
 8492 033e 9091 0000 		lds r25,sec_counter+1
 8493 0342 8956      		subi r24,lo8(-(-361))
 8494 0344 9140      		sbci r25,hi8(-(-361))
 8495 0346 8B33      		cpi r24,59
 8496 0348 9105      		cpc r25,__zero_reg__
 8497 034a 00F4      		brsh .L290
 203:main.cpp      **** 					angle = 90 * column();
 8499               	.LM697:
 8500 034c 0E94 0000 		call _Z6columnv
 8501 0350 20E0      		ldi r18,lo8(0x42b40000)
 8502 0352 30E0      		ldi r19,hi8(0x42b40000)
 8503 0354 44EB      		ldi r20,hlo8(0x42b40000)
 8504 0356 52E4      		ldi r21,hhi8(0x42b40000)
 8505 0358 0E94 0000 		call __mulsf3
 8506 035c EB01      		movw r28,r22
 8507 035e 182F      		mov r17,r24
 8508 0360 092F      		mov r16,r25
 8509               	.L290:
 207:main.cpp      **** 				StageInit(STGtime7, "7");
 8511               	.LM698:
 8512 0362 84EA      		ldi r24,lo8(420)
 8513 0364 91E0      		ldi r25,hi8(420)
 8514 0366 60E0      		ldi r22,lo8(.LC16)
 8515 0368 70E0      		ldi r23,hi8(.LC16)
 8516 036a 0E94 0000 		call _Z9StageInitiPKc
 208:main.cpp      **** 				if(sec_counter > STGtime7 && sec_counter < STGtime8)
 8518               	.LM699:
 8519 036e 8091 0000 		lds r24,sec_counter
 8520 0372 9091 0000 		lds r25,sec_counter+1
 8521 0376 855A      		subi r24,lo8(-(-421))
 8522 0378 9140      		sbci r25,hi8(-(-421))
 8523 037a 8B33      		cpi r24,59
 8524 037c 9105      		cpc r25,__zero_reg__
 8525 037e 00F4      		brsh .L291
 209:main.cpp      **** 					angle = 90 * plane_wave();
 8527               	.LM700:
 8528 0380 0E94 0000 		call _Z10plane_wavev
 8529 0384 20E0      		ldi r18,lo8(0x42b40000)
 8530 0386 30E0      		ldi r19,hi8(0x42b40000)
 8531 0388 44EB      		ldi r20,hlo8(0x42b40000)
 8532 038a 52E4      		ldi r21,hhi8(0x42b40000)
 8533 038c 0E94 0000 		call __mulsf3
 8534 0390 EB01      		movw r28,r22
 8535 0392 182F      		mov r17,r24
 8536 0394 092F      		mov r16,r25
 8537               	.L291:
 213:main.cpp      **** 				StageInit(STGtime8, "8");
 8539               	.LM701:
 8540 0396 80EE      		ldi r24,lo8(480)
 8541 0398 91E0      		ldi r25,hi8(480)
 8542 039a 60E0      		ldi r22,lo8(.LC17)
 8543 039c 70E0      		ldi r23,hi8(.LC17)
 8544 039e 0E94 0000 		call _Z9StageInitiPKc
 214:main.cpp      **** 				if(sec_counter > STGtime8 && sec_counter < STGtime9)
 8546               	.LM702:
 8547 03a2 8091 0000 		lds r24,sec_counter
 8548 03a6 9091 0000 		lds r25,sec_counter+1
 8549 03aa 815E      		subi r24,lo8(-(-481))
 8550 03ac 9140      		sbci r25,hi8(-(-481))
 8551 03ae 8935      		cpi r24,89
 8552 03b0 9105      		cpc r25,__zero_reg__
 8553 03b2 00F4      		brsh .L292
 215:main.cpp      **** 					angle = 90 * avalanche();
 8555               	.LM703:
 8556 03b4 0E94 0000 		call _Z9avalanchev
 8557 03b8 20E0      		ldi r18,lo8(0x42b40000)
 8558 03ba 30E0      		ldi r19,hi8(0x42b40000)
 8559 03bc 44EB      		ldi r20,hlo8(0x42b40000)
 8560 03be 52E4      		ldi r21,hhi8(0x42b40000)
 8561 03c0 0E94 0000 		call __mulsf3
 8562 03c4 EB01      		movw r28,r22
 8563 03c6 182F      		mov r17,r24
 8564 03c8 092F      		mov r16,r25
 8565               	.L292:
 219:main.cpp      **** 				StageInit(STGtime9, "9");
 8567               	.LM704:
 8568 03ca 8AE3      		ldi r24,lo8(570)
 8569 03cc 92E0      		ldi r25,hi8(570)
 8570 03ce 60E0      		ldi r22,lo8(.LC18)
 8571 03d0 70E0      		ldi r23,hi8(.LC18)
 8572 03d2 0E94 0000 		call _Z9StageInitiPKc
 220:main.cpp      **** 				if(sec_counter > STGtime9 && sec_counter < LASTtime)
 8574               	.LM705:
 8575 03d6 8091 0000 		lds r24,sec_counter
 8576 03da 9091 0000 		lds r25,sec_counter+1
 8577 03de 8B53      		subi r24,lo8(-(-571))
 8578 03e0 9240      		sbci r25,hi8(-(-571))
 8579 03e2 8B33      		cpi r24,59
 8580 03e4 9105      		cpc r25,__zero_reg__
 8581 03e6 00F4      		brsh .L293
 221:main.cpp      **** 					disable_servo();
 8583               	.LM706:
 8584 03e8 0E94 0000 		call disable_servo
 8585               	.L293:
 225:main.cpp      **** 				StageInit(LASTtime, "0");
 8587               	.LM707:
 8588 03ec 86E7      		ldi r24,lo8(630)
 8589 03ee 92E0      		ldi r25,hi8(630)
 8590 03f0 60E0      		ldi r22,lo8(.LC19)
 8591 03f2 70E0      		ldi r23,hi8(.LC19)
 8592 03f4 0E94 0000 		call _Z9StageInitiPKc
 226:main.cpp      **** 				if(sec_counter > LASTtime)
 8594               	.LM708:
 8595 03f8 8091 0000 		lds r24,sec_counter
 8596 03fc 9091 0000 		lds r25,sec_counter+1
 8597 0400 A2E0      		ldi r26,hi8(631)
 8598 0402 8737      		cpi r24,lo8(631)
 8599 0404 9A07      		cpc r25,r26
 8600 0406 04F0      		brlt .L294
 228:main.cpp      **** 					send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, "Z");
 8602               	.LM709:
 8603 0408 81E0      		ldi r24,lo8(1)
 8604 040a 6FE3      		ldi r22,lo8(63)
 8605 040c 44E1      		ldi r20,lo8(20)
 8606 040e 50E0      		ldi r21,hi8(20)
 8607 0410 20E0      		ldi r18,lo8(.LC5)
 8608 0412 30E0      		ldi r19,hi8(.LC5)
 8609 0414 0E94 0000 		call _Z12send_messagehhiPKc
 229:main.cpp      **** 					temp_time = jiffies + 3000;
 8611               	.LM710:
 8612 0418 8091 0000 		lds r24,jiffies
 8613 041c 9091 0000 		lds r25,jiffies+1
 8614 0420 A091 0000 		lds r26,jiffies+2
 8615 0424 B091 0000 		lds r27,jiffies+3
 8616 0428 8854      		subi r24,lo8(-(3000))
 8617 042a 944F      		sbci r25,hi8(-(3000))
 8618 042c AF4F      		sbci r26,hlo8(-(3000))
 8619 042e BF4F      		sbci r27,hhi8(-(3000))
 8620 0430 8093 0000 		sts temp_time,r24
 8621 0434 9093 0000 		sts temp_time+1,r25
 8622 0438 A093 0000 		sts temp_time+2,r26
 8623 043c B093 0000 		sts temp_time+3,r27
 8624               	.L295:
 230:main.cpp      **** 					while(jiffies < temp_time);
 8626               	.LM711:
 8627 0440 4091 0000 		lds r20,jiffies
 8628 0444 5091 0000 		lds r21,jiffies+1
 8629 0448 6091 0000 		lds r22,jiffies+2
 8630 044c 7091 0000 		lds r23,jiffies+3
 8631 0450 8091 0000 		lds r24,temp_time
 8632 0454 9091 0000 		lds r25,temp_time+1
 8633 0458 A091 0000 		lds r26,temp_time+2
 8634 045c B091 0000 		lds r27,temp_time+3
 8635 0460 4817      		cp r20,r24
 8636 0462 5907      		cpc r21,r25
 8637 0464 6A07      		cpc r22,r26
 8638 0466 7B07      		cpc r23,r27
 8639 0468 00F0      		brlo .L295
 8640               	.L307:
 231:main.cpp      **** 					xboot_reset();
 8642               	.LM712:
 8643 046a 0E94 0000 		call xboot_reset
 8644               	.L294:
 234:main.cpp      **** 				sendmessage_fast = false;
 8646               	.LM713:
 8647 046e 1092 0000 		sts sendmessage_fast,__zero_reg__
 8648               	.L284:
 238:main.cpp      **** 			if(servo_motor_on)
 8650               	.LM714:
 8651 0472 8091 0000 		lds r24,servo_motor_on
 8652 0476 8823      		tst r24
 8653 0478 01F0      		breq .L283
 240:main.cpp      **** 				set_servo_position(angle);
 8655               	.LM715:
 8656 047a 9801      		movw r18,r16
 8657 047c 8C2F      		mov r24,r28
 8658 047e 9D2F      		mov r25,r29
 8659 0480 A32F      		mov r26,r19
 8660 0482 B02F      		mov r27,r16
 8661 0484 BC01      		movw r22,r24
 8662 0486 CD01      		movw r24,r26
 8663 0488 0E94 0000 		call set_servo_position
 241:main.cpp      **** 				servo_motor_on = false;
 8665               	.LM716:
 8666 048c 1092 0000 		sts servo_motor_on,__zero_reg__
 8667               	.L283:
 8668               	.LBB107:
 246:main.cpp      **** 		if(display_on && display)
 8670               	.LM717:
 8671 0490 8091 0000 		lds r24,display_on
 8672 0494 8823      		tst r24
 8673 0496 01F4      		brne .+2
 8674 0498 00C0      		rjmp .L304
 246:main.cpp      **** 		if(display_on && display)
 8676               	.LM718:
 8677 049a 8091 0000 		lds r24,display
 8678 049e 8823      		tst r24
 8679 04a0 01F4      		brne .+2
 8680 04a2 00C0      		rjmp .L304
 8681               	.LBB102:
 8682               	.LBB101:
 248:main.cpp      **** 			if(!communication_on) fprintf_P(&usart_stream, PSTR("NO COMM.\r\n"));
 8684               	.LM719:
 8685 04a4 8091 0000 		lds r24,communication_on
 8686 04a8 8823      		tst r24
 8687 04aa 01F4      		brne .L297
 8688               	.LBB99:
 248:main.cpp      **** 			if(!communication_on) fprintf_P(&usart_stream, PSTR("NO COMM.\r\n"));
 8690               	.LM720:
 8691 04ac 00D0      		rcall .
 8692 04ae 0F92      		push __tmp_reg__
 8693 04b0 EDB7      		in r30,__SP_L__
 8694 04b2 FEB7      		in r31,__SP_H__
 8695 04b4 E182      		std Z+1,r14
 8696 04b6 F282      		std Z+2,r15
 8697 04b8 8382      		std Z+3,r8
 8698 04ba 9482      		std Z+4,r9
 8699 04bc 0E94 0000 		call fprintf_P
 8700 04c0 0F90      		pop __tmp_reg__
 8701 04c2 0F90      		pop __tmp_reg__
 8702 04c4 0F90      		pop __tmp_reg__
 8703 04c6 0F90      		pop __tmp_reg__
 8704 04c8 00C0      		rjmp .L298
 8705               	.L297:
 8706               	.LBE99:
 8707               	.LBB100:
 251:main.cpp      **** 				if(sonar_attached)
 8709               	.LM721:
 8710 04ca 8091 0000 		lds r24,sonar_attached
 8711 04ce 8823      		tst r24
 8712 04d0 01F0      		breq .L299
 8713               	.LBB96:
 252:main.cpp      **** 				fprintf_P(&usart_stream, PSTR("sec cnt=%d SONAR=%d, dblchk=%d,trichk=%d\r\n"),sec_counter, sens
 8715               	.LM722:
 8716 04d2 8DB7      		in r24,__SP_L__
 8717 04d4 9EB7      		in r25,__SP_H__
 8718 04d6 0C97      		sbiw r24,12
 8719 04d8 8DBF      		out __SP_L__,r24
 8720 04da 9EBF      		out __SP_H__,r25
 8721 04dc EDB7      		in r30,__SP_L__
 8722 04de FEB7      		in r31,__SP_H__
 8723 04e0 3196      		adiw r30,1
 8724 04e2 ADB7      		in r26,__SP_L__
 8725 04e4 BEB7      		in r27,__SP_H__
 8726 04e6 1196      		adiw r26,1
 8727 04e8 ED92      		st X+,r14
 8728 04ea FC92      		st X,r15
 8729 04ec 1297      		sbiw r26,1+1
 8730 04ee A282      		std Z+2,r10
 8731 04f0 B382      		std Z+3,r11
 8732 04f2 8091 0000 		lds r24,sec_counter
 8733 04f6 9091 0000 		lds r25,sec_counter+1
 8734 04fa 8483      		std Z+4,r24
 8735 04fc 9583      		std Z+5,r25
 8736 04fe 8091 0000 		lds r24,sensor_value
 8737 0502 9091 0000 		lds r25,sensor_value+1
 8738 0506 8683      		std Z+6,r24
 8739 0508 9783      		std Z+7,r25
 8740 050a 8091 0000 		lds r24,sensor_value_dblchk
 8741 050e 9091 0000 		lds r25,sensor_value_dblchk+1
 8742 0512 8087      		std Z+8,r24
 8743 0514 9187      		std Z+9,r25
 8744 0516 8091 0000 		lds r24,sensor_value_trichk
 8745 051a 9091 0000 		lds r25,sensor_value_trichk+1
 8746 051e 8287      		std Z+10,r24
 8747 0520 9387      		std Z+11,r25
 8748 0522 0E94 0000 		call fprintf_P
 8749 0526 EDB7      		in r30,__SP_L__
 8750 0528 FEB7      		in r31,__SP_H__
 8751 052a 3C96      		adiw r30,12
 8752 052c 00C0      		rjmp .L306
 8753               	.L299:
 8754               	.LBE96:
 8755               	.LBB97:
 254:main.cpp      **** 				fprintf_P(&usart_stream, PSTR("sec cnt=%d\r\n"),sec_counter);
 8757               	.LM723:
 8758 052e 00D0      		rcall .
 8759 0530 00D0      		rcall .
 8760 0532 EDB7      		in r30,__SP_L__
 8761 0534 FEB7      		in r31,__SP_H__
 8762 0536 3196      		adiw r30,1
 8763 0538 ADB7      		in r26,__SP_L__
 8764 053a BEB7      		in r27,__SP_H__
 8765 053c 1196      		adiw r26,1
 8766 053e ED92      		st X+,r14
 8767 0540 FC92      		st X,r15
 8768 0542 1297      		sbiw r26,1+1
 8769 0544 C282      		std Z+2,r12
 8770 0546 D382      		std Z+3,r13
 8771 0548 8091 0000 		lds r24,sec_counter
 8772 054c 9091 0000 		lds r25,sec_counter+1
 8773 0550 8483      		std Z+4,r24
 8774 0552 9583      		std Z+5,r25
 8775 0554 0E94 0000 		call fprintf_P
 8776 0558 EDB7      		in r30,__SP_L__
 8777 055a FEB7      		in r31,__SP_H__
 8778 055c 3696      		adiw r30,6
 8779               	.L306:
 8780 055e EDBF      		out __SP_L__,r30
 8781 0560 FEBF      		out __SP_H__,r31
 8782               	.L298:
 8783               	.LBE97:
 8784               	.LBE100:
 8785               	.LBE101:
 257:main.cpp      **** 			display_on = false;
 8787               	.LM724:
 8788 0562 1092 0000 		sts display_on,__zero_reg__
 8789 0566 00C0      		rjmp .L304
 8790               	.LBE102:
 8791               	.LBE107:
 8792               	.LBE89:
 8793               	.LBE108:
 8795               	.Lscope34:
 8796               		.section	.text.startup._GLOBAL__sub_I_agent0,"ax",@progbits
 8799               	_GLOBAL__sub_I_agent0:
 8801               	.LM725:
 8802               	.LFBB35:
 8803               	/* prologue: function */
 8804               	/* frame size = 0 */
 8805               	/* stack size = 0 */
 8806               	.L__stack_usage = 0
 8808               	.LM726:
 8809 0000 81E0      		ldi r24,lo8(1)
 8810 0002 90E0      		ldi r25,hi8(1)
 8811 0004 0E94 0000 		call _Z41__static_initialization_and_destruction_0ii.constprop.2
 8812               	/* epilogue start */
 8813 0008 0895      		ret
 8815               	.Lscope35:
 8816               		.global __do_global_ctors
 8817               		.section .ctors,"a",@progbits
 8818 0000 0000      		.word	gs(_GLOBAL__sub_I_agent0)
 8819               		.section	.text.exit._GLOBAL__sub_D_agent0,"ax",@progbits
 8822               	_GLOBAL__sub_D_agent0:
 8824               	.LM727:
 8825               	.LFBB36:
 8826               	/* prologue: function */
 8827               	/* frame size = 0 */
 8828               	/* stack size = 0 */
 8829               	.L__stack_usage = 0
 8831               	.LM728:
 8832 0000 80E0      		ldi r24,lo8(0)
 8833 0002 90E0      		ldi r25,hi8(0)
 8834 0004 0E94 0000 		call _Z41__static_initialization_and_destruction_0ii.constprop.2
 8835               	/* epilogue start */
 8836 0008 0895      		ret
 8838               	.Lscope36:
 8839               		.global __do_global_dtors
 8840               		.section .dtors,"a",@progbits
 8841 0000 0000      		.word	gs(_GLOBAL__sub_D_agent0)
 8842               	.global	forcey
 8843               		.section	.bss.forcey,"aw",@nobits
 8846               	forcey:
 8847 0000 0000 0000 		.skip 4,0
 8848               	.global	forcex
 8849               		.section	.bss.forcex,"aw",@nobits
 8852               	forcex:
 8853 0000 0000 0000 		.skip 4,0
 8854               	.global	tau0
 8855               		.section	.data.tau0,"aw",@progbits
 8858               	tau0:
 8859 0000 CD        		.byte	-51
 8860 0001 CC        		.byte	-52
 8861 0002 CC        		.byte	-52
 8862 0003 3D        		.byte	61
 8863               	.global	rc0
 8864               		.section	.data.rc0,"aw",@progbits
 8867               	rc0:
 8868 0000 00        		.byte	0
 8869 0001 00        		.byte	0
 8870 0002 C8        		.byte	-56
 8871 0003 41        		.byte	65
 8872               	.global	d0
 8873               		.section	.data.d0,"aw",@progbits
 8876               	d0:
 8877 0000 00        		.byte	0
 8878 0001 00        		.byte	0
 8879 0002 80        		.byte	-128
 8880 0003 3F        		.byte	63
 8881               	.global	ka0
 8882               		.section	.data.ka0,"aw",@progbits
 8885               	ka0:
 8886 0000 00        		.byte	0
 8887 0001 00        		.byte	0
 8888 0002 80        		.byte	-128
 8889 0003 3F        		.byte	63
 8890               	.global	gmma0
 8891               		.section	.data.gmma0,"aw",@progbits
 8894               	gmma0:
 8895 0000 00        		.byte	0
 8896 0001 00        		.byte	0
 8897 0002 80        		.byte	-128
 8898 0003 3F        		.byte	63
 8899               	.global	tau1
 8900               		.section	.data.tau1,"aw",@progbits
 8903               	tau1:
 8904 0000 00        		.byte	0
 8905 0001 00        		.byte	0
 8906 0002 80        		.byte	-128
 8907 0003 3F        		.byte	63
 8908               	.global	rc1
 8909               		.section	.data.rc1,"aw",@progbits
 8912               	rc1:
 8913 0000 00        		.byte	0
 8914 0001 00        		.byte	0
 8915 0002 A0        		.byte	-96
 8916 0003 41        		.byte	65
 8917               	.global	d1
 8918               		.section	.bss.d1,"aw",@nobits
 8921               	d1:
 8922 0000 0000 0000 		.skip 4,0
 8923               	.global	ka1
 8924               		.section	.data.ka1,"aw",@progbits
 8927               	ka1:
 8928 0000 CD        		.byte	-51
 8929 0001 CC        		.byte	-52
 8930 0002 CC        		.byte	-52
 8931 0003 3D        		.byte	61
 8932               	.global	gmma1
 8933               		.section	.data.gmma1,"aw",@progbits
 8936               	gmma1:
 8937 0000 00        		.byte	0
 8938 0001 00        		.byte	0
 8939 0002 A0        		.byte	-96
 8940 0003 40        		.byte	64
 8941               	.global	cf
 8942               		.section	.data.cf,"aw",@progbits
 8945               	cf:
 8946 0000 00        		.byte	0
 8947 0001 00        		.byte	0
 8948 0002 C8        		.byte	-56
 8949 0003 42        		.byte	66
 8950               	.global	acc
 8951               		.section	.data.acc,"aw",@progbits
 8954               	acc:
 8955 0000 00        		.byte	0
 8956 0001 00        		.byte	0
 8957 0002 A0        		.byte	-96
 8958 0003 41        		.byte	65
 8959               	.global	ld
 8960               		.section	.data.ld,"aw",@progbits
 8963               	ld:
 8964 0000 00        		.byte	0
 8965 0001 00        		.byte	0
 8966 0002 A0        		.byte	-96
 8967 0003 41        		.byte	65
 8968               	.global	dt
 8969               		.section	.data.dt,"aw",@progbits
 8972               	dt:
 8973 0000 0A        		.byte	10
 8974 0001 D7        		.byte	-41
 8975 0002 23        		.byte	35
 8976 0003 3C        		.byte	60
 8977               	.global	i2c
 8978               		.section	.bss.i2c,"aw",@nobits
 8981               	i2c:
 8982 0000 0000 0000 		.skip 9,0
 8982      0000 0000 
 8982      00
 8983               	.global	spi
 8984               		.section	.bss.spi,"aw",@nobits
 8987               	spi:
 8988 0000 0000 0000 		.skip 9,0
 8988      0000 0000 
 8988      00
 8989               	.global	xgrid
 8990               		.section	.bss.xgrid,"aw",@nobits
 8993               	xgrid:
 8994 0000 0000 0000 		.skip 1545,0
 8994      0000 0000 
 8994      0000 0000 
 8994      0000 0000 
 8994      0000 0000 
 8995               	.global	usart_n5
 8996               		.section	.bss.usart_n5,"aw",@nobits
 8999               	usart_n5:
 9000 0000 0000 0000 		.skip 31,0
 9000      0000 0000 
 9000      0000 0000 
 9000      0000 0000 
 9000      0000 0000 
 9001               	.global	usart_n5_rxbuf
 9002               		.section	.bss.usart_n5_rxbuf,"aw",@nobits
 9005               	usart_n5_rxbuf:
 9006 0000 0000 0000 		.skip 64,0
 9006      0000 0000 
 9006      0000 0000 
 9006      0000 0000 
 9006      0000 0000 
 9007               	.global	usart_n5_txbuf
 9008               		.section	.bss.usart_n5_txbuf,"aw",@nobits
 9011               	usart_n5_txbuf:
 9012 0000 0000 0000 		.skip 32,0
 9012      0000 0000 
 9012      0000 0000 
 9012      0000 0000 
 9012      0000 0000 
 9013               	.global	usart_n4
 9014               		.section	.bss.usart_n4,"aw",@nobits
 9017               	usart_n4:
 9018 0000 0000 0000 		.skip 31,0
 9018      0000 0000 
 9018      0000 0000 
 9018      0000 0000 
 9018      0000 0000 
 9019               	.global	usart_n4_rxbuf
 9020               		.section	.bss.usart_n4_rxbuf,"aw",@nobits
 9023               	usart_n4_rxbuf:
 9024 0000 0000 0000 		.skip 64,0
 9024      0000 0000 
 9024      0000 0000 
 9024      0000 0000 
 9024      0000 0000 
 9025               	.global	usart_n4_txbuf
 9026               		.section	.bss.usart_n4_txbuf,"aw",@nobits
 9029               	usart_n4_txbuf:
 9030 0000 0000 0000 		.skip 32,0
 9030      0000 0000 
 9030      0000 0000 
 9030      0000 0000 
 9030      0000 0000 
 9031               	.global	usart_n3
 9032               		.section	.bss.usart_n3,"aw",@nobits
 9035               	usart_n3:
 9036 0000 0000 0000 		.skip 31,0
 9036      0000 0000 
 9036      0000 0000 
 9036      0000 0000 
 9036      0000 0000 
 9037               	.global	usart_n3_rxbuf
 9038               		.section	.bss.usart_n3_rxbuf,"aw",@nobits
 9041               	usart_n3_rxbuf:
 9042 0000 0000 0000 		.skip 64,0
 9042      0000 0000 
 9042      0000 0000 
 9042      0000 0000 
 9042      0000 0000 
 9043               	.global	usart_n3_txbuf
 9044               		.section	.bss.usart_n3_txbuf,"aw",@nobits
 9047               	usart_n3_txbuf:
 9048 0000 0000 0000 		.skip 32,0
 9048      0000 0000 
 9048      0000 0000 
 9048      0000 0000 
 9048      0000 0000 
 9049               	.global	usart_n2
 9050               		.section	.bss.usart_n2,"aw",@nobits
 9053               	usart_n2:
 9054 0000 0000 0000 		.skip 31,0
 9054      0000 0000 
 9054      0000 0000 
 9054      0000 0000 
 9054      0000 0000 
 9055               	.global	usart_n2_rxbuf
 9056               		.section	.bss.usart_n2_rxbuf,"aw",@nobits
 9059               	usart_n2_rxbuf:
 9060 0000 0000 0000 		.skip 64,0
 9060      0000 0000 
 9060      0000 0000 
 9060      0000 0000 
 9060      0000 0000 
 9061               	.global	usart_n2_txbuf
 9062               		.section	.bss.usart_n2_txbuf,"aw",@nobits
 9065               	usart_n2_txbuf:
 9066 0000 0000 0000 		.skip 32,0
 9066      0000 0000 
 9066      0000 0000 
 9066      0000 0000 
 9066      0000 0000 
 9067               	.global	usart_n1
 9068               		.section	.bss.usart_n1,"aw",@nobits
 9071               	usart_n1:
 9072 0000 0000 0000 		.skip 31,0
 9072      0000 0000 
 9072      0000 0000 
 9072      0000 0000 
 9072      0000 0000 
 9073               	.global	usart_n1_rxbuf
 9074               		.section	.bss.usart_n1_rxbuf,"aw",@nobits
 9077               	usart_n1_rxbuf:
 9078 0000 0000 0000 		.skip 64,0
 9078      0000 0000 
 9078      0000 0000 
 9078      0000 0000 
 9078      0000 0000 
 9079               	.global	usart_n1_txbuf
 9080               		.section	.bss.usart_n1_txbuf,"aw",@nobits
 9083               	usart_n1_txbuf:
 9084 0000 0000 0000 		.skip 32,0
 9084      0000 0000 
 9084      0000 0000 
 9084      0000 0000 
 9084      0000 0000 
 9085               	.global	usart_n0
 9086               		.section	.bss.usart_n0,"aw",@nobits
 9089               	usart_n0:
 9090 0000 0000 0000 		.skip 31,0
 9090      0000 0000 
 9090      0000 0000 
 9090      0000 0000 
 9090      0000 0000 
 9091               	.global	usart_n0_rxbuf
 9092               		.section	.bss.usart_n0_rxbuf,"aw",@nobits
 9095               	usart_n0_rxbuf:
 9096 0000 0000 0000 		.skip 64,0
 9096      0000 0000 
 9096      0000 0000 
 9096      0000 0000 
 9096      0000 0000 
 9097               	.global	usart_n0_txbuf
 9098               		.section	.bss.usart_n0_txbuf,"aw",@nobits
 9101               	usart_n0_txbuf:
 9102 0000 0000 0000 		.skip 32,0
 9102      0000 0000 
 9102      0000 0000 
 9102      0000 0000 
 9102      0000 0000 
 9103               	.global	usart_stream
 9104               		.section	.bss.usart_stream,"aw",@nobits
 9107               	usart_stream:
 9108 0000 0000 0000 		.skip 14,0
 9108      0000 0000 
 9108      0000 0000 
 9108      0000 
 9109               	.global	usart
 9110               		.section	.bss.usart,"aw",@nobits
 9113               	usart:
 9114 0000 0000 0000 		.skip 31,0
 9114      0000 0000 
 9114      0000 0000 
 9114      0000 0000 
 9114      0000 0000 
 9115               	.global	usart_rxbuf
 9116               		.section	.bss.usart_rxbuf,"aw",@nobits
 9119               	usart_rxbuf:
 9120 0000 0000 0000 		.skip 64,0
 9120      0000 0000 
 9120      0000 0000 
 9120      0000 0000 
 9120      0000 0000 
 9121               	.global	usart_txbuf
 9122               		.section	.bss.usart_txbuf,"aw",@nobits
 9125               	usart_txbuf:
 9126 0000 0000 0000 		.skip 64,0
 9126      0000 0000 
 9126      0000 0000 
 9126      0000 0000 
 9126      0000 0000 
 9127               	.global	rhythm_on
 9128               		.section	.bss.rhythm_on,"aw",@nobits
 9131               	rhythm_on:
 9132 0000 00        		.skip 1,0
 9133               	.global	wave_port
 9134               		.section	.bss.wave_port,"aw",@nobits
 9137               	wave_port:
 9138 0000 00        		.skip 1,0
 9139               	.global	column_flg
 9140               		.section	.bss.column_flg,"aw",@nobits
 9143               	column_flg:
 9144 0000 00        		.skip 1,0
 9145               	.global	wave_ping
 9146               		.section	.bss.wave_ping,"aw",@nobits
 9149               	wave_ping:
 9150 0000 00        		.skip 1,0
 9151               	.global	wave_flg
 9152               		.section	.bss.wave_flg,"aw",@nobits
 9155               	wave_flg:
 9156 0000 00        		.skip 1,0
 9157               	.global	sync
 9158               		.section	.data.sync,"aw",@progbits
 9161               	sync:
 9162 0000 01        		.byte	1
 9163               	.global	special
 9164               		.section	.bss.special,"aw",@nobits
 9167               	special:
 9168 0000 00        		.skip 1,0
 9169               	.global	use_sensor_data_on
 9170               		.section	.bss.use_sensor_data_on,"aw",@nobits
 9173               	use_sensor_data_on:
 9174 0000 00        		.skip 1,0
 9175               	.global	speedup_on
 9176               		.section	.bss.speedup_on,"aw",@nobits
 9179               	speedup_on:
 9180 0000 00        		.skip 1,0
 9181               	.global	servo_motor_on
 9182               		.section	.bss.servo_motor_on,"aw",@nobits
 9185               	servo_motor_on:
 9186 0000 00        		.skip 1,0
 9187               	.global	reboot_on
 9188               		.section	.bss.reboot_on,"aw",@nobits
 9191               	reboot_on:
 9192 0000 00        		.skip 1,0
 9193               	.global	display_on
 9194               		.section	.bss.display_on,"aw",@nobits
 9197               	display_on:
 9198 0000 00        		.skip 1,0
 9199               	.global	display
 9200               		.section	.bss.display,"aw",@nobits
 9203               	display:
 9204 0000 00        		.skip 1,0
 9205               	.global	sendmessage_slow
 9206               		.section	.bss.sendmessage_slow,"aw",@nobits
 9209               	sendmessage_slow:
 9210 0000 00        		.skip 1,0
 9211               	.global	sendmessage_fast
 9212               		.section	.bss.sendmessage_fast,"aw",@nobits
 9215               	sendmessage_fast:
 9216 0000 00        		.skip 1,0
 9217               	.global	communication_on
 9218               		.section	.bss.communication_on,"aw",@nobits
 9221               	communication_on:
 9222 0000 00        		.skip 1,0
 9223               	.global	global_amp
 9224               		.section	.bss.global_amp,"aw",@nobits
 9227               	global_amp:
 9228 0000 0000 0000 		.skip 4,0
 9229               	.global	decay_tim
 9230               		.section	.bss.decay_tim,"aw",@nobits
 9233               	decay_tim:
 9234 0000 0000 0000 		.skip 4,0
 9235               	.global	sec_counter
 9236               		.section	.bss.sec_counter,"aw",@nobits
 9239               	sec_counter:
 9240 0000 0000      		.skip 2,0
 9241               	.global	sum_tri
 9242               		.section	.bss.sum_tri,"aw",@nobits
 9245               	sum_tri:
 9246 0000 0000      		.skip 2,0
 9247               	.global	sum_dbl
 9248               		.section	.bss.sum_dbl,"aw",@nobits
 9251               	sum_dbl:
 9252 0000 0000      		.skip 2,0
 9253               	.global	sensor_value_trichk
 9254               		.section	.bss.sensor_value_trichk,"aw",@nobits
 9257               	sensor_value_trichk:
 9258 0000 0000      		.skip 2,0
 9259               	.global	sensor_value_dblchk
 9260               		.section	.bss.sensor_value_dblchk,"aw",@nobits
 9263               	sensor_value_dblchk:
 9264 0000 0000      		.skip 2,0
 9265               	.global	sensor_value_now
 9266               		.section	.bss.sensor_value_now,"aw",@nobits
 9269               	sensor_value_now:
 9270 0000 0000      		.skip 2,0
 9271               	.global	sensor_value
 9272               		.section	.bss.sensor_value,"aw",@nobits
 9275               	sensor_value:
 9276 0000 0000      		.skip 2,0
 9277               	.global	trichk
 9278               		.section	.data.trichk,"aw",@progbits
 9281               	trichk:
 9282 0000 01        		.byte	1
 9283               	.global	dblchk
 9284               		.section	.data.dblchk,"aw",@progbits
 9287               	dblchk:
 9288 0000 01        		.byte	1
 9289               	.global	sonar_attached
 9290               		.section	.bss.sonar_attached,"aw",@nobits
 9293               	sonar_attached:
 9294 0000 00        		.skip 1,0
 9295               	.global	connected
 9296               		.section	.bss.connected,"aw",@nobits
 9299               	connected:
 9300 0000 0000 0000 		.skip 6,0
 9300      0000 
 9301               	.global	cnt4sensor
 9302               		.section	.bss.cnt4sensor,"aw",@nobits
 9305               	cnt4sensor:
 9306 0000 0000 0000 		.skip 4,0
 9307               	.global	temp_time
 9308               		.section	.bss.temp_time,"aw",@nobits
 9311               	temp_time:
 9312 0000 0000 0000 		.skip 4,0
 9313               	.global	jiffies
 9314               		.section	.bss.jiffies,"aw",@nobits
 9317               	jiffies:
 9318 0000 0000 0000 		.skip 4,0
 9319               	.global	mdata
 9320               		.section	.bss.mdata,"aw",@nobits
 9323               	mdata:
 9324 0000 0000 0000 		.skip 16,0
 9324      0000 0000 
 9324      0000 0000 
 9324      0000 0000 
 9325               	.global	agent3
 9326               		.section	.bss.agent3,"aw",@nobits
 9329               	agent3:
 9330 0000 0000 0000 		.skip 9,0
 9330      0000 0000 
 9330      00
 9331               	.global	agent2
 9332               		.section	.bss.agent2,"aw",@nobits
 9335               	agent2:
 9336 0000 0000 0000 		.skip 9,0
 9336      0000 0000 
 9336      00
 9337               	.global	agent1
 9338               		.section	.bss.agent1,"aw",@nobits
 9341               	agent1:
 9342 0000 0000 0000 		.skip 68,0
 9342      0000 0000 
 9342      0000 0000 
 9342      0000 0000 
 9342      0000 0000 
 9343               	.global	agent0
 9344               		.section	.bss.agent0,"aw",@nobits
 9347               	agent0:
 9348 0000 0000 0000 		.skip 68,0
 9348      0000 0000 
 9348      0000 0000 
 9348      0000 0000 
 9348      0000 0000 
 9349               		.section	.bss._ZZ15rhythm_control1vE8timestep,"aw",@nobits
 9352               	_ZZ15rhythm_control1vE8timestep:
 9353 0000 0000      		.skip 2,0
 9354               		.section	.bss._ZZ15rhythm_control2vE8timestep,"aw",@nobits
 9357               	_ZZ15rhythm_control2vE8timestep:
 9358 0000 0000      		.skip 2,0
 9359               		.section	.bss._ZZ15rhythm_control3vE8timestep,"aw",@nobits
 9362               	_ZZ15rhythm_control3vE8timestep:
 9363 0000 0000      		.skip 2,0
 9364               		.section	.progmem.data,"a",@progbits
 9367               	_ZZ9key_inputvE3__c:
 9368 0000 6275 696C 		.string	"build number = %ld\r\n"
 9368      6420 6E75 
 9368      6D62 6572 
 9368      203D 2025 
 9368      6C64 0D0A 
 9371               	_ZZ4mainE3__c:
 9372 0015 5354 4152 		.string	"START (build number : %ld)\r\n"
 9372      5420 2862 
 9372      7569 6C64 
 9372      206E 756D 
 9372      6265 7220 
 9375               	_ZZ4mainE3__c_0:
 9376 0032 4E4F 2043 		.string	"NO COMM.\r\n"
 9376      4F4D 4D2E 
 9376      0D0A 00
 9379               	_ZZ4mainE3__c_1:
 9380 003d 7365 6320 		.string	"sec cnt=%d SONAR=%d, dblchk=%d,trichk=%d\r\n"
 9380      636E 743D 
 9380      2564 2053 
 9380      4F4E 4152 
 9380      3D25 642C 
 9383               	_ZZ4mainE3__c_2:
 9384 0068 7365 6320 		.string	"sec cnt=%d\r\n"
 9384      636E 743D 
 9384      2564 0D0A 
 9384      00
 9463               	.global	__vector_119
 9464               		.set	__vector_119,__vector_120
 9465               	.global	__vector_25
 9466               		.set	__vector_25,__vector_26
 9467               	.global	__vector_28
 9468               		.set	__vector_28,__vector_29
 9469               	.global	__vector_88
 9470               		.set	__vector_88,__vector_89
 9471               	.global	__vector_91
 9472               		.set	__vector_91,__vector_92
 9473               	.global	__vector_58
 9474               		.set	__vector_58,__vector_59
 9475               	.global	__vector_61
 9476               		.set	__vector_61,__vector_62
 9477               		.text
 9479               	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 main.cpp
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:2      *ABS*:0000003f __SREG__
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:3      *ABS*:0000003e __SP_H__
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:4      *ABS*:0000003d __SP_L__
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:5      *ABS*:00000034 __CCP__
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:6      *ABS*:00000000 __tmp_reg__
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:7      *ABS*:00000001 __zero_reg__
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:656    .text._Z41__static_initialization_and_destruction_0ii.constprop.2:00000000 _Z41__static_initialization_and_destruction_0ii.constprop.2
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9113   .bss.usart:00000000 usart
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9089   .bss.usart_n0:00000000 usart_n0
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9071   .bss.usart_n1:00000000 usart_n1
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9053   .bss.usart_n2:00000000 usart_n2
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9035   .bss.usart_n3:00000000 usart_n3
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9017   .bss.usart_n4:00000000 usart_n4
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:8999   .bss.usart_n5:00000000 usart_n5
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:8993   .bss.xgrid:00000000 xgrid
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:8987   .bss.spi:00000000 spi
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:8981   .bss.i2c:00000000 i2c
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:803    .text.__vector_120:00000000 __vector_120
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:861    .text.__vector_26:00000000 __vector_26
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:919    .text.__vector_29:00000000 __vector_29
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:977    .text.__vector_89:00000000 __vector_89
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:1035   .text.__vector_92:00000000 __vector_92
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:1093   .text.__vector_59:00000000 __vector_59
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:1151   .text.__vector_62:00000000 __vector_62
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:1210   .text._Z22SP_ReadCalibrationByteh:00000000 _Z22SP_ReadCalibrationByteh
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:1252   .text._Z17SP_ReadUserSigRowh:00000000 _Z17SP_ReadUserSigRowh
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:1293   .text._Z4initv:00000000 _Z4initv
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9125   .bss.usart_txbuf:00000000 usart_txbuf
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9119   .bss.usart_rxbuf:00000000 usart_rxbuf
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9107   .bss.usart_stream:00000000 usart_stream
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9101   .bss.usart_n0_txbuf:00000000 usart_n0_txbuf
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9095   .bss.usart_n0_rxbuf:00000000 usart_n0_rxbuf
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9083   .bss.usart_n1_txbuf:00000000 usart_n1_txbuf
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9077   .bss.usart_n1_rxbuf:00000000 usart_n1_rxbuf
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9065   .bss.usart_n2_txbuf:00000000 usart_n2_txbuf
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9059   .bss.usart_n2_rxbuf:00000000 usart_n2_rxbuf
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9047   .bss.usart_n3_txbuf:00000000 usart_n3_txbuf
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9041   .bss.usart_n3_rxbuf:00000000 usart_n3_rxbuf
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9029   .bss.usart_n4_txbuf:00000000 usart_n4_txbuf
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9023   .bss.usart_n4_rxbuf:00000000 usart_n4_rxbuf
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9011   .bss.usart_n5_txbuf:00000000 usart_n5_txbuf
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9005   .bss.usart_n5_rxbuf:00000000 usart_n5_rxbuf
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:1745   .text._Z10init_sonarv:00000000 _Z10init_sonarv
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:1781   .text._Z15get_sonar_valuev:00000000 _Z15get_sonar_valuev
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:1916   .text._Z20check_sonar_attachedv:00000000 _Z20check_sonar_attachedv
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:2077   .text._Z18swarm_interaction0i:00000000 _Z18swarm_interaction0i
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:8963   .data.ld:00000000 ld
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9347   .bss.agent0:00000000 agent0
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:8867   .data.rc0:00000000 rc0
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:8876   .data.d0:00000000 d0
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:8945   .data.cf:00000000 cf
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:8852   .bss.forcex:00000000 forcex
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:8846   .bss.forcey:00000000 forcey
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:2608   .text._Z16swarm_disorderedv:00000000 _Z16swarm_disorderedv
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:8954   .data.acc:00000000 acc
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:8894   .data.gmma0:00000000 gmma0
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9299   .bss.connected:00000000 connected
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:8885   .data.ka0:00000000 ka0
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:8972   .data.dt:00000000 dt
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:8858   .data.tau0:00000000 tau0
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:3238   .text._Z18swarm_interaction1i:00000000 _Z18swarm_interaction1i
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9341   .bss.agent1:00000000 agent1
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:8912   .data.rc1:00000000 rc1
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:8921   .bss.d1:00000000 d1
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:3767   .text._Z18swarm_synchronizedv:00000000 _Z18swarm_synchronizedv
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:8936   .data.gmma1:00000000 gmma1
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:8927   .data.ka1:00000000 ka1
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:8903   .data.tau1:00000000 tau1
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:4399   .text._Z12send_messagehhiPKc:00000000 _Z12send_messagehhiPKc
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9323   .bss.mdata:00000000 mdata
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:4531   .text._Z9avalanchev:00000000 _Z9avalanchev
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9293   .bss.sonar_attached:00000000 sonar_attached
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9173   .bss.use_sensor_data_on:00000000 use_sensor_data_on
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9263   .bss.sensor_value_dblchk:00000000 sensor_value_dblchk
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9161   .data.sync:00000000 sync
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:4673   .text._Z13Sync_Disorderi:00000000 _Z13Sync_Disorderi
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9239   .bss.sec_counter:00000000 sec_counter
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9233   .bss.decay_tim:00000000 decay_tim
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9227   .bss.global_amp:00000000 global_amp
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9257   .bss.sensor_value_trichk:00000000 sensor_value_trichk
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:4947   .text._Z4wavev:00000000 _Z4wavev
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9335   .bss.agent2:00000000 agent2
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9149   .bss.wave_ping:00000000 wave_ping
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9155   .bss.wave_flg:00000000 wave_flg
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:5235   .text._Z6columnv:00000000 _Z6columnv
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9329   .bss.agent3:00000000 agent3
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9143   .bss.column_flg:00000000 column_flg
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:5496   .text._Z10plane_wavev:00000000 _Z10plane_wavev
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9137   .bss.wave_port:00000000 wave_port
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:5830   .text._Z6rhythmf:00000000 _Z6rhythmf
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9167   .bss.special:00000000 special
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:6118   .text._Z15rhythm_control3v:00000000 _Z15rhythm_control3v
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9131   .bss.rhythm_on:00000000 rhythm_on
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9362   .bss._ZZ15rhythm_control3vE8timestep:00000000 _ZZ15rhythm_control3vE8timestep
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:6170   .text._Z15rhythm_control2v:00000000 _Z15rhythm_control2v
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9357   .bss._ZZ15rhythm_control2vE8timestep:00000000 _ZZ15rhythm_control2vE8timestep
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:6256   .text._Z15rhythm_control1v:00000000 _Z15rhythm_control1v
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9352   .bss._ZZ15rhythm_control1vE8timestep:00000000 _ZZ15rhythm_control1vE8timestep
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:6386   .text._Z14init_variablesv:00000000 _Z14init_variablesv
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:6692   .text._Z6rx_pktPN5Xgrid6PacketE:00000000 _Z6rx_pktPN5Xgrid6PacketE
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9191   .bss.reboot_on:00000000 reboot_on
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9179   .bss.speedup_on:00000000 speedup_on
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9221   .bss.communication_on:00000000 communication_on
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:7083   .text._Z9key_inputv:00000000 _Z9key_inputv
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9317   .bss.jiffies:00000000 jiffies
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9311   .bss.temp_time:00000000 temp_time
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9367   .progmem.data:00000000 _ZZ9key_inputvE3__c
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9203   .bss.display:00000000 display
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:7583   .text.__vector_14:00000000 __vector_14
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9185   .bss.servo_motor_on:00000000 servo_motor_on
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9215   .bss.sendmessage_fast:00000000 sendmessage_fast
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9305   .bss.cnt4sensor:00000000 cnt4sensor
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9275   .bss.sensor_value:00000000 sensor_value
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9269   .bss.sensor_value_now:00000000 sensor_value_now
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9287   .data.dblchk:00000000 dblchk
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9251   .bss.sum_dbl:00000000 sum_dbl
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9281   .data.trichk:00000000 trichk
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9245   .bss.sum_tri:00000000 sum_tri
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9197   .bss.display_on:00000000 display_on
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:7922   .text._Z9StageInitiPKc:00000000 _Z9StageInitiPKc
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:7968   .text.startup.main:00000000 main
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9371   .progmem.data:00000015 _ZZ4mainE3__c
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9383   .progmem.data:00000068 _ZZ4mainE3__c_2
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9379   .progmem.data:0000003d _ZZ4mainE3__c_1
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9375   .progmem.data:00000032 _ZZ4mainE3__c_0
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:8799   .text.startup._GLOBAL__sub_I_agent0:00000000 _GLOBAL__sub_I_agent0
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:8822   .text.exit._GLOBAL__sub_D_agent0:00000000 _GLOBAL__sub_D_agent0
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:9209   .bss.sendmessage_slow:00000000 sendmessage_slow
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:803    .text.__vector_120:00000000 __vector_119
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:861    .text.__vector_26:00000000 __vector_25
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:919    .text.__vector_29:00000000 __vector_28
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:977    .text.__vector_89:00000000 __vector_88
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:1035   .text.__vector_92:00000000 __vector_91
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:1093   .text.__vector_59:00000000 __vector_58
/var/folders/4b/hs9cfcm15yl1b5_6khhnhq140000gn/T//ccHY4pug.s:1151   .text.__vector_62:00000000 __vector_61

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
_ZN5UsartC1EP12USART_struct
_ZN5XgridC1Ev
_ZN3SpiC1EP10SPI_struct
_ZN3I2cC1EP10TWI_struct
_ZN3I2cD1Ev
_ZN3SpiD1Ev
_ZN5XgridD1Ev
_ZN5UsartD1Ev
_ZN5Usart17handle_interruptsEPS_
_ZN5Usart13set_tx_bufferEPcj
_ZN5Usart13set_rx_bufferEPcj
_ZN5Usart5beginElcc
_ZN5Usart12setup_streamEP6__file
_ZN5Xgrid8add_nodeEP8IOStream
__subsf3
__mulsf3
__addsf3
sqrt
__nesf2
cos
sin
__divsf3
__gtsf2
__ltsf2
_ZN5Xgrid11send_packetEPNS_6PacketEj
exp
__gesf2
__floatsisf
enable_servo
set_servo_position
disable_servo
_ZN5Usart9availableEv
_ZN5Usart3getEv
xboot_reset
__BUILD_NUMBER
fprintf_P
__udivmodsi4
__udivmodhi4
_ZN5Xgrid7processEv
init_servo
__do_global_ctors
__do_global_dtors
