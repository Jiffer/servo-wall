
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006b7c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d0  00802000  00006b7c  00006c10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000ad9  008020d0  008020d0  00006ce0  2**0
                  ALLOC
  3 .stab         0001749c  00000000  00000000  00006ce0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0001ca72  00000000  00000000  0001e17c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0003abf0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fa7  00000000  00000000  0003ad70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005d1  00000000  00000000  0003bd17  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007dd  00000000  00000000  0003c2e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000012c  00000000  00000000  0003cac8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001e2  00000000  00000000  0003cbf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000712  00000000  00000000  0003cdd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0003d4e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 11 02 	jmp	0x422	; 0x422 <__dtors_end>
       4:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
       8:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
       c:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
      10:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
      14:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
      18:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
      1c:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
      20:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
      24:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
      28:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
      2c:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
      30:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
      34:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
      38:	0c 94 a3 18 	jmp	0x3146	; 0x3146 <__vector_14>
      3c:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
      40:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
      44:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
      48:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
      4c:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
      50:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
      54:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
      58:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
      5c:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
      60:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
      64:	0c 94 d9 02 	jmp	0x5b2	; 0x5b2 <__vector_25>
      68:	0c 94 d9 02 	jmp	0x5b2	; 0x5b2 <__vector_25>
      6c:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
      70:	0c 94 03 03 	jmp	0x606	; 0x606 <__vector_28>
      74:	0c 94 03 03 	jmp	0x606	; 0x606 <__vector_28>
      78:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
      7c:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
      80:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
      84:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
      88:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
      8c:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
      90:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
      94:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
      98:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
      9c:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
      a0:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
      a4:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
      a8:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
      ac:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
      b0:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
      b4:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
      b8:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
      bc:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
      c0:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
      c4:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
      c8:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
      cc:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
      d0:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
      d4:	0c 94 2e 2d 	jmp	0x5a5c	; 0x5a5c <__vector_53>
      d8:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
      dc:	0c 94 6d 2d 	jmp	0x5ada	; 0x5ada <__vector_55>
      e0:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
      e4:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
      e8:	0c 94 81 03 	jmp	0x702	; 0x702 <__vector_58>
      ec:	0c 94 81 03 	jmp	0x702	; 0x702 <__vector_58>
      f0:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
      f4:	0c 94 ab 03 	jmp	0x756	; 0x756 <__vector_61>
      f8:	0c 94 ab 03 	jmp	0x756	; 0x756 <__vector_61>
      fc:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
     100:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
     104:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
     108:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
     10c:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
     110:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
     114:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
     118:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
     11c:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
     120:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
     124:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
     128:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
     12c:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
     130:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
     134:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
     138:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
     13c:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
     140:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
     144:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
     148:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
     14c:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
     150:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
     154:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
     158:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
     15c:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
     160:	0c 94 2d 03 	jmp	0x65a	; 0x65a <__vector_88>
     164:	0c 94 2d 03 	jmp	0x65a	; 0x65a <__vector_88>
     168:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
     16c:	0c 94 57 03 	jmp	0x6ae	; 0x6ae <__vector_91>
     170:	0c 94 57 03 	jmp	0x6ae	; 0x6ae <__vector_91>
     174:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
     178:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
     17c:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
     180:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
     184:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
     188:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
     18c:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
     190:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
     194:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
     198:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
     19c:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
     1a0:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
     1a4:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
     1a8:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
     1ac:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
     1b0:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
     1b4:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
     1b8:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
     1bc:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
     1c0:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
     1c4:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
     1c8:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
     1cc:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
     1d0:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
     1d4:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
     1d8:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
     1dc:	0c 94 af 02 	jmp	0x55e	; 0x55e <__vector_119>
     1e0:	0c 94 af 02 	jmp	0x55e	; 0x55e <__vector_119>
     1e4:	0c 94 44 02 	jmp	0x488	; 0x488 <__bad_interrupt>
     1e8:	07 63       	ori	r16, 0x37	; 55
     1ea:	42 36       	cpi	r20, 0x62	; 98
     1ec:	b7 9b       	sbis	0x16, 7	; 22
     1ee:	d8 a7       	lds	r29, 0x78
     1f0:	1a 39       	cpi	r17, 0x9A	; 154
     1f2:	68 56       	subi	r22, 0x68	; 104
     1f4:	18 ae       	sts	0xb8, r17
     1f6:	ba ab       	sts	0x5a, r27
     1f8:	55 8c       	ldd	r5, Z+29	; 0x1d
     1fa:	1d 3c       	cpi	r17, 0xCD	; 205
     1fc:	b7 cc       	rjmp	.-1682   	; 0xfffffb6c <__BUILD_DATE+0xfeccd1bf>
     1fe:	57 63       	ori	r21, 0x37	; 55
     200:	bd 6d       	ori	r27, 0xDD	; 221
     202:	ed fd       	.word	0xfded	; ????
     204:	75 3e       	cpi	r23, 0xE5	; 229
     206:	f6 17       	cp	r31, r22
     208:	72 31       	cpi	r23, 0x12	; 18
     20a:	bf 00       	.word	0x00bf	; ????
     20c:	00 00       	nop
     20e:	80 3f       	cpi	r24, 0xF0	; 240
     210:	05 a8       	sts	0x85, r16
     212:	4c cd       	rjmp	.-1384   	; 0xfffffcac <__BUILD_DATE+0xfeccd2ff>
     214:	b2 d4       	rcall	.+2404   	; 0xb7a <_Z20check_sonar_attachedv+0x92>
     216:	4e b9       	out	0x0e, r20	; 14
     218:	38 36       	cpi	r19, 0x68	; 104
     21a:	a9 02       	muls	r26, r25
     21c:	0c 50       	subi	r16, 0x0C	; 12
     21e:	b9 91       	ld	r27, Y+
     220:	86 88       	ldd	r8, Z+22	; 0x16
     222:	08 3c       	cpi	r16, 0xC8	; 200
     224:	a6 aa       	sts	0x96, r26
     226:	aa 2a       	or	r10, r26
     228:	be 00       	.word	0x00be	; ????
     22a:	00 00       	nop
     22c:	80 3f       	cpi	r24, 0xF0	; 240

0000022e <_ZZ9key_inputvE3__c>:
     22e:	62 75 69 6c 64 20 6e 75 6d 62 65 72 20 3d 20 25     build number = %
     23e:	6c 64 0d 0a 00                                      ld...

00000243 <_ZZ4mainE3__c>:
     243:	53 54 41 52 54 20 28 62 75 69 6c 64 20 6e 75 6d     START (build num
     253:	62 65 72 20 3a 20 25 6c 64 29 0d 0a 00              ber : %ld)...

00000260 <_ZZ4mainE3__c_0>:
     260:	4e 4f 20 43 4f 4d 4d 2e 0d 0a 00                    NO COMM....

0000026b <_ZZ4mainE3__c_1>:
     26b:	73 65 63 20 63 6e 74 3d 25 64 20 53 4f 4e 41 52     sec cnt=%d SONAR
     27b:	3d 25 64 2c 20 64 62 6c 63 68 6b 3d 25 64 2c 74     =%d, dblchk=%d,t
     28b:	72 69 63 68 6b 3d 25 64 0d 0a 00                    richk=%d...

00000296 <_ZZ4mainE3__c_2>:
     296:	73 65 63 20 63 6e 74 3d 25 64 0d 0a 00              sec cnt=%d...

000002a3 <_ZZN5Xgrid7processEvE3__c>:
     2a3:	74 69 6d 65 6f 75 74 21 0a 00                       timeout!..

000002ad <_ZZN5Xgrid7processEvE3__c_0>:
     2ad:	69 6e 69 74 2c 20 73 65 6e 64 20 66 6c 75 73 68     init, send flush
     2bd:	20 63 6f 6d 6d 61 6e 64 0a 00                        command..

000002c7 <_ZZN5Xgrid7processEvE3__c_1>:
     2c7:	69 64 6c 65 2c 20 73 65 6e 64 20 76 65 72 73 69     idle, send versi
     2d7:	6f 6e 20 63 68 65 63 6b 0a 00                       on check..

000002e1 <_ZZN5Xgrid7processEvE3__c_2>:
     2e1:	63 68 65 63 6b 20 6e 65 69 67 68 62 6f 72 20 76     check neighbor v
     2f1:	65 72 73 69 6f 6e 73 0a 00                          ersions..

000002fa <_ZZN5Xgrid7processEvE3__c_3>:
     2fa:	75 70 64 61 74 65 20 63 68 65 63 6b 20 25 6c 64     update check %ld
     30a:	0a 00                                               ..

0000030c <_ZZN5Xgrid7processEvE3__c_4>:
     30c:	6e 6f 64 65 20 25 64 3a 20 25 6c 64 20 28 25 30     node %d: %ld (%0
     31c:	34 78 29 0a 00                                      4x)..

00000321 <_ZZN5Xgrid7processEvE3__c_5>:
     321:	73 65 6e 64 20 73 74 61 72 74 20 75 70 64 61 74     send start updat
     331:	65 20 63 6f 6d 6d 61 6e 64 0a 00                    e command..

0000033c <_ZZN5Xgrid7processEvE3__c_6>:
     33c:	73 65 6e 64 20 66 69 72 6d 77 61 72 65 20 62 6c     send firmware bl
     34c:	6f 63 6b 0a 00                                      ock..

00000351 <_ZZN5Xgrid7processEvE3__c_7>:
     351:	66 69 6e 69 73 68 65 64 20 73 65 6e 64 69 6e 67     finished sending
     361:	20 66 69 72 6d 77 61 72 65 0a 00                     firmware..

0000036c <_ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c>:
     36c:	72 78 20 70 69 6e 67 20 72 65 71 0a 00              rx ping req..

00000379 <_ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_0>:
     379:	72 78 20 70 69 6e 67 20 72 65 70 6c 79 0a 00        rx ping reply..

00000388 <_ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_1>:
     388:	72 78 20 6d 61 69 6e 74 20 63 6d 64 0a 00           rx maint cmd..

00000396 <_ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_2>:
     396:	73 74 61 72 74 20 75 70 64 61 74 65 0a 00           start update..

000003a4 <_ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_3>:
     3a4:	66 69 6e 69 73 68 20 75 70 64 61 74 65 0a 00        finish update..

000003b3 <_ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_4>:
     3b3:	6e 65 77 20 63 72 63 3a 20 25 30 34 78 0a 00        new crc: %04x..

000003c2 <_ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_5>:
     3c2:	63 75 72 20 63 72 63 3a 20 25 30 34 78 0a 00        cur crc: %04x..

000003d1 <_ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_6>:
     3d1:	67 6f 6f 64 20 63 72 63 0a 00                       good crc..

000003db <_ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_7>:
     3db:	62 61 64 20 63 72 63 0a 00                          bad crc..

000003e4 <_ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_8>:
     3e4:	61 62 6f 72 74 20 75 70 64 61 74 65 0a 00           abort update..

000003f2 <_ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_9>:
     3f2:	72 65 73 65 74 0a 00                                reset..

000003f9 <_ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_10>:
     3f9:	72 78 20 66 69 72 6d 77 61 72 65 20 62 6c 6f 63     rx firmware bloc
     409:	6b 0a 00                                            k..

0000040c <_ZZN5Xgrid23internal_process_packetEPNS_6PacketEE3__c_11>:
     40c:	72 78 20 66 6c 75 73 68 20 62 75 66 66 65 72 0a     rx flush buffer.
	...

0000041e <__ctors_start>:
     41e:	ab 1c       	adc	r10, r11

00000420 <__ctors_end>:
     420:	b0 1c       	adc	r11, r0

00000422 <__dtors_end>:
     422:	11 24       	eor	r1, r1
     424:	1f be       	out	0x3f, r1	; 63
     426:	cf ef       	ldi	r28, 0xFF	; 255
     428:	df e3       	ldi	r29, 0x3F	; 63
     42a:	de bf       	out	0x3e, r29	; 62
     42c:	cd bf       	out	0x3d, r28	; 61
     42e:	00 e0       	ldi	r16, 0x00	; 0
     430:	0c bf       	out	0x3c, r16	; 60

00000432 <__do_copy_data>:
     432:	10 e2       	ldi	r17, 0x20	; 32
     434:	a0 e0       	ldi	r26, 0x00	; 0
     436:	b0 e2       	ldi	r27, 0x20	; 32
     438:	ec e7       	ldi	r30, 0x7C	; 124
     43a:	fb e6       	ldi	r31, 0x6B	; 107
     43c:	00 e0       	ldi	r16, 0x00	; 0
     43e:	0b bf       	out	0x3b, r16	; 59
     440:	02 c0       	rjmp	.+4      	; 0x446 <__do_copy_data+0x14>
     442:	07 90       	elpm	r0, Z+
     444:	0d 92       	st	X+, r0
     446:	a0 3d       	cpi	r26, 0xD0	; 208
     448:	b1 07       	cpc	r27, r17
     44a:	d9 f7       	brne	.-10     	; 0x442 <__do_copy_data+0x10>
     44c:	1b be       	out	0x3b, r1	; 59

0000044e <__do_clear_bss>:
     44e:	1b e2       	ldi	r17, 0x2B	; 43
     450:	a0 ed       	ldi	r26, 0xD0	; 208
     452:	b0 e2       	ldi	r27, 0x20	; 32
     454:	01 c0       	rjmp	.+2      	; 0x458 <.do_clear_bss_start>

00000456 <.do_clear_bss_loop>:
     456:	1d 92       	st	X+, r1

00000458 <.do_clear_bss_start>:
     458:	a9 3a       	cpi	r26, 0xA9	; 169
     45a:	b1 07       	cpc	r27, r17
     45c:	e1 f7       	brne	.-8      	; 0x456 <.do_clear_bss_loop>

0000045e <__do_global_ctors>:
     45e:	14 e0       	ldi	r17, 0x04	; 4
     460:	c0 e2       	ldi	r28, 0x20	; 32
     462:	d4 e0       	ldi	r29, 0x04	; 4
     464:	00 e0       	ldi	r16, 0x00	; 0
     466:	06 c0       	rjmp	.+12     	; 0x474 <__do_global_ctors+0x16>
     468:	22 97       	sbiw	r28, 0x02	; 2
     46a:	01 09       	sbc	r16, r1
     46c:	fe 01       	movw	r30, r28
     46e:	0b bf       	out	0x3b, r16	; 59
     470:	0e 94 c9 32 	call	0x6592	; 0x6592 <__tablejump_elpm__>
     474:	ce 31       	cpi	r28, 0x1E	; 30
     476:	d1 07       	cpc	r29, r17
     478:	80 e0       	ldi	r24, 0x00	; 0
     47a:	08 07       	cpc	r16, r24
     47c:	a9 f7       	brne	.-22     	; 0x468 <__do_global_ctors+0xa>
     47e:	1b be       	out	0x3b, r1	; 59
     480:	0e 94 f7 19 	call	0x33ee	; 0x33ee <main>
     484:	0c 94 ab 35 	jmp	0x6b56	; 0x6b56 <__do_global_dtors>

00000488 <__bad_interrupt>:
     488:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000048c <_Z41__static_initialization_and_destruction_0ii.constprop.2>:
			display_on = false;
		}
	}
	
	return 0;
}
     48c:	81 30       	cpi	r24, 0x01	; 1
     48e:	91 05       	cpc	r25, r1
     490:	d9 f5       	brne	.+118    	; 0x508 <__BUILD_NUMBER+0x55>
// USART
#define USART_TX_BUF_SIZE 64
#define USART_RX_BUF_SIZE 64
char usart_txbuf[USART_TX_BUF_SIZE];
char usart_rxbuf[USART_RX_BUF_SIZE];
CREATE_USART(usart, UART_DEVICE_PORT);
     492:	8f ef       	ldi	r24, 0xFF	; 255
     494:	99 e2       	ldi	r25, 0x29	; 41
     496:	60 ea       	ldi	r22, 0xA0	; 160
     498:	7b e0       	ldi	r23, 0x0B	; 11
     49a:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <_ZN5UsartC1EP12USART_struct>

#define NODE_TX_BUF_SIZE 32
#define NODE_RX_BUF_SIZE 64
char usart_n0_txbuf[NODE_TX_BUF_SIZE];
char usart_n0_rxbuf[NODE_RX_BUF_SIZE];
CREATE_USART(usart_n0, USART_N0_DEVICE_PORT);
     49e:	82 e7       	ldi	r24, 0x72	; 114
     4a0:	99 e2       	ldi	r25, 0x29	; 41
     4a2:	60 ea       	ldi	r22, 0xA0	; 160
     4a4:	78 e0       	ldi	r23, 0x08	; 8
     4a6:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <_ZN5UsartC1EP12USART_struct>
char usart_n1_txbuf[NODE_TX_BUF_SIZE];
char usart_n1_rxbuf[NODE_RX_BUF_SIZE];
CREATE_USART(usart_n1, USART_N1_DEVICE_PORT);
     4aa:	83 ef       	ldi	r24, 0xF3	; 243
     4ac:	98 e2       	ldi	r25, 0x28	; 40
     4ae:	60 eb       	ldi	r22, 0xB0	; 176
     4b0:	78 e0       	ldi	r23, 0x08	; 8
     4b2:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <_ZN5UsartC1EP12USART_struct>
char usart_n2_txbuf[NODE_TX_BUF_SIZE];
char usart_n2_rxbuf[NODE_RX_BUF_SIZE];
CREATE_USART(usart_n2, USART_N2_DEVICE_PORT);
     4b6:	84 e7       	ldi	r24, 0x74	; 116
     4b8:	98 e2       	ldi	r25, 0x28	; 40
     4ba:	60 ea       	ldi	r22, 0xA0	; 160
     4bc:	79 e0       	ldi	r23, 0x09	; 9
     4be:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <_ZN5UsartC1EP12USART_struct>
char usart_n3_txbuf[NODE_TX_BUF_SIZE];
char usart_n3_rxbuf[NODE_RX_BUF_SIZE];
CREATE_USART(usart_n3, USART_N3_DEVICE_PORT);
     4c2:	85 ef       	ldi	r24, 0xF5	; 245
     4c4:	97 e2       	ldi	r25, 0x27	; 39
     4c6:	60 eb       	ldi	r22, 0xB0	; 176
     4c8:	79 e0       	ldi	r23, 0x09	; 9
     4ca:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <_ZN5UsartC1EP12USART_struct>
char usart_n4_txbuf[NODE_TX_BUF_SIZE];
char usart_n4_rxbuf[NODE_RX_BUF_SIZE];
CREATE_USART(usart_n4, USART_N4_DEVICE_PORT);
     4ce:	86 e7       	ldi	r24, 0x76	; 118
     4d0:	97 e2       	ldi	r25, 0x27	; 39
     4d2:	60 ea       	ldi	r22, 0xA0	; 160
     4d4:	7a e0       	ldi	r23, 0x0A	; 10
     4d6:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <_ZN5UsartC1EP12USART_struct>
char usart_n5_txbuf[NODE_TX_BUF_SIZE];
char usart_n5_rxbuf[NODE_RX_BUF_SIZE];
CREATE_USART(usart_n5, USART_N5_DEVICE_PORT);
     4da:	87 ef       	ldi	r24, 0xF7	; 247
     4dc:	96 e2       	ldi	r25, 0x26	; 38
     4de:	60 eb       	ldi	r22, 0xB0	; 176
     4e0:	7a e0       	ldi	r23, 0x0A	; 10
     4e2:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <_ZN5UsartC1EP12USART_struct>

Xgrid xgrid;
     4e6:	8e ee       	ldi	r24, 0xEE	; 238
     4e8:	90 e2       	ldi	r25, 0x20	; 32
     4ea:	0e 94 c4 21 	call	0x4388	; 0x4388 <_ZN5XgridC1Ev>

// SPI

Spi spi(&SPI_DEV);
     4ee:	85 ee       	ldi	r24, 0xE5	; 229
     4f0:	90 e2       	ldi	r25, 0x20	; 32
     4f2:	60 ec       	ldi	r22, 0xC0	; 192
     4f4:	78 e0       	ldi	r23, 0x08	; 8
     4f6:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <_ZN3SpiC1EP10SPI_struct>

// I2C

I2c i2c(&I2C_DEV);
     4fa:	8c ed       	ldi	r24, 0xDC	; 220
     4fc:	90 e2       	ldi	r25, 0x20	; 32
     4fe:	60 ea       	ldi	r22, 0xA0	; 160
     500:	74 e0       	ldi	r23, 0x04	; 4
     502:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <_ZN3I2cC1EP10TWI_struct>
     506:	08 95       	ret
     508:	00 97       	sbiw	r24, 0x00	; 0
     50a:	41 f5       	brne	.+80     	; 0x55c <__BUILD_NUMBER+0xa9>
     50c:	8c ed       	ldi	r24, 0xDC	; 220
     50e:	90 e2       	ldi	r25, 0x20	; 32
     510:	0e 94 16 21 	call	0x422c	; 0x422c <_ZN3I2cD1Ev>

Xgrid xgrid;

// SPI

Spi spi(&SPI_DEV);
     514:	85 ee       	ldi	r24, 0xE5	; 229
     516:	90 e2       	ldi	r25, 0x20	; 32
     518:	0e 94 81 20 	call	0x4102	; 0x4102 <_ZN3SpiD1Ev>
CREATE_USART(usart_n4, USART_N4_DEVICE_PORT);
char usart_n5_txbuf[NODE_TX_BUF_SIZE];
char usart_n5_rxbuf[NODE_RX_BUF_SIZE];
CREATE_USART(usart_n5, USART_N5_DEVICE_PORT);

Xgrid xgrid;
     51c:	8e ee       	ldi	r24, 0xEE	; 238
     51e:	90 e2       	ldi	r25, 0x20	; 32
     520:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <_ZN5XgridD1Ev>
char usart_n4_txbuf[NODE_TX_BUF_SIZE];
char usart_n4_rxbuf[NODE_RX_BUF_SIZE];
CREATE_USART(usart_n4, USART_N4_DEVICE_PORT);
char usart_n5_txbuf[NODE_TX_BUF_SIZE];
char usart_n5_rxbuf[NODE_RX_BUF_SIZE];
CREATE_USART(usart_n5, USART_N5_DEVICE_PORT);
     524:	87 ef       	ldi	r24, 0xF7	; 247
     526:	96 e2       	ldi	r25, 0x26	; 38
     528:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <_ZN5UsartD1Ev>
char usart_n3_txbuf[NODE_TX_BUF_SIZE];
char usart_n3_rxbuf[NODE_RX_BUF_SIZE];
CREATE_USART(usart_n3, USART_N3_DEVICE_PORT);
char usart_n4_txbuf[NODE_TX_BUF_SIZE];
char usart_n4_rxbuf[NODE_RX_BUF_SIZE];
CREATE_USART(usart_n4, USART_N4_DEVICE_PORT);
     52c:	86 e7       	ldi	r24, 0x76	; 118
     52e:	97 e2       	ldi	r25, 0x27	; 39
     530:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <_ZN5UsartD1Ev>
char usart_n2_txbuf[NODE_TX_BUF_SIZE];
char usart_n2_rxbuf[NODE_RX_BUF_SIZE];
CREATE_USART(usart_n2, USART_N2_DEVICE_PORT);
char usart_n3_txbuf[NODE_TX_BUF_SIZE];
char usart_n3_rxbuf[NODE_RX_BUF_SIZE];
CREATE_USART(usart_n3, USART_N3_DEVICE_PORT);
     534:	85 ef       	ldi	r24, 0xF5	; 245
     536:	97 e2       	ldi	r25, 0x27	; 39
     538:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <_ZN5UsartD1Ev>
char usart_n1_txbuf[NODE_TX_BUF_SIZE];
char usart_n1_rxbuf[NODE_RX_BUF_SIZE];
CREATE_USART(usart_n1, USART_N1_DEVICE_PORT);
char usart_n2_txbuf[NODE_TX_BUF_SIZE];
char usart_n2_rxbuf[NODE_RX_BUF_SIZE];
CREATE_USART(usart_n2, USART_N2_DEVICE_PORT);
     53c:	84 e7       	ldi	r24, 0x74	; 116
     53e:	98 e2       	ldi	r25, 0x28	; 40
     540:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <_ZN5UsartD1Ev>
char usart_n0_txbuf[NODE_TX_BUF_SIZE];
char usart_n0_rxbuf[NODE_RX_BUF_SIZE];
CREATE_USART(usart_n0, USART_N0_DEVICE_PORT);
char usart_n1_txbuf[NODE_TX_BUF_SIZE];
char usart_n1_rxbuf[NODE_RX_BUF_SIZE];
CREATE_USART(usart_n1, USART_N1_DEVICE_PORT);
     544:	83 ef       	ldi	r24, 0xF3	; 243
     546:	98 e2       	ldi	r25, 0x28	; 40
     548:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <_ZN5UsartD1Ev>

#define NODE_TX_BUF_SIZE 32
#define NODE_RX_BUF_SIZE 64
char usart_n0_txbuf[NODE_TX_BUF_SIZE];
char usart_n0_rxbuf[NODE_RX_BUF_SIZE];
CREATE_USART(usart_n0, USART_N0_DEVICE_PORT);
     54c:	82 e7       	ldi	r24, 0x72	; 114
     54e:	99 e2       	ldi	r25, 0x29	; 41
     550:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <_ZN5UsartD1Ev>
// USART
#define USART_TX_BUF_SIZE 64
#define USART_RX_BUF_SIZE 64
char usart_txbuf[USART_TX_BUF_SIZE];
char usart_rxbuf[USART_RX_BUF_SIZE];
CREATE_USART(usart, UART_DEVICE_PORT);
     554:	8f ef       	ldi	r24, 0xFF	; 255
     556:	99 e2       	ldi	r25, 0x29	; 41
     558:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <_ZN5UsartD1Ev>
     55c:	08 95       	ret

0000055e <__vector_119>:
     55e:	1f 92       	push	r1
     560:	0f 92       	push	r0
     562:	0f b6       	in	r0, 0x3f	; 63
     564:	0f 92       	push	r0
     566:	0b b6       	in	r0, 0x3b	; 59
     568:	0f 92       	push	r0
     56a:	11 24       	eor	r1, r1
     56c:	2f 93       	push	r18
     56e:	3f 93       	push	r19
     570:	4f 93       	push	r20
     572:	5f 93       	push	r21
     574:	6f 93       	push	r22
     576:	7f 93       	push	r23
     578:	8f 93       	push	r24
     57a:	9f 93       	push	r25
     57c:	af 93       	push	r26
     57e:	bf 93       	push	r27
     580:	ef 93       	push	r30
     582:	ff 93       	push	r31
     584:	8f ef       	ldi	r24, 0xFF	; 255
     586:	99 e2       	ldi	r25, 0x29	; 41
     588:	0e 94 13 20 	call	0x4026	; 0x4026 <_ZN5Usart17handle_interruptsEPS_>
     58c:	ff 91       	pop	r31
     58e:	ef 91       	pop	r30
     590:	bf 91       	pop	r27
     592:	af 91       	pop	r26
     594:	9f 91       	pop	r25
     596:	8f 91       	pop	r24
     598:	7f 91       	pop	r23
     59a:	6f 91       	pop	r22
     59c:	5f 91       	pop	r21
     59e:	4f 91       	pop	r20
     5a0:	3f 91       	pop	r19
     5a2:	2f 91       	pop	r18
     5a4:	0f 90       	pop	r0
     5a6:	0b be       	out	0x3b, r0	; 59
     5a8:	0f 90       	pop	r0
     5aa:	0f be       	out	0x3f, r0	; 63
     5ac:	0f 90       	pop	r0
     5ae:	1f 90       	pop	r1
     5b0:	18 95       	reti

000005b2 <__vector_25>:

#define NODE_TX_BUF_SIZE 32
#define NODE_RX_BUF_SIZE 64
char usart_n0_txbuf[NODE_TX_BUF_SIZE];
char usart_n0_rxbuf[NODE_RX_BUF_SIZE];
CREATE_USART(usart_n0, USART_N0_DEVICE_PORT);
     5b2:	1f 92       	push	r1
     5b4:	0f 92       	push	r0
     5b6:	0f b6       	in	r0, 0x3f	; 63
     5b8:	0f 92       	push	r0
     5ba:	0b b6       	in	r0, 0x3b	; 59
     5bc:	0f 92       	push	r0
     5be:	11 24       	eor	r1, r1
     5c0:	2f 93       	push	r18
     5c2:	3f 93       	push	r19
     5c4:	4f 93       	push	r20
     5c6:	5f 93       	push	r21
     5c8:	6f 93       	push	r22
     5ca:	7f 93       	push	r23
     5cc:	8f 93       	push	r24
     5ce:	9f 93       	push	r25
     5d0:	af 93       	push	r26
     5d2:	bf 93       	push	r27
     5d4:	ef 93       	push	r30
     5d6:	ff 93       	push	r31
     5d8:	82 e7       	ldi	r24, 0x72	; 114
     5da:	99 e2       	ldi	r25, 0x29	; 41
     5dc:	0e 94 13 20 	call	0x4026	; 0x4026 <_ZN5Usart17handle_interruptsEPS_>
     5e0:	ff 91       	pop	r31
     5e2:	ef 91       	pop	r30
     5e4:	bf 91       	pop	r27
     5e6:	af 91       	pop	r26
     5e8:	9f 91       	pop	r25
     5ea:	8f 91       	pop	r24
     5ec:	7f 91       	pop	r23
     5ee:	6f 91       	pop	r22
     5f0:	5f 91       	pop	r21
     5f2:	4f 91       	pop	r20
     5f4:	3f 91       	pop	r19
     5f6:	2f 91       	pop	r18
     5f8:	0f 90       	pop	r0
     5fa:	0b be       	out	0x3b, r0	; 59
     5fc:	0f 90       	pop	r0
     5fe:	0f be       	out	0x3f, r0	; 63
     600:	0f 90       	pop	r0
     602:	1f 90       	pop	r1
     604:	18 95       	reti

00000606 <__vector_28>:
char usart_n1_txbuf[NODE_TX_BUF_SIZE];
char usart_n1_rxbuf[NODE_RX_BUF_SIZE];
CREATE_USART(usart_n1, USART_N1_DEVICE_PORT);
     606:	1f 92       	push	r1
     608:	0f 92       	push	r0
     60a:	0f b6       	in	r0, 0x3f	; 63
     60c:	0f 92       	push	r0
     60e:	0b b6       	in	r0, 0x3b	; 59
     610:	0f 92       	push	r0
     612:	11 24       	eor	r1, r1
     614:	2f 93       	push	r18
     616:	3f 93       	push	r19
     618:	4f 93       	push	r20
     61a:	5f 93       	push	r21
     61c:	6f 93       	push	r22
     61e:	7f 93       	push	r23
     620:	8f 93       	push	r24
     622:	9f 93       	push	r25
     624:	af 93       	push	r26
     626:	bf 93       	push	r27
     628:	ef 93       	push	r30
     62a:	ff 93       	push	r31
     62c:	83 ef       	ldi	r24, 0xF3	; 243
     62e:	98 e2       	ldi	r25, 0x28	; 40
     630:	0e 94 13 20 	call	0x4026	; 0x4026 <_ZN5Usart17handle_interruptsEPS_>
     634:	ff 91       	pop	r31
     636:	ef 91       	pop	r30
     638:	bf 91       	pop	r27
     63a:	af 91       	pop	r26
     63c:	9f 91       	pop	r25
     63e:	8f 91       	pop	r24
     640:	7f 91       	pop	r23
     642:	6f 91       	pop	r22
     644:	5f 91       	pop	r21
     646:	4f 91       	pop	r20
     648:	3f 91       	pop	r19
     64a:	2f 91       	pop	r18
     64c:	0f 90       	pop	r0
     64e:	0b be       	out	0x3b, r0	; 59
     650:	0f 90       	pop	r0
     652:	0f be       	out	0x3f, r0	; 63
     654:	0f 90       	pop	r0
     656:	1f 90       	pop	r1
     658:	18 95       	reti

0000065a <__vector_88>:
char usart_n2_txbuf[NODE_TX_BUF_SIZE];
char usart_n2_rxbuf[NODE_RX_BUF_SIZE];
CREATE_USART(usart_n2, USART_N2_DEVICE_PORT);
     65a:	1f 92       	push	r1
     65c:	0f 92       	push	r0
     65e:	0f b6       	in	r0, 0x3f	; 63
     660:	0f 92       	push	r0
     662:	0b b6       	in	r0, 0x3b	; 59
     664:	0f 92       	push	r0
     666:	11 24       	eor	r1, r1
     668:	2f 93       	push	r18
     66a:	3f 93       	push	r19
     66c:	4f 93       	push	r20
     66e:	5f 93       	push	r21
     670:	6f 93       	push	r22
     672:	7f 93       	push	r23
     674:	8f 93       	push	r24
     676:	9f 93       	push	r25
     678:	af 93       	push	r26
     67a:	bf 93       	push	r27
     67c:	ef 93       	push	r30
     67e:	ff 93       	push	r31
     680:	84 e7       	ldi	r24, 0x74	; 116
     682:	98 e2       	ldi	r25, 0x28	; 40
     684:	0e 94 13 20 	call	0x4026	; 0x4026 <_ZN5Usart17handle_interruptsEPS_>
     688:	ff 91       	pop	r31
     68a:	ef 91       	pop	r30
     68c:	bf 91       	pop	r27
     68e:	af 91       	pop	r26
     690:	9f 91       	pop	r25
     692:	8f 91       	pop	r24
     694:	7f 91       	pop	r23
     696:	6f 91       	pop	r22
     698:	5f 91       	pop	r21
     69a:	4f 91       	pop	r20
     69c:	3f 91       	pop	r19
     69e:	2f 91       	pop	r18
     6a0:	0f 90       	pop	r0
     6a2:	0b be       	out	0x3b, r0	; 59
     6a4:	0f 90       	pop	r0
     6a6:	0f be       	out	0x3f, r0	; 63
     6a8:	0f 90       	pop	r0
     6aa:	1f 90       	pop	r1
     6ac:	18 95       	reti

000006ae <__vector_91>:
char usart_n3_txbuf[NODE_TX_BUF_SIZE];
char usart_n3_rxbuf[NODE_RX_BUF_SIZE];
CREATE_USART(usart_n3, USART_N3_DEVICE_PORT);
     6ae:	1f 92       	push	r1
     6b0:	0f 92       	push	r0
     6b2:	0f b6       	in	r0, 0x3f	; 63
     6b4:	0f 92       	push	r0
     6b6:	0b b6       	in	r0, 0x3b	; 59
     6b8:	0f 92       	push	r0
     6ba:	11 24       	eor	r1, r1
     6bc:	2f 93       	push	r18
     6be:	3f 93       	push	r19
     6c0:	4f 93       	push	r20
     6c2:	5f 93       	push	r21
     6c4:	6f 93       	push	r22
     6c6:	7f 93       	push	r23
     6c8:	8f 93       	push	r24
     6ca:	9f 93       	push	r25
     6cc:	af 93       	push	r26
     6ce:	bf 93       	push	r27
     6d0:	ef 93       	push	r30
     6d2:	ff 93       	push	r31
     6d4:	85 ef       	ldi	r24, 0xF5	; 245
     6d6:	97 e2       	ldi	r25, 0x27	; 39
     6d8:	0e 94 13 20 	call	0x4026	; 0x4026 <_ZN5Usart17handle_interruptsEPS_>
     6dc:	ff 91       	pop	r31
     6de:	ef 91       	pop	r30
     6e0:	bf 91       	pop	r27
     6e2:	af 91       	pop	r26
     6e4:	9f 91       	pop	r25
     6e6:	8f 91       	pop	r24
     6e8:	7f 91       	pop	r23
     6ea:	6f 91       	pop	r22
     6ec:	5f 91       	pop	r21
     6ee:	4f 91       	pop	r20
     6f0:	3f 91       	pop	r19
     6f2:	2f 91       	pop	r18
     6f4:	0f 90       	pop	r0
     6f6:	0b be       	out	0x3b, r0	; 59
     6f8:	0f 90       	pop	r0
     6fa:	0f be       	out	0x3f, r0	; 63
     6fc:	0f 90       	pop	r0
     6fe:	1f 90       	pop	r1
     700:	18 95       	reti

00000702 <__vector_58>:
char usart_n4_txbuf[NODE_TX_BUF_SIZE];
char usart_n4_rxbuf[NODE_RX_BUF_SIZE];
CREATE_USART(usart_n4, USART_N4_DEVICE_PORT);
     702:	1f 92       	push	r1
     704:	0f 92       	push	r0
     706:	0f b6       	in	r0, 0x3f	; 63
     708:	0f 92       	push	r0
     70a:	0b b6       	in	r0, 0x3b	; 59
     70c:	0f 92       	push	r0
     70e:	11 24       	eor	r1, r1
     710:	2f 93       	push	r18
     712:	3f 93       	push	r19
     714:	4f 93       	push	r20
     716:	5f 93       	push	r21
     718:	6f 93       	push	r22
     71a:	7f 93       	push	r23
     71c:	8f 93       	push	r24
     71e:	9f 93       	push	r25
     720:	af 93       	push	r26
     722:	bf 93       	push	r27
     724:	ef 93       	push	r30
     726:	ff 93       	push	r31
     728:	86 e7       	ldi	r24, 0x76	; 118
     72a:	97 e2       	ldi	r25, 0x27	; 39
     72c:	0e 94 13 20 	call	0x4026	; 0x4026 <_ZN5Usart17handle_interruptsEPS_>
     730:	ff 91       	pop	r31
     732:	ef 91       	pop	r30
     734:	bf 91       	pop	r27
     736:	af 91       	pop	r26
     738:	9f 91       	pop	r25
     73a:	8f 91       	pop	r24
     73c:	7f 91       	pop	r23
     73e:	6f 91       	pop	r22
     740:	5f 91       	pop	r21
     742:	4f 91       	pop	r20
     744:	3f 91       	pop	r19
     746:	2f 91       	pop	r18
     748:	0f 90       	pop	r0
     74a:	0b be       	out	0x3b, r0	; 59
     74c:	0f 90       	pop	r0
     74e:	0f be       	out	0x3f, r0	; 63
     750:	0f 90       	pop	r0
     752:	1f 90       	pop	r1
     754:	18 95       	reti

00000756 <__vector_61>:
char usart_n5_txbuf[NODE_TX_BUF_SIZE];
char usart_n5_rxbuf[NODE_RX_BUF_SIZE];
CREATE_USART(usart_n5, USART_N5_DEVICE_PORT);
     756:	1f 92       	push	r1
     758:	0f 92       	push	r0
     75a:	0f b6       	in	r0, 0x3f	; 63
     75c:	0f 92       	push	r0
     75e:	0b b6       	in	r0, 0x3b	; 59
     760:	0f 92       	push	r0
     762:	11 24       	eor	r1, r1
     764:	2f 93       	push	r18
     766:	3f 93       	push	r19
     768:	4f 93       	push	r20
     76a:	5f 93       	push	r21
     76c:	6f 93       	push	r22
     76e:	7f 93       	push	r23
     770:	8f 93       	push	r24
     772:	9f 93       	push	r25
     774:	af 93       	push	r26
     776:	bf 93       	push	r27
     778:	ef 93       	push	r30
     77a:	ff 93       	push	r31
     77c:	87 ef       	ldi	r24, 0xF7	; 247
     77e:	96 e2       	ldi	r25, 0x26	; 38
     780:	0e 94 13 20 	call	0x4026	; 0x4026 <_ZN5Usart17handle_interruptsEPS_>
     784:	ff 91       	pop	r31
     786:	ef 91       	pop	r30
     788:	bf 91       	pop	r27
     78a:	af 91       	pop	r26
     78c:	9f 91       	pop	r25
     78e:	8f 91       	pop	r24
     790:	7f 91       	pop	r23
     792:	6f 91       	pop	r22
     794:	5f 91       	pop	r21
     796:	4f 91       	pop	r20
     798:	3f 91       	pop	r19
     79a:	2f 91       	pop	r18
     79c:	0f 90       	pop	r0
     79e:	0b be       	out	0x3b, r0	; 59
     7a0:	0f 90       	pop	r0
     7a2:	0f be       	out	0x3f, r0	; 63
     7a4:	0f 90       	pop	r0
     7a6:	1f 90       	pop	r1
     7a8:	18 95       	reti

000007aa <_Z22SP_ReadCalibrationByteh>:

// Production signature row access
uint8_t SP_ReadCalibrationByte( uint8_t index )
{
        uint8_t result;
        NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     7aa:	aa ec       	ldi	r26, 0xCA	; 202
     7ac:	b1 e0       	ldi	r27, 0x01	; 1
     7ae:	92 e0       	ldi	r25, 0x02	; 2
     7b0:	9c 93       	st	X, r25
        result = pgm_read_byte(index);
     7b2:	e8 2f       	mov	r30, r24
     7b4:	f0 e0       	ldi	r31, 0x00	; 0
     7b6:	84 91       	lpm	r24, Z
        NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     7b8:	1c 92       	st	X, r1
        return result;
}
     7ba:	08 95       	ret

000007bc <_Z4initv>:
        NVM_CMD = NVM_CMD_NO_OPERATION_gc;
        return result;
}

void init(void)
{
     7bc:	0f 93       	push	r16
     7be:	1f 93       	push	r17
     7c0:	cf 93       	push	r28
     7c2:	df 93       	push	r29
        // clock
        OSC.CTRL |= OSC_RC32MEN_bm; // turn on 32 MHz oscillator
     7c4:	80 91 50 00 	lds	r24, 0x0050
     7c8:	82 60       	ori	r24, 0x02	; 2
     7ca:	80 93 50 00 	sts	0x0050, r24
        while (!(OSC.STATUS & OSC_RC32MRDY_bm)) { }; // wait for it to start
     7ce:	80 91 51 00 	lds	r24, 0x0051
     7d2:	81 ff       	sbrs	r24, 1
     7d4:	fc cf       	rjmp	.-8      	; 0x7ce <_Z4initv+0x12>
        CCP = CCP_IOREG_gc;
     7d6:	88 ed       	ldi	r24, 0xD8	; 216
     7d8:	84 bf       	out	0x34, r24	; 52
        CLK.CTRL = CLK_SCLKSEL_RC32M_gc; // switch osc
     7da:	c1 e0       	ldi	r28, 0x01	; 1
     7dc:	c0 93 40 00 	sts	0x0040, r28
        DFLLRC32M.CTRL = DFLL_ENABLE_bm; // turn on DFLL
     7e0:	c0 93 60 00 	sts	0x0060, r28
        
        // disable JTAG
        CCP = CCP_IOREG_gc;
     7e4:	84 bf       	out	0x34, r24	; 52
        MCU.MCUCR = 1;
     7e6:	e0 e9       	ldi	r30, 0x90	; 144
     7e8:	f0 e0       	ldi	r31, 0x00	; 0
     7ea:	c6 83       	std	Z+6, r28	; 0x06
        
        // Init pins
        LED_PORT.OUTCLR = LED_USR_0_PIN_bm | LED_USR_1_PIN_bm | LED_USR_2_PIN_bm;
     7ec:	e0 e2       	ldi	r30, 0x20	; 32
     7ee:	f6 e0       	ldi	r31, 0x06	; 6
     7f0:	8b e0       	ldi	r24, 0x0B	; 11
     7f2:	86 83       	std	Z+6, r24	; 0x06
        LED_PORT.DIRSET = LED_USR_0_PIN_bm | LED_USR_1_PIN_bm | LED_USR_2_PIN_bm;
     7f4:	81 83       	std	Z+1, r24	; 0x01
        
        // Init buttons
        BTN_PORT.DIRCLR = BTN_PIN_bm;
     7f6:	e0 ea       	ldi	r30, 0xA0	; 160
     7f8:	f6 e0       	ldi	r31, 0x06	; 6
     7fa:	c2 83       	std	Z+2, r28	; 0x02
        
        // UARTs
        usart.set_tx_buffer(usart_txbuf, USART_TX_BUF_SIZE);
     7fc:	8f ef       	ldi	r24, 0xFF	; 255
     7fe:	99 e2       	ldi	r25, 0x29	; 41
     800:	6e e5       	ldi	r22, 0x5E	; 94
     802:	7a e2       	ldi	r23, 0x2A	; 42
     804:	40 e4       	ldi	r20, 0x40	; 64
     806:	50 e0       	ldi	r21, 0x00	; 0
     808:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <_ZN5Usart13set_tx_bufferEPcj>
        usart.set_rx_buffer(usart_rxbuf, USART_RX_BUF_SIZE);
     80c:	8f ef       	ldi	r24, 0xFF	; 255
     80e:	99 e2       	ldi	r25, 0x29	; 41
     810:	6e e1       	ldi	r22, 0x1E	; 30
     812:	7a e2       	ldi	r23, 0x2A	; 42
     814:	40 e4       	ldi	r20, 0x40	; 64
     816:	50 e0       	ldi	r21, 0x00	; 0
     818:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <_ZN5Usart13set_rx_bufferEPcj>
        usart.begin(UART_BAUD_RATE);
     81c:	8f ef       	ldi	r24, 0xFF	; 255
     81e:	99 e2       	ldi	r25, 0x29	; 41
     820:	40 e0       	ldi	r20, 0x00	; 0
     822:	52 ec       	ldi	r21, 0xC2	; 194
     824:	61 e0       	ldi	r22, 0x01	; 1
     826:	70 e0       	ldi	r23, 0x00	; 0
     828:	20 e0       	ldi	r18, 0x00	; 0
     82a:	01 e0       	ldi	r16, 0x01	; 1
     82c:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <_ZN5Usart5beginElcc>
        usart.setup_stream(&usart_stream);
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	99 e2       	ldi	r25, 0x29	; 41
     834:	61 ef       	ldi	r22, 0xF1	; 241
     836:	79 e2       	ldi	r23, 0x29	; 41
     838:	0e 94 05 20 	call	0x400a	; 0x400a <_ZN5Usart12setup_streamEP6__file>
        
        usart_n0.set_tx_buffer(usart_n0_txbuf, NODE_TX_BUF_SIZE);
     83c:	82 e7       	ldi	r24, 0x72	; 114
     83e:	99 e2       	ldi	r25, 0x29	; 41
     840:	61 ed       	ldi	r22, 0xD1	; 209
     842:	79 e2       	ldi	r23, 0x29	; 41
     844:	40 e2       	ldi	r20, 0x20	; 32
     846:	50 e0       	ldi	r21, 0x00	; 0
     848:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <_ZN5Usart13set_tx_bufferEPcj>
        usart_n0.set_rx_buffer(usart_n0_rxbuf, NODE_RX_BUF_SIZE);
     84c:	82 e7       	ldi	r24, 0x72	; 114
     84e:	99 e2       	ldi	r25, 0x29	; 41
     850:	61 e9       	ldi	r22, 0x91	; 145
     852:	79 e2       	ldi	r23, 0x29	; 41
     854:	40 e4       	ldi	r20, 0x40	; 64
     856:	50 e0       	ldi	r21, 0x00	; 0
     858:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <_ZN5Usart13set_rx_bufferEPcj>
        usart_n0.begin(NODE_BAUD_RATE);
     85c:	82 e7       	ldi	r24, 0x72	; 114
     85e:	99 e2       	ldi	r25, 0x29	; 41
     860:	40 e0       	ldi	r20, 0x00	; 0
     862:	52 ec       	ldi	r21, 0xC2	; 194
     864:	61 e0       	ldi	r22, 0x01	; 1
     866:	70 e0       	ldi	r23, 0x00	; 0
     868:	20 e0       	ldi	r18, 0x00	; 0
     86a:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <_ZN5Usart5beginElcc>
        xgrid.add_node(&usart_n0);
     86e:	8e ee       	ldi	r24, 0xEE	; 238
     870:	90 e2       	ldi	r25, 0x20	; 32
     872:	62 e7       	ldi	r22, 0x72	; 114
     874:	79 e2       	ldi	r23, 0x29	; 41
     876:	0e 94 6b 22 	call	0x44d6	; 0x44d6 <_ZN5Xgrid8add_nodeEP8IOStream>
        
		usart_n1.set_tx_buffer(usart_n1_txbuf, NODE_TX_BUF_SIZE);
     87a:	83 ef       	ldi	r24, 0xF3	; 243
     87c:	98 e2       	ldi	r25, 0x28	; 40
     87e:	62 e5       	ldi	r22, 0x52	; 82
     880:	79 e2       	ldi	r23, 0x29	; 41
     882:	40 e2       	ldi	r20, 0x20	; 32
     884:	50 e0       	ldi	r21, 0x00	; 0
     886:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <_ZN5Usart13set_tx_bufferEPcj>
        usart_n1.set_rx_buffer(usart_n1_rxbuf, NODE_RX_BUF_SIZE);
     88a:	83 ef       	ldi	r24, 0xF3	; 243
     88c:	98 e2       	ldi	r25, 0x28	; 40
     88e:	62 e1       	ldi	r22, 0x12	; 18
     890:	79 e2       	ldi	r23, 0x29	; 41
     892:	40 e4       	ldi	r20, 0x40	; 64
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <_ZN5Usart13set_rx_bufferEPcj>
        usart_n1.begin(NODE_BAUD_RATE);
     89a:	83 ef       	ldi	r24, 0xF3	; 243
     89c:	98 e2       	ldi	r25, 0x28	; 40
     89e:	40 e0       	ldi	r20, 0x00	; 0
     8a0:	52 ec       	ldi	r21, 0xC2	; 194
     8a2:	61 e0       	ldi	r22, 0x01	; 1
     8a4:	70 e0       	ldi	r23, 0x00	; 0
     8a6:	20 e0       	ldi	r18, 0x00	; 0
     8a8:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <_ZN5Usart5beginElcc>
        xgrid.add_node(&usart_n1);
     8ac:	8e ee       	ldi	r24, 0xEE	; 238
     8ae:	90 e2       	ldi	r25, 0x20	; 32
     8b0:	63 ef       	ldi	r22, 0xF3	; 243
     8b2:	78 e2       	ldi	r23, 0x28	; 40
     8b4:	0e 94 6b 22 	call	0x44d6	; 0x44d6 <_ZN5Xgrid8add_nodeEP8IOStream>
        
		usart_n2.set_tx_buffer(usart_n2_txbuf, NODE_TX_BUF_SIZE);
     8b8:	84 e7       	ldi	r24, 0x74	; 116
     8ba:	98 e2       	ldi	r25, 0x28	; 40
     8bc:	63 ed       	ldi	r22, 0xD3	; 211
     8be:	78 e2       	ldi	r23, 0x28	; 40
     8c0:	40 e2       	ldi	r20, 0x20	; 32
     8c2:	50 e0       	ldi	r21, 0x00	; 0
     8c4:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <_ZN5Usart13set_tx_bufferEPcj>
        usart_n2.set_rx_buffer(usart_n2_rxbuf, NODE_RX_BUF_SIZE);
     8c8:	84 e7       	ldi	r24, 0x74	; 116
     8ca:	98 e2       	ldi	r25, 0x28	; 40
     8cc:	63 e9       	ldi	r22, 0x93	; 147
     8ce:	78 e2       	ldi	r23, 0x28	; 40
     8d0:	40 e4       	ldi	r20, 0x40	; 64
     8d2:	50 e0       	ldi	r21, 0x00	; 0
     8d4:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <_ZN5Usart13set_rx_bufferEPcj>
        usart_n2.begin(NODE_BAUD_RATE);
     8d8:	84 e7       	ldi	r24, 0x74	; 116
     8da:	98 e2       	ldi	r25, 0x28	; 40
     8dc:	40 e0       	ldi	r20, 0x00	; 0
     8de:	52 ec       	ldi	r21, 0xC2	; 194
     8e0:	61 e0       	ldi	r22, 0x01	; 1
     8e2:	70 e0       	ldi	r23, 0x00	; 0
     8e4:	20 e0       	ldi	r18, 0x00	; 0
     8e6:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <_ZN5Usart5beginElcc>
        xgrid.add_node(&usart_n2);
     8ea:	8e ee       	ldi	r24, 0xEE	; 238
     8ec:	90 e2       	ldi	r25, 0x20	; 32
     8ee:	64 e7       	ldi	r22, 0x74	; 116
     8f0:	78 e2       	ldi	r23, 0x28	; 40
     8f2:	0e 94 6b 22 	call	0x44d6	; 0x44d6 <_ZN5Xgrid8add_nodeEP8IOStream>
        
		usart_n3.set_tx_buffer(usart_n3_txbuf, NODE_TX_BUF_SIZE);
     8f6:	85 ef       	ldi	r24, 0xF5	; 245
     8f8:	97 e2       	ldi	r25, 0x27	; 39
     8fa:	64 e5       	ldi	r22, 0x54	; 84
     8fc:	78 e2       	ldi	r23, 0x28	; 40
     8fe:	40 e2       	ldi	r20, 0x20	; 32
     900:	50 e0       	ldi	r21, 0x00	; 0
     902:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <_ZN5Usart13set_tx_bufferEPcj>
        usart_n3.set_rx_buffer(usart_n3_rxbuf, NODE_RX_BUF_SIZE);
     906:	85 ef       	ldi	r24, 0xF5	; 245
     908:	97 e2       	ldi	r25, 0x27	; 39
     90a:	64 e1       	ldi	r22, 0x14	; 20
     90c:	78 e2       	ldi	r23, 0x28	; 40
     90e:	40 e4       	ldi	r20, 0x40	; 64
     910:	50 e0       	ldi	r21, 0x00	; 0
     912:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <_ZN5Usart13set_rx_bufferEPcj>
        usart_n3.begin(NODE_BAUD_RATE);
     916:	85 ef       	ldi	r24, 0xF5	; 245
     918:	97 e2       	ldi	r25, 0x27	; 39
     91a:	40 e0       	ldi	r20, 0x00	; 0
     91c:	52 ec       	ldi	r21, 0xC2	; 194
     91e:	61 e0       	ldi	r22, 0x01	; 1
     920:	70 e0       	ldi	r23, 0x00	; 0
     922:	20 e0       	ldi	r18, 0x00	; 0
     924:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <_ZN5Usart5beginElcc>
        xgrid.add_node(&usart_n3);
     928:	8e ee       	ldi	r24, 0xEE	; 238
     92a:	90 e2       	ldi	r25, 0x20	; 32
     92c:	65 ef       	ldi	r22, 0xF5	; 245
     92e:	77 e2       	ldi	r23, 0x27	; 39
     930:	0e 94 6b 22 	call	0x44d6	; 0x44d6 <_ZN5Xgrid8add_nodeEP8IOStream>
        
		usart_n4.set_tx_buffer(usart_n4_txbuf, NODE_TX_BUF_SIZE);
     934:	86 e7       	ldi	r24, 0x76	; 118
     936:	97 e2       	ldi	r25, 0x27	; 39
     938:	65 ed       	ldi	r22, 0xD5	; 213
     93a:	77 e2       	ldi	r23, 0x27	; 39
     93c:	40 e2       	ldi	r20, 0x20	; 32
     93e:	50 e0       	ldi	r21, 0x00	; 0
     940:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <_ZN5Usart13set_tx_bufferEPcj>
        usart_n4.set_rx_buffer(usart_n4_rxbuf, NODE_RX_BUF_SIZE);
     944:	86 e7       	ldi	r24, 0x76	; 118
     946:	97 e2       	ldi	r25, 0x27	; 39
     948:	65 e9       	ldi	r22, 0x95	; 149
     94a:	77 e2       	ldi	r23, 0x27	; 39
     94c:	40 e4       	ldi	r20, 0x40	; 64
     94e:	50 e0       	ldi	r21, 0x00	; 0
     950:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <_ZN5Usart13set_rx_bufferEPcj>
        usart_n4.begin(NODE_BAUD_RATE);
     954:	86 e7       	ldi	r24, 0x76	; 118
     956:	97 e2       	ldi	r25, 0x27	; 39
     958:	40 e0       	ldi	r20, 0x00	; 0
     95a:	52 ec       	ldi	r21, 0xC2	; 194
     95c:	61 e0       	ldi	r22, 0x01	; 1
     95e:	70 e0       	ldi	r23, 0x00	; 0
     960:	20 e0       	ldi	r18, 0x00	; 0
     962:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <_ZN5Usart5beginElcc>
        xgrid.add_node(&usart_n4);
     966:	8e ee       	ldi	r24, 0xEE	; 238
     968:	90 e2       	ldi	r25, 0x20	; 32
     96a:	66 e7       	ldi	r22, 0x76	; 118
     96c:	77 e2       	ldi	r23, 0x27	; 39
     96e:	0e 94 6b 22 	call	0x44d6	; 0x44d6 <_ZN5Xgrid8add_nodeEP8IOStream>
        
		usart_n5.set_tx_buffer(usart_n5_txbuf, NODE_TX_BUF_SIZE);
     972:	87 ef       	ldi	r24, 0xF7	; 247
     974:	96 e2       	ldi	r25, 0x26	; 38
     976:	66 e5       	ldi	r22, 0x56	; 86
     978:	77 e2       	ldi	r23, 0x27	; 39
     97a:	40 e2       	ldi	r20, 0x20	; 32
     97c:	50 e0       	ldi	r21, 0x00	; 0
     97e:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <_ZN5Usart13set_tx_bufferEPcj>
        usart_n5.set_rx_buffer(usart_n5_rxbuf, NODE_RX_BUF_SIZE);
     982:	87 ef       	ldi	r24, 0xF7	; 247
     984:	96 e2       	ldi	r25, 0x26	; 38
     986:	66 e1       	ldi	r22, 0x16	; 22
     988:	77 e2       	ldi	r23, 0x27	; 39
     98a:	40 e4       	ldi	r20, 0x40	; 64
     98c:	50 e0       	ldi	r21, 0x00	; 0
     98e:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <_ZN5Usart13set_rx_bufferEPcj>
        usart_n5.begin(NODE_BAUD_RATE);
     992:	87 ef       	ldi	r24, 0xF7	; 247
     994:	96 e2       	ldi	r25, 0x26	; 38
     996:	40 e0       	ldi	r20, 0x00	; 0
     998:	52 ec       	ldi	r21, 0xC2	; 194
     99a:	61 e0       	ldi	r22, 0x01	; 1
     99c:	70 e0       	ldi	r23, 0x00	; 0
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <_ZN5Usart5beginElcc>
        xgrid.add_node(&usart_n5);
     9a4:	8e ee       	ldi	r24, 0xEE	; 238
     9a6:	90 e2       	ldi	r25, 0x20	; 32
     9a8:	67 ef       	ldi	r22, 0xF7	; 247
     9aa:	76 e2       	ldi	r23, 0x26	; 38
     9ac:	0e 94 6b 22 	call	0x44d6	; 0x44d6 <_ZN5Xgrid8add_nodeEP8IOStream>
        
        // ADC setup
        ADCA.CTRLA = ADC_DMASEL_OFF_gc | ADC_FLUSH_bm;
     9b0:	00 e0       	ldi	r16, 0x00	; 0
     9b2:	12 e0       	ldi	r17, 0x02	; 2
     9b4:	82 e0       	ldi	r24, 0x02	; 2
     9b6:	80 93 00 02 	sts	0x0200, r24
        ADCA.CTRLB = ADC_CONMODE_bm | ADC_RESOLUTION_12BIT_gc;
     9ba:	d0 e1       	ldi	r29, 0x10	; 16
     9bc:	f8 01       	movw	r30, r16
     9be:	d1 83       	std	Z+1, r29	; 0x01
        ADCA.REFCTRL = ADC_REFSEL_INT1V_gc | ADC_BANDGAP_bm;
     9c0:	82 83       	std	Z+2, r24	; 0x02
        ADCA.EVCTRL = ADC_SWEEP_0123_gc | ADC_EVSEL_0123_gc | ADC_EVACT_SWEEP_gc;
     9c2:	85 ec       	ldi	r24, 0xC5	; 197
     9c4:	83 83       	std	Z+3, r24	; 0x03
        ADCA.PRESCALER = ADC_PRESCALER_DIV64_gc;
     9c6:	84 e0       	ldi	r24, 0x04	; 4
     9c8:	84 83       	std	Z+4, r24	; 0x04
        ADCA.CALL = SP_ReadCalibrationByte(PROD_SIGNATURES_START + ADCACAL0_offset);
     9ca:	80 e2       	ldi	r24, 0x20	; 32
     9cc:	0e 94 d5 03 	call	0x7aa	; 0x7aa <_Z22SP_ReadCalibrationByteh>
     9d0:	f8 01       	movw	r30, r16
     9d2:	84 87       	std	Z+12, r24	; 0x0c
        ADCA.CALH = SP_ReadCalibrationByte(PROD_SIGNATURES_START + ADCACAL1_offset);
     9d4:	81 e2       	ldi	r24, 0x21	; 33
     9d6:	0e 94 d5 03 	call	0x7aa	; 0x7aa <_Z22SP_ReadCalibrationByteh>
     9da:	f8 01       	movw	r30, r16
     9dc:	85 87       	std	Z+13, r24	; 0x0d
        
        ADCA.CH0.CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_SINGLEENDED_gc;
     9de:	c0 a3       	lds	r28, 0x50
        ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN1_gc;
     9e0:	88 e0       	ldi	r24, 0x08	; 8
     9e2:	81 a3       	lds	r24, 0x51
        ADCA.CH0.INTCTRL = ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_LO_gc;
     9e4:	c2 a3       	lds	r28, 0x52
        ADCA.CH0.RES = 0;
     9e6:	14 a2       	lds	r17, 0x94
     9e8:	15 a2       	lds	r17, 0x95
        
        ADCA.CH1.CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_SINGLEENDED_gc;
     9ea:	c0 a7       	lds	r28, 0x70
        ADCA.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN2_gc;
     9ec:	d1 a7       	lds	r29, 0x71
        ADCA.CH1.INTCTRL = ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_LO_gc;
     9ee:	c2 a7       	lds	r28, 0x72
        ADCA.CH1.RES = 0;
     9f0:	14 a6       	lds	r17, 0xb4
     9f2:	15 a6       	lds	r17, 0xb5
        
        ADCA.CH2.CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_SINGLEENDED_gc;
     9f4:	c0 ab       	sts	0x50, r28
        ADCA.CH2.MUXCTRL = ADC_CH_MUXPOS_PIN3_gc;
     9f6:	88 e1       	ldi	r24, 0x18	; 24
     9f8:	81 ab       	sts	0x51, r24
        ADCA.CH2.INTCTRL = ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_LO_gc;
     9fa:	c2 ab       	sts	0x52, r28
        ADCA.CH2.RES = 0;
     9fc:	14 aa       	sts	0x94, r17
     9fe:	15 aa       	sts	0x95, r17
        
        ADCA.CH3.CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_SINGLEENDED_gc;
     a00:	c0 af       	sts	0x70, r28
        ADCA.CH3.MUXCTRL = ADC_CH_MUXPOS_PIN4_gc;
     a02:	80 e2       	ldi	r24, 0x20	; 32
     a04:	81 af       	sts	0x71, r24
        ADCA.CH3.INTCTRL = ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_LO_gc;
     a06:	c2 af       	sts	0x72, r28
        ADCA.CH3.RES = 0;
     a08:	14 ae       	sts	0xb4, r17
     a0a:	15 ae       	sts	0xb5, r17
        
        //ADCA.CTRLA |= ADC_ENABLE_bm;
        //ADCA.CTRLB |= ADC_FREERUN_bm;
        
        // TCC
        TCC0.CTRLA = TC_CLKSEL_DIV256_gc;
     a0c:	e0 e0       	ldi	r30, 0x00	; 0
     a0e:	f8 e0       	ldi	r31, 0x08	; 8
     a10:	86 e0       	ldi	r24, 0x06	; 6
     a12:	80 93 00 08 	sts	0x0800, r24
        TCC0.CTRLB = 0;
     a16:	11 82       	std	Z+1, r1	; 0x01
        TCC0.CTRLC = 0;
     a18:	12 82       	std	Z+2, r1	; 0x02
        TCC0.CTRLD = 0;
     a1a:	13 82       	std	Z+3, r1	; 0x03
        TCC0.CTRLE = 0;
     a1c:	14 82       	std	Z+4, r1	; 0x04
        TCC0.INTCTRLA = TC_OVFINTLVL_LO_gc;
     a1e:	c6 83       	std	Z+6, r28	; 0x06
        TCC0.INTCTRLB = 0;
     a20:	17 82       	std	Z+7, r1	; 0x07
        TCC0.CNT = 0;
     a22:	10 a2       	lds	r17, 0x90
     a24:	11 a2       	lds	r17, 0x91
        TCC0.PER = 125;
     a26:	8d e7       	ldi	r24, 0x7D	; 125
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	86 a3       	lds	r24, 0x56
     a2c:	97 a3       	lds	r25, 0x57
        // CS line
        //SPI_CS_PORT.OUTSET = SPI_CS_DEV_PIN_bm;
        //SPI_CS_PORT.DIRSET = SPI_CS_DEV_PIN_bm;
        
        // Interrupts
        PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm;
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	e0 ea       	ldi	r30, 0xA0	; 160
     a32:	f0 e0       	ldi	r31, 0x00	; 0
     a34:	82 83       	std	Z+2, r24	; 0x02
        
        sei();
     a36:	78 94       	sei
     a38:	df 91       	pop	r29
     a3a:	cf 91       	pop	r28
     a3c:	1f 91       	pop	r17
     a3e:	0f 91       	pop	r16
     a40:	08 95       	ret

00000a42 <_Z10init_sonarv>:
	*/ // End comments on I2C protocol
	
	//TWIC.MASTER.CTRLB |= TWI_MASTER_SMEN_bm;   // Enable smart mode
	//TWIC.MASTER.CTRLB |= TWI_MASTER_QCEN_bm;   // Enable quick command
	
	TWIC.MASTER.BAUD = 155;                      // 100 kHz (Ref: doc8077.pdf, pg 221, [eqn. 2])
     a42:	e0 e8       	ldi	r30, 0x80	; 128
     a44:	f4 e0       	ldi	r31, 0x04	; 4
     a46:	8b e9       	ldi	r24, 0x9B	; 155
     a48:	85 83       	std	Z+5, r24	; 0x05
	//TWIC.MASTER.BAUD = 35;                     // 400 kHz
	
	TWIC.MASTER.CTRLA |= TWI_MASTER_ENABLE_bm; // Master enable
     a4a:	81 81       	ldd	r24, Z+1	; 0x01
     a4c:	88 60       	ori	r24, 0x08	; 8
     a4e:	81 83       	std	Z+1, r24	; 0x01
	TWIC.MASTER.STATUS |= 0x01;                // Set bus idle
     a50:	84 81       	ldd	r24, Z+4	; 0x04
     a52:	81 60       	ori	r24, 0x01	; 1
     a54:	84 83       	std	Z+4, r24	; 0x04
}
     a56:	08 95       	ret

00000a58 <_Z15get_sonar_valuev>:
	
	// The default shipped address of the SRF02 is 0xE0
	// Only register location 0 can be written to
	
	//Send START + SLAVE DEVICE ADDRESS + WRITE BIT: 
	TWIC.MASTER.ADDR = 0xE0;		// 0xE0 = 0b11100000
     a58:	80 ee       	ldi	r24, 0xE0	; 224
     a5a:	e0 e8       	ldi	r30, 0x80	; 128
     a5c:	f4 e0       	ldi	r31, 0x04	; 4
     a5e:	86 83       	std	Z+6, r24	; 0x06
	while (!(TWIC.MASTER.STATUS & TWI_MASTER_CLKHOLD_bm));	//wait for the outbound message to complete
     a60:	80 91 84 04 	lds	r24, 0x0484
     a64:	85 ff       	sbrs	r24, 5
     a66:	fc cf       	rjmp	.-8      	; 0xa60 <_Z15get_sonar_valuev+0x8>
			TWIC.MASTER.ADDR = 0xE0;          // 0xE0 = 0b11100000
			while(!(TWIC.MASTER.STATUS & TWI_MASTER_CLKHOLD_bm));               
		}       */

	// send the internal register number to write to
	TWIC.MASTER.DATA = 0x00;		// 0x00 = 0b00000000
     a68:	e0 e8       	ldi	r30, 0x80	; 128
     a6a:	f4 e0       	ldi	r31, 0x04	; 4
     a6c:	17 82       	std	Z+7, r1	; 0x07
	while (!(TWIC.MASTER.STATUS & TWI_MASTER_CLKHOLD_bm));	//wait for the outbound message to complete
     a6e:	80 91 84 04 	lds	r24, 0x0484
     a72:	85 ff       	sbrs	r24, 5
     a74:	fc cf       	rjmp	.-8      	; 0xa6e <_Z15get_sonar_valuev+0x16>
	
	// command the sonar to start a measurement 
	//	(Real Ranging Mode - Result in inches		- command: 0x50)
	//	(Real Ranging Mode - Result in centimeters	- command: 0x51)
	//	(Real Ranging Mode - Result in microseconds - command: 0x52)
	TWIC.MASTER.DATA = 0x51;		// 0x51 = 0b1010001
     a76:	81 e5       	ldi	r24, 0x51	; 81
     a78:	e0 e8       	ldi	r30, 0x80	; 128
     a7a:	f4 e0       	ldi	r31, 0x04	; 4
     a7c:	87 83       	std	Z+7, r24	; 0x07
	while (!(TWIC.MASTER.STATUS & TWI_MASTER_CLKHOLD_bm));	//wait for the outbound message to complete
     a7e:	e0 e8       	ldi	r30, 0x80	; 128
     a80:	f4 e0       	ldi	r31, 0x04	; 4
     a82:	80 91 84 04 	lds	r24, 0x0484
     a86:	85 ff       	sbrs	r24, 5
     a88:	fa cf       	rjmp	.-12     	; 0xa7e <_Z15get_sonar_valuev+0x26>
	
	TWIC.MASTER.CTRLC = 0x03; // issue a STOP condition
     a8a:	83 e0       	ldi	r24, 0x03	; 3
     a8c:	83 83       	std	Z+3, r24	; 0x03
	*/

	// READ THE RANGE DATA VIA I2C:

	// Send START + SLAVE DEVICE ADDRESS + WRITE BIT: 
	TWIC.MASTER.ADDR = 0xE0;		// 0xE0 = 0b11100000
     a8e:	80 ee       	ldi	r24, 0xE0	; 224
     a90:	86 83       	std	Z+6, r24	; 0x06
	while (!(TWIC.MASTER.STATUS & TWI_MASTER_CLKHOLD_bm));	//wait for the outbound message to complete
     a92:	80 91 84 04 	lds	r24, 0x0484
     a96:	85 ff       	sbrs	r24, 5
     a98:	fc cf       	rjmp	.-8      	; 0xa92 <_Z15get_sonar_valuev+0x3a>
	
	// send the internal register number to read from
	TWIC.MASTER.DATA = 0x02;		// 0x02 = 0b00000010
     a9a:	82 e0       	ldi	r24, 0x02	; 2
     a9c:	e0 e8       	ldi	r30, 0x80	; 128
     a9e:	f4 e0       	ldi	r31, 0x04	; 4
     aa0:	87 83       	std	Z+7, r24	; 0x07
	while (!(TWIC.MASTER.STATUS & TWI_MASTER_CLKHOLD_bm));	//wait for the outbound  message to complete
     aa2:	e0 e8       	ldi	r30, 0x80	; 128
     aa4:	f4 e0       	ldi	r31, 0x04	; 4
     aa6:	80 91 84 04 	lds	r24, 0x0484
     aaa:	85 ff       	sbrs	r24, 5
     aac:	fa cf       	rjmp	.-12     	; 0xaa2 <_Z15get_sonar_valuev+0x4a>

	TWIC.MASTER.CTRLC = 0x03; // issue a STOP condition
     aae:	83 e0       	ldi	r24, 0x03	; 3
     ab0:	83 83       	std	Z+3, r24	; 0x03

	// Send START + SLAVE DEVICE ADDRESS + READ BIT: 
	TWIC.MASTER.ADDR = 0xE1;		// 0xE1 = 0b11100001
     ab2:	81 ee       	ldi	r24, 0xE1	; 225
     ab4:	86 83       	std	Z+6, r24	; 0x06
	while (!(TWIC.MASTER.STATUS & TWI_MASTER_CLKHOLD_bm));	//wait for the outbound message to complete ??
     ab6:	80 91 84 04 	lds	r24, 0x0484
     aba:	85 ff       	sbrs	r24, 5
     abc:	fc cf       	rjmp	.-8      	; 0xab6 <_Z15get_sonar_valuev+0x5e>
	
	// an inbound message will come in now
	
	range_HIGH = TWIC.MASTER.DATA;
     abe:	30 91 87 04 	lds	r19, 0x0487
	
	TWIC.MASTER.CTRLC = 0x02; // send an ACK to receive another byte
     ac2:	82 e0       	ldi	r24, 0x02	; 2
     ac4:	e0 e8       	ldi	r30, 0x80	; 128
     ac6:	f4 e0       	ldi	r31, 0x04	; 4
     ac8:	83 83       	std	Z+3, r24	; 0x03

	// an inbound message will come in now
	while (!(TWIC.MASTER.STATUS & TWI_MASTER_RIF_bm));	//wait for the inbound message to complete
     aca:	80 91 84 04 	lds	r24, 0x0484
     ace:	87 ff       	sbrs	r24, 7
     ad0:	fc cf       	rjmp	.-8      	; 0xaca <_Z15get_sonar_valuev+0x72>

	range_LOW = TWIC.MASTER.DATA;
     ad2:	20 91 87 04 	lds	r18, 0x0487
	
	TWIC.MASTER.CTRLC = 0b00000111; // send NACK followed by STOP condition	(0b00000111 = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc)
     ad6:	87 e0       	ldi	r24, 0x07	; 7
     ad8:	e0 e8       	ldi	r30, 0x80	; 128
     ada:	f4 e0       	ldi	r31, 0x04	; 4
     adc:	83 83       	std	Z+3, r24	; 0x03

	range_FULL = range_HIGH*256;	// read in the high byte
     ade:	93 2f       	mov	r25, r19
     ae0:	80 e0       	ldi	r24, 0x00	; 0
	range_FULL += range_LOW;		// append with the low byte
     ae2:	82 0f       	add	r24, r18
     ae4:	91 1d       	adc	r25, r1

	return range_FULL;
}
     ae6:	08 95       	ret

00000ae8 <_Z20check_sonar_attachedv>:
	
	// The default shipped address of the SRF02 is 0xE0
	// Only register location 0 can be written to
	
	//Send START + SLAVE DEVICE ADDRESS + WRITE BIT: 
	TWIC.MASTER.ADDR = 0xE0;		// 0xE0 = 0b11100000
     ae8:	80 ee       	ldi	r24, 0xE0	; 224
     aea:	e0 e8       	ldi	r30, 0x80	; 128
     aec:	f4 e0       	ldi	r31, 0x04	; 4
     aee:	86 83       	std	Z+6, r24	; 0x06
	while (!(TWIC.MASTER.STATUS & TWI_MASTER_CLKHOLD_bm));	//wait for the outbound message to complete
     af0:	80 91 84 04 	lds	r24, 0x0484
     af4:	85 ff       	sbrs	r24, 5
     af6:	fc cf       	rjmp	.-8      	; 0xaf0 <_Z20check_sonar_attachedv+0x8>
			TWIC.MASTER.ADDR = 0xE0;          // 0xE0 = 0b11100000
			while(!(TWIC.MASTER.STATUS & TWI_MASTER_CLKHOLD_bm));               
		}       */

	// send the internal register number to write to
	TWIC.MASTER.DATA = 0x00;		// 0x00 = 0b00000000
     af8:	e0 e8       	ldi	r30, 0x80	; 128
     afa:	f4 e0       	ldi	r31, 0x04	; 4
     afc:	17 82       	std	Z+7, r1	; 0x07
	while (!(TWIC.MASTER.STATUS & TWI_MASTER_CLKHOLD_bm));	//wait for the outbound message to complete
     afe:	80 91 84 04 	lds	r24, 0x0484
     b02:	85 ff       	sbrs	r24, 5
     b04:	fc cf       	rjmp	.-8      	; 0xafe <_Z20check_sonar_attachedv+0x16>
	
	// command the sonar to start a measurement 
	//	(Real Ranging Mode - Result in inches		- command: 0x50)
	//	(Real Ranging Mode - Result in centimeters	- command: 0x51)
	//	(Real Ranging Mode - Result in microseconds - command: 0x52)
	TWIC.MASTER.DATA = 0x51;		// 0x51 = 0b1010001
     b06:	81 e5       	ldi	r24, 0x51	; 81
     b08:	e0 e8       	ldi	r30, 0x80	; 128
     b0a:	f4 e0       	ldi	r31, 0x04	; 4
     b0c:	87 83       	std	Z+7, r24	; 0x07
	while (!(TWIC.MASTER.STATUS & TWI_MASTER_CLKHOLD_bm));	//wait for the outbound message to complete
     b0e:	e0 e8       	ldi	r30, 0x80	; 128
     b10:	f4 e0       	ldi	r31, 0x04	; 4
     b12:	80 91 84 04 	lds	r24, 0x0484
     b16:	85 ff       	sbrs	r24, 5
     b18:	fa cf       	rjmp	.-12     	; 0xb0e <_Z20check_sonar_attachedv+0x26>
	
	TWIC.MASTER.CTRLC = 0x03; // issue a STOP condition
     b1a:	83 e0       	ldi	r24, 0x03	; 3
     b1c:	83 83       	std	Z+3, r24	; 0x03
	*/

	// READ THE RANGE DATA VIA I2C:

	// Send START + SLAVE DEVICE ADDRESS + WRITE BIT: 
	TWIC.MASTER.ADDR = 0xE0;		// 0xE0 = 0b11100000
     b1e:	80 ee       	ldi	r24, 0xE0	; 224
     b20:	86 83       	std	Z+6, r24	; 0x06
	while (!(TWIC.MASTER.STATUS & TWI_MASTER_CLKHOLD_bm));	//wait for the outbound message to complete
     b22:	80 91 84 04 	lds	r24, 0x0484
     b26:	85 ff       	sbrs	r24, 5
     b28:	fc cf       	rjmp	.-8      	; 0xb22 <_Z20check_sonar_attachedv+0x3a>
	
	// send the internal register number to read from
	TWIC.MASTER.DATA = 0x02;		// 0x02 = 0b00000010
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	e0 e8       	ldi	r30, 0x80	; 128
     b2e:	f4 e0       	ldi	r31, 0x04	; 4
     b30:	87 83       	std	Z+7, r24	; 0x07
	while (!(TWIC.MASTER.STATUS & TWI_MASTER_CLKHOLD_bm));	//wait for the outbound  message to complete
     b32:	e0 e8       	ldi	r30, 0x80	; 128
     b34:	f4 e0       	ldi	r31, 0x04	; 4
     b36:	80 91 84 04 	lds	r24, 0x0484
     b3a:	85 ff       	sbrs	r24, 5
     b3c:	fa cf       	rjmp	.-12     	; 0xb32 <_Z20check_sonar_attachedv+0x4a>

	TWIC.MASTER.CTRLC = 0x03; // issue a STOP condition
     b3e:	83 e0       	ldi	r24, 0x03	; 3
     b40:	83 83       	std	Z+3, r24	; 0x03

	// Send START + SLAVE DEVICE ADDRESS + READ BIT: 
	TWIC.MASTER.ADDR = 0xE1;		// 0xE1 = 0b11100001
     b42:	81 ee       	ldi	r24, 0xE1	; 225
     b44:	86 83       	std	Z+6, r24	; 0x06
	while (!(TWIC.MASTER.STATUS & TWI_MASTER_CLKHOLD_bm));	//wait for the outbound message to complete ??
     b46:	80 91 84 04 	lds	r24, 0x0484
     b4a:	85 ff       	sbrs	r24, 5
     b4c:	fc cf       	rjmp	.-8      	; 0xb46 <_Z20check_sonar_attachedv+0x5e>
	
	// an inbound message will come in now
	
	range_HIGH = TWIC.MASTER.DATA;
     b4e:	80 91 87 04 	lds	r24, 0x0487
	
	TWIC.MASTER.CTRLC = 0x02; // send an ACK to receive another byte
     b52:	82 e0       	ldi	r24, 0x02	; 2
     b54:	e0 e8       	ldi	r30, 0x80	; 128
     b56:	f4 e0       	ldi	r31, 0x04	; 4
     b58:	83 83       	std	Z+3, r24	; 0x03
	
	//i=jiffies+5; // wait 50ms
	i=0;
     b5a:	40 e0       	ldi	r20, 0x00	; 0
     b5c:	50 e0       	ldi	r21, 0x00	; 0
     b5e:	ba 01       	movw	r22, r20
	// an inbound message will come in now
	while (!(TWIC.MASTER.STATUS & TWI_MASTER_RIF_bm)&& i++<1600000);	//wait for the inbound message to complete
     b60:	80 91 84 04 	lds	r24, 0x0484
     b64:	87 fd       	sbrc	r24, 7
     b66:	0c c0       	rjmp	.+24     	; 0xb80 <_Z20check_sonar_attachedv+0x98>
     b68:	4f 5f       	subi	r20, 0xFF	; 255
     b6a:	5f 4f       	sbci	r21, 0xFF	; 255
     b6c:	6f 4f       	sbci	r22, 0xFF	; 255
     b6e:	7f 4f       	sbci	r23, 0xFF	; 255
     b70:	41 30       	cpi	r20, 0x01	; 1
     b72:	8a e6       	ldi	r24, 0x6A	; 106
     b74:	58 07       	cpc	r21, r24
     b76:	88 e1       	ldi	r24, 0x18	; 24
     b78:	68 07       	cpc	r22, r24
     b7a:	80 e0       	ldi	r24, 0x00	; 0
     b7c:	78 07       	cpc	r23, r24
     b7e:	81 f7       	brne	.-32     	; 0xb60 <_Z20check_sonar_attachedv+0x78>
	
	//if(jiffies>=i) return 0;

	range_LOW = TWIC.MASTER.DATA;
     b80:	80 91 87 04 	lds	r24, 0x0487
	
	TWIC.MASTER.CTRLC = 0b00000111; // send NACK followed by STOP condition	(0b00000111 = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc)
     b84:	87 e0       	ldi	r24, 0x07	; 7
     b86:	e0 e8       	ldi	r30, 0x80	; 128
     b88:	f4 e0       	ldi	r31, 0x04	; 4
     b8a:	83 83       	std	Z+3, r24	; 0x03
	range_FULL += range_LOW;		// append with the low byte

	return range_FULL;
}

bool check_sonar_attached(void)
     b8c:	81 e0       	ldi	r24, 0x01	; 1
     b8e:	40 30       	cpi	r20, 0x00	; 0
     b90:	9a e6       	ldi	r25, 0x6A	; 106
     b92:	59 07       	cpc	r21, r25
     b94:	98 e1       	ldi	r25, 0x18	; 24
     b96:	69 07       	cpc	r22, r25
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	79 07       	cpc	r23, r25
     b9c:	08 f0       	brcs	.+2      	; 0xba0 <_Z20check_sonar_attachedv+0xb8>
     b9e:	80 e0       	ldi	r24, 0x00	; 0
	range_FULL = range_HIGH*256;	// read in the high byte
	range_FULL += range_LOW;		// append with the low byte
	
	if(i<1600000) return 1;
	else return 0;
}
     ba0:	08 95       	ret

00000ba2 <_Z18swarm_interaction0i>:
// ============================================================================================
// ============================================================================================

// ################### DISORDERED BEHAVIOR ####################
void swarm_interaction0(int nei)
{
     ba2:	2f 92       	push	r2
     ba4:	3f 92       	push	r3
     ba6:	4f 92       	push	r4
     ba8:	5f 92       	push	r5
     baa:	6f 92       	push	r6
     bac:	7f 92       	push	r7
     bae:	8f 92       	push	r8
     bb0:	9f 92       	push	r9
     bb2:	af 92       	push	r10
     bb4:	bf 92       	push	r11
     bb6:	cf 92       	push	r12
     bb8:	df 92       	push	r13
     bba:	ef 92       	push	r14
     bbc:	ff 92       	push	r15
     bbe:	0f 93       	push	r16
     bc0:	1f 93       	push	r17
     bc2:	cf 93       	push	r28
     bc4:	df 93       	push	r29
     bc6:	cd b7       	in	r28, 0x3d	; 61
     bc8:	de b7       	in	r29, 0x3e	; 62
     bca:	2f 97       	sbiw	r28, 0x0f	; 15
     bcc:	cd bf       	out	0x3d, r28	; 61
     bce:	de bf       	out	0x3e, r29	; 62
     bd0:	8c 01       	movw	r16, r24
	float disx, disy, dis1, dis2, alph, force;
	float di, dj;
	bool flag = true;

	switch(nei)
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	91 05       	cpc	r25, r1
     bd6:	71 f0       	breq	.+28     	; 0xbf4 <_Z18swarm_interaction0i+0x52>
     bd8:	83 30       	cpi	r24, 0x03	; 3
     bda:	91 05       	cpc	r25, r1
     bdc:	1c f4       	brge	.+6      	; 0xbe4 <_Z18swarm_interaction0i+0x42>
     bde:	00 97       	sbiw	r24, 0x00	; 0
     be0:	f1 f0       	breq	.+60     	; 0xc1e <_Z18swarm_interaction0i+0x7c>
     be2:	e6 c1       	rjmp	.+972    	; 0xfb0 <_Z18swarm_interaction0i+0x40e>
     be4:	83 30       	cpi	r24, 0x03	; 3
     be6:	91 05       	cpc	r25, r1
     be8:	29 f1       	breq	.+74     	; 0xc34 <_Z18swarm_interaction0i+0x92>
     bea:	84 30       	cpi	r24, 0x04	; 4
     bec:	91 05       	cpc	r25, r1
     bee:	09 f0       	breq	.+2      	; 0xbf2 <_Z18swarm_interaction0i+0x50>
     bf0:	df c1       	rjmp	.+958    	; 0xfb0 <_Z18swarm_interaction0i+0x40e>
     bf2:	35 c0       	rjmp	.+106    	; 0xc5e <_Z18swarm_interaction0i+0xbc>
	{
		case LEFT_BOTTOM : di=-1.000; dj= 0.000; break;
     bf4:	0f 2e       	mov	r0, r31
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	8f 2e       	mov	r8, r31
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	9f 2e       	mov	r9, r31
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	af 2e       	mov	r10, r31
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	bf 2e       	mov	r11, r31
     c06:	f0 2d       	mov	r31, r0
     c08:	0f 2e       	mov	r0, r31
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	cf 2e       	mov	r12, r31
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	df 2e       	mov	r13, r31
     c12:	f0 e8       	ldi	r31, 0x80	; 128
     c14:	ef 2e       	mov	r14, r31
     c16:	ff eb       	ldi	r31, 0xBF	; 191
     c18:	ff 2e       	mov	r15, r31
     c1a:	f0 2d       	mov	r31, r0
     c1c:	34 c0       	rjmp	.+104    	; 0xc86 <_Z18swarm_interaction0i+0xe4>
		case RIGHT_BOTTOM: di= 1.000; dj= 0.000; break;
		case BOTTOM_RIGHT: di= 0.000; dj= 1.000; break;
     c1e:	0f 2e       	mov	r0, r31
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	8f 2e       	mov	r8, r31
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	9f 2e       	mov	r9, r31
     c28:	f0 e8       	ldi	r31, 0x80	; 128
     c2a:	af 2e       	mov	r10, r31
     c2c:	ff e3       	ldi	r31, 0x3F	; 63
     c2e:	bf 2e       	mov	r11, r31
     c30:	f0 2d       	mov	r31, r0
     c32:	0a c0       	rjmp	.+20     	; 0xc48 <_Z18swarm_interaction0i+0xa6>
		case LEFT_TOP    : di= 0.000; dj=-1.000; break;
     c34:	0f 2e       	mov	r0, r31
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	8f 2e       	mov	r8, r31
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	9f 2e       	mov	r9, r31
     c3e:	f0 e8       	ldi	r31, 0x80	; 128
     c40:	af 2e       	mov	r10, r31
     c42:	ff eb       	ldi	r31, 0xBF	; 191
     c44:	bf 2e       	mov	r11, r31
     c46:	f0 2d       	mov	r31, r0
     c48:	0f 2e       	mov	r0, r31
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	cf 2e       	mov	r12, r31
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	df 2e       	mov	r13, r31
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	ef 2e       	mov	r14, r31
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	ff 2e       	mov	r15, r31
     c5a:	f0 2d       	mov	r31, r0
     c5c:	14 c0       	rjmp	.+40     	; 0xc86 <_Z18swarm_interaction0i+0xe4>
	bool flag = true;

	switch(nei)
	{
		case LEFT_BOTTOM : di=-1.000; dj= 0.000; break;
		case RIGHT_BOTTOM: di= 1.000; dj= 0.000; break;
     c5e:	0f 2e       	mov	r0, r31
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	8f 2e       	mov	r8, r31
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	9f 2e       	mov	r9, r31
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	af 2e       	mov	r10, r31
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	bf 2e       	mov	r11, r31
     c70:	f0 2d       	mov	r31, r0
     c72:	0f 2e       	mov	r0, r31
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	cf 2e       	mov	r12, r31
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	df 2e       	mov	r13, r31
     c7c:	f0 e8       	ldi	r31, 0x80	; 128
     c7e:	ef 2e       	mov	r14, r31
     c80:	ff e3       	ldi	r31, 0x3F	; 63
     c82:	ff 2e       	mov	r15, r31
     c84:	f0 2d       	mov	r31, r0
		default: flag = false;
	}

	if(flag)
	{
		disx = agent0.neix[nei] - agent0.px + ld * di;
     c86:	40 90 55 20 	lds	r4, 0x2055
     c8a:	50 90 56 20 	lds	r5, 0x2056
     c8e:	60 90 57 20 	lds	r6, 0x2057
     c92:	70 90 58 20 	lds	r7, 0x2058
     c96:	f8 01       	movw	r30, r16
     c98:	ee 0f       	add	r30, r30
     c9a:	ff 1f       	adc	r31, r31
     c9c:	ee 0f       	add	r30, r30
     c9e:	ff 1f       	adc	r31, r31
     ca0:	e1 5b       	subi	r30, 0xB1	; 177
     ca2:	f4 4d       	sbci	r31, 0xD4	; 212
     ca4:	60 81       	ld	r22, Z
     ca6:	71 81       	ldd	r23, Z+1	; 0x01
     ca8:	82 81       	ldd	r24, Z+2	; 0x02
     caa:	93 81       	ldd	r25, Z+3	; 0x03
     cac:	20 91 3b 2b 	lds	r18, 0x2B3B
     cb0:	30 91 3c 2b 	lds	r19, 0x2B3C
     cb4:	40 91 3d 2b 	lds	r20, 0x2B3D
     cb8:	50 91 3e 2b 	lds	r21, 0x2B3E
     cbc:	0e 94 08 2f 	call	0x5e10	; 0x5e10 <__subsf3>
     cc0:	69 83       	std	Y+1, r22	; 0x01
     cc2:	7a 83       	std	Y+2, r23	; 0x02
     cc4:	8b 83       	std	Y+3, r24	; 0x03
     cc6:	9c 83       	std	Y+4, r25	; 0x04
     cc8:	c3 01       	movw	r24, r6
     cca:	b2 01       	movw	r22, r4
     ccc:	a7 01       	movw	r20, r14
     cce:	96 01       	movw	r18, r12
     cd0:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
     cd4:	9b 01       	movw	r18, r22
     cd6:	ac 01       	movw	r20, r24
     cd8:	69 81       	ldd	r22, Y+1	; 0x01
     cda:	7a 81       	ldd	r23, Y+2	; 0x02
     cdc:	8b 81       	ldd	r24, Y+3	; 0x03
     cde:	9c 81       	ldd	r25, Y+4	; 0x04
     ce0:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__addsf3>
     ce4:	69 83       	std	Y+1, r22	; 0x01
     ce6:	7d 83       	std	Y+5, r23	; 0x05
     ce8:	8e 83       	std	Y+6, r24	; 0x06
     cea:	9f 83       	std	Y+7, r25	; 0x07
		disy = agent0.neiy[nei] - agent0.py + ld * dj;
     cec:	f8 01       	movw	r30, r16
     cee:	ee 0f       	add	r30, r30
     cf0:	ff 1f       	adc	r31, r31
     cf2:	ee 0f       	add	r30, r30
     cf4:	ff 1f       	adc	r31, r31
     cf6:	e9 59       	subi	r30, 0x99	; 153
     cf8:	f4 4d       	sbci	r31, 0xD4	; 212
     cfa:	60 81       	ld	r22, Z
     cfc:	71 81       	ldd	r23, Z+1	; 0x01
     cfe:	82 81       	ldd	r24, Z+2	; 0x02
     d00:	93 81       	ldd	r25, Z+3	; 0x03
     d02:	20 91 3f 2b 	lds	r18, 0x2B3F
     d06:	30 91 40 2b 	lds	r19, 0x2B40
     d0a:	40 91 41 2b 	lds	r20, 0x2B41
     d0e:	50 91 42 2b 	lds	r21, 0x2B42
     d12:	0e 94 08 2f 	call	0x5e10	; 0x5e10 <__subsf3>
     d16:	6b 01       	movw	r12, r22
     d18:	7c 01       	movw	r14, r24
     d1a:	c3 01       	movw	r24, r6
     d1c:	b2 01       	movw	r22, r4
     d1e:	a5 01       	movw	r20, r10
     d20:	94 01       	movw	r18, r8
     d22:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
     d26:	9b 01       	movw	r18, r22
     d28:	ac 01       	movw	r20, r24
     d2a:	c7 01       	movw	r24, r14
     d2c:	b6 01       	movw	r22, r12
     d2e:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__addsf3>
     d32:	36 2e       	mov	r3, r22
     d34:	27 2e       	mov	r2, r23
     d36:	88 87       	std	Y+8, r24	; 0x08
     d38:	99 87       	std	Y+9, r25	; 0x09

		dis2 = disx * disx + disy * disy;
     d3a:	59 81       	ldd	r21, Y+1	; 0x01
     d3c:	4d 81       	ldd	r20, Y+5	; 0x05
     d3e:	3e 81       	ldd	r19, Y+6	; 0x06
     d40:	2f 81       	ldd	r18, Y+7	; 0x07
     d42:	85 2f       	mov	r24, r21
     d44:	94 2f       	mov	r25, r20
     d46:	a3 2f       	mov	r26, r19
     d48:	b2 2f       	mov	r27, r18
     d4a:	bc 01       	movw	r22, r24
     d4c:	cd 01       	movw	r24, r26
     d4e:	fa 01       	movw	r30, r20
     d50:	0f 2f       	mov	r16, r31
     d52:	1e 2f       	mov	r17, r30
     d54:	23 2f       	mov	r18, r19
     d56:	3b 2f       	mov	r19, r27
     d58:	a9 01       	movw	r20, r18
     d5a:	98 01       	movw	r18, r16
     d5c:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
     d60:	6b 01       	movw	r12, r22
     d62:	7c 01       	movw	r14, r24
     d64:	a1 01       	movw	r20, r2
     d66:	38 85       	ldd	r19, Y+8	; 0x08
     d68:	29 85       	ldd	r18, Y+9	; 0x09
     d6a:	85 2f       	mov	r24, r21
     d6c:	94 2f       	mov	r25, r20
     d6e:	a3 2f       	mov	r26, r19
     d70:	b2 2f       	mov	r27, r18
     d72:	bc 01       	movw	r22, r24
     d74:	cd 01       	movw	r24, r26
     d76:	f1 01       	movw	r30, r2
     d78:	0f 2f       	mov	r16, r31
     d7a:	1e 2f       	mov	r17, r30
     d7c:	23 2f       	mov	r18, r19
     d7e:	3b 2f       	mov	r19, r27
     d80:	a9 01       	movw	r20, r18
     d82:	98 01       	movw	r18, r16
     d84:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
     d88:	9b 01       	movw	r18, r22
     d8a:	ac 01       	movw	r20, r24
     d8c:	c7 01       	movw	r24, r14
     d8e:	b6 01       	movw	r22, r12
     d90:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__addsf3>
     d94:	6e 87       	std	Y+14, r22	; 0x0e
     d96:	7f 87       	std	Y+15, r23	; 0x0f
     d98:	8c 01       	movw	r16, r24
		dis1 = sqrt(dis2);
     d9a:	47 2f       	mov	r20, r23
     d9c:	86 2f       	mov	r24, r22
     d9e:	94 2f       	mov	r25, r20
     da0:	a0 2f       	mov	r26, r16
     da2:	b1 2f       	mov	r27, r17
     da4:	bc 01       	movw	r22, r24
     da6:	cd 01       	movw	r24, r26
     da8:	0e 94 2f 32 	call	0x645e	; 0x645e <sqrt>
     dac:	2b 01       	movw	r4, r22
     dae:	3c 01       	movw	r6, r24

		if(dis2!=0.0)
     db0:	5e 85       	ldd	r21, Y+14	; 0x0e
     db2:	4f 85       	ldd	r20, Y+15	; 0x0f
     db4:	85 2f       	mov	r24, r21
     db6:	94 2f       	mov	r25, r20
     db8:	a0 2f       	mov	r26, r16
     dba:	b1 2f       	mov	r27, r17
     dbc:	bc 01       	movw	r22, r24
     dbe:	cd 01       	movw	r24, r26
     dc0:	20 e0       	ldi	r18, 0x00	; 0
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	a9 01       	movw	r20, r18
     dc6:	0e 94 6d 2f 	call	0x5eda	; 0x5eda <__cmpsf2>
     dca:	88 23       	and	r24, r24
     dcc:	09 f4       	brne	.+2      	; 0xdd0 <_Z18swarm_interaction0i+0x22e>
     dce:	f0 c0       	rjmp	.+480    	; 0xfb0 <_Z18swarm_interaction0i+0x40e>
		{
			alph = 1.0 + d0 * (disx * cos(agent0.hd) + disy * sin(agent0.hd)) / dis1; //inner product
     dd0:	c0 90 4b 2b 	lds	r12, 0x2B4B
     dd4:	d0 90 4c 2b 	lds	r13, 0x2B4C
     dd8:	e0 90 4d 2b 	lds	r14, 0x2B4D
     ddc:	f0 90 4e 2b 	lds	r15, 0x2B4E
     de0:	c7 01       	movw	r24, r14
     de2:	b6 01       	movw	r22, r12
     de4:	0e 94 71 2f 	call	0x5ee2	; 0x5ee2 <cos>
     de8:	4b 01       	movw	r8, r22
     dea:	5c 01       	movw	r10, r24
     dec:	c7 01       	movw	r24, r14
     dee:	b6 01       	movw	r22, r12
     df0:	0e 94 25 32 	call	0x644a	; 0x644a <sin>
     df4:	6a 87       	std	Y+10, r22	; 0x0a
     df6:	7b 87       	std	Y+11, r23	; 0x0b
     df8:	8c 87       	std	Y+12, r24	; 0x0c
     dfa:	9d 87       	std	Y+13, r25	; 0x0d
			force = -cf * (rc0 / dis1 - 1.0) * rc0 * rc0 / dis2;
     dfc:	c0 90 2d 20 	lds	r12, 0x202D
     e00:	d0 90 2e 20 	lds	r13, 0x202E
     e04:	e0 90 2f 20 	lds	r14, 0x202F
     e08:	f0 90 30 20 	lds	r15, 0x2030
		dis2 = disx * disx + disy * disy;
		dis1 = sqrt(dis2);

		if(dis2!=0.0)
		{
			alph = 1.0 + d0 * (disx * cos(agent0.hd) + disy * sin(agent0.hd)) / dis1; //inner product
     e0c:	59 81       	ldd	r21, Y+1	; 0x01
     e0e:	4d 81       	ldd	r20, Y+5	; 0x05
     e10:	3e 81       	ldd	r19, Y+6	; 0x06
     e12:	2f 81       	ldd	r18, Y+7	; 0x07
     e14:	85 2f       	mov	r24, r21
     e16:	94 2f       	mov	r25, r20
     e18:	a3 2f       	mov	r26, r19
     e1a:	b2 2f       	mov	r27, r18
     e1c:	bc 01       	movw	r22, r24
     e1e:	cd 01       	movw	r24, r26
     e20:	a5 01       	movw	r20, r10
     e22:	94 01       	movw	r18, r8
     e24:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
     e28:	4b 01       	movw	r8, r22
     e2a:	5c 01       	movw	r10, r24
     e2c:	a1 01       	movw	r20, r2
     e2e:	38 85       	ldd	r19, Y+8	; 0x08
     e30:	29 85       	ldd	r18, Y+9	; 0x09
     e32:	85 2f       	mov	r24, r21
     e34:	94 2f       	mov	r25, r20
     e36:	a3 2f       	mov	r26, r19
     e38:	b2 2f       	mov	r27, r18
     e3a:	bc 01       	movw	r22, r24
     e3c:	cd 01       	movw	r24, r26
     e3e:	2a 85       	ldd	r18, Y+10	; 0x0a
     e40:	3b 85       	ldd	r19, Y+11	; 0x0b
     e42:	4c 85       	ldd	r20, Y+12	; 0x0c
     e44:	5d 85       	ldd	r21, Y+13	; 0x0d
     e46:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
     e4a:	9b 01       	movw	r18, r22
     e4c:	ac 01       	movw	r20, r24
     e4e:	c5 01       	movw	r24, r10
     e50:	b4 01       	movw	r22, r8
     e52:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__addsf3>
     e56:	20 91 31 20 	lds	r18, 0x2031
     e5a:	30 91 32 20 	lds	r19, 0x2032
     e5e:	40 91 33 20 	lds	r20, 0x2033
     e62:	50 91 34 20 	lds	r21, 0x2034
     e66:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
     e6a:	a3 01       	movw	r20, r6
     e6c:	92 01       	movw	r18, r4
     e6e:	0e 94 74 2f 	call	0x5ee8	; 0x5ee8 <__divsf3>
     e72:	20 e0       	ldi	r18, 0x00	; 0
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	40 e8       	ldi	r20, 0x80	; 128
     e78:	5f e3       	ldi	r21, 0x3F	; 63
     e7a:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__addsf3>
     e7e:	6a 87       	std	Y+10, r22	; 0x0a
     e80:	7b 87       	std	Y+11, r23	; 0x0b
     e82:	8c 87       	std	Y+12, r24	; 0x0c
     e84:	9d 87       	std	Y+13, r25	; 0x0d
			force = -cf * (rc0 / dis1 - 1.0) * rc0 * rc0 / dis2;
     e86:	80 90 4d 20 	lds	r8, 0x204D
     e8a:	90 90 4e 20 	lds	r9, 0x204E
     e8e:	a0 90 4f 20 	lds	r10, 0x204F
     e92:	b0 90 50 20 	lds	r11, 0x2050
     e96:	b7 fa       	bst	r11, 7
     e98:	b0 94       	com	r11
     e9a:	b7 f8       	bld	r11, 7
     e9c:	b0 94       	com	r11
     e9e:	c7 01       	movw	r24, r14
     ea0:	b6 01       	movw	r22, r12
     ea2:	a3 01       	movw	r20, r6
     ea4:	92 01       	movw	r18, r4
     ea6:	0e 94 74 2f 	call	0x5ee8	; 0x5ee8 <__divsf3>
     eaa:	20 e0       	ldi	r18, 0x00	; 0
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	40 e8       	ldi	r20, 0x80	; 128
     eb0:	5f e3       	ldi	r21, 0x3F	; 63
     eb2:	0e 94 08 2f 	call	0x5e10	; 0x5e10 <__subsf3>
     eb6:	9b 01       	movw	r18, r22
     eb8:	ac 01       	movw	r20, r24
     eba:	c5 01       	movw	r24, r10
     ebc:	b4 01       	movw	r22, r8
     ebe:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
     ec2:	a7 01       	movw	r20, r14
     ec4:	96 01       	movw	r18, r12
     ec6:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
     eca:	a7 01       	movw	r20, r14
     ecc:	96 01       	movw	r18, r12
     ece:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
     ed2:	fe 85       	ldd	r31, Y+14	; 0x0e
     ed4:	ef 85       	ldd	r30, Y+15	; 0x0f
     ed6:	50 2f       	mov	r21, r16
     ed8:	41 2f       	mov	r20, r17
     eda:	0f 2f       	mov	r16, r31
     edc:	1e 2f       	mov	r17, r30
     ede:	25 2f       	mov	r18, r21
     ee0:	34 2f       	mov	r19, r20
     ee2:	a9 01       	movw	r20, r18
     ee4:	98 01       	movw	r18, r16
     ee6:	0e 94 74 2f 	call	0x5ee8	; 0x5ee8 <__divsf3>
     eea:	9b 01       	movw	r18, r22
     eec:	ac 01       	movw	r20, r24
			
			forcex += alph * force * disx / dis1;
     eee:	6a 85       	ldd	r22, Y+10	; 0x0a
     ef0:	7b 85       	ldd	r23, Y+11	; 0x0b
     ef2:	8c 85       	ldd	r24, Y+12	; 0x0c
     ef4:	9d 85       	ldd	r25, Y+13	; 0x0d
     ef6:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
     efa:	c6 2e       	mov	r12, r22
     efc:	f7 2e       	mov	r15, r23
     efe:	88 2e       	mov	r8, r24
     f00:	e9 2e       	mov	r14, r25
     f02:	86 2f       	mov	r24, r22
     f04:	9f 2d       	mov	r25, r15
     f06:	a8 2d       	mov	r26, r8
     f08:	be 2d       	mov	r27, r14
     f0a:	bc 01       	movw	r22, r24
     f0c:	cd 01       	movw	r24, r26
     f0e:	f9 81       	ldd	r31, Y+1	; 0x01
     f10:	ed 81       	ldd	r30, Y+5	; 0x05
     f12:	5e 81       	ldd	r21, Y+6	; 0x06
     f14:	4f 81       	ldd	r20, Y+7	; 0x07
     f16:	0f 2f       	mov	r16, r31
     f18:	1e 2f       	mov	r17, r30
     f1a:	25 2f       	mov	r18, r21
     f1c:	34 2f       	mov	r19, r20
     f1e:	a9 01       	movw	r20, r18
     f20:	98 01       	movw	r18, r16
     f22:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
     f26:	a3 01       	movw	r20, r6
     f28:	92 01       	movw	r18, r4
     f2a:	0e 94 74 2f 	call	0x5ee8	; 0x5ee8 <__divsf3>
     f2e:	9b 01       	movw	r18, r22
     f30:	ac 01       	movw	r20, r24
     f32:	60 91 d4 20 	lds	r22, 0x20D4
     f36:	70 91 d5 20 	lds	r23, 0x20D5
     f3a:	80 91 d6 20 	lds	r24, 0x20D6
     f3e:	90 91 d7 20 	lds	r25, 0x20D7
     f42:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__addsf3>
     f46:	dc 01       	movw	r26, r24
     f48:	cb 01       	movw	r24, r22
     f4a:	80 93 d4 20 	sts	0x20D4, r24
     f4e:	90 93 d5 20 	sts	0x20D5, r25
     f52:	a0 93 d6 20 	sts	0x20D6, r26
     f56:	b0 93 d7 20 	sts	0x20D7, r27
			forcey += alph * force * disy / dis1;
     f5a:	8c 2d       	mov	r24, r12
     f5c:	9f 2d       	mov	r25, r15
     f5e:	a8 2d       	mov	r26, r8
     f60:	be 2d       	mov	r27, r14
     f62:	bc 01       	movw	r22, r24
     f64:	cd 01       	movw	r24, r26
     f66:	f1 01       	movw	r30, r2
     f68:	58 85       	ldd	r21, Y+8	; 0x08
     f6a:	49 85       	ldd	r20, Y+9	; 0x09
     f6c:	0f 2f       	mov	r16, r31
     f6e:	1e 2f       	mov	r17, r30
     f70:	25 2f       	mov	r18, r21
     f72:	34 2f       	mov	r19, r20
     f74:	a9 01       	movw	r20, r18
     f76:	98 01       	movw	r18, r16
     f78:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
     f7c:	a3 01       	movw	r20, r6
     f7e:	92 01       	movw	r18, r4
     f80:	0e 94 74 2f 	call	0x5ee8	; 0x5ee8 <__divsf3>
     f84:	9b 01       	movw	r18, r22
     f86:	ac 01       	movw	r20, r24
     f88:	60 91 d0 20 	lds	r22, 0x20D0
     f8c:	70 91 d1 20 	lds	r23, 0x20D1
     f90:	80 91 d2 20 	lds	r24, 0x20D2
     f94:	90 91 d3 20 	lds	r25, 0x20D3
     f98:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__addsf3>
     f9c:	dc 01       	movw	r26, r24
     f9e:	cb 01       	movw	r24, r22
     fa0:	80 93 d0 20 	sts	0x20D0, r24
     fa4:	90 93 d1 20 	sts	0x20D1, r25
     fa8:	a0 93 d2 20 	sts	0x20D2, r26
     fac:	b0 93 d3 20 	sts	0x20D3, r27
		}
	}
}
     fb0:	2f 96       	adiw	r28, 0x0f	; 15
     fb2:	cd bf       	out	0x3d, r28	; 61
     fb4:	de bf       	out	0x3e, r29	; 62
     fb6:	df 91       	pop	r29
     fb8:	cf 91       	pop	r28
     fba:	1f 91       	pop	r17
     fbc:	0f 91       	pop	r16
     fbe:	ff 90       	pop	r15
     fc0:	ef 90       	pop	r14
     fc2:	df 90       	pop	r13
     fc4:	cf 90       	pop	r12
     fc6:	bf 90       	pop	r11
     fc8:	af 90       	pop	r10
     fca:	9f 90       	pop	r9
     fcc:	8f 90       	pop	r8
     fce:	7f 90       	pop	r7
     fd0:	6f 90       	pop	r6
     fd2:	5f 90       	pop	r5
     fd4:	4f 90       	pop	r4
     fd6:	3f 90       	pop	r3
     fd8:	2f 90       	pop	r2
     fda:	08 95       	ret

00000fdc <_Z16swarm_disorderedv>:
// --------------------------------------------------------------------------------------------
float swarm_disordered()
{
     fdc:	2f 92       	push	r2
     fde:	3f 92       	push	r3
     fe0:	4f 92       	push	r4
     fe2:	5f 92       	push	r5
     fe4:	6f 92       	push	r6
     fe6:	7f 92       	push	r7
     fe8:	8f 92       	push	r8
     fea:	9f 92       	push	r9
     fec:	af 92       	push	r10
     fee:	bf 92       	push	r11
     ff0:	cf 92       	push	r12
     ff2:	df 92       	push	r13
     ff4:	ef 92       	push	r14
     ff6:	ff 92       	push	r15
     ff8:	0f 93       	push	r16
     ffa:	1f 93       	push	r17
     ffc:	cf 93       	push	r28
     ffe:	df 93       	push	r29
    1000:	cd b7       	in	r28, 0x3d	; 61
    1002:	de b7       	in	r29, 0x3e	; 62
    1004:	6e 97       	sbiw	r28, 0x1e	; 30
    1006:	cd bf       	out	0x3d, r28	; 61
    1008:	de bf       	out	0x3e, r29	; 62
	int i;
	float dvx, dvy, lx, ly, vabs, ds, fx, fy;
	float dir = agent0.hd;
    100a:	c0 90 4b 2b 	lds	r12, 0x2B4B
    100e:	d0 90 4c 2b 	lds	r13, 0x2B4C
    1012:	e0 90 4d 2b 	lds	r14, 0x2B4D
    1016:	f0 90 4e 2b 	lds	r15, 0x2B4E

	// ===== calculation of forces =====
	//self-propel force and viscosity
	dvx = acc * cos(dir) - gmma0 * agent0.vx;
    101a:	80 90 51 20 	lds	r8, 0x2051
    101e:	90 90 52 20 	lds	r9, 0x2052
    1022:	a0 90 53 20 	lds	r10, 0x2053
    1026:	b0 90 54 20 	lds	r11, 0x2054
    102a:	c7 01       	movw	r24, r14
    102c:	b6 01       	movw	r22, r12
    102e:	0e 94 71 2f 	call	0x5ee2	; 0x5ee2 <cos>
    1032:	6d 87       	std	Y+13, r22	; 0x0d
    1034:	7e 87       	std	Y+14, r23	; 0x0e
    1036:	8f 87       	std	Y+15, r24	; 0x0f
    1038:	98 8b       	std	Y+16, r25	; 0x10
    103a:	40 90 39 20 	lds	r4, 0x2039
    103e:	50 90 3a 20 	lds	r5, 0x203A
    1042:	60 90 3b 20 	lds	r6, 0x203B
    1046:	70 90 3c 20 	lds	r7, 0x203C
    104a:	c5 01       	movw	r24, r10
    104c:	b4 01       	movw	r22, r8
    104e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1050:	3e 85       	ldd	r19, Y+14	; 0x0e
    1052:	4f 85       	ldd	r20, Y+15	; 0x0f
    1054:	58 89       	ldd	r21, Y+16	; 0x10
    1056:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    105a:	69 83       	std	Y+1, r22	; 0x01
    105c:	7a 83       	std	Y+2, r23	; 0x02
    105e:	8b 83       	std	Y+3, r24	; 0x03
    1060:	9c 83       	std	Y+4, r25	; 0x04
    1062:	c3 01       	movw	r24, r6
    1064:	b2 01       	movw	r22, r4
    1066:	20 91 43 2b 	lds	r18, 0x2B43
    106a:	30 91 44 2b 	lds	r19, 0x2B44
    106e:	40 91 45 2b 	lds	r20, 0x2B45
    1072:	50 91 46 2b 	lds	r21, 0x2B46
    1076:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    107a:	9b 01       	movw	r18, r22
    107c:	ac 01       	movw	r20, r24
    107e:	69 81       	ldd	r22, Y+1	; 0x01
    1080:	7a 81       	ldd	r23, Y+2	; 0x02
    1082:	8b 81       	ldd	r24, Y+3	; 0x03
    1084:	9c 81       	ldd	r25, Y+4	; 0x04
    1086:	0e 94 08 2f 	call	0x5e10	; 0x5e10 <__subsf3>
    108a:	36 2e       	mov	r3, r22
    108c:	27 2e       	mov	r2, r23
    108e:	89 83       	std	Y+1, r24	; 0x01
    1090:	99 87       	std	Y+9, r25	; 0x09
	dvy = acc * sin(dir) - gmma0 * agent0.vy;
    1092:	c7 01       	movw	r24, r14
    1094:	b6 01       	movw	r22, r12
    1096:	0e 94 25 32 	call	0x644a	; 0x644a <sin>
    109a:	6d 83       	std	Y+5, r22	; 0x05
    109c:	7e 83       	std	Y+6, r23	; 0x06
    109e:	8f 83       	std	Y+7, r24	; 0x07
    10a0:	98 87       	std	Y+8, r25	; 0x08
    10a2:	c5 01       	movw	r24, r10
    10a4:	b4 01       	movw	r22, r8
    10a6:	2d 81       	ldd	r18, Y+5	; 0x05
    10a8:	3e 81       	ldd	r19, Y+6	; 0x06
    10aa:	4f 81       	ldd	r20, Y+7	; 0x07
    10ac:	58 85       	ldd	r21, Y+8	; 0x08
    10ae:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    10b2:	6b 01       	movw	r12, r22
    10b4:	7c 01       	movw	r14, r24
    10b6:	c3 01       	movw	r24, r6
    10b8:	b2 01       	movw	r22, r4
    10ba:	20 91 47 2b 	lds	r18, 0x2B47
    10be:	30 91 48 2b 	lds	r19, 0x2B48
    10c2:	40 91 49 2b 	lds	r20, 0x2B49
    10c6:	50 91 4a 2b 	lds	r21, 0x2B4A
    10ca:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    10ce:	9b 01       	movw	r18, r22
    10d0:	ac 01       	movw	r20, r24
    10d2:	c7 01       	movw	r24, r14
    10d4:	b6 01       	movw	r22, r12
    10d6:	0e 94 08 2f 	call	0x5e10	; 0x5e10 <__subsf3>
    10da:	f6 2e       	mov	r15, r22
    10dc:	e7 2e       	mov	r14, r23
    10de:	c8 2e       	mov	r12, r24
    10e0:	89 2e       	mov	r8, r25

	//interaction force with 6 neighbors
	forcex=0.0; forcey=0.0;
    10e2:	80 e0       	ldi	r24, 0x00	; 0
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	dc 01       	movw	r26, r24
    10e8:	80 93 d4 20 	sts	0x20D4, r24
    10ec:	90 93 d5 20 	sts	0x20D5, r25
    10f0:	a0 93 d6 20 	sts	0x20D6, r26
    10f4:	b0 93 d7 20 	sts	0x20D7, r27
    10f8:	80 93 d0 20 	sts	0x20D0, r24
    10fc:	90 93 d1 20 	sts	0x20D1, r25
    1100:	a0 93 d2 20 	sts	0x20D2, r26
    1104:	b0 93 d3 20 	sts	0x20D3, r27
    1108:	03 ec       	ldi	r16, 0xC3	; 195
    110a:	1a e2       	ldi	r17, 0x2A	; 42

	for(i=0;i<NUM_NEIGHBORS;i++)
    110c:	80 e0       	ldi	r24, 0x00	; 0
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	5c 01       	movw	r10, r24
	{
		if(connected[i]){
    1112:	d8 01       	movw	r26, r16
    1114:	8d 91       	ld	r24, X+
    1116:	8d 01       	movw	r16, r26
    1118:	88 23       	and	r24, r24
    111a:	19 f0       	breq	.+6      	; 0x1122 <_Z16swarm_disorderedv+0x146>
			swarm_interaction0(i);
    111c:	c5 01       	movw	r24, r10
    111e:	0e 94 d1 05 	call	0xba2	; 0xba2 <_Z18swarm_interaction0i>
	dvy = acc * sin(dir) - gmma0 * agent0.vy;

	//interaction force with 6 neighbors
	forcex=0.0; forcey=0.0;

	for(i=0;i<NUM_NEIGHBORS;i++)
    1122:	08 94       	sec
    1124:	a1 1c       	adc	r10, r1
    1126:	b1 1c       	adc	r11, r1
    1128:	b6 e0       	ldi	r27, 0x06	; 6
    112a:	ab 16       	cp	r10, r27
    112c:	b1 04       	cpc	r11, r1
    112e:	89 f7       	brne	.-30     	; 0x1112 <_Z16swarm_disorderedv+0x136>
		if(connected[i]){
			swarm_interaction0(i);
		}
	}

	dvx = dvx + forcex;
    1130:	a1 01       	movw	r20, r2
    1132:	39 81       	ldd	r19, Y+1	; 0x01
    1134:	29 85       	ldd	r18, Y+9	; 0x09
    1136:	85 2f       	mov	r24, r21
    1138:	92 2d       	mov	r25, r2
    113a:	a3 2f       	mov	r26, r19
    113c:	b2 2f       	mov	r27, r18
    113e:	bc 01       	movw	r22, r24
    1140:	cd 01       	movw	r24, r26
    1142:	20 91 d4 20 	lds	r18, 0x20D4
    1146:	30 91 d5 20 	lds	r19, 0x20D5
    114a:	40 91 d6 20 	lds	r20, 0x20D6
    114e:	50 91 d7 20 	lds	r21, 0x20D7
    1152:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__addsf3>
    1156:	36 2e       	mov	r3, r22
    1158:	27 2e       	mov	r2, r23
    115a:	18 2f       	mov	r17, r24
    115c:	09 2f       	mov	r16, r25
	dvy = dvy + forcey;
    115e:	a7 01       	movw	r20, r14
    1160:	85 2f       	mov	r24, r21
    1162:	9e 2d       	mov	r25, r14
    1164:	ac 2d       	mov	r26, r12
    1166:	b8 2d       	mov	r27, r8
    1168:	bc 01       	movw	r22, r24
    116a:	cd 01       	movw	r24, r26
    116c:	20 91 d0 20 	lds	r18, 0x20D0
    1170:	30 91 d1 20 	lds	r19, 0x20D1
    1174:	40 91 d2 20 	lds	r20, 0x20D2
    1178:	50 91 d3 20 	lds	r21, 0x20D3
    117c:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__addsf3>
    1180:	86 2e       	mov	r8, r22
    1182:	47 2e       	mov	r4, r23
    1184:	b8 2e       	mov	r11, r24
    1186:	a9 2e       	mov	r10, r25

	//spring term (Zero-length spring). fixed point = (0,0)
	lx = - agent0.px;
    1188:	80 91 3b 2b 	lds	r24, 0x2B3B
    118c:	90 91 3c 2b 	lds	r25, 0x2B3C
    1190:	a0 91 3d 2b 	lds	r26, 0x2B3D
    1194:	b0 91 3e 2b 	lds	r27, 0x2B3E
    1198:	89 87       	std	Y+9, r24	; 0x09
    119a:	9a 87       	std	Y+10, r25	; 0x0a
    119c:	ab 87       	std	Y+11, r26	; 0x0b
    119e:	bc 87       	std	Y+12, r27	; 0x0c
	ly = - agent0.py;
    11a0:	80 91 3f 2b 	lds	r24, 0x2B3F
    11a4:	90 91 40 2b 	lds	r25, 0x2B40
    11a8:	a0 91 41 2b 	lds	r26, 0x2B41
    11ac:	b0 91 42 2b 	lds	r27, 0x2B42
    11b0:	89 8b       	std	Y+17, r24	; 0x11
    11b2:	9a 8b       	std	Y+18, r25	; 0x12
    11b4:	ab 8b       	std	Y+19, r26	; 0x13
    11b6:	bc 8b       	std	Y+20, r27	; 0x14
	dvx = dvx + ka0 * lx;
    11b8:	c0 90 35 20 	lds	r12, 0x2035
    11bc:	d0 90 36 20 	lds	r13, 0x2036
    11c0:	e0 90 37 20 	lds	r14, 0x2037
    11c4:	f0 90 38 20 	lds	r15, 0x2038

	dvx = dvx + forcex;
	dvy = dvy + forcey;

	//spring term (Zero-length spring). fixed point = (0,0)
	lx = - agent0.px;
    11c8:	29 85       	ldd	r18, Y+9	; 0x09
    11ca:	3a 85       	ldd	r19, Y+10	; 0x0a
    11cc:	4b 85       	ldd	r20, Y+11	; 0x0b
    11ce:	5c 85       	ldd	r21, Y+12	; 0x0c
    11d0:	50 58       	subi	r21, 0x80	; 128
	ly = - agent0.py;
	dvx = dvx + ka0 * lx;
    11d2:	c7 01       	movw	r24, r14
    11d4:	b6 01       	movw	r22, r12
    11d6:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    11da:	9b 01       	movw	r18, r22
    11dc:	ac 01       	movw	r20, r24
    11de:	f1 01       	movw	r30, r2
    11e0:	b8 01       	movw	r22, r16
    11e2:	8f 2f       	mov	r24, r31
    11e4:	9e 2f       	mov	r25, r30
    11e6:	a7 2f       	mov	r26, r23
    11e8:	b6 2f       	mov	r27, r22
    11ea:	bc 01       	movw	r22, r24
    11ec:	cd 01       	movw	r24, r26
    11ee:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__addsf3>
    11f2:	69 8f       	std	Y+25, r22	; 0x19
    11f4:	7a 8f       	std	Y+26, r23	; 0x1a
    11f6:	8b 8f       	std	Y+27, r24	; 0x1b
    11f8:	9c 8f       	std	Y+28, r25	; 0x1c
	dvx = dvx + forcex;
	dvy = dvy + forcey;

	//spring term (Zero-length spring). fixed point = (0,0)
	lx = - agent0.px;
	ly = - agent0.py;
    11fa:	29 89       	ldd	r18, Y+17	; 0x11
    11fc:	3a 89       	ldd	r19, Y+18	; 0x12
    11fe:	4b 89       	ldd	r20, Y+19	; 0x13
    1200:	5c 89       	ldd	r21, Y+20	; 0x14
    1202:	50 58       	subi	r21, 0x80	; 128
	dvx = dvx + ka0 * lx;
	dvy = dvy + ka0 * ly;
    1204:	c7 01       	movw	r24, r14
    1206:	b6 01       	movw	r22, r12
    1208:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    120c:	9b 01       	movw	r18, r22
    120e:	ac 01       	movw	r20, r24
    1210:	b5 01       	movw	r22, r10
    1212:	88 2d       	mov	r24, r8
    1214:	94 2d       	mov	r25, r4
    1216:	a7 2f       	mov	r26, r23
    1218:	b6 2f       	mov	r27, r22
    121a:	bc 01       	movw	r22, r24
    121c:	cd 01       	movw	r24, r26
    121e:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__addsf3>
    1222:	36 2e       	mov	r3, r22
    1224:	27 2e       	mov	r2, r23
    1226:	8d 8f       	std	Y+29, r24	; 0x1d
    1228:	9e 8f       	std	Y+30, r25	; 0x1e

	// ===== update =====
	//direction
	vabs = sqrt(agent0.vx * agent0.vx + agent0.vy * agent0.vy);
    122a:	80 90 43 2b 	lds	r8, 0x2B43
    122e:	90 90 44 2b 	lds	r9, 0x2B44
    1232:	a0 90 45 2b 	lds	r10, 0x2B45
    1236:	b0 90 46 2b 	lds	r11, 0x2B46
    123a:	80 91 47 2b 	lds	r24, 0x2B47
    123e:	90 91 48 2b 	lds	r25, 0x2B48
    1242:	a0 91 49 2b 	lds	r26, 0x2B49
    1246:	b0 91 4a 2b 	lds	r27, 0x2B4A
    124a:	89 83       	std	Y+1, r24	; 0x01
    124c:	9a 83       	std	Y+2, r25	; 0x02
    124e:	ab 83       	std	Y+3, r26	; 0x03
    1250:	bc 83       	std	Y+4, r27	; 0x04
    1252:	c5 01       	movw	r24, r10
    1254:	b4 01       	movw	r22, r8
    1256:	a5 01       	movw	r20, r10
    1258:	94 01       	movw	r18, r8
    125a:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    125e:	6b 01       	movw	r12, r22
    1260:	7c 01       	movw	r14, r24
    1262:	69 81       	ldd	r22, Y+1	; 0x01
    1264:	7a 81       	ldd	r23, Y+2	; 0x02
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	9c 81       	ldd	r25, Y+4	; 0x04
    126a:	9b 01       	movw	r18, r22
    126c:	ac 01       	movw	r20, r24
    126e:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    1272:	9b 01       	movw	r18, r22
    1274:	ac 01       	movw	r20, r24
    1276:	c7 01       	movw	r24, r14
    1278:	b6 01       	movw	r22, r12
    127a:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__addsf3>
    127e:	0e 94 2f 32 	call	0x645e	; 0x645e <sqrt>
    1282:	6b 01       	movw	r12, r22
    1284:	7c 01       	movw	r14, r24

	fx = agent0.vx / vabs;
	fy = agent0.vy / vabs;
	ds = -1.0 / tau0 * (sin(dir)*fx-cos(dir)*fy); // get sin value by cross product

	agent0.hd += ds * dt;
    1286:	40 90 59 20 	lds	r4, 0x2059
    128a:	50 90 5a 20 	lds	r5, 0x205A
    128e:	60 90 5b 20 	lds	r6, 0x205B
    1292:	70 90 5c 20 	lds	r7, 0x205C
	//direction
	vabs = sqrt(agent0.vx * agent0.vx + agent0.vy * agent0.vy);

	fx = agent0.vx / vabs;
	fy = agent0.vy / vabs;
	ds = -1.0 / tau0 * (sin(dir)*fx-cos(dir)*fy); // get sin value by cross product
    1296:	60 e0       	ldi	r22, 0x00	; 0
    1298:	70 e0       	ldi	r23, 0x00	; 0
    129a:	80 e8       	ldi	r24, 0x80	; 128
    129c:	9f eb       	ldi	r25, 0xBF	; 191
    129e:	20 91 29 20 	lds	r18, 0x2029
    12a2:	30 91 2a 20 	lds	r19, 0x202A
    12a6:	40 91 2b 20 	lds	r20, 0x202B
    12aa:	50 91 2c 20 	lds	r21, 0x202C
    12ae:	0e 94 74 2f 	call	0x5ee8	; 0x5ee8 <__divsf3>
    12b2:	6d 8b       	std	Y+21, r22	; 0x15
    12b4:	7e 8b       	std	Y+22, r23	; 0x16
    12b6:	8f 8b       	std	Y+23, r24	; 0x17
    12b8:	98 8f       	std	Y+24, r25	; 0x18

	// ===== update =====
	//direction
	vabs = sqrt(agent0.vx * agent0.vx + agent0.vy * agent0.vy);

	fx = agent0.vx / vabs;
    12ba:	c5 01       	movw	r24, r10
    12bc:	b4 01       	movw	r22, r8
    12be:	a7 01       	movw	r20, r14
    12c0:	96 01       	movw	r18, r12
    12c2:	0e 94 74 2f 	call	0x5ee8	; 0x5ee8 <__divsf3>
    12c6:	9b 01       	movw	r18, r22
    12c8:	ac 01       	movw	r20, r24
	fy = agent0.vy / vabs;
	ds = -1.0 / tau0 * (sin(dir)*fx-cos(dir)*fy); // get sin value by cross product
    12ca:	6d 81       	ldd	r22, Y+5	; 0x05
    12cc:	7e 81       	ldd	r23, Y+6	; 0x06
    12ce:	8f 81       	ldd	r24, Y+7	; 0x07
    12d0:	98 85       	ldd	r25, Y+8	; 0x08
    12d2:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    12d6:	6d 83       	std	Y+5, r22	; 0x05
    12d8:	7e 83       	std	Y+6, r23	; 0x06
    12da:	8f 83       	std	Y+7, r24	; 0x07
    12dc:	98 87       	std	Y+8, r25	; 0x08
	// ===== update =====
	//direction
	vabs = sqrt(agent0.vx * agent0.vx + agent0.vy * agent0.vy);

	fx = agent0.vx / vabs;
	fy = agent0.vy / vabs;
    12de:	69 81       	ldd	r22, Y+1	; 0x01
    12e0:	7a 81       	ldd	r23, Y+2	; 0x02
    12e2:	8b 81       	ldd	r24, Y+3	; 0x03
    12e4:	9c 81       	ldd	r25, Y+4	; 0x04
    12e6:	a7 01       	movw	r20, r14
    12e8:	96 01       	movw	r18, r12
    12ea:	0e 94 74 2f 	call	0x5ee8	; 0x5ee8 <__divsf3>
    12ee:	9b 01       	movw	r18, r22
    12f0:	ac 01       	movw	r20, r24
	ds = -1.0 / tau0 * (sin(dir)*fx-cos(dir)*fy); // get sin value by cross product
    12f2:	6d 85       	ldd	r22, Y+13	; 0x0d
    12f4:	7e 85       	ldd	r23, Y+14	; 0x0e
    12f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    12f8:	98 89       	ldd	r25, Y+16	; 0x10
    12fa:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    12fe:	9b 01       	movw	r18, r22
    1300:	ac 01       	movw	r20, r24
    1302:	6d 81       	ldd	r22, Y+5	; 0x05
    1304:	7e 81       	ldd	r23, Y+6	; 0x06
    1306:	8f 81       	ldd	r24, Y+7	; 0x07
    1308:	98 85       	ldd	r25, Y+8	; 0x08
    130a:	0e 94 08 2f 	call	0x5e10	; 0x5e10 <__subsf3>
    130e:	9b 01       	movw	r18, r22
    1310:	ac 01       	movw	r20, r24
    1312:	6d 89       	ldd	r22, Y+21	; 0x15
    1314:	7e 89       	ldd	r23, Y+22	; 0x16
    1316:	8f 89       	ldd	r24, Y+23	; 0x17
    1318:	98 8d       	ldd	r25, Y+24	; 0x18
    131a:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>

	agent0.hd += ds * dt;
    131e:	a3 01       	movw	r20, r6
    1320:	92 01       	movw	r18, r4
    1322:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    1326:	20 91 4b 2b 	lds	r18, 0x2B4B
    132a:	30 91 4c 2b 	lds	r19, 0x2B4C
    132e:	40 91 4d 2b 	lds	r20, 0x2B4D
    1332:	50 91 4e 2b 	lds	r21, 0x2B4E
    1336:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__addsf3>
    133a:	8b 01       	movw	r16, r22
    133c:	7c 01       	movw	r14, r24
    133e:	86 2f       	mov	r24, r22
    1340:	91 2f       	mov	r25, r17
    1342:	ae 2d       	mov	r26, r14
    1344:	bf 2d       	mov	r27, r15
    1346:	80 93 4b 2b 	sts	0x2B4B, r24
    134a:	90 93 4c 2b 	sts	0x2B4C, r25
    134e:	a0 93 4d 2b 	sts	0x2B4D, r26
    1352:	b0 93 4e 2b 	sts	0x2B4E, r27

	if(agent0.hd > 2.0 * PI)	agent0.hd -= 2.0 * PI;
    1356:	bc 01       	movw	r22, r24
    1358:	cd 01       	movw	r24, r26
    135a:	20 ed       	ldi	r18, 0xD0	; 208
    135c:	3f e0       	ldi	r19, 0x0F	; 15
    135e:	49 ec       	ldi	r20, 0xC9	; 201
    1360:	50 e4       	ldi	r21, 0x40	; 64
    1362:	0e 94 4e 31 	call	0x629c	; 0x629c <__gesf2>
    1366:	18 16       	cp	r1, r24
    1368:	b4 f4       	brge	.+44     	; 0x1396 <_Z16swarm_disorderedv+0x3ba>
    136a:	80 2f       	mov	r24, r16
    136c:	91 2f       	mov	r25, r17
    136e:	ae 2d       	mov	r26, r14
    1370:	bf 2d       	mov	r27, r15
    1372:	bc 01       	movw	r22, r24
    1374:	cd 01       	movw	r24, r26
    1376:	20 ed       	ldi	r18, 0xD0	; 208
    1378:	3f e0       	ldi	r19, 0x0F	; 15
    137a:	49 ec       	ldi	r20, 0xC9	; 201
    137c:	50 e4       	ldi	r21, 0x40	; 64
    137e:	0e 94 08 2f 	call	0x5e10	; 0x5e10 <__subsf3>
    1382:	dc 01       	movw	r26, r24
    1384:	cb 01       	movw	r24, r22
    1386:	80 93 4b 2b 	sts	0x2B4B, r24
    138a:	90 93 4c 2b 	sts	0x2B4C, r25
    138e:	a0 93 4d 2b 	sts	0x2B4D, r26
    1392:	b0 93 4e 2b 	sts	0x2B4E, r27
	if(agent0.hd < 0 ) 			agent0.hd += 2.0 * PI;
    1396:	c0 90 4b 2b 	lds	r12, 0x2B4B
    139a:	d0 90 4c 2b 	lds	r13, 0x2B4C
    139e:	e0 90 4d 2b 	lds	r14, 0x2B4D
    13a2:	f0 90 4e 2b 	lds	r15, 0x2B4E
    13a6:	c7 01       	movw	r24, r14
    13a8:	b6 01       	movw	r22, r12
    13aa:	20 e0       	ldi	r18, 0x00	; 0
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	a9 01       	movw	r20, r18
    13b0:	0e 94 6d 2f 	call	0x5eda	; 0x5eda <__cmpsf2>
    13b4:	87 ff       	sbrs	r24, 7
    13b6:	12 c0       	rjmp	.+36     	; 0x13dc <_Z16swarm_disorderedv+0x400>
    13b8:	c7 01       	movw	r24, r14
    13ba:	b6 01       	movw	r22, r12
    13bc:	20 ed       	ldi	r18, 0xD0	; 208
    13be:	3f e0       	ldi	r19, 0x0F	; 15
    13c0:	49 ec       	ldi	r20, 0xC9	; 201
    13c2:	50 e4       	ldi	r21, 0x40	; 64
    13c4:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__addsf3>
    13c8:	dc 01       	movw	r26, r24
    13ca:	cb 01       	movw	r24, r22
    13cc:	80 93 4b 2b 	sts	0x2B4B, r24
    13d0:	90 93 4c 2b 	sts	0x2B4C, r25
    13d4:	a0 93 4d 2b 	sts	0x2B4D, r26
    13d8:	b0 93 4e 2b 	sts	0x2B4E, r27

	//velocity
	agent0.vx += dvx * dt;
    13dc:	59 8d       	ldd	r21, Y+25	; 0x19
    13de:	4a 8d       	ldd	r20, Y+26	; 0x1a
    13e0:	3b 8d       	ldd	r19, Y+27	; 0x1b
    13e2:	2c 8d       	ldd	r18, Y+28	; 0x1c
    13e4:	85 2f       	mov	r24, r21
    13e6:	94 2f       	mov	r25, r20
    13e8:	a3 2f       	mov	r26, r19
    13ea:	b2 2f       	mov	r27, r18
    13ec:	bc 01       	movw	r22, r24
    13ee:	cd 01       	movw	r24, r26
    13f0:	a3 01       	movw	r20, r6
    13f2:	92 01       	movw	r18, r4
    13f4:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    13f8:	9b 01       	movw	r18, r22
    13fa:	ac 01       	movw	r20, r24
    13fc:	c5 01       	movw	r24, r10
    13fe:	b4 01       	movw	r22, r8
    1400:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__addsf3>
    1404:	06 2f       	mov	r16, r22
    1406:	b7 2e       	mov	r11, r23
    1408:	c8 2e       	mov	r12, r24
    140a:	a9 2e       	mov	r10, r25
    140c:	86 2f       	mov	r24, r22
    140e:	9b 2d       	mov	r25, r11
    1410:	ac 2d       	mov	r26, r12
    1412:	ba 2d       	mov	r27, r10
    1414:	80 93 43 2b 	sts	0x2B43, r24
    1418:	90 93 44 2b 	sts	0x2B44, r25
    141c:	a0 93 45 2b 	sts	0x2B45, r26
    1420:	b0 93 46 2b 	sts	0x2B46, r27
	agent0.vy += dvy * dt;
    1424:	a1 01       	movw	r20, r2
    1426:	3d 8d       	ldd	r19, Y+29	; 0x1d
    1428:	2e 8d       	ldd	r18, Y+30	; 0x1e
    142a:	85 2f       	mov	r24, r21
    142c:	92 2d       	mov	r25, r2
    142e:	a3 2f       	mov	r26, r19
    1430:	b2 2f       	mov	r27, r18
    1432:	bc 01       	movw	r22, r24
    1434:	cd 01       	movw	r24, r26
    1436:	a3 01       	movw	r20, r6
    1438:	92 01       	movw	r18, r4
    143a:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    143e:	9b 01       	movw	r18, r22
    1440:	ac 01       	movw	r20, r24
    1442:	69 81       	ldd	r22, Y+1	; 0x01
    1444:	7a 81       	ldd	r23, Y+2	; 0x02
    1446:	8b 81       	ldd	r24, Y+3	; 0x03
    1448:	9c 81       	ldd	r25, Y+4	; 0x04
    144a:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__addsf3>
    144e:	16 2f       	mov	r17, r22
    1450:	87 2e       	mov	r8, r23
    1452:	f8 2e       	mov	r15, r24
    1454:	e9 2e       	mov	r14, r25
    1456:	97 01       	movw	r18, r14
    1458:	86 2f       	mov	r24, r22
    145a:	98 2d       	mov	r25, r8
    145c:	a3 2f       	mov	r26, r19
    145e:	b2 2f       	mov	r27, r18
    1460:	80 93 47 2b 	sts	0x2B47, r24
    1464:	90 93 48 2b 	sts	0x2B48, r25
    1468:	a0 93 49 2b 	sts	0x2B49, r26
    146c:	b0 93 4a 2b 	sts	0x2B4A, r27


	//position
	agent0.px += agent0.vx * dt;
    1470:	80 2f       	mov	r24, r16
    1472:	9b 2d       	mov	r25, r11
    1474:	ac 2d       	mov	r26, r12
    1476:	ba 2d       	mov	r27, r10
    1478:	bc 01       	movw	r22, r24
    147a:	cd 01       	movw	r24, r26
    147c:	a3 01       	movw	r20, r6
    147e:	92 01       	movw	r18, r4
    1480:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    1484:	9b 01       	movw	r18, r22
    1486:	ac 01       	movw	r20, r24
    1488:	69 85       	ldd	r22, Y+9	; 0x09
    148a:	7a 85       	ldd	r23, Y+10	; 0x0a
    148c:	8b 85       	ldd	r24, Y+11	; 0x0b
    148e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1490:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__addsf3>
    1494:	dc 01       	movw	r26, r24
    1496:	cb 01       	movw	r24, r22
    1498:	80 93 3b 2b 	sts	0x2B3B, r24
    149c:	90 93 3c 2b 	sts	0x2B3C, r25
    14a0:	a0 93 3d 2b 	sts	0x2B3D, r26
    14a4:	b0 93 3e 2b 	sts	0x2B3E, r27
	agent0.py += agent0.vy * dt;
    14a8:	97 01       	movw	r18, r14
    14aa:	81 2f       	mov	r24, r17
    14ac:	98 2d       	mov	r25, r8
    14ae:	a3 2f       	mov	r26, r19
    14b0:	b2 2f       	mov	r27, r18
    14b2:	bc 01       	movw	r22, r24
    14b4:	cd 01       	movw	r24, r26
    14b6:	a3 01       	movw	r20, r6
    14b8:	92 01       	movw	r18, r4
    14ba:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    14be:	9b 01       	movw	r18, r22
    14c0:	ac 01       	movw	r20, r24
    14c2:	69 89       	ldd	r22, Y+17	; 0x11
    14c4:	7a 89       	ldd	r23, Y+18	; 0x12
    14c6:	8b 89       	ldd	r24, Y+19	; 0x13
    14c8:	9c 89       	ldd	r25, Y+20	; 0x14
    14ca:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__addsf3>
    14ce:	dc 01       	movw	r26, r24
    14d0:	cb 01       	movw	r24, r22
    14d2:	80 93 3f 2b 	sts	0x2B3F, r24
    14d6:	90 93 40 2b 	sts	0x2B40, r25
    14da:	a0 93 41 2b 	sts	0x2B41, r26
    14de:	b0 93 42 2b 	sts	0x2B42, r27

	return agent0.hd;
}
    14e2:	50 91 4b 2b 	lds	r21, 0x2B4B
    14e6:	40 91 4c 2b 	lds	r20, 0x2B4C
    14ea:	30 91 4d 2b 	lds	r19, 0x2B4D
    14ee:	20 91 4e 2b 	lds	r18, 0x2B4E
    14f2:	85 2f       	mov	r24, r21
    14f4:	94 2f       	mov	r25, r20
    14f6:	a3 2f       	mov	r26, r19
    14f8:	b2 2f       	mov	r27, r18
    14fa:	bc 01       	movw	r22, r24
    14fc:	cd 01       	movw	r24, r26
    14fe:	6e 96       	adiw	r28, 0x1e	; 30
    1500:	cd bf       	out	0x3d, r28	; 61
    1502:	de bf       	out	0x3e, r29	; 62
    1504:	df 91       	pop	r29
    1506:	cf 91       	pop	r28
    1508:	1f 91       	pop	r17
    150a:	0f 91       	pop	r16
    150c:	ff 90       	pop	r15
    150e:	ef 90       	pop	r14
    1510:	df 90       	pop	r13
    1512:	cf 90       	pop	r12
    1514:	bf 90       	pop	r11
    1516:	af 90       	pop	r10
    1518:	9f 90       	pop	r9
    151a:	8f 90       	pop	r8
    151c:	7f 90       	pop	r7
    151e:	6f 90       	pop	r6
    1520:	5f 90       	pop	r5
    1522:	4f 90       	pop	r4
    1524:	3f 90       	pop	r3
    1526:	2f 90       	pop	r2
    1528:	08 95       	ret

0000152a <_Z18swarm_interaction1i>:

// ################### SYNCHRONIZED BEHAVIOR ####################
void swarm_interaction1(int nei)
{
    152a:	2f 92       	push	r2
    152c:	3f 92       	push	r3
    152e:	4f 92       	push	r4
    1530:	5f 92       	push	r5
    1532:	6f 92       	push	r6
    1534:	7f 92       	push	r7
    1536:	8f 92       	push	r8
    1538:	9f 92       	push	r9
    153a:	af 92       	push	r10
    153c:	bf 92       	push	r11
    153e:	cf 92       	push	r12
    1540:	df 92       	push	r13
    1542:	ef 92       	push	r14
    1544:	ff 92       	push	r15
    1546:	0f 93       	push	r16
    1548:	1f 93       	push	r17
    154a:	cf 93       	push	r28
    154c:	df 93       	push	r29
    154e:	cd b7       	in	r28, 0x3d	; 61
    1550:	de b7       	in	r29, 0x3e	; 62
    1552:	2f 97       	sbiw	r28, 0x0f	; 15
    1554:	cd bf       	out	0x3d, r28	; 61
    1556:	de bf       	out	0x3e, r29	; 62
    1558:	8c 01       	movw	r16, r24
	float disx, disy, dis1, dis2, alph, force;
	float di, dj;
	bool flag = true;

	switch(nei)
    155a:	82 30       	cpi	r24, 0x02	; 2
    155c:	91 05       	cpc	r25, r1
    155e:	71 f0       	breq	.+28     	; 0x157c <_Z18swarm_interaction1i+0x52>
    1560:	83 30       	cpi	r24, 0x03	; 3
    1562:	91 05       	cpc	r25, r1
    1564:	1c f4       	brge	.+6      	; 0x156c <_Z18swarm_interaction1i+0x42>
    1566:	00 97       	sbiw	r24, 0x00	; 0
    1568:	f1 f0       	breq	.+60     	; 0x15a6 <_Z18swarm_interaction1i+0x7c>
    156a:	e6 c1       	rjmp	.+972    	; 0x1938 <_Z18swarm_interaction1i+0x40e>
    156c:	83 30       	cpi	r24, 0x03	; 3
    156e:	91 05       	cpc	r25, r1
    1570:	29 f1       	breq	.+74     	; 0x15bc <_Z18swarm_interaction1i+0x92>
    1572:	84 30       	cpi	r24, 0x04	; 4
    1574:	91 05       	cpc	r25, r1
    1576:	09 f0       	breq	.+2      	; 0x157a <_Z18swarm_interaction1i+0x50>
    1578:	df c1       	rjmp	.+958    	; 0x1938 <_Z18swarm_interaction1i+0x40e>
    157a:	35 c0       	rjmp	.+106    	; 0x15e6 <_Z18swarm_interaction1i+0xbc>
		case LEFT_TOP    : di=-0.866; dj=-0.500; break;
		case RIGHT_BOTTOM: di= 1.000; dj= 0.000; break;
		case RIGHT_TOP   : di= 0.866; dj=-0.500; break;
	*/
		//in case of 4 neighbors
		case LEFT_BOTTOM : di=-1.000; dj= 0.000; break;
    157c:	0f 2e       	mov	r0, r31
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	8f 2e       	mov	r8, r31
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	9f 2e       	mov	r9, r31
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	af 2e       	mov	r10, r31
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	bf 2e       	mov	r11, r31
    158e:	f0 2d       	mov	r31, r0
    1590:	0f 2e       	mov	r0, r31
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	cf 2e       	mov	r12, r31
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	df 2e       	mov	r13, r31
    159a:	f0 e8       	ldi	r31, 0x80	; 128
    159c:	ef 2e       	mov	r14, r31
    159e:	ff eb       	ldi	r31, 0xBF	; 191
    15a0:	ff 2e       	mov	r15, r31
    15a2:	f0 2d       	mov	r31, r0
    15a4:	34 c0       	rjmp	.+104    	; 0x160e <_Z18swarm_interaction1i+0xe4>
		case RIGHT_BOTTOM: di= 1.000; dj= 0.000; break;
		case BOTTOM_RIGHT: di= 0.000; dj= 1.000; break;
    15a6:	0f 2e       	mov	r0, r31
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	8f 2e       	mov	r8, r31
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	9f 2e       	mov	r9, r31
    15b0:	f0 e8       	ldi	r31, 0x80	; 128
    15b2:	af 2e       	mov	r10, r31
    15b4:	ff e3       	ldi	r31, 0x3F	; 63
    15b6:	bf 2e       	mov	r11, r31
    15b8:	f0 2d       	mov	r31, r0
    15ba:	0a c0       	rjmp	.+20     	; 0x15d0 <_Z18swarm_interaction1i+0xa6>
		case LEFT_TOP    : di= 0.000; dj=-1.000; break;
    15bc:	0f 2e       	mov	r0, r31
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	8f 2e       	mov	r8, r31
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	9f 2e       	mov	r9, r31
    15c6:	f0 e8       	ldi	r31, 0x80	; 128
    15c8:	af 2e       	mov	r10, r31
    15ca:	ff eb       	ldi	r31, 0xBF	; 191
    15cc:	bf 2e       	mov	r11, r31
    15ce:	f0 2d       	mov	r31, r0
    15d0:	0f 2e       	mov	r0, r31
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	cf 2e       	mov	r12, r31
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	df 2e       	mov	r13, r31
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	ef 2e       	mov	r14, r31
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	ff 2e       	mov	r15, r31
    15e2:	f0 2d       	mov	r31, r0
    15e4:	14 c0       	rjmp	.+40     	; 0x160e <_Z18swarm_interaction1i+0xe4>
		case RIGHT_BOTTOM: di= 1.000; dj= 0.000; break;
		case RIGHT_TOP   : di= 0.866; dj=-0.500; break;
	*/
		//in case of 4 neighbors
		case LEFT_BOTTOM : di=-1.000; dj= 0.000; break;
		case RIGHT_BOTTOM: di= 1.000; dj= 0.000; break;
    15e6:	0f 2e       	mov	r0, r31
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	8f 2e       	mov	r8, r31
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	9f 2e       	mov	r9, r31
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	af 2e       	mov	r10, r31
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	bf 2e       	mov	r11, r31
    15f8:	f0 2d       	mov	r31, r0
    15fa:	0f 2e       	mov	r0, r31
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	cf 2e       	mov	r12, r31
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	df 2e       	mov	r13, r31
    1604:	f0 e8       	ldi	r31, 0x80	; 128
    1606:	ef 2e       	mov	r14, r31
    1608:	ff e3       	ldi	r31, 0x3F	; 63
    160a:	ff 2e       	mov	r15, r31
    160c:	f0 2d       	mov	r31, r0
		default: flag = false;
	}

	if(flag)
	{
		disx = agent1.neix[nei] - agent1.px + ld * di;
    160e:	40 90 55 20 	lds	r4, 0x2055
    1612:	50 90 56 20 	lds	r5, 0x2056
    1616:	60 90 57 20 	lds	r6, 0x2057
    161a:	70 90 58 20 	lds	r7, 0x2058
    161e:	f8 01       	movw	r30, r16
    1620:	ee 0f       	add	r30, r30
    1622:	ff 1f       	adc	r31, r31
    1624:	ee 0f       	add	r30, r30
    1626:	ff 1f       	adc	r31, r31
    1628:	e5 5f       	subi	r30, 0xF5	; 245
    162a:	f4 4d       	sbci	r31, 0xD4	; 212
    162c:	60 81       	ld	r22, Z
    162e:	71 81       	ldd	r23, Z+1	; 0x01
    1630:	82 81       	ldd	r24, Z+2	; 0x02
    1632:	93 81       	ldd	r25, Z+3	; 0x03
    1634:	20 91 f7 2a 	lds	r18, 0x2AF7
    1638:	30 91 f8 2a 	lds	r19, 0x2AF8
    163c:	40 91 f9 2a 	lds	r20, 0x2AF9
    1640:	50 91 fa 2a 	lds	r21, 0x2AFA
    1644:	0e 94 08 2f 	call	0x5e10	; 0x5e10 <__subsf3>
    1648:	69 83       	std	Y+1, r22	; 0x01
    164a:	7a 83       	std	Y+2, r23	; 0x02
    164c:	8b 83       	std	Y+3, r24	; 0x03
    164e:	9c 83       	std	Y+4, r25	; 0x04
    1650:	c3 01       	movw	r24, r6
    1652:	b2 01       	movw	r22, r4
    1654:	a7 01       	movw	r20, r14
    1656:	96 01       	movw	r18, r12
    1658:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    165c:	9b 01       	movw	r18, r22
    165e:	ac 01       	movw	r20, r24
    1660:	69 81       	ldd	r22, Y+1	; 0x01
    1662:	7a 81       	ldd	r23, Y+2	; 0x02
    1664:	8b 81       	ldd	r24, Y+3	; 0x03
    1666:	9c 81       	ldd	r25, Y+4	; 0x04
    1668:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__addsf3>
    166c:	69 83       	std	Y+1, r22	; 0x01
    166e:	7d 83       	std	Y+5, r23	; 0x05
    1670:	8e 83       	std	Y+6, r24	; 0x06
    1672:	9f 83       	std	Y+7, r25	; 0x07
		disy = agent1.neiy[nei] - agent1.py + ld * dj;
    1674:	f8 01       	movw	r30, r16
    1676:	ee 0f       	add	r30, r30
    1678:	ff 1f       	adc	r31, r31
    167a:	ee 0f       	add	r30, r30
    167c:	ff 1f       	adc	r31, r31
    167e:	ed 5d       	subi	r30, 0xDD	; 221
    1680:	f4 4d       	sbci	r31, 0xD4	; 212
    1682:	60 81       	ld	r22, Z
    1684:	71 81       	ldd	r23, Z+1	; 0x01
    1686:	82 81       	ldd	r24, Z+2	; 0x02
    1688:	93 81       	ldd	r25, Z+3	; 0x03
    168a:	20 91 fb 2a 	lds	r18, 0x2AFB
    168e:	30 91 fc 2a 	lds	r19, 0x2AFC
    1692:	40 91 fd 2a 	lds	r20, 0x2AFD
    1696:	50 91 fe 2a 	lds	r21, 0x2AFE
    169a:	0e 94 08 2f 	call	0x5e10	; 0x5e10 <__subsf3>
    169e:	6b 01       	movw	r12, r22
    16a0:	7c 01       	movw	r14, r24
    16a2:	c3 01       	movw	r24, r6
    16a4:	b2 01       	movw	r22, r4
    16a6:	a5 01       	movw	r20, r10
    16a8:	94 01       	movw	r18, r8
    16aa:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    16ae:	9b 01       	movw	r18, r22
    16b0:	ac 01       	movw	r20, r24
    16b2:	c7 01       	movw	r24, r14
    16b4:	b6 01       	movw	r22, r12
    16b6:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__addsf3>
    16ba:	36 2e       	mov	r3, r22
    16bc:	27 2e       	mov	r2, r23
    16be:	88 87       	std	Y+8, r24	; 0x08
    16c0:	99 87       	std	Y+9, r25	; 0x09

		dis2 = disx * disx + disy * disy;
    16c2:	59 81       	ldd	r21, Y+1	; 0x01
    16c4:	4d 81       	ldd	r20, Y+5	; 0x05
    16c6:	3e 81       	ldd	r19, Y+6	; 0x06
    16c8:	2f 81       	ldd	r18, Y+7	; 0x07
    16ca:	85 2f       	mov	r24, r21
    16cc:	94 2f       	mov	r25, r20
    16ce:	a3 2f       	mov	r26, r19
    16d0:	b2 2f       	mov	r27, r18
    16d2:	bc 01       	movw	r22, r24
    16d4:	cd 01       	movw	r24, r26
    16d6:	fa 01       	movw	r30, r20
    16d8:	0f 2f       	mov	r16, r31
    16da:	1e 2f       	mov	r17, r30
    16dc:	23 2f       	mov	r18, r19
    16de:	3b 2f       	mov	r19, r27
    16e0:	a9 01       	movw	r20, r18
    16e2:	98 01       	movw	r18, r16
    16e4:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    16e8:	6b 01       	movw	r12, r22
    16ea:	7c 01       	movw	r14, r24
    16ec:	a1 01       	movw	r20, r2
    16ee:	38 85       	ldd	r19, Y+8	; 0x08
    16f0:	29 85       	ldd	r18, Y+9	; 0x09
    16f2:	85 2f       	mov	r24, r21
    16f4:	94 2f       	mov	r25, r20
    16f6:	a3 2f       	mov	r26, r19
    16f8:	b2 2f       	mov	r27, r18
    16fa:	bc 01       	movw	r22, r24
    16fc:	cd 01       	movw	r24, r26
    16fe:	f1 01       	movw	r30, r2
    1700:	0f 2f       	mov	r16, r31
    1702:	1e 2f       	mov	r17, r30
    1704:	23 2f       	mov	r18, r19
    1706:	3b 2f       	mov	r19, r27
    1708:	a9 01       	movw	r20, r18
    170a:	98 01       	movw	r18, r16
    170c:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    1710:	9b 01       	movw	r18, r22
    1712:	ac 01       	movw	r20, r24
    1714:	c7 01       	movw	r24, r14
    1716:	b6 01       	movw	r22, r12
    1718:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__addsf3>
    171c:	6e 87       	std	Y+14, r22	; 0x0e
    171e:	7f 87       	std	Y+15, r23	; 0x0f
    1720:	8c 01       	movw	r16, r24
		dis1 = sqrt(dis2);
    1722:	47 2f       	mov	r20, r23
    1724:	86 2f       	mov	r24, r22
    1726:	94 2f       	mov	r25, r20
    1728:	a0 2f       	mov	r26, r16
    172a:	b1 2f       	mov	r27, r17
    172c:	bc 01       	movw	r22, r24
    172e:	cd 01       	movw	r24, r26
    1730:	0e 94 2f 32 	call	0x645e	; 0x645e <sqrt>
    1734:	2b 01       	movw	r4, r22
    1736:	3c 01       	movw	r6, r24

		if(dis2!=0.0)
    1738:	5e 85       	ldd	r21, Y+14	; 0x0e
    173a:	4f 85       	ldd	r20, Y+15	; 0x0f
    173c:	85 2f       	mov	r24, r21
    173e:	94 2f       	mov	r25, r20
    1740:	a0 2f       	mov	r26, r16
    1742:	b1 2f       	mov	r27, r17
    1744:	bc 01       	movw	r22, r24
    1746:	cd 01       	movw	r24, r26
    1748:	20 e0       	ldi	r18, 0x00	; 0
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	a9 01       	movw	r20, r18
    174e:	0e 94 6d 2f 	call	0x5eda	; 0x5eda <__cmpsf2>
    1752:	88 23       	and	r24, r24
    1754:	09 f4       	brne	.+2      	; 0x1758 <_Z18swarm_interaction1i+0x22e>
    1756:	f0 c0       	rjmp	.+480    	; 0x1938 <_Z18swarm_interaction1i+0x40e>
		{
			alph = 1.0 + d1 * (disx * cos(agent1.hd) + disy * sin(agent1.hd)) / dis1; //inner product
    1758:	c0 90 07 2b 	lds	r12, 0x2B07
    175c:	d0 90 08 2b 	lds	r13, 0x2B08
    1760:	e0 90 09 2b 	lds	r14, 0x2B09
    1764:	f0 90 0a 2b 	lds	r15, 0x2B0A
    1768:	c7 01       	movw	r24, r14
    176a:	b6 01       	movw	r22, r12
    176c:	0e 94 71 2f 	call	0x5ee2	; 0x5ee2 <cos>
    1770:	4b 01       	movw	r8, r22
    1772:	5c 01       	movw	r10, r24
    1774:	c7 01       	movw	r24, r14
    1776:	b6 01       	movw	r22, r12
    1778:	0e 94 25 32 	call	0x644a	; 0x644a <sin>
    177c:	6a 87       	std	Y+10, r22	; 0x0a
    177e:	7b 87       	std	Y+11, r23	; 0x0b
    1780:	8c 87       	std	Y+12, r24	; 0x0c
    1782:	9d 87       	std	Y+13, r25	; 0x0d
			force = -cf * (rc1 / dis1 - 1.0) * rc1 * rc1 / dis2;
    1784:	c0 90 41 20 	lds	r12, 0x2041
    1788:	d0 90 42 20 	lds	r13, 0x2042
    178c:	e0 90 43 20 	lds	r14, 0x2043
    1790:	f0 90 44 20 	lds	r15, 0x2044
		dis2 = disx * disx + disy * disy;
		dis1 = sqrt(dis2);

		if(dis2!=0.0)
		{
			alph = 1.0 + d1 * (disx * cos(agent1.hd) + disy * sin(agent1.hd)) / dis1; //inner product
    1794:	59 81       	ldd	r21, Y+1	; 0x01
    1796:	4d 81       	ldd	r20, Y+5	; 0x05
    1798:	3e 81       	ldd	r19, Y+6	; 0x06
    179a:	2f 81       	ldd	r18, Y+7	; 0x07
    179c:	85 2f       	mov	r24, r21
    179e:	94 2f       	mov	r25, r20
    17a0:	a3 2f       	mov	r26, r19
    17a2:	b2 2f       	mov	r27, r18
    17a4:	bc 01       	movw	r22, r24
    17a6:	cd 01       	movw	r24, r26
    17a8:	a5 01       	movw	r20, r10
    17aa:	94 01       	movw	r18, r8
    17ac:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    17b0:	4b 01       	movw	r8, r22
    17b2:	5c 01       	movw	r10, r24
    17b4:	a1 01       	movw	r20, r2
    17b6:	38 85       	ldd	r19, Y+8	; 0x08
    17b8:	29 85       	ldd	r18, Y+9	; 0x09
    17ba:	85 2f       	mov	r24, r21
    17bc:	94 2f       	mov	r25, r20
    17be:	a3 2f       	mov	r26, r19
    17c0:	b2 2f       	mov	r27, r18
    17c2:	bc 01       	movw	r22, r24
    17c4:	cd 01       	movw	r24, r26
    17c6:	2a 85       	ldd	r18, Y+10	; 0x0a
    17c8:	3b 85       	ldd	r19, Y+11	; 0x0b
    17ca:	4c 85       	ldd	r20, Y+12	; 0x0c
    17cc:	5d 85       	ldd	r21, Y+13	; 0x0d
    17ce:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    17d2:	9b 01       	movw	r18, r22
    17d4:	ac 01       	movw	r20, r24
    17d6:	c5 01       	movw	r24, r10
    17d8:	b4 01       	movw	r22, r8
    17da:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__addsf3>
    17de:	20 91 d8 20 	lds	r18, 0x20D8
    17e2:	30 91 d9 20 	lds	r19, 0x20D9
    17e6:	40 91 da 20 	lds	r20, 0x20DA
    17ea:	50 91 db 20 	lds	r21, 0x20DB
    17ee:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    17f2:	a3 01       	movw	r20, r6
    17f4:	92 01       	movw	r18, r4
    17f6:	0e 94 74 2f 	call	0x5ee8	; 0x5ee8 <__divsf3>
    17fa:	20 e0       	ldi	r18, 0x00	; 0
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	40 e8       	ldi	r20, 0x80	; 128
    1800:	5f e3       	ldi	r21, 0x3F	; 63
    1802:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__addsf3>
    1806:	6a 87       	std	Y+10, r22	; 0x0a
    1808:	7b 87       	std	Y+11, r23	; 0x0b
    180a:	8c 87       	std	Y+12, r24	; 0x0c
    180c:	9d 87       	std	Y+13, r25	; 0x0d
			force = -cf * (rc1 / dis1 - 1.0) * rc1 * rc1 / dis2;
    180e:	80 90 4d 20 	lds	r8, 0x204D
    1812:	90 90 4e 20 	lds	r9, 0x204E
    1816:	a0 90 4f 20 	lds	r10, 0x204F
    181a:	b0 90 50 20 	lds	r11, 0x2050
    181e:	b7 fa       	bst	r11, 7
    1820:	b0 94       	com	r11
    1822:	b7 f8       	bld	r11, 7
    1824:	b0 94       	com	r11
    1826:	c7 01       	movw	r24, r14
    1828:	b6 01       	movw	r22, r12
    182a:	a3 01       	movw	r20, r6
    182c:	92 01       	movw	r18, r4
    182e:	0e 94 74 2f 	call	0x5ee8	; 0x5ee8 <__divsf3>
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	40 e8       	ldi	r20, 0x80	; 128
    1838:	5f e3       	ldi	r21, 0x3F	; 63
    183a:	0e 94 08 2f 	call	0x5e10	; 0x5e10 <__subsf3>
    183e:	9b 01       	movw	r18, r22
    1840:	ac 01       	movw	r20, r24
    1842:	c5 01       	movw	r24, r10
    1844:	b4 01       	movw	r22, r8
    1846:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    184a:	a7 01       	movw	r20, r14
    184c:	96 01       	movw	r18, r12
    184e:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    1852:	a7 01       	movw	r20, r14
    1854:	96 01       	movw	r18, r12
    1856:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    185a:	fe 85       	ldd	r31, Y+14	; 0x0e
    185c:	ef 85       	ldd	r30, Y+15	; 0x0f
    185e:	50 2f       	mov	r21, r16
    1860:	41 2f       	mov	r20, r17
    1862:	0f 2f       	mov	r16, r31
    1864:	1e 2f       	mov	r17, r30
    1866:	25 2f       	mov	r18, r21
    1868:	34 2f       	mov	r19, r20
    186a:	a9 01       	movw	r20, r18
    186c:	98 01       	movw	r18, r16
    186e:	0e 94 74 2f 	call	0x5ee8	; 0x5ee8 <__divsf3>
    1872:	9b 01       	movw	r18, r22
    1874:	ac 01       	movw	r20, r24
			
			forcex += alph * force * disx / dis1;
    1876:	6a 85       	ldd	r22, Y+10	; 0x0a
    1878:	7b 85       	ldd	r23, Y+11	; 0x0b
    187a:	8c 85       	ldd	r24, Y+12	; 0x0c
    187c:	9d 85       	ldd	r25, Y+13	; 0x0d
    187e:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    1882:	c6 2e       	mov	r12, r22
    1884:	f7 2e       	mov	r15, r23
    1886:	88 2e       	mov	r8, r24
    1888:	e9 2e       	mov	r14, r25
    188a:	86 2f       	mov	r24, r22
    188c:	9f 2d       	mov	r25, r15
    188e:	a8 2d       	mov	r26, r8
    1890:	be 2d       	mov	r27, r14
    1892:	bc 01       	movw	r22, r24
    1894:	cd 01       	movw	r24, r26
    1896:	f9 81       	ldd	r31, Y+1	; 0x01
    1898:	ed 81       	ldd	r30, Y+5	; 0x05
    189a:	5e 81       	ldd	r21, Y+6	; 0x06
    189c:	4f 81       	ldd	r20, Y+7	; 0x07
    189e:	0f 2f       	mov	r16, r31
    18a0:	1e 2f       	mov	r17, r30
    18a2:	25 2f       	mov	r18, r21
    18a4:	34 2f       	mov	r19, r20
    18a6:	a9 01       	movw	r20, r18
    18a8:	98 01       	movw	r18, r16
    18aa:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    18ae:	a3 01       	movw	r20, r6
    18b0:	92 01       	movw	r18, r4
    18b2:	0e 94 74 2f 	call	0x5ee8	; 0x5ee8 <__divsf3>
    18b6:	9b 01       	movw	r18, r22
    18b8:	ac 01       	movw	r20, r24
    18ba:	60 91 d4 20 	lds	r22, 0x20D4
    18be:	70 91 d5 20 	lds	r23, 0x20D5
    18c2:	80 91 d6 20 	lds	r24, 0x20D6
    18c6:	90 91 d7 20 	lds	r25, 0x20D7
    18ca:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__addsf3>
    18ce:	dc 01       	movw	r26, r24
    18d0:	cb 01       	movw	r24, r22
    18d2:	80 93 d4 20 	sts	0x20D4, r24
    18d6:	90 93 d5 20 	sts	0x20D5, r25
    18da:	a0 93 d6 20 	sts	0x20D6, r26
    18de:	b0 93 d7 20 	sts	0x20D7, r27
			forcey += alph * force * disy / dis1;
    18e2:	8c 2d       	mov	r24, r12
    18e4:	9f 2d       	mov	r25, r15
    18e6:	a8 2d       	mov	r26, r8
    18e8:	be 2d       	mov	r27, r14
    18ea:	bc 01       	movw	r22, r24
    18ec:	cd 01       	movw	r24, r26
    18ee:	f1 01       	movw	r30, r2
    18f0:	58 85       	ldd	r21, Y+8	; 0x08
    18f2:	49 85       	ldd	r20, Y+9	; 0x09
    18f4:	0f 2f       	mov	r16, r31
    18f6:	1e 2f       	mov	r17, r30
    18f8:	25 2f       	mov	r18, r21
    18fa:	34 2f       	mov	r19, r20
    18fc:	a9 01       	movw	r20, r18
    18fe:	98 01       	movw	r18, r16
    1900:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    1904:	a3 01       	movw	r20, r6
    1906:	92 01       	movw	r18, r4
    1908:	0e 94 74 2f 	call	0x5ee8	; 0x5ee8 <__divsf3>
    190c:	9b 01       	movw	r18, r22
    190e:	ac 01       	movw	r20, r24
    1910:	60 91 d0 20 	lds	r22, 0x20D0
    1914:	70 91 d1 20 	lds	r23, 0x20D1
    1918:	80 91 d2 20 	lds	r24, 0x20D2
    191c:	90 91 d3 20 	lds	r25, 0x20D3
    1920:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__addsf3>
    1924:	dc 01       	movw	r26, r24
    1926:	cb 01       	movw	r24, r22
    1928:	80 93 d0 20 	sts	0x20D0, r24
    192c:	90 93 d1 20 	sts	0x20D1, r25
    1930:	a0 93 d2 20 	sts	0x20D2, r26
    1934:	b0 93 d3 20 	sts	0x20D3, r27
		}
	}
}
    1938:	2f 96       	adiw	r28, 0x0f	; 15
    193a:	cd bf       	out	0x3d, r28	; 61
    193c:	de bf       	out	0x3e, r29	; 62
    193e:	df 91       	pop	r29
    1940:	cf 91       	pop	r28
    1942:	1f 91       	pop	r17
    1944:	0f 91       	pop	r16
    1946:	ff 90       	pop	r15
    1948:	ef 90       	pop	r14
    194a:	df 90       	pop	r13
    194c:	cf 90       	pop	r12
    194e:	bf 90       	pop	r11
    1950:	af 90       	pop	r10
    1952:	9f 90       	pop	r9
    1954:	8f 90       	pop	r8
    1956:	7f 90       	pop	r7
    1958:	6f 90       	pop	r6
    195a:	5f 90       	pop	r5
    195c:	4f 90       	pop	r4
    195e:	3f 90       	pop	r3
    1960:	2f 90       	pop	r2
    1962:	08 95       	ret

00001964 <_Z18swarm_synchronizedv>:
// --------------------------------------------------------------------------------------------
float swarm_synchronized()
{
    1964:	2f 92       	push	r2
    1966:	3f 92       	push	r3
    1968:	4f 92       	push	r4
    196a:	5f 92       	push	r5
    196c:	6f 92       	push	r6
    196e:	7f 92       	push	r7
    1970:	8f 92       	push	r8
    1972:	9f 92       	push	r9
    1974:	af 92       	push	r10
    1976:	bf 92       	push	r11
    1978:	cf 92       	push	r12
    197a:	df 92       	push	r13
    197c:	ef 92       	push	r14
    197e:	ff 92       	push	r15
    1980:	0f 93       	push	r16
    1982:	1f 93       	push	r17
    1984:	cf 93       	push	r28
    1986:	df 93       	push	r29
    1988:	cd b7       	in	r28, 0x3d	; 61
    198a:	de b7       	in	r29, 0x3e	; 62
    198c:	6e 97       	sbiw	r28, 0x1e	; 30
    198e:	cd bf       	out	0x3d, r28	; 61
    1990:	de bf       	out	0x3e, r29	; 62
	int i;
	float dvx, dvy, lx, ly, vabs, ds, fx, fy;
	float dir = agent1.hd;
    1992:	c0 90 07 2b 	lds	r12, 0x2B07
    1996:	d0 90 08 2b 	lds	r13, 0x2B08
    199a:	e0 90 09 2b 	lds	r14, 0x2B09
    199e:	f0 90 0a 2b 	lds	r15, 0x2B0A

	// ===== calculation of forces =====
	//self-propel force and viscosity
	dvx = acc * cos(dir) - gmma1 * agent1.vx;
    19a2:	80 90 51 20 	lds	r8, 0x2051
    19a6:	90 90 52 20 	lds	r9, 0x2052
    19aa:	a0 90 53 20 	lds	r10, 0x2053
    19ae:	b0 90 54 20 	lds	r11, 0x2054
    19b2:	c7 01       	movw	r24, r14
    19b4:	b6 01       	movw	r22, r12
    19b6:	0e 94 71 2f 	call	0x5ee2	; 0x5ee2 <cos>
    19ba:	6d 87       	std	Y+13, r22	; 0x0d
    19bc:	7e 87       	std	Y+14, r23	; 0x0e
    19be:	8f 87       	std	Y+15, r24	; 0x0f
    19c0:	98 8b       	std	Y+16, r25	; 0x10
    19c2:	40 90 49 20 	lds	r4, 0x2049
    19c6:	50 90 4a 20 	lds	r5, 0x204A
    19ca:	60 90 4b 20 	lds	r6, 0x204B
    19ce:	70 90 4c 20 	lds	r7, 0x204C
    19d2:	c5 01       	movw	r24, r10
    19d4:	b4 01       	movw	r22, r8
    19d6:	2d 85       	ldd	r18, Y+13	; 0x0d
    19d8:	3e 85       	ldd	r19, Y+14	; 0x0e
    19da:	4f 85       	ldd	r20, Y+15	; 0x0f
    19dc:	58 89       	ldd	r21, Y+16	; 0x10
    19de:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    19e2:	69 83       	std	Y+1, r22	; 0x01
    19e4:	7a 83       	std	Y+2, r23	; 0x02
    19e6:	8b 83       	std	Y+3, r24	; 0x03
    19e8:	9c 83       	std	Y+4, r25	; 0x04
    19ea:	c3 01       	movw	r24, r6
    19ec:	b2 01       	movw	r22, r4
    19ee:	20 91 ff 2a 	lds	r18, 0x2AFF
    19f2:	30 91 00 2b 	lds	r19, 0x2B00
    19f6:	40 91 01 2b 	lds	r20, 0x2B01
    19fa:	50 91 02 2b 	lds	r21, 0x2B02
    19fe:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    1a02:	9b 01       	movw	r18, r22
    1a04:	ac 01       	movw	r20, r24
    1a06:	69 81       	ldd	r22, Y+1	; 0x01
    1a08:	7a 81       	ldd	r23, Y+2	; 0x02
    1a0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a0e:	0e 94 08 2f 	call	0x5e10	; 0x5e10 <__subsf3>
    1a12:	36 2e       	mov	r3, r22
    1a14:	27 2e       	mov	r2, r23
    1a16:	89 83       	std	Y+1, r24	; 0x01
    1a18:	99 87       	std	Y+9, r25	; 0x09
	dvy = acc * sin(dir) - gmma1 * agent1.vy;
    1a1a:	c7 01       	movw	r24, r14
    1a1c:	b6 01       	movw	r22, r12
    1a1e:	0e 94 25 32 	call	0x644a	; 0x644a <sin>
    1a22:	6d 83       	std	Y+5, r22	; 0x05
    1a24:	7e 83       	std	Y+6, r23	; 0x06
    1a26:	8f 83       	std	Y+7, r24	; 0x07
    1a28:	98 87       	std	Y+8, r25	; 0x08
    1a2a:	c5 01       	movw	r24, r10
    1a2c:	b4 01       	movw	r22, r8
    1a2e:	2d 81       	ldd	r18, Y+5	; 0x05
    1a30:	3e 81       	ldd	r19, Y+6	; 0x06
    1a32:	4f 81       	ldd	r20, Y+7	; 0x07
    1a34:	58 85       	ldd	r21, Y+8	; 0x08
    1a36:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    1a3a:	6b 01       	movw	r12, r22
    1a3c:	7c 01       	movw	r14, r24
    1a3e:	c3 01       	movw	r24, r6
    1a40:	b2 01       	movw	r22, r4
    1a42:	20 91 03 2b 	lds	r18, 0x2B03
    1a46:	30 91 04 2b 	lds	r19, 0x2B04
    1a4a:	40 91 05 2b 	lds	r20, 0x2B05
    1a4e:	50 91 06 2b 	lds	r21, 0x2B06
    1a52:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    1a56:	9b 01       	movw	r18, r22
    1a58:	ac 01       	movw	r20, r24
    1a5a:	c7 01       	movw	r24, r14
    1a5c:	b6 01       	movw	r22, r12
    1a5e:	0e 94 08 2f 	call	0x5e10	; 0x5e10 <__subsf3>
    1a62:	f6 2e       	mov	r15, r22
    1a64:	e7 2e       	mov	r14, r23
    1a66:	c8 2e       	mov	r12, r24
    1a68:	89 2e       	mov	r8, r25

	//interaction force with 6 neighbors
	forcex=0.0; forcey=0.0;
    1a6a:	80 e0       	ldi	r24, 0x00	; 0
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	dc 01       	movw	r26, r24
    1a70:	80 93 d4 20 	sts	0x20D4, r24
    1a74:	90 93 d5 20 	sts	0x20D5, r25
    1a78:	a0 93 d6 20 	sts	0x20D6, r26
    1a7c:	b0 93 d7 20 	sts	0x20D7, r27
    1a80:	80 93 d0 20 	sts	0x20D0, r24
    1a84:	90 93 d1 20 	sts	0x20D1, r25
    1a88:	a0 93 d2 20 	sts	0x20D2, r26
    1a8c:	b0 93 d3 20 	sts	0x20D3, r27
    1a90:	03 ec       	ldi	r16, 0xC3	; 195
    1a92:	1a e2       	ldi	r17, 0x2A	; 42

	for(i=0;i<NUM_NEIGHBORS;i++)
    1a94:	80 e0       	ldi	r24, 0x00	; 0
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	5c 01       	movw	r10, r24
	{
		if(connected[i]){
    1a9a:	d8 01       	movw	r26, r16
    1a9c:	8d 91       	ld	r24, X+
    1a9e:	8d 01       	movw	r16, r26
    1aa0:	88 23       	and	r24, r24
    1aa2:	19 f0       	breq	.+6      	; 0x1aaa <_Z18swarm_synchronizedv+0x146>
			swarm_interaction1(i);
    1aa4:	c5 01       	movw	r24, r10
    1aa6:	0e 94 95 0a 	call	0x152a	; 0x152a <_Z18swarm_interaction1i>
	dvy = acc * sin(dir) - gmma1 * agent1.vy;

	//interaction force with 6 neighbors
	forcex=0.0; forcey=0.0;

	for(i=0;i<NUM_NEIGHBORS;i++)
    1aaa:	08 94       	sec
    1aac:	a1 1c       	adc	r10, r1
    1aae:	b1 1c       	adc	r11, r1
    1ab0:	b6 e0       	ldi	r27, 0x06	; 6
    1ab2:	ab 16       	cp	r10, r27
    1ab4:	b1 04       	cpc	r11, r1
    1ab6:	89 f7       	brne	.-30     	; 0x1a9a <_Z18swarm_synchronizedv+0x136>
		if(connected[i]){
			swarm_interaction1(i);
		}
	}

	dvx = dvx + forcex;
    1ab8:	a1 01       	movw	r20, r2
    1aba:	39 81       	ldd	r19, Y+1	; 0x01
    1abc:	29 85       	ldd	r18, Y+9	; 0x09
    1abe:	85 2f       	mov	r24, r21
    1ac0:	92 2d       	mov	r25, r2
    1ac2:	a3 2f       	mov	r26, r19
    1ac4:	b2 2f       	mov	r27, r18
    1ac6:	bc 01       	movw	r22, r24
    1ac8:	cd 01       	movw	r24, r26
    1aca:	20 91 d4 20 	lds	r18, 0x20D4
    1ace:	30 91 d5 20 	lds	r19, 0x20D5
    1ad2:	40 91 d6 20 	lds	r20, 0x20D6
    1ad6:	50 91 d7 20 	lds	r21, 0x20D7
    1ada:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__addsf3>
    1ade:	36 2e       	mov	r3, r22
    1ae0:	27 2e       	mov	r2, r23
    1ae2:	18 2f       	mov	r17, r24
    1ae4:	09 2f       	mov	r16, r25
	dvy = dvy + forcey;
    1ae6:	a7 01       	movw	r20, r14
    1ae8:	85 2f       	mov	r24, r21
    1aea:	9e 2d       	mov	r25, r14
    1aec:	ac 2d       	mov	r26, r12
    1aee:	b8 2d       	mov	r27, r8
    1af0:	bc 01       	movw	r22, r24
    1af2:	cd 01       	movw	r24, r26
    1af4:	20 91 d0 20 	lds	r18, 0x20D0
    1af8:	30 91 d1 20 	lds	r19, 0x20D1
    1afc:	40 91 d2 20 	lds	r20, 0x20D2
    1b00:	50 91 d3 20 	lds	r21, 0x20D3
    1b04:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__addsf3>
    1b08:	86 2e       	mov	r8, r22
    1b0a:	47 2e       	mov	r4, r23
    1b0c:	b8 2e       	mov	r11, r24
    1b0e:	a9 2e       	mov	r10, r25

	//spring term (Zero-length spring). fixed point = (0,0)
	lx = - agent1.px;
    1b10:	80 91 f7 2a 	lds	r24, 0x2AF7
    1b14:	90 91 f8 2a 	lds	r25, 0x2AF8
    1b18:	a0 91 f9 2a 	lds	r26, 0x2AF9
    1b1c:	b0 91 fa 2a 	lds	r27, 0x2AFA
    1b20:	89 87       	std	Y+9, r24	; 0x09
    1b22:	9a 87       	std	Y+10, r25	; 0x0a
    1b24:	ab 87       	std	Y+11, r26	; 0x0b
    1b26:	bc 87       	std	Y+12, r27	; 0x0c
	ly = - agent1.py;
    1b28:	80 91 fb 2a 	lds	r24, 0x2AFB
    1b2c:	90 91 fc 2a 	lds	r25, 0x2AFC
    1b30:	a0 91 fd 2a 	lds	r26, 0x2AFD
    1b34:	b0 91 fe 2a 	lds	r27, 0x2AFE
    1b38:	89 8b       	std	Y+17, r24	; 0x11
    1b3a:	9a 8b       	std	Y+18, r25	; 0x12
    1b3c:	ab 8b       	std	Y+19, r26	; 0x13
    1b3e:	bc 8b       	std	Y+20, r27	; 0x14
	dvx = dvx + ka1 * lx;
    1b40:	c0 90 45 20 	lds	r12, 0x2045
    1b44:	d0 90 46 20 	lds	r13, 0x2046
    1b48:	e0 90 47 20 	lds	r14, 0x2047
    1b4c:	f0 90 48 20 	lds	r15, 0x2048

	dvx = dvx + forcex;
	dvy = dvy + forcey;

	//spring term (Zero-length spring). fixed point = (0,0)
	lx = - agent1.px;
    1b50:	29 85       	ldd	r18, Y+9	; 0x09
    1b52:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b54:	4b 85       	ldd	r20, Y+11	; 0x0b
    1b56:	5c 85       	ldd	r21, Y+12	; 0x0c
    1b58:	50 58       	subi	r21, 0x80	; 128
	ly = - agent1.py;
	dvx = dvx + ka1 * lx;
    1b5a:	c7 01       	movw	r24, r14
    1b5c:	b6 01       	movw	r22, r12
    1b5e:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    1b62:	9b 01       	movw	r18, r22
    1b64:	ac 01       	movw	r20, r24
    1b66:	f1 01       	movw	r30, r2
    1b68:	b8 01       	movw	r22, r16
    1b6a:	8f 2f       	mov	r24, r31
    1b6c:	9e 2f       	mov	r25, r30
    1b6e:	a7 2f       	mov	r26, r23
    1b70:	b6 2f       	mov	r27, r22
    1b72:	bc 01       	movw	r22, r24
    1b74:	cd 01       	movw	r24, r26
    1b76:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__addsf3>
    1b7a:	69 8f       	std	Y+25, r22	; 0x19
    1b7c:	7a 8f       	std	Y+26, r23	; 0x1a
    1b7e:	8b 8f       	std	Y+27, r24	; 0x1b
    1b80:	9c 8f       	std	Y+28, r25	; 0x1c
	dvx = dvx + forcex;
	dvy = dvy + forcey;

	//spring term (Zero-length spring). fixed point = (0,0)
	lx = - agent1.px;
	ly = - agent1.py;
    1b82:	29 89       	ldd	r18, Y+17	; 0x11
    1b84:	3a 89       	ldd	r19, Y+18	; 0x12
    1b86:	4b 89       	ldd	r20, Y+19	; 0x13
    1b88:	5c 89       	ldd	r21, Y+20	; 0x14
    1b8a:	50 58       	subi	r21, 0x80	; 128
	dvx = dvx + ka1 * lx;
	dvy = dvy + ka1 * ly;
    1b8c:	c7 01       	movw	r24, r14
    1b8e:	b6 01       	movw	r22, r12
    1b90:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    1b94:	9b 01       	movw	r18, r22
    1b96:	ac 01       	movw	r20, r24
    1b98:	b5 01       	movw	r22, r10
    1b9a:	88 2d       	mov	r24, r8
    1b9c:	94 2d       	mov	r25, r4
    1b9e:	a7 2f       	mov	r26, r23
    1ba0:	b6 2f       	mov	r27, r22
    1ba2:	bc 01       	movw	r22, r24
    1ba4:	cd 01       	movw	r24, r26
    1ba6:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__addsf3>
    1baa:	36 2e       	mov	r3, r22
    1bac:	27 2e       	mov	r2, r23
    1bae:	8d 8f       	std	Y+29, r24	; 0x1d
    1bb0:	9e 8f       	std	Y+30, r25	; 0x1e

	// ===== update =====
	//direction
	vabs = sqrt(agent1.vx * agent1.vx + agent1.vy * agent1.vy);
    1bb2:	80 90 ff 2a 	lds	r8, 0x2AFF
    1bb6:	90 90 00 2b 	lds	r9, 0x2B00
    1bba:	a0 90 01 2b 	lds	r10, 0x2B01
    1bbe:	b0 90 02 2b 	lds	r11, 0x2B02
    1bc2:	80 91 03 2b 	lds	r24, 0x2B03
    1bc6:	90 91 04 2b 	lds	r25, 0x2B04
    1bca:	a0 91 05 2b 	lds	r26, 0x2B05
    1bce:	b0 91 06 2b 	lds	r27, 0x2B06
    1bd2:	89 83       	std	Y+1, r24	; 0x01
    1bd4:	9a 83       	std	Y+2, r25	; 0x02
    1bd6:	ab 83       	std	Y+3, r26	; 0x03
    1bd8:	bc 83       	std	Y+4, r27	; 0x04
    1bda:	c5 01       	movw	r24, r10
    1bdc:	b4 01       	movw	r22, r8
    1bde:	a5 01       	movw	r20, r10
    1be0:	94 01       	movw	r18, r8
    1be2:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    1be6:	6b 01       	movw	r12, r22
    1be8:	7c 01       	movw	r14, r24
    1bea:	69 81       	ldd	r22, Y+1	; 0x01
    1bec:	7a 81       	ldd	r23, Y+2	; 0x02
    1bee:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf2:	9b 01       	movw	r18, r22
    1bf4:	ac 01       	movw	r20, r24
    1bf6:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    1bfa:	9b 01       	movw	r18, r22
    1bfc:	ac 01       	movw	r20, r24
    1bfe:	c7 01       	movw	r24, r14
    1c00:	b6 01       	movw	r22, r12
    1c02:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__addsf3>
    1c06:	0e 94 2f 32 	call	0x645e	; 0x645e <sqrt>
    1c0a:	6b 01       	movw	r12, r22
    1c0c:	7c 01       	movw	r14, r24

	fx = agent1.vx / vabs;
	fy = agent1.vy / vabs;
	ds = -1.0 / tau1 * (sin(dir)*fx-cos(dir)*fy); // get sin value by cross product

	agent1.hd += ds * dt;
    1c0e:	40 90 59 20 	lds	r4, 0x2059
    1c12:	50 90 5a 20 	lds	r5, 0x205A
    1c16:	60 90 5b 20 	lds	r6, 0x205B
    1c1a:	70 90 5c 20 	lds	r7, 0x205C
	//direction
	vabs = sqrt(agent1.vx * agent1.vx + agent1.vy * agent1.vy);

	fx = agent1.vx / vabs;
	fy = agent1.vy / vabs;
	ds = -1.0 / tau1 * (sin(dir)*fx-cos(dir)*fy); // get sin value by cross product
    1c1e:	60 e0       	ldi	r22, 0x00	; 0
    1c20:	70 e0       	ldi	r23, 0x00	; 0
    1c22:	80 e8       	ldi	r24, 0x80	; 128
    1c24:	9f eb       	ldi	r25, 0xBF	; 191
    1c26:	20 91 3d 20 	lds	r18, 0x203D
    1c2a:	30 91 3e 20 	lds	r19, 0x203E
    1c2e:	40 91 3f 20 	lds	r20, 0x203F
    1c32:	50 91 40 20 	lds	r21, 0x2040
    1c36:	0e 94 74 2f 	call	0x5ee8	; 0x5ee8 <__divsf3>
    1c3a:	6d 8b       	std	Y+21, r22	; 0x15
    1c3c:	7e 8b       	std	Y+22, r23	; 0x16
    1c3e:	8f 8b       	std	Y+23, r24	; 0x17
    1c40:	98 8f       	std	Y+24, r25	; 0x18

	// ===== update =====
	//direction
	vabs = sqrt(agent1.vx * agent1.vx + agent1.vy * agent1.vy);

	fx = agent1.vx / vabs;
    1c42:	c5 01       	movw	r24, r10
    1c44:	b4 01       	movw	r22, r8
    1c46:	a7 01       	movw	r20, r14
    1c48:	96 01       	movw	r18, r12
    1c4a:	0e 94 74 2f 	call	0x5ee8	; 0x5ee8 <__divsf3>
    1c4e:	9b 01       	movw	r18, r22
    1c50:	ac 01       	movw	r20, r24
	fy = agent1.vy / vabs;
	ds = -1.0 / tau1 * (sin(dir)*fx-cos(dir)*fy); // get sin value by cross product
    1c52:	6d 81       	ldd	r22, Y+5	; 0x05
    1c54:	7e 81       	ldd	r23, Y+6	; 0x06
    1c56:	8f 81       	ldd	r24, Y+7	; 0x07
    1c58:	98 85       	ldd	r25, Y+8	; 0x08
    1c5a:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    1c5e:	6d 83       	std	Y+5, r22	; 0x05
    1c60:	7e 83       	std	Y+6, r23	; 0x06
    1c62:	8f 83       	std	Y+7, r24	; 0x07
    1c64:	98 87       	std	Y+8, r25	; 0x08
	// ===== update =====
	//direction
	vabs = sqrt(agent1.vx * agent1.vx + agent1.vy * agent1.vy);

	fx = agent1.vx / vabs;
	fy = agent1.vy / vabs;
    1c66:	69 81       	ldd	r22, Y+1	; 0x01
    1c68:	7a 81       	ldd	r23, Y+2	; 0x02
    1c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c6e:	a7 01       	movw	r20, r14
    1c70:	96 01       	movw	r18, r12
    1c72:	0e 94 74 2f 	call	0x5ee8	; 0x5ee8 <__divsf3>
    1c76:	9b 01       	movw	r18, r22
    1c78:	ac 01       	movw	r20, r24
	ds = -1.0 / tau1 * (sin(dir)*fx-cos(dir)*fy); // get sin value by cross product
    1c7a:	6d 85       	ldd	r22, Y+13	; 0x0d
    1c7c:	7e 85       	ldd	r23, Y+14	; 0x0e
    1c7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c80:	98 89       	ldd	r25, Y+16	; 0x10
    1c82:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    1c86:	9b 01       	movw	r18, r22
    1c88:	ac 01       	movw	r20, r24
    1c8a:	6d 81       	ldd	r22, Y+5	; 0x05
    1c8c:	7e 81       	ldd	r23, Y+6	; 0x06
    1c8e:	8f 81       	ldd	r24, Y+7	; 0x07
    1c90:	98 85       	ldd	r25, Y+8	; 0x08
    1c92:	0e 94 08 2f 	call	0x5e10	; 0x5e10 <__subsf3>
    1c96:	9b 01       	movw	r18, r22
    1c98:	ac 01       	movw	r20, r24
    1c9a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c9c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c9e:	8f 89       	ldd	r24, Y+23	; 0x17
    1ca0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ca2:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>

	agent1.hd += ds * dt;
    1ca6:	a3 01       	movw	r20, r6
    1ca8:	92 01       	movw	r18, r4
    1caa:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    1cae:	20 91 07 2b 	lds	r18, 0x2B07
    1cb2:	30 91 08 2b 	lds	r19, 0x2B08
    1cb6:	40 91 09 2b 	lds	r20, 0x2B09
    1cba:	50 91 0a 2b 	lds	r21, 0x2B0A
    1cbe:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__addsf3>
    1cc2:	8b 01       	movw	r16, r22
    1cc4:	7c 01       	movw	r14, r24
    1cc6:	86 2f       	mov	r24, r22
    1cc8:	91 2f       	mov	r25, r17
    1cca:	ae 2d       	mov	r26, r14
    1ccc:	bf 2d       	mov	r27, r15
    1cce:	80 93 07 2b 	sts	0x2B07, r24
    1cd2:	90 93 08 2b 	sts	0x2B08, r25
    1cd6:	a0 93 09 2b 	sts	0x2B09, r26
    1cda:	b0 93 0a 2b 	sts	0x2B0A, r27

	if(agent1.hd > 2.0 * PI)	agent1.hd -= 2.0 * PI;
    1cde:	bc 01       	movw	r22, r24
    1ce0:	cd 01       	movw	r24, r26
    1ce2:	20 ed       	ldi	r18, 0xD0	; 208
    1ce4:	3f e0       	ldi	r19, 0x0F	; 15
    1ce6:	49 ec       	ldi	r20, 0xC9	; 201
    1ce8:	50 e4       	ldi	r21, 0x40	; 64
    1cea:	0e 94 4e 31 	call	0x629c	; 0x629c <__gesf2>
    1cee:	18 16       	cp	r1, r24
    1cf0:	b4 f4       	brge	.+44     	; 0x1d1e <_Z18swarm_synchronizedv+0x3ba>
    1cf2:	80 2f       	mov	r24, r16
    1cf4:	91 2f       	mov	r25, r17
    1cf6:	ae 2d       	mov	r26, r14
    1cf8:	bf 2d       	mov	r27, r15
    1cfa:	bc 01       	movw	r22, r24
    1cfc:	cd 01       	movw	r24, r26
    1cfe:	20 ed       	ldi	r18, 0xD0	; 208
    1d00:	3f e0       	ldi	r19, 0x0F	; 15
    1d02:	49 ec       	ldi	r20, 0xC9	; 201
    1d04:	50 e4       	ldi	r21, 0x40	; 64
    1d06:	0e 94 08 2f 	call	0x5e10	; 0x5e10 <__subsf3>
    1d0a:	dc 01       	movw	r26, r24
    1d0c:	cb 01       	movw	r24, r22
    1d0e:	80 93 07 2b 	sts	0x2B07, r24
    1d12:	90 93 08 2b 	sts	0x2B08, r25
    1d16:	a0 93 09 2b 	sts	0x2B09, r26
    1d1a:	b0 93 0a 2b 	sts	0x2B0A, r27
	if(agent1.hd < 0 ) 			agent1.hd += 2.0 * PI;
    1d1e:	c0 90 07 2b 	lds	r12, 0x2B07
    1d22:	d0 90 08 2b 	lds	r13, 0x2B08
    1d26:	e0 90 09 2b 	lds	r14, 0x2B09
    1d2a:	f0 90 0a 2b 	lds	r15, 0x2B0A
    1d2e:	c7 01       	movw	r24, r14
    1d30:	b6 01       	movw	r22, r12
    1d32:	20 e0       	ldi	r18, 0x00	; 0
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	a9 01       	movw	r20, r18
    1d38:	0e 94 6d 2f 	call	0x5eda	; 0x5eda <__cmpsf2>
    1d3c:	87 ff       	sbrs	r24, 7
    1d3e:	12 c0       	rjmp	.+36     	; 0x1d64 <_Z18swarm_synchronizedv+0x400>
    1d40:	c7 01       	movw	r24, r14
    1d42:	b6 01       	movw	r22, r12
    1d44:	20 ed       	ldi	r18, 0xD0	; 208
    1d46:	3f e0       	ldi	r19, 0x0F	; 15
    1d48:	49 ec       	ldi	r20, 0xC9	; 201
    1d4a:	50 e4       	ldi	r21, 0x40	; 64
    1d4c:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__addsf3>
    1d50:	dc 01       	movw	r26, r24
    1d52:	cb 01       	movw	r24, r22
    1d54:	80 93 07 2b 	sts	0x2B07, r24
    1d58:	90 93 08 2b 	sts	0x2B08, r25
    1d5c:	a0 93 09 2b 	sts	0x2B09, r26
    1d60:	b0 93 0a 2b 	sts	0x2B0A, r27

	//velocity
	agent1.vx += dvx * dt;
    1d64:	59 8d       	ldd	r21, Y+25	; 0x19
    1d66:	4a 8d       	ldd	r20, Y+26	; 0x1a
    1d68:	3b 8d       	ldd	r19, Y+27	; 0x1b
    1d6a:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1d6c:	85 2f       	mov	r24, r21
    1d6e:	94 2f       	mov	r25, r20
    1d70:	a3 2f       	mov	r26, r19
    1d72:	b2 2f       	mov	r27, r18
    1d74:	bc 01       	movw	r22, r24
    1d76:	cd 01       	movw	r24, r26
    1d78:	a3 01       	movw	r20, r6
    1d7a:	92 01       	movw	r18, r4
    1d7c:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    1d80:	9b 01       	movw	r18, r22
    1d82:	ac 01       	movw	r20, r24
    1d84:	c5 01       	movw	r24, r10
    1d86:	b4 01       	movw	r22, r8
    1d88:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__addsf3>
    1d8c:	06 2f       	mov	r16, r22
    1d8e:	b7 2e       	mov	r11, r23
    1d90:	c8 2e       	mov	r12, r24
    1d92:	a9 2e       	mov	r10, r25
    1d94:	86 2f       	mov	r24, r22
    1d96:	9b 2d       	mov	r25, r11
    1d98:	ac 2d       	mov	r26, r12
    1d9a:	ba 2d       	mov	r27, r10
    1d9c:	80 93 ff 2a 	sts	0x2AFF, r24
    1da0:	90 93 00 2b 	sts	0x2B00, r25
    1da4:	a0 93 01 2b 	sts	0x2B01, r26
    1da8:	b0 93 02 2b 	sts	0x2B02, r27
	agent1.vy += dvy * dt;
    1dac:	a1 01       	movw	r20, r2
    1dae:	3d 8d       	ldd	r19, Y+29	; 0x1d
    1db0:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1db2:	85 2f       	mov	r24, r21
    1db4:	92 2d       	mov	r25, r2
    1db6:	a3 2f       	mov	r26, r19
    1db8:	b2 2f       	mov	r27, r18
    1dba:	bc 01       	movw	r22, r24
    1dbc:	cd 01       	movw	r24, r26
    1dbe:	a3 01       	movw	r20, r6
    1dc0:	92 01       	movw	r18, r4
    1dc2:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    1dc6:	9b 01       	movw	r18, r22
    1dc8:	ac 01       	movw	r20, r24
    1dca:	69 81       	ldd	r22, Y+1	; 0x01
    1dcc:	7a 81       	ldd	r23, Y+2	; 0x02
    1dce:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd2:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__addsf3>
    1dd6:	16 2f       	mov	r17, r22
    1dd8:	87 2e       	mov	r8, r23
    1dda:	f8 2e       	mov	r15, r24
    1ddc:	e9 2e       	mov	r14, r25
    1dde:	97 01       	movw	r18, r14
    1de0:	86 2f       	mov	r24, r22
    1de2:	98 2d       	mov	r25, r8
    1de4:	a3 2f       	mov	r26, r19
    1de6:	b2 2f       	mov	r27, r18
    1de8:	80 93 03 2b 	sts	0x2B03, r24
    1dec:	90 93 04 2b 	sts	0x2B04, r25
    1df0:	a0 93 05 2b 	sts	0x2B05, r26
    1df4:	b0 93 06 2b 	sts	0x2B06, r27


	//position
	agent1.px += agent1.vx * dt;
    1df8:	80 2f       	mov	r24, r16
    1dfa:	9b 2d       	mov	r25, r11
    1dfc:	ac 2d       	mov	r26, r12
    1dfe:	ba 2d       	mov	r27, r10
    1e00:	bc 01       	movw	r22, r24
    1e02:	cd 01       	movw	r24, r26
    1e04:	a3 01       	movw	r20, r6
    1e06:	92 01       	movw	r18, r4
    1e08:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    1e0c:	9b 01       	movw	r18, r22
    1e0e:	ac 01       	movw	r20, r24
    1e10:	69 85       	ldd	r22, Y+9	; 0x09
    1e12:	7a 85       	ldd	r23, Y+10	; 0x0a
    1e14:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e16:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e18:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__addsf3>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	80 93 f7 2a 	sts	0x2AF7, r24
    1e24:	90 93 f8 2a 	sts	0x2AF8, r25
    1e28:	a0 93 f9 2a 	sts	0x2AF9, r26
    1e2c:	b0 93 fa 2a 	sts	0x2AFA, r27
	agent1.py += agent1.vy * dt;
    1e30:	97 01       	movw	r18, r14
    1e32:	81 2f       	mov	r24, r17
    1e34:	98 2d       	mov	r25, r8
    1e36:	a3 2f       	mov	r26, r19
    1e38:	b2 2f       	mov	r27, r18
    1e3a:	bc 01       	movw	r22, r24
    1e3c:	cd 01       	movw	r24, r26
    1e3e:	a3 01       	movw	r20, r6
    1e40:	92 01       	movw	r18, r4
    1e42:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    1e46:	9b 01       	movw	r18, r22
    1e48:	ac 01       	movw	r20, r24
    1e4a:	69 89       	ldd	r22, Y+17	; 0x11
    1e4c:	7a 89       	ldd	r23, Y+18	; 0x12
    1e4e:	8b 89       	ldd	r24, Y+19	; 0x13
    1e50:	9c 89       	ldd	r25, Y+20	; 0x14
    1e52:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__addsf3>
    1e56:	dc 01       	movw	r26, r24
    1e58:	cb 01       	movw	r24, r22
    1e5a:	80 93 fb 2a 	sts	0x2AFB, r24
    1e5e:	90 93 fc 2a 	sts	0x2AFC, r25
    1e62:	a0 93 fd 2a 	sts	0x2AFD, r26
    1e66:	b0 93 fe 2a 	sts	0x2AFE, r27

	return agent1.hd;
}
    1e6a:	50 91 07 2b 	lds	r21, 0x2B07
    1e6e:	40 91 08 2b 	lds	r20, 0x2B08
    1e72:	30 91 09 2b 	lds	r19, 0x2B09
    1e76:	20 91 0a 2b 	lds	r18, 0x2B0A
    1e7a:	85 2f       	mov	r24, r21
    1e7c:	94 2f       	mov	r25, r20
    1e7e:	a3 2f       	mov	r26, r19
    1e80:	b2 2f       	mov	r27, r18
    1e82:	bc 01       	movw	r22, r24
    1e84:	cd 01       	movw	r24, r26
    1e86:	6e 96       	adiw	r28, 0x1e	; 30
    1e88:	cd bf       	out	0x3d, r28	; 61
    1e8a:	de bf       	out	0x3e, r29	; 62
    1e8c:	df 91       	pop	r29
    1e8e:	cf 91       	pop	r28
    1e90:	1f 91       	pop	r17
    1e92:	0f 91       	pop	r16
    1e94:	ff 90       	pop	r15
    1e96:	ef 90       	pop	r14
    1e98:	df 90       	pop	r13
    1e9a:	cf 90       	pop	r12
    1e9c:	bf 90       	pop	r11
    1e9e:	af 90       	pop	r10
    1ea0:	9f 90       	pop	r9
    1ea2:	8f 90       	pop	r8
    1ea4:	7f 90       	pop	r7
    1ea6:	6f 90       	pop	r6
    1ea8:	5f 90       	pop	r5
    1eaa:	4f 90       	pop	r4
    1eac:	3f 90       	pop	r3
    1eae:	2f 90       	pop	r2
    1eb0:	08 95       	ret

00001eb2 <_Z12send_messagehhiPKc>:
// ============================================================================================
// send packet
// ============================================================================================
void send_message(uint8_t MessageType, uint8_t direction, int dist, const char str[])
{
    1eb2:	cf 93       	push	r28
    1eb4:	df 93       	push	r29
    1eb6:	cd b7       	in	r28, 0x3d	; 61
    1eb8:	de b7       	in	r29, 0x3e	; 62
    1eba:	2c 97       	sbiw	r28, 0x0c	; 12
    1ebc:	cd bf       	out	0x3d, r28	; 61
    1ebe:	de bf       	out	0x3e, r29	; 62
    1ec0:	56 2f       	mov	r21, r22
	Xgrid::Packet pkt;
	pkt.type = MessageType;
    1ec2:	8b 83       	std	Y+3, r24	; 0x03
	pkt.flags = 0;	
    1ec4:	1d 82       	std	Y+5, r1	; 0x05

	switch(MessageType)
    1ec6:	88 23       	and	r24, r24
    1ec8:	49 f0       	breq	.+18     	; 0x1edc <_Z12send_messagehhiPKc+0x2a>
    1eca:	81 30       	cpi	r24, 0x01	; 1
    1ecc:	09 f0       	breq	.+2      	; 0x1ed0 <_Z12send_messagehhiPKc+0x1e>
    1ece:	4b c0       	rjmp	.+150    	; 0x1f66 <_Z12send_messagehhiPKc+0xb4>
	{
		case MESSAGE_COMMAND:
			pkt.data = (uint8_t*)str;
    1ed0:	2f 83       	std	Y+7, r18	; 0x07
    1ed2:	38 87       	std	Y+8, r19	; 0x08
			pkt.radius = dist;
    1ed4:	4e 83       	std	Y+6, r20	; 0x06
			pkt.data_len = sizeof(str);
    1ed6:	82 e0       	ldi	r24, 0x02	; 2
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	43 c0       	rjmp	.+134    	; 0x1f62 <_Z12send_messagehhiPKc+0xb0>
			break;

		case MESSAGE_NUMDATA:
			mdata.x0 = agent0.px;	mdata.y0 = agent0.py;
    1edc:	80 91 3b 2b 	lds	r24, 0x2B3B
    1ee0:	90 91 3c 2b 	lds	r25, 0x2B3C
    1ee4:	a0 91 3d 2b 	lds	r26, 0x2B3D
    1ee8:	b0 91 3e 2b 	lds	r27, 0x2B3E
    1eec:	80 93 dd 2a 	sts	0x2ADD, r24
    1ef0:	90 93 de 2a 	sts	0x2ADE, r25
    1ef4:	a0 93 df 2a 	sts	0x2ADF, r26
    1ef8:	b0 93 e0 2a 	sts	0x2AE0, r27
    1efc:	80 91 3f 2b 	lds	r24, 0x2B3F
    1f00:	90 91 40 2b 	lds	r25, 0x2B40
    1f04:	a0 91 41 2b 	lds	r26, 0x2B41
    1f08:	b0 91 42 2b 	lds	r27, 0x2B42
    1f0c:	80 93 e1 2a 	sts	0x2AE1, r24
    1f10:	90 93 e2 2a 	sts	0x2AE2, r25
    1f14:	a0 93 e3 2a 	sts	0x2AE3, r26
    1f18:	b0 93 e4 2a 	sts	0x2AE4, r27
			mdata.x1 = agent1.px;	mdata.y1 = agent1.py;
    1f1c:	e5 ed       	ldi	r30, 0xD5	; 213
    1f1e:	fa e2       	ldi	r31, 0x2A	; 42
    1f20:	80 91 f7 2a 	lds	r24, 0x2AF7
    1f24:	90 91 f8 2a 	lds	r25, 0x2AF8
    1f28:	a0 91 f9 2a 	lds	r26, 0x2AF9
    1f2c:	b0 91 fa 2a 	lds	r27, 0x2AFA
    1f30:	80 93 d5 2a 	sts	0x2AD5, r24
    1f34:	90 93 d6 2a 	sts	0x2AD6, r25
    1f38:	a0 93 d7 2a 	sts	0x2AD7, r26
    1f3c:	b0 93 d8 2a 	sts	0x2AD8, r27
    1f40:	80 91 fb 2a 	lds	r24, 0x2AFB
    1f44:	90 91 fc 2a 	lds	r25, 0x2AFC
    1f48:	a0 91 fd 2a 	lds	r26, 0x2AFD
    1f4c:	b0 91 fe 2a 	lds	r27, 0x2AFE
    1f50:	84 83       	std	Z+4, r24	; 0x04
    1f52:	95 83       	std	Z+5, r25	; 0x05
    1f54:	a6 83       	std	Z+6, r26	; 0x06
    1f56:	b7 83       	std	Z+7, r27	; 0x07

			pkt.data = (uint8_t *)&mdata;
    1f58:	ef 83       	std	Y+7, r30	; 0x07
    1f5a:	f8 87       	std	Y+8, r31	; 0x08
			pkt.radius = dist;
    1f5c:	4e 83       	std	Y+6, r20	; 0x06
			pkt.data_len = sizeof(point);
    1f5e:	80 e1       	ldi	r24, 0x10	; 16
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	89 87       	std	Y+9, r24	; 0x09
    1f64:	9a 87       	std	Y+10, r25	; 0x0a
			break;
	}
									
	xgrid.send_packet(&pkt, direction);	// send to all neighbors
    1f66:	8e ee       	ldi	r24, 0xEE	; 238
    1f68:	90 e2       	ldi	r25, 0x20	; 32
    1f6a:	be 01       	movw	r22, r28
    1f6c:	6f 5f       	subi	r22, 0xFF	; 255
    1f6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f70:	45 2f       	mov	r20, r21
    1f72:	50 e0       	ldi	r21, 0x00	; 0
    1f74:	0e 94 8d 23 	call	0x471a	; 0x471a <_ZN5Xgrid11send_packetEPNS_6PacketEj>

	//LED_PORT.OUTTGL = LED_USR_2_PIN_bm;	//green LED
}
    1f78:	2c 96       	adiw	r28, 0x0c	; 12
    1f7a:	cd bf       	out	0x3d, r28	; 61
    1f7c:	de bf       	out	0x3e, r29	; 62
    1f7e:	df 91       	pop	r29
    1f80:	cf 91       	pop	r28
    1f82:	08 95       	ret

00001f84 <_Z9avalanchev>:
// ============================================================================================
// SWARM DYNAMICS 6 --- Avalanche like behavior based on Ken's Swarm Dynamics ---
// ============================================================================================
// ============================================================================================
float avalanche()
{
    1f84:	cf 92       	push	r12
    1f86:	df 92       	push	r13
    1f88:	ef 92       	push	r14
    1f8a:	ff 92       	push	r15
	float angle, dir, threshold = 0.999, speed1 = 150.0, speed2 = 50.0;

	dir = swarm_disordered();
    1f8c:	0e 94 ee 07 	call	0xfdc	; 0xfdc <_Z16swarm_disorderedv>
    1f90:	6b 01       	movw	r12, r22
    1f92:	7c 01       	movw	r14, r24
	send_message(MESSAGE_NUMDATA, ALL_DIRECTION, NULL, "");	//It should be included...
    1f94:	80 e0       	ldi	r24, 0x00	; 0
    1f96:	6f e3       	ldi	r22, 0x3F	; 63
    1f98:	40 e0       	ldi	r20, 0x00	; 0
    1f9a:	50 e0       	ldi	r21, 0x00	; 0
    1f9c:	20 e0       	ldi	r18, 0x00	; 0
    1f9e:	30 e2       	ldi	r19, 0x20	; 32
    1fa0:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <_Z12send_messagehhiPKc>

	if(sonar_attached && use_sensor_data_on)
    1fa4:	80 91 c2 2a 	lds	r24, 0x2AC2
    1fa8:	88 23       	and	r24, r24
    1faa:	c1 f0       	breq	.+48     	; 0x1fdc <_Z9avalanchev+0x58>
    1fac:	80 91 a4 2a 	lds	r24, 0x2AA4
    1fb0:	88 23       	and	r24, r24
    1fb2:	a1 f0       	breq	.+40     	; 0x1fdc <_Z9avalanchev+0x58>
	{
		if(sensor_value_dblchk >= RANGE1 && sensor_value_dblchk < RANGE3)
    1fb4:	80 91 bc 2a 	lds	r24, 0x2ABC
    1fb8:	90 91 bd 2a 	lds	r25, 0x2ABD
    1fbc:	c2 97       	sbiw	r24, 0x32	; 50
    1fbe:	88 3c       	cpi	r24, 0xC8	; 200
    1fc0:	91 05       	cpc	r25, r1
    1fc2:	50 f4       	brcc	.+20     	; 0x1fd8 <_Z9avalanchev+0x54>
		{
			send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, "c");
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	6f e3       	ldi	r22, 0x3F	; 63
    1fc8:	44 e1       	ldi	r20, 0x14	; 20
    1fca:	50 e0       	ldi	r21, 0x00	; 0
    1fcc:	21 e0       	ldi	r18, 0x01	; 1
    1fce:	30 e2       	ldi	r19, 0x20	; 32
    1fd0:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <_Z12send_messagehhiPKc>
			sync = false;
    1fd4:	10 92 5d 20 	sts	0x205D, r1
		}
		use_sensor_data_on = false;
    1fd8:	10 92 a4 2a 	sts	0x2AA4, r1
	}

	if(!sync) angle = cos(dir * speed1);
    1fdc:	80 91 5d 20 	lds	r24, 0x205D
    1fe0:	88 23       	and	r24, r24
    1fe2:	69 f4       	brne	.+26     	; 0x1ffe <_Z9avalanchev+0x7a>
    1fe4:	c7 01       	movw	r24, r14
    1fe6:	b6 01       	movw	r22, r12
    1fe8:	20 e0       	ldi	r18, 0x00	; 0
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	46 e1       	ldi	r20, 0x16	; 22
    1fee:	53 e4       	ldi	r21, 0x43	; 67
    1ff0:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    1ff4:	0e 94 71 2f 	call	0x5ee2	; 0x5ee2 <cos>
    1ff8:	6b 01       	movw	r12, r22
    1ffa:	7c 01       	movw	r14, r24
    1ffc:	1f c0       	rjmp	.+62     	; 0x203c <_Z9avalanchev+0xb8>
	else
	{
		angle = cos(dir * speed2);
    1ffe:	c7 01       	movw	r24, r14
    2000:	b6 01       	movw	r22, r12
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	48 e4       	ldi	r20, 0x48	; 72
    2008:	52 e4       	ldi	r21, 0x42	; 66
    200a:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    200e:	0e 94 71 2f 	call	0x5ee2	; 0x5ee2 <cos>
    2012:	6b 01       	movw	r12, r22
    2014:	7c 01       	movw	r14, r24
		if(fabs(angle) < threshold) angle = 0;
    2016:	9f 77       	andi	r25, 0x7F	; 127
    2018:	27 e7       	ldi	r18, 0x77	; 119
    201a:	3e eb       	ldi	r19, 0xBE	; 190
    201c:	4f e7       	ldi	r20, 0x7F	; 127
    201e:	5f e3       	ldi	r21, 0x3F	; 63
    2020:	0e 94 6d 2f 	call	0x5eda	; 0x5eda <__cmpsf2>
    2024:	87 ff       	sbrs	r24, 7
    2026:	0a c0       	rjmp	.+20     	; 0x203c <_Z9avalanchev+0xb8>
    2028:	0f 2e       	mov	r0, r31
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	cf 2e       	mov	r12, r31
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	df 2e       	mov	r13, r31
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	ef 2e       	mov	r14, r31
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	ff 2e       	mov	r15, r31
    203a:	f0 2d       	mov	r31, r0
	}

	return angle;
}
    203c:	8c 2d       	mov	r24, r12
    203e:	9d 2d       	mov	r25, r13
    2040:	ae 2d       	mov	r26, r14
    2042:	bf 2d       	mov	r27, r15
    2044:	bc 01       	movw	r22, r24
    2046:	cd 01       	movw	r24, r26
    2048:	ff 90       	pop	r15
    204a:	ef 90       	pop	r14
    204c:	df 90       	pop	r13
    204e:	cf 90       	pop	r12
    2050:	08 95       	ret

00002052 <_Z13Sync_Disorderi>:
	return agent1.hd;
}

// ################### COMBINATION OF SYNC AND DISORDER BEHAVIOR ####################
float Sync_Disorder(int ClosingTime)
{
    2052:	8f 92       	push	r8
    2054:	9f 92       	push	r9
    2056:	af 92       	push	r10
    2058:	bf 92       	push	r11
    205a:	cf 92       	push	r12
    205c:	df 92       	push	r13
    205e:	ef 92       	push	r14
    2060:	ff 92       	push	r15
    2062:	cf 93       	push	r28
    2064:	df 93       	push	r29
    2066:	ec 01       	movw	r28, r24
	float dir1, dir2, angle, speed = 150.0;
	int range;

	dir1 = swarm_synchronized();
    2068:	0e 94 b2 0c 	call	0x1964	; 0x1964 <_Z18swarm_synchronizedv>
    206c:	6b 01       	movw	r12, r22
    206e:	7c 01       	movw	r14, r24
	dir2 = swarm_disordered();
    2070:	0e 94 ee 07 	call	0xfdc	; 0xfdc <_Z16swarm_disorderedv>
    2074:	4b 01       	movw	r8, r22
    2076:	5c 01       	movw	r10, r24
	send_message(MESSAGE_NUMDATA, ALL_DIRECTION, NULL, "");
    2078:	80 e0       	ldi	r24, 0x00	; 0
    207a:	6f e3       	ldi	r22, 0x3F	; 63
    207c:	40 e0       	ldi	r20, 0x00	; 0
    207e:	50 e0       	ldi	r21, 0x00	; 0
    2080:	20 e0       	ldi	r18, 0x00	; 0
    2082:	30 e2       	ldi	r19, 0x20	; 32
    2084:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <_Z12send_messagehhiPKc>

	// The amplitude gradually increases, and decay in last 10 sec 
	if(sec_counter < ClosingTime-15)
    2088:	2f 97       	sbiw	r28, 0x0f	; 15
    208a:	80 91 b4 2a 	lds	r24, 0x2AB4
    208e:	90 91 b5 2a 	lds	r25, 0x2AB5
    2092:	8c 17       	cp	r24, r28
    2094:	9d 07       	cpc	r25, r29
    2096:	dc f5       	brge	.+118    	; 0x210e <_Z13Sync_Disorderi+0xbc>
	{
		decay_tim = 0;
    2098:	80 e0       	ldi	r24, 0x00	; 0
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	dc 01       	movw	r26, r24
    209e:	80 93 b0 2a 	sts	0x2AB0, r24
    20a2:	90 93 b1 2a 	sts	0x2AB1, r25
    20a6:	a0 93 b2 2a 	sts	0x2AB2, r26
    20aa:	b0 93 b3 2a 	sts	0x2AB3, r27
		global_amp += 0.005; 
    20ae:	60 91 ac 2a 	lds	r22, 0x2AAC
    20b2:	70 91 ad 2a 	lds	r23, 0x2AAD
    20b6:	80 91 ae 2a 	lds	r24, 0x2AAE
    20ba:	90 91 af 2a 	lds	r25, 0x2AAF
    20be:	2a e0       	ldi	r18, 0x0A	; 10
    20c0:	37 ed       	ldi	r19, 0xD7	; 215
    20c2:	43 ea       	ldi	r20, 0xA3	; 163
    20c4:	5b e3       	ldi	r21, 0x3B	; 59
    20c6:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__addsf3>
    20ca:	9b 01       	movw	r18, r22
    20cc:	f8 2f       	mov	r31, r24
    20ce:	e9 2f       	mov	r30, r25
    20d0:	46 2f       	mov	r20, r22
    20d2:	53 2f       	mov	r21, r19
    20d4:	68 2f       	mov	r22, r24
    20d6:	79 2f       	mov	r23, r25
    20d8:	40 93 ac 2a 	sts	0x2AAC, r20
    20dc:	50 93 ad 2a 	sts	0x2AAD, r21
    20e0:	60 93 ae 2a 	sts	0x2AAE, r22
    20e4:	70 93 af 2a 	sts	0x2AAF, r23
		if(global_amp > 1.0) global_amp = 1.0;
    20e8:	82 2f       	mov	r24, r18
    20ea:	93 2f       	mov	r25, r19
    20ec:	af 2f       	mov	r26, r31
    20ee:	be 2f       	mov	r27, r30
    20f0:	bc 01       	movw	r22, r24
    20f2:	cd 01       	movw	r24, r26
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	40 e8       	ldi	r20, 0x80	; 128
    20fa:	5f e3       	ldi	r21, 0x3F	; 63
    20fc:	0e 94 4e 31 	call	0x629c	; 0x629c <__gesf2>
    2100:	18 16       	cp	r1, r24
    2102:	d4 f5       	brge	.+116    	; 0x2178 <_Z13Sync_Disorderi+0x126>
    2104:	80 e0       	ldi	r24, 0x00	; 0
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	a0 e8       	ldi	r26, 0x80	; 128
    210a:	bf e3       	ldi	r27, 0x3F	; 63
    210c:	2d c0       	rjmp	.+90     	; 0x2168 <_Z13Sync_Disorderi+0x116>
	}
	else
	{
		decay_tim += 0.05;
    210e:	60 91 b0 2a 	lds	r22, 0x2AB0
    2112:	70 91 b1 2a 	lds	r23, 0x2AB1
    2116:	80 91 b2 2a 	lds	r24, 0x2AB2
    211a:	90 91 b3 2a 	lds	r25, 0x2AB3
    211e:	2d ec       	ldi	r18, 0xCD	; 205
    2120:	3c ec       	ldi	r19, 0xCC	; 204
    2122:	4c e4       	ldi	r20, 0x4C	; 76
    2124:	5d e3       	ldi	r21, 0x3D	; 61
    2126:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__addsf3>
    212a:	9b 01       	movw	r18, r22
    212c:	f8 2f       	mov	r31, r24
    212e:	e9 2f       	mov	r30, r25
    2130:	46 2f       	mov	r20, r22
    2132:	53 2f       	mov	r21, r19
    2134:	68 2f       	mov	r22, r24
    2136:	79 2f       	mov	r23, r25
    2138:	40 93 b0 2a 	sts	0x2AB0, r20
    213c:	50 93 b1 2a 	sts	0x2AB1, r21
    2140:	60 93 b2 2a 	sts	0x2AB2, r22
    2144:	70 93 b3 2a 	sts	0x2AB3, r23
		global_amp = exp(-0.4 * decay_tim);
    2148:	82 2f       	mov	r24, r18
    214a:	93 2f       	mov	r25, r19
    214c:	af 2f       	mov	r26, r31
    214e:	be 2f       	mov	r27, r30
    2150:	bc 01       	movw	r22, r24
    2152:	cd 01       	movw	r24, r26
    2154:	2d ec       	ldi	r18, 0xCD	; 205
    2156:	3c ec       	ldi	r19, 0xCC	; 204
    2158:	4c ec       	ldi	r20, 0xCC	; 204
    215a:	5e eb       	ldi	r21, 0xBE	; 190
    215c:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    2160:	0e 94 e1 2f 	call	0x5fc2	; 0x5fc2 <exp>
    2164:	dc 01       	movw	r26, r24
    2166:	cb 01       	movw	r24, r22
    2168:	80 93 ac 2a 	sts	0x2AAC, r24
    216c:	90 93 ad 2a 	sts	0x2AAD, r25
    2170:	a0 93 ae 2a 	sts	0x2AAE, r26
    2174:	b0 93 af 2a 	sts	0x2AAF, r27
	}

	if(sonar_attached && use_sensor_data_on && sec_counter > STGtime4)
    2178:	80 91 c2 2a 	lds	r24, 0x2AC2
    217c:	88 23       	and	r24, r24
    217e:	99 f1       	breq	.+102    	; 0x21e6 <_Z13Sync_Disorderi+0x194>
    2180:	80 91 a4 2a 	lds	r24, 0x2AA4
    2184:	88 23       	and	r24, r24
    2186:	79 f1       	breq	.+94     	; 0x21e6 <_Z13Sync_Disorderi+0x194>
    2188:	80 91 b4 2a 	lds	r24, 0x2AB4
    218c:	90 91 b5 2a 	lds	r25, 0x2AB5
    2190:	21 e0       	ldi	r18, 0x01	; 1
    2192:	8f 30       	cpi	r24, 0x0F	; 15
    2194:	92 07       	cpc	r25, r18
    2196:	3c f1       	brlt	.+78     	; 0x21e6 <_Z13Sync_Disorderi+0x194>
	{
		if(sensor_value_trichk >= RANGE1 && sensor_value_trichk < RANGE2)
    2198:	80 91 ba 2a 	lds	r24, 0x2ABA
    219c:	90 91 bb 2a 	lds	r25, 0x2ABB
    21a0:	c2 97       	sbiw	r24, 0x32	; 50
    21a2:	84 36       	cpi	r24, 0x64	; 100
    21a4:	91 05       	cpc	r25, r1
    21a6:	50 f4       	brcc	.+20     	; 0x21bc <_Z13Sync_Disorderi+0x16a>
		{
			send_message(MESSAGE_COMMAND, ALL_DIRECTION, 4, "c");
    21a8:	81 e0       	ldi	r24, 0x01	; 1
    21aa:	6f e3       	ldi	r22, 0x3F	; 63
    21ac:	44 e0       	ldi	r20, 0x04	; 4
    21ae:	50 e0       	ldi	r21, 0x00	; 0
    21b0:	21 e0       	ldi	r18, 0x01	; 1
    21b2:	30 e2       	ldi	r19, 0x20	; 32
    21b4:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <_Z12send_messagehhiPKc>
			sync = false;
    21b8:	10 92 5d 20 	sts	0x205D, r1
		}
		if(sensor_value_trichk >= RANGE2 && sensor_value_trichk < RANGE3)
    21bc:	80 91 ba 2a 	lds	r24, 0x2ABA
    21c0:	90 91 bb 2a 	lds	r25, 0x2ABB
    21c4:	86 59       	subi	r24, 0x96	; 150
    21c6:	90 40       	sbci	r25, 0x00	; 0
    21c8:	84 36       	cpi	r24, 0x64	; 100
    21ca:	91 05       	cpc	r25, r1
    21cc:	50 f4       	brcc	.+20     	; 0x21e2 <_Z13Sync_Disorderi+0x190>
		{
			send_message(MESSAGE_COMMAND, ALL_DIRECTION, 2, "c");
    21ce:	81 e0       	ldi	r24, 0x01	; 1
    21d0:	6f e3       	ldi	r22, 0x3F	; 63
    21d2:	42 e0       	ldi	r20, 0x02	; 2
    21d4:	50 e0       	ldi	r21, 0x00	; 0
    21d6:	21 e0       	ldi	r18, 0x01	; 1
    21d8:	30 e2       	ldi	r19, 0x20	; 32
    21da:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <_Z12send_messagehhiPKc>
			sync = false;
    21de:	10 92 5d 20 	sts	0x205D, r1
		}
		use_sensor_data_on = false;
    21e2:	10 92 a4 2a 	sts	0x2AA4, r1
	}

	if(sync) 	angle = global_amp * cos(dir1 * speed);
    21e6:	80 91 5d 20 	lds	r24, 0x205D
    21ea:	88 23       	and	r24, r24
    21ec:	19 f0       	breq	.+6      	; 0x21f4 <_Z13Sync_Disorderi+0x1a2>
    21ee:	c7 01       	movw	r24, r14
    21f0:	b6 01       	movw	r22, r12
    21f2:	02 c0       	rjmp	.+4      	; 0x21f8 <_Z13Sync_Disorderi+0x1a6>
	else 		angle = global_amp * cos(dir2 * speed);
    21f4:	c5 01       	movw	r24, r10
    21f6:	b4 01       	movw	r22, r8
    21f8:	20 e0       	ldi	r18, 0x00	; 0
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	46 e1       	ldi	r20, 0x16	; 22
    21fe:	53 e4       	ldi	r21, 0x43	; 67
    2200:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    2204:	0e 94 71 2f 	call	0x5ee2	; 0x5ee2 <cos>
    2208:	20 91 ac 2a 	lds	r18, 0x2AAC
    220c:	30 91 ad 2a 	lds	r19, 0x2AAD
    2210:	40 91 ae 2a 	lds	r20, 0x2AAE
    2214:	50 91 af 2a 	lds	r21, 0x2AAF
    2218:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>

	return angle;
}
    221c:	47 2f       	mov	r20, r23
    221e:	38 2f       	mov	r19, r24
    2220:	29 2f       	mov	r18, r25
    2222:	86 2f       	mov	r24, r22
    2224:	94 2f       	mov	r25, r20
    2226:	a3 2f       	mov	r26, r19
    2228:	b2 2f       	mov	r27, r18
    222a:	bc 01       	movw	r22, r24
    222c:	cd 01       	movw	r24, r26
    222e:	df 91       	pop	r29
    2230:	cf 91       	pop	r28
    2232:	ff 90       	pop	r15
    2234:	ef 90       	pop	r14
    2236:	df 90       	pop	r13
    2238:	cf 90       	pop	r12
    223a:	bf 90       	pop	r11
    223c:	af 90       	pop	r10
    223e:	9f 90       	pop	r9
    2240:	8f 90       	pop	r8
    2242:	08 95       	ret

00002244 <_Z6columnv>:
// ============================================================================================
// SWARM DYNAMICS 3 --- swing column ---
// ============================================================================================
// ============================================================================================
float column()
{
    2244:	4f 92       	push	r4
    2246:	5f 92       	push	r5
    2248:	6f 92       	push	r6
    224a:	7f 92       	push	r7
    224c:	8f 92       	push	r8
    224e:	9f 92       	push	r9
    2250:	af 92       	push	r10
    2252:	bf 92       	push	r11
    2254:	cf 92       	push	r12
    2256:	df 92       	push	r13
    2258:	ef 92       	push	r14
    225a:	ff 92       	push	r15
    225c:	0f 93       	push	r16
    225e:	1f 93       	push	r17
    2260:	cf 93       	push	r28
    2262:	df 93       	push	r29
	float decay = 1.0;
	float ampl, angle;

	if(sonar_attached)
    2264:	80 91 c2 2a 	lds	r24, 0x2AC2
    2268:	88 23       	and	r24, r24
    226a:	09 f1       	breq	.+66     	; 0x22ae <_Z6columnv+0x6a>
	{
		if(sensor_value_dblchk >= RANGE1 && sensor_value_dblchk <= RANGE3)
    226c:	80 91 bc 2a 	lds	r24, 0x2ABC
    2270:	90 91 bd 2a 	lds	r25, 0x2ABD
    2274:	c2 97       	sbiw	r24, 0x32	; 50
    2276:	89 3c       	cpi	r24, 0xC9	; 201
    2278:	91 05       	cpc	r25, r1
    227a:	c8 f4       	brcc	.+50     	; 0x22ae <_Z6columnv+0x6a>
		{
			// send command every 300ms
			if(use_sensor_data_on)
    227c:	80 91 a4 2a 	lds	r24, 0x2AA4
    2280:	88 23       	and	r24, r24
    2282:	a9 f0       	breq	.+42     	; 0x22ae <_Z6columnv+0x6a>
			{
				send_message(MESSAGE_COMMAND, 0b00001000, 1, "b");
    2284:	81 e0       	ldi	r24, 0x01	; 1
    2286:	68 e0       	ldi	r22, 0x08	; 8
    2288:	41 e0       	ldi	r20, 0x01	; 1
    228a:	50 e0       	ldi	r21, 0x00	; 0
    228c:	25 e0       	ldi	r18, 0x05	; 5
    228e:	30 e2       	ldi	r19, 0x20	; 32
    2290:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <_Z12send_messagehhiPKc>
				agent3.tim2 = 0;
    2294:	80 e0       	ldi	r24, 0x00	; 0
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	dc 01       	movw	r26, r24
    229a:	80 93 e9 2a 	sts	0x2AE9, r24
    229e:	90 93 ea 2a 	sts	0x2AEA, r25
    22a2:	a0 93 eb 2a 	sts	0x2AEB, r26
    22a6:	b0 93 ec 2a 	sts	0x2AEC, r27
				use_sensor_data_on = false;
    22aa:	10 92 a4 2a 	sts	0x2AA4, r1
			}
		}
	}
	// no sensor, but received 'b' 
	if(column_flg)
    22ae:	80 91 a0 2a 	lds	r24, 0x2AA0
    22b2:	88 23       	and	r24, r24
    22b4:	d9 f0       	breq	.+54     	; 0x22ec <_Z6columnv+0xa8>
	{
		agent3.tim2 = 0;
    22b6:	80 e0       	ldi	r24, 0x00	; 0
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	dc 01       	movw	r26, r24
    22bc:	80 93 e9 2a 	sts	0x2AE9, r24
    22c0:	90 93 ea 2a 	sts	0x2AEA, r25
    22c4:	a0 93 eb 2a 	sts	0x2AEB, r26
    22c8:	b0 93 ec 2a 	sts	0x2AEC, r27

		//reset column_flg every 300ms
		if(use_sensor_data_on)
    22cc:	80 91 a4 2a 	lds	r24, 0x2AA4
    22d0:	88 23       	and	r24, r24
    22d2:	61 f0       	breq	.+24     	; 0x22ec <_Z6columnv+0xa8>
		{
			column_flg = false;
    22d4:	10 92 a0 2a 	sts	0x2AA0, r1
			use_sensor_data_on = false;
    22d8:	10 92 a4 2a 	sts	0x2AA4, r1
			send_message(MESSAGE_COMMAND, 0b00001000, 1, "b");
    22dc:	81 e0       	ldi	r24, 0x01	; 1
    22de:	68 e0       	ldi	r22, 0x08	; 8
    22e0:	41 e0       	ldi	r20, 0x01	; 1
    22e2:	50 e0       	ldi	r21, 0x00	; 0
    22e4:	25 e0       	ldi	r18, 0x05	; 5
    22e6:	30 e2       	ldi	r19, 0x20	; 32
    22e8:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <_Z12send_messagehhiPKc>
		}
	}

	ampl = exp(-decay * agent3.tim2);
    22ec:	80 90 e9 2a 	lds	r8, 0x2AE9
    22f0:	90 90 ea 2a 	lds	r9, 0x2AEA
    22f4:	a0 90 eb 2a 	lds	r10, 0x2AEB
    22f8:	b0 90 ec 2a 	lds	r11, 0x2AEC
    22fc:	c5 01       	movw	r24, r10
    22fe:	b4 01       	movw	r22, r8
    2300:	90 58       	subi	r25, 0x80	; 128
    2302:	0e 94 e1 2f 	call	0x5fc2	; 0x5fc2 <exp>
    2306:	2b 01       	movw	r4, r22
    2308:	3c 01       	movw	r6, r24
	angle = ampl * sin(agent3.tim1);
    230a:	c0 90 e5 2a 	lds	r12, 0x2AE5
    230e:	d0 90 e6 2a 	lds	r13, 0x2AE6
    2312:	e0 90 e7 2a 	lds	r14, 0x2AE7
    2316:	f0 90 e8 2a 	lds	r15, 0x2AE8
    231a:	c7 01       	movw	r24, r14
    231c:	b6 01       	movw	r22, r12
    231e:	0e 94 25 32 	call	0x644a	; 0x644a <sin>
    2322:	9b 01       	movw	r18, r22
    2324:	ac 01       	movw	r20, r24
    2326:	c3 01       	movw	r24, r6
    2328:	b2 01       	movw	r22, r4
    232a:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    232e:	46 2e       	mov	r4, r22
    2330:	07 2f       	mov	r16, r23
    2332:	78 2e       	mov	r7, r24
    2334:	69 2e       	mov	r6, r25

	agent3.tim1 += 1.0; if(agent3.tim1 > 2.0*PI) agent3.tim1 -= 2.0*PI;
    2336:	c7 01       	movw	r24, r14
    2338:	b6 01       	movw	r22, r12
    233a:	20 e0       	ldi	r18, 0x00	; 0
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	40 e8       	ldi	r20, 0x80	; 128
    2340:	5f e3       	ldi	r21, 0x3F	; 63
    2342:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__addsf3>
    2346:	16 2f       	mov	r17, r22
    2348:	d7 2f       	mov	r29, r23
    234a:	c8 2f       	mov	r28, r24
    234c:	c9 2e       	mov	r12, r25
    234e:	86 2f       	mov	r24, r22
    2350:	9d 2f       	mov	r25, r29
    2352:	ac 2f       	mov	r26, r28
    2354:	bc 2d       	mov	r27, r12
    2356:	80 93 e5 2a 	sts	0x2AE5, r24
    235a:	90 93 e6 2a 	sts	0x2AE6, r25
    235e:	a0 93 e7 2a 	sts	0x2AE7, r26
    2362:	b0 93 e8 2a 	sts	0x2AE8, r27
    2366:	bc 01       	movw	r22, r24
    2368:	cd 01       	movw	r24, r26
    236a:	20 ed       	ldi	r18, 0xD0	; 208
    236c:	3f e0       	ldi	r19, 0x0F	; 15
    236e:	49 ec       	ldi	r20, 0xC9	; 201
    2370:	50 e4       	ldi	r21, 0x40	; 64
    2372:	0e 94 4e 31 	call	0x629c	; 0x629c <__gesf2>
    2376:	18 16       	cp	r1, r24
    2378:	b4 f4       	brge	.+44     	; 0x23a6 <_Z6columnv+0x162>
    237a:	81 2f       	mov	r24, r17
    237c:	9d 2f       	mov	r25, r29
    237e:	ac 2f       	mov	r26, r28
    2380:	bc 2d       	mov	r27, r12
    2382:	bc 01       	movw	r22, r24
    2384:	cd 01       	movw	r24, r26
    2386:	20 ed       	ldi	r18, 0xD0	; 208
    2388:	3f e0       	ldi	r19, 0x0F	; 15
    238a:	49 ec       	ldi	r20, 0xC9	; 201
    238c:	50 e4       	ldi	r21, 0x40	; 64
    238e:	0e 94 08 2f 	call	0x5e10	; 0x5e10 <__subsf3>
    2392:	dc 01       	movw	r26, r24
    2394:	cb 01       	movw	r24, r22
    2396:	80 93 e5 2a 	sts	0x2AE5, r24
    239a:	90 93 e6 2a 	sts	0x2AE6, r25
    239e:	a0 93 e7 2a 	sts	0x2AE7, r26
    23a2:	b0 93 e8 2a 	sts	0x2AE8, r27
	agent3.tim2 += 0.1; if(agent3.tim2 > 20.0) agent3.tim2 = 20.0;
    23a6:	c5 01       	movw	r24, r10
    23a8:	b4 01       	movw	r22, r8
    23aa:	2d ec       	ldi	r18, 0xCD	; 205
    23ac:	3c ec       	ldi	r19, 0xCC	; 204
    23ae:	4c ec       	ldi	r20, 0xCC	; 204
    23b0:	5d e3       	ldi	r21, 0x3D	; 61
    23b2:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__addsf3>
    23b6:	9b 01       	movw	r18, r22
    23b8:	f8 2f       	mov	r31, r24
    23ba:	e9 2f       	mov	r30, r25
    23bc:	46 2f       	mov	r20, r22
    23be:	53 2f       	mov	r21, r19
    23c0:	68 2f       	mov	r22, r24
    23c2:	79 2f       	mov	r23, r25
    23c4:	40 93 e9 2a 	sts	0x2AE9, r20
    23c8:	50 93 ea 2a 	sts	0x2AEA, r21
    23cc:	60 93 eb 2a 	sts	0x2AEB, r22
    23d0:	70 93 ec 2a 	sts	0x2AEC, r23
    23d4:	82 2f       	mov	r24, r18
    23d6:	93 2f       	mov	r25, r19
    23d8:	af 2f       	mov	r26, r31
    23da:	be 2f       	mov	r27, r30
    23dc:	bc 01       	movw	r22, r24
    23de:	cd 01       	movw	r24, r26
    23e0:	20 e0       	ldi	r18, 0x00	; 0
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	40 ea       	ldi	r20, 0xA0	; 160
    23e6:	51 e4       	ldi	r21, 0x41	; 65
    23e8:	0e 94 4e 31 	call	0x629c	; 0x629c <__gesf2>
    23ec:	18 16       	cp	r1, r24
    23ee:	64 f4       	brge	.+24     	; 0x2408 <_Z6columnv+0x1c4>
    23f0:	80 e0       	ldi	r24, 0x00	; 0
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	a0 ea       	ldi	r26, 0xA0	; 160
    23f6:	b1 e4       	ldi	r27, 0x41	; 65
    23f8:	80 93 e9 2a 	sts	0x2AE9, r24
    23fc:	90 93 ea 2a 	sts	0x2AEA, r25
    2400:	a0 93 eb 2a 	sts	0x2AEB, r26
    2404:	b0 93 ec 2a 	sts	0x2AEC, r27

	return angle;
}
    2408:	93 01       	movw	r18, r6
    240a:	84 2d       	mov	r24, r4
    240c:	90 2f       	mov	r25, r16
    240e:	a3 2f       	mov	r26, r19
    2410:	b6 2d       	mov	r27, r6
    2412:	bc 01       	movw	r22, r24
    2414:	cd 01       	movw	r24, r26
    2416:	df 91       	pop	r29
    2418:	cf 91       	pop	r28
    241a:	1f 91       	pop	r17
    241c:	0f 91       	pop	r16
    241e:	ff 90       	pop	r15
    2420:	ef 90       	pop	r14
    2422:	df 90       	pop	r13
    2424:	cf 90       	pop	r12
    2426:	bf 90       	pop	r11
    2428:	af 90       	pop	r10
    242a:	9f 90       	pop	r9
    242c:	8f 90       	pop	r8
    242e:	7f 90       	pop	r7
    2430:	6f 90       	pop	r6
    2432:	5f 90       	pop	r5
    2434:	4f 90       	pop	r4
    2436:	08 95       	ret

00002438 <_Z10plane_wavev>:
// ============================================================================================
// SWARM DYNAMICS 4 --- plane wave ---
// ============================================================================================
// ============================================================================================
float plane_wave()
{
    2438:	4f 92       	push	r4
    243a:	5f 92       	push	r5
    243c:	6f 92       	push	r6
    243e:	7f 92       	push	r7
    2440:	8f 92       	push	r8
    2442:	9f 92       	push	r9
    2444:	af 92       	push	r10
    2446:	bf 92       	push	r11
    2448:	cf 92       	push	r12
    244a:	df 92       	push	r13
    244c:	ef 92       	push	r14
    244e:	ff 92       	push	r15
	float period, decay = 1.0;
	float ampl, angle;
	uint8_t wave_dir;

	if(!agent2.flg)
    2450:	80 91 f6 2a 	lds	r24, 0x2AF6
    2454:	88 23       	and	r24, r24
    2456:	09 f0       	breq	.+2      	; 0x245a <_Z10plane_wavev+0x22>
    2458:	54 c0       	rjmp	.+168    	; 0x2502 <_Z10plane_wavev+0xca>
	{
		agent2.tim1 = 0;
    245a:	80 e0       	ldi	r24, 0x00	; 0
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	dc 01       	movw	r26, r24
    2460:	80 93 ee 2a 	sts	0x2AEE, r24
    2464:	90 93 ef 2a 	sts	0x2AEF, r25
    2468:	a0 93 f0 2a 	sts	0x2AF0, r26
    246c:	b0 93 f1 2a 	sts	0x2AF1, r27
		agent2.tim2 = 0;
    2470:	80 93 f2 2a 	sts	0x2AF2, r24
    2474:	90 93 f3 2a 	sts	0x2AF3, r25
    2478:	a0 93 f4 2a 	sts	0x2AF4, r26
    247c:	b0 93 f5 2a 	sts	0x2AF5, r27
		wave_ping = false;
    2480:	10 92 a1 2a 	sts	0x2AA1, r1

		// sensor is connected
		if(sonar_attached)
    2484:	80 91 c2 2a 	lds	r24, 0x2AC2
    2488:	88 23       	and	r24, r24
    248a:	21 f1       	breq	.+72     	; 0x24d4 <_Z10plane_wavev+0x9c>
		{
			//if received horizontal signal 'a' 
			if(wave_flg) agent2.flg = true;
    248c:	80 91 a2 2a 	lds	r24, 0x2AA2
    2490:	88 23       	and	r24, r24
    2492:	99 f5       	brne	.+102    	; 0x24fa <_Z10plane_wavev+0xc2>
			//detect something
			else if(sensor_value_trichk >= RANGE1 && sensor_value_trichk <= RANGE3)
    2494:	80 91 ba 2a 	lds	r24, 0x2ABA
    2498:	90 91 bb 2a 	lds	r25, 0x2ABB
    249c:	c2 97       	sbiw	r24, 0x32	; 50
    249e:	89 3c       	cpi	r24, 0xC9	; 201
    24a0:	91 05       	cpc	r25, r1
    24a2:	08 f0       	brcs	.+2      	; 0x24a6 <_Z10plane_wavev+0x6e>
    24a4:	ae c0       	rjmp	.+348    	; 0x2602 <_Z10plane_wavev+0x1ca>
			{
				column_flg = true;
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	80 93 a0 2a 	sts	0x2AA0, r24
				agent2.flg = true;
    24ac:	80 93 f6 2a 	sts	0x2AF6, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    24b0:	8f ef       	ldi	r24, 0xFF	; 255
    24b2:	93 ed       	ldi	r25, 0xD3	; 211
    24b4:	a0 e3       	ldi	r26, 0x30	; 48
    24b6:	81 50       	subi	r24, 0x01	; 1
    24b8:	90 40       	sbci	r25, 0x00	; 0
    24ba:	a0 40       	sbci	r26, 0x00	; 0
    24bc:	e1 f7       	brne	.-8      	; 0x24b6 <_Z10plane_wavev+0x7e>
    24be:	00 c0       	rjmp	.+0      	; 0x24c0 <_Z10plane_wavev+0x88>
    24c0:	00 00       	nop
				_delay_ms(500);
				send_message(MESSAGE_COMMAND, 0b00001000, 1, "b");
    24c2:	81 e0       	ldi	r24, 0x01	; 1
    24c4:	68 e0       	ldi	r22, 0x08	; 8
    24c6:	41 e0       	ldi	r20, 0x01	; 1
    24c8:	50 e0       	ldi	r21, 0x00	; 0
    24ca:	25 e0       	ldi	r18, 0x05	; 5
    24cc:	30 e2       	ldi	r19, 0x20	; 32
    24ce:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <_Z12send_messagehhiPKc>
    24d2:	97 c0       	rjmp	.+302    	; 0x2602 <_Z10plane_wavev+0x1ca>
		}
		//  no sensor
		else
		{
			//received vertical signal 'b'
			if(column_flg)
    24d4:	80 91 a0 2a 	lds	r24, 0x2AA0
    24d8:	88 23       	and	r24, r24
    24da:	51 f0       	breq	.+20     	; 0x24f0 <_Z10plane_wavev+0xb8>
			{
				agent2.flg = true;
    24dc:	81 e0       	ldi	r24, 0x01	; 1
    24de:	80 93 f6 2a 	sts	0x2AF6, r24
				send_message(MESSAGE_COMMAND, 0b00001000, 1, "b");
    24e2:	68 e0       	ldi	r22, 0x08	; 8
    24e4:	41 e0       	ldi	r20, 0x01	; 1
    24e6:	50 e0       	ldi	r21, 0x00	; 0
    24e8:	25 e0       	ldi	r18, 0x05	; 5
    24ea:	30 e2       	ldi	r19, 0x20	; 32
    24ec:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <_Z12send_messagehhiPKc>
			}

			//received horizontal signal 'a' 
			if(wave_flg) agent2.flg = true;
    24f0:	80 91 a2 2a 	lds	r24, 0x2AA2
    24f4:	88 23       	and	r24, r24
    24f6:	09 f4       	brne	.+2      	; 0x24fa <_Z10plane_wavev+0xc2>
    24f8:	84 c0       	rjmp	.+264    	; 0x2602 <_Z10plane_wavev+0x1ca>
    24fa:	81 e0       	ldi	r24, 0x01	; 1
    24fc:	80 93 f6 2a 	sts	0x2AF6, r24
    2500:	80 c0       	rjmp	.+256    	; 0x2602 <_Z10plane_wavev+0x1ca>
	}
	else
	{
		if(sonar_attached) period = 7.0; else period = 7.0;

		if(agent2.tim2 < period)
    2502:	c0 90 f2 2a 	lds	r12, 0x2AF2
    2506:	d0 90 f3 2a 	lds	r13, 0x2AF3
    250a:	e0 90 f4 2a 	lds	r14, 0x2AF4
    250e:	f0 90 f5 2a 	lds	r15, 0x2AF5
    2512:	c7 01       	movw	r24, r14
    2514:	b6 01       	movw	r22, r12
    2516:	20 e0       	ldi	r18, 0x00	; 0
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	40 ee       	ldi	r20, 0xE0	; 224
    251c:	50 e4       	ldi	r21, 0x40	; 64
    251e:	0e 94 6d 2f 	call	0x5eda	; 0x5eda <__cmpsf2>
    2522:	87 ff       	sbrs	r24, 7
    2524:	58 c0       	rjmp	.+176    	; 0x25d6 <_Z10plane_wavev+0x19e>
		{
			agent2.tim1 += 0.5;
    2526:	60 91 ee 2a 	lds	r22, 0x2AEE
    252a:	70 91 ef 2a 	lds	r23, 0x2AEF
    252e:	80 91 f0 2a 	lds	r24, 0x2AF0
    2532:	90 91 f1 2a 	lds	r25, 0x2AF1
    2536:	20 e0       	ldi	r18, 0x00	; 0
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	40 e0       	ldi	r20, 0x00	; 0
    253c:	5f e3       	ldi	r21, 0x3F	; 63
    253e:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__addsf3>
    2542:	dc 01       	movw	r26, r24
    2544:	cb 01       	movw	r24, r22
    2546:	80 93 ee 2a 	sts	0x2AEE, r24
    254a:	90 93 ef 2a 	sts	0x2AEF, r25
    254e:	a0 93 f0 2a 	sts	0x2AF0, r26
    2552:	b0 93 f1 2a 	sts	0x2AF1, r27
			agent2.tim2 += 0.1;
    2556:	c7 01       	movw	r24, r14
    2558:	b6 01       	movw	r22, r12
    255a:	2d ec       	ldi	r18, 0xCD	; 205
    255c:	3c ec       	ldi	r19, 0xCC	; 204
    255e:	4c ec       	ldi	r20, 0xCC	; 204
    2560:	5d e3       	ldi	r21, 0x3D	; 61
    2562:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__addsf3>
    2566:	9b 01       	movw	r18, r22
    2568:	f8 2f       	mov	r31, r24
    256a:	e9 2f       	mov	r30, r25
    256c:	46 2f       	mov	r20, r22
    256e:	53 2f       	mov	r21, r19
    2570:	68 2f       	mov	r22, r24
    2572:	79 2f       	mov	r23, r25
    2574:	40 93 f2 2a 	sts	0x2AF2, r20
    2578:	50 93 f3 2a 	sts	0x2AF3, r21
    257c:	60 93 f4 2a 	sts	0x2AF4, r22
    2580:	70 93 f5 2a 	sts	0x2AF5, r23

			//threshold time 1: send message to neighbors
			if(agent2.tim2 > period / 4.0)
    2584:	82 2f       	mov	r24, r18
    2586:	93 2f       	mov	r25, r19
    2588:	af 2f       	mov	r26, r31
    258a:	be 2f       	mov	r27, r30
    258c:	bc 01       	movw	r22, r24
    258e:	cd 01       	movw	r24, r26
    2590:	20 e0       	ldi	r18, 0x00	; 0
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	40 ee       	ldi	r20, 0xE0	; 224
    2596:	5f e3       	ldi	r21, 0x3F	; 63
    2598:	0e 94 4e 31 	call	0x629c	; 0x629c <__gesf2>
    259c:	18 16       	cp	r1, r24
    259e:	dc f4       	brge	.+54     	; 0x25d6 <_Z10plane_wavev+0x19e>
			{
				if(!wave_ping)
    25a0:	80 91 a1 2a 	lds	r24, 0x2AA1
    25a4:	88 23       	and	r24, r24
    25a6:	b9 f4       	brne	.+46     	; 0x25d6 <_Z10plane_wavev+0x19e>
				{
					wave_ping = true; //send message only once
    25a8:	81 e0       	ldi	r24, 0x01	; 1
    25aa:	80 93 a1 2a 	sts	0x2AA1, r24

					//sensor board: send signal both side
					if(column_flg) wave_dir = 0b00010100;
    25ae:	80 91 a0 2a 	lds	r24, 0x2AA0
    25b2:	88 23       	and	r24, r24
    25b4:	31 f4       	brne	.+12     	; 0x25c2 <_Z10plane_wavev+0x18a>
					else
					{
						if(wave_port==2)	wave_dir = 0b00010000;
    25b6:	80 91 9f 2a 	lds	r24, 0x2A9F
    25ba:	82 30       	cpi	r24, 0x02	; 2
    25bc:	21 f4       	brne	.+8      	; 0x25c6 <_Z10plane_wavev+0x18e>
    25be:	60 e1       	ldi	r22, 0x10	; 16
    25c0:	03 c0       	rjmp	.+6      	; 0x25c8 <_Z10plane_wavev+0x190>
				if(!wave_ping)
				{
					wave_ping = true; //send message only once

					//sensor board: send signal both side
					if(column_flg) wave_dir = 0b00010100;
    25c2:	64 e1       	ldi	r22, 0x14	; 20
    25c4:	01 c0       	rjmp	.+2      	; 0x25c8 <_Z10plane_wavev+0x190>
					else
					{
						if(wave_port==2)	wave_dir = 0b00010000;
						else				wave_dir = 0b00000100;
    25c6:	64 e0       	ldi	r22, 0x04	; 4
					}
					send_message(MESSAGE_COMMAND, wave_dir, 1, "a");	
    25c8:	81 e0       	ldi	r24, 0x01	; 1
    25ca:	41 e0       	ldi	r20, 0x01	; 1
    25cc:	50 e0       	ldi	r21, 0x00	; 0
    25ce:	23 e0       	ldi	r18, 0x03	; 3
    25d0:	30 e2       	ldi	r19, 0x20	; 32
    25d2:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <_Z12send_messagehhiPKc>
				}
			}
		}
		if(agent2.tim2 >= period)
    25d6:	60 91 f2 2a 	lds	r22, 0x2AF2
    25da:	70 91 f3 2a 	lds	r23, 0x2AF3
    25de:	80 91 f4 2a 	lds	r24, 0x2AF4
    25e2:	90 91 f5 2a 	lds	r25, 0x2AF5
    25e6:	20 e0       	ldi	r18, 0x00	; 0
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	40 ee       	ldi	r20, 0xE0	; 224
    25ec:	50 e4       	ldi	r21, 0x40	; 64
    25ee:	0e 94 4e 31 	call	0x629c	; 0x629c <__gesf2>
    25f2:	87 fd       	sbrc	r24, 7
    25f4:	06 c0       	rjmp	.+12     	; 0x2602 <_Z10plane_wavev+0x1ca>
		{
			agent2.flg = false;
    25f6:	10 92 f6 2a 	sts	0x2AF6, r1
			wave_flg = false;
    25fa:	10 92 a2 2a 	sts	0x2AA2, r1
			column_flg = false;
    25fe:	10 92 a0 2a 	sts	0x2AA0, r1
		}
	}

	ampl = agent2.tim2 * exp(-decay * agent2.tim2) * 2.7;
    2602:	c0 90 f2 2a 	lds	r12, 0x2AF2
    2606:	d0 90 f3 2a 	lds	r13, 0x2AF3
    260a:	e0 90 f4 2a 	lds	r14, 0x2AF4
    260e:	f0 90 f5 2a 	lds	r15, 0x2AF5
    2612:	c7 01       	movw	r24, r14
    2614:	b6 01       	movw	r22, r12
    2616:	90 58       	subi	r25, 0x80	; 128
    2618:	0e 94 e1 2f 	call	0x5fc2	; 0x5fc2 <exp>
    261c:	4b 01       	movw	r8, r22
    261e:	5c 01       	movw	r10, r24
	angle = ampl * sin(agent2.tim1);
    2620:	60 91 ee 2a 	lds	r22, 0x2AEE
    2624:	70 91 ef 2a 	lds	r23, 0x2AEF
    2628:	80 91 f0 2a 	lds	r24, 0x2AF0
    262c:	90 91 f1 2a 	lds	r25, 0x2AF1
    2630:	0e 94 25 32 	call	0x644a	; 0x644a <sin>
    2634:	2b 01       	movw	r4, r22
    2636:	3c 01       	movw	r6, r24
			wave_flg = false;
			column_flg = false;
		}
	}

	ampl = agent2.tim2 * exp(-decay * agent2.tim2) * 2.7;
    2638:	c7 01       	movw	r24, r14
    263a:	b6 01       	movw	r22, r12
    263c:	a5 01       	movw	r20, r10
    263e:	94 01       	movw	r18, r8
    2640:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    2644:	2d ec       	ldi	r18, 0xCD	; 205
    2646:	3c ec       	ldi	r19, 0xCC	; 204
    2648:	4c e2       	ldi	r20, 0x2C	; 44
    264a:	50 e4       	ldi	r21, 0x40	; 64
    264c:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
	angle = ampl * sin(agent2.tim1);
    2650:	a3 01       	movw	r20, r6
    2652:	92 01       	movw	r18, r4
    2654:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
			
	return angle;
}
    2658:	46 2f       	mov	r20, r22
    265a:	57 2f       	mov	r21, r23
    265c:	68 2f       	mov	r22, r24
    265e:	79 2f       	mov	r23, r25
    2660:	cb 01       	movw	r24, r22
    2662:	ba 01       	movw	r22, r20
    2664:	ff 90       	pop	r15
    2666:	ef 90       	pop	r14
    2668:	df 90       	pop	r13
    266a:	cf 90       	pop	r12
    266c:	bf 90       	pop	r11
    266e:	af 90       	pop	r10
    2670:	9f 90       	pop	r9
    2672:	8f 90       	pop	r8
    2674:	7f 90       	pop	r7
    2676:	6f 90       	pop	r6
    2678:	5f 90       	pop	r5
    267a:	4f 90       	pop	r4
    267c:	08 95       	ret

0000267e <_Z6rhythmf>:
// ============================================================================================
// SWARM DYNAMICS 5 --- rhythm ---
// ============================================================================================
// ============================================================================================
float rhythm(float stp)
{
    267e:	8f 92       	push	r8
    2680:	9f 92       	push	r9
    2682:	af 92       	push	r10
    2684:	bf 92       	push	r11
    2686:	cf 92       	push	r12
    2688:	df 92       	push	r13
    268a:	ef 92       	push	r14
    268c:	ff 92       	push	r15
    268e:	0f 93       	push	r16
    2690:	1f 93       	push	r17
    2692:	cf 93       	push	r28
    2694:	df 93       	push	r29
    2696:	4b 01       	movw	r8, r22
    2698:	5c 01       	movw	r10, r24
	float self = 0, shift = 1.0;

	if(special)
    269a:	80 91 a3 2a 	lds	r24, 0x2AA3
    269e:	88 23       	and	r24, r24
    26a0:	09 f4       	brne	.+2      	; 0x26a4 <_Z6rhythmf+0x26>
    26a2:	64 c0       	rjmp	.+200    	; 0x276c <_Z6rhythmf+0xee>
	{
		self = agent0.py;
    26a4:	c0 90 3f 2b 	lds	r12, 0x2B3F
    26a8:	d0 90 40 2b 	lds	r13, 0x2B40
    26ac:	e0 90 41 2b 	lds	r14, 0x2B41
    26b0:	f0 90 42 2b 	lds	r15, 0x2B42
		agent0.px = agent0.py - shift;
    26b4:	c7 01       	movw	r24, r14
    26b6:	b6 01       	movw	r22, r12
    26b8:	20 e0       	ldi	r18, 0x00	; 0
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	40 e8       	ldi	r20, 0x80	; 128
    26be:	5f e3       	ldi	r21, 0x3F	; 63
    26c0:	0e 94 08 2f 	call	0x5e10	; 0x5e10 <__subsf3>
    26c4:	dc 01       	movw	r26, r24
    26c6:	cb 01       	movw	r24, r22
    26c8:	80 93 3b 2b 	sts	0x2B3B, r24
    26cc:	90 93 3c 2b 	sts	0x2B3C, r25
    26d0:	a0 93 3d 2b 	sts	0x2B3D, r26
    26d4:	b0 93 3e 2b 	sts	0x2B3E, r27
		send_message(MESSAGE_NUMDATA, 0b00011100, NULL, "");
    26d8:	80 e0       	ldi	r24, 0x00	; 0
    26da:	6c e1       	ldi	r22, 0x1C	; 28
    26dc:	40 e0       	ldi	r20, 0x00	; 0
    26de:	50 e0       	ldi	r21, 0x00	; 0
    26e0:	20 e0       	ldi	r18, 0x00	; 0
    26e2:	30 e2       	ldi	r19, 0x20	; 32
    26e4:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <_Z12send_messagehhiPKc>

		agent0.py += stp;
    26e8:	c5 01       	movw	r24, r10
    26ea:	b4 01       	movw	r22, r8
    26ec:	20 91 3f 2b 	lds	r18, 0x2B3F
    26f0:	30 91 40 2b 	lds	r19, 0x2B40
    26f4:	40 91 41 2b 	lds	r20, 0x2B41
    26f8:	50 91 42 2b 	lds	r21, 0x2B42
    26fc:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__addsf3>
    2700:	d6 2f       	mov	r29, r22
    2702:	c7 2f       	mov	r28, r23
    2704:	18 2f       	mov	r17, r24
    2706:	09 2f       	mov	r16, r25
    2708:	ae 01       	movw	r20, r28
    270a:	98 01       	movw	r18, r16
    270c:	85 2f       	mov	r24, r21
    270e:	94 2f       	mov	r25, r20
    2710:	a3 2f       	mov	r26, r19
    2712:	b2 2f       	mov	r27, r18
    2714:	80 93 3f 2b 	sts	0x2B3F, r24
    2718:	90 93 40 2b 	sts	0x2B40, r25
    271c:	a0 93 41 2b 	sts	0x2B41, r26
    2720:	b0 93 42 2b 	sts	0x2B42, r27
		if(agent0.py > 2.0 * PI) agent0.py -= 2.0 * PI;
    2724:	bc 01       	movw	r22, r24
    2726:	cd 01       	movw	r24, r26
    2728:	20 ed       	ldi	r18, 0xD0	; 208
    272a:	3f e0       	ldi	r19, 0x0F	; 15
    272c:	49 ec       	ldi	r20, 0xC9	; 201
    272e:	50 e4       	ldi	r21, 0x40	; 64
    2730:	0e 94 4e 31 	call	0x629c	; 0x629c <__gesf2>
    2734:	18 16       	cp	r1, r24
    2736:	0c f0       	brlt	.+2      	; 0x273a <_Z6rhythmf+0xbc>
    2738:	a9 c0       	rjmp	.+338    	; 0x288c <_Z6rhythmf+0x20e>
    273a:	ae 01       	movw	r20, r28
    273c:	98 01       	movw	r18, r16
    273e:	85 2f       	mov	r24, r21
    2740:	94 2f       	mov	r25, r20
    2742:	a3 2f       	mov	r26, r19
    2744:	b2 2f       	mov	r27, r18
    2746:	bc 01       	movw	r22, r24
    2748:	cd 01       	movw	r24, r26
    274a:	20 ed       	ldi	r18, 0xD0	; 208
    274c:	3f e0       	ldi	r19, 0x0F	; 15
    274e:	49 ec       	ldi	r20, 0xC9	; 201
    2750:	50 e4       	ldi	r21, 0x40	; 64
    2752:	0e 94 08 2f 	call	0x5e10	; 0x5e10 <__subsf3>
    2756:	dc 01       	movw	r26, r24
    2758:	cb 01       	movw	r24, r22
    275a:	80 93 3f 2b 	sts	0x2B3F, r24
    275e:	90 93 40 2b 	sts	0x2B40, r25
    2762:	a0 93 41 2b 	sts	0x2B41, r26
    2766:	b0 93 42 2b 	sts	0x2B42, r27
    276a:	90 c0       	rjmp	.+288    	; 0x288c <_Z6rhythmf+0x20e>
	}
	else
	{
		if(agent0.neix[0]!=0)
    276c:	60 91 4f 2b 	lds	r22, 0x2B4F
    2770:	70 91 50 2b 	lds	r23, 0x2B50
    2774:	80 91 51 2b 	lds	r24, 0x2B51
    2778:	90 91 52 2b 	lds	r25, 0x2B52
    277c:	20 e0       	ldi	r18, 0x00	; 0
    277e:	30 e0       	ldi	r19, 0x00	; 0
    2780:	a9 01       	movw	r20, r18
    2782:	0e 94 6d 2f 	call	0x5eda	; 0x5eda <__cmpsf2>
    2786:	88 23       	and	r24, r24
    2788:	29 f1       	breq	.+74     	; 0x27d4 <_Z6rhythmf+0x156>
		{
			self = agent0.neiy[0];
    278a:	c0 90 67 2b 	lds	r12, 0x2B67
    278e:	d0 90 68 2b 	lds	r13, 0x2B68
    2792:	e0 90 69 2b 	lds	r14, 0x2B69
    2796:	f0 90 6a 2b 	lds	r15, 0x2B6A

			agent0.py = self;
    279a:	c0 92 3f 2b 	sts	0x2B3F, r12
    279e:	d0 92 40 2b 	sts	0x2B40, r13
    27a2:	e0 92 41 2b 	sts	0x2B41, r14
    27a6:	f0 92 42 2b 	sts	0x2B42, r15
			agent0.px = self - shift;
    27aa:	c7 01       	movw	r24, r14
    27ac:	b6 01       	movw	r22, r12
    27ae:	20 e0       	ldi	r18, 0x00	; 0
    27b0:	30 e0       	ldi	r19, 0x00	; 0
    27b2:	40 e8       	ldi	r20, 0x80	; 128
    27b4:	5f e3       	ldi	r21, 0x3F	; 63
    27b6:	0e 94 08 2f 	call	0x5e10	; 0x5e10 <__subsf3>
    27ba:	dc 01       	movw	r26, r24
    27bc:	cb 01       	movw	r24, r22
    27be:	80 93 3b 2b 	sts	0x2B3B, r24
    27c2:	90 93 3c 2b 	sts	0x2B3C, r25
    27c6:	a0 93 3d 2b 	sts	0x2B3D, r26
    27ca:	b0 93 3e 2b 	sts	0x2B3E, r27
			send_message(MESSAGE_NUMDATA, 0b00011100, NULL, "");	
    27ce:	80 e0       	ldi	r24, 0x00	; 0
    27d0:	6c e1       	ldi	r22, 0x1C	; 28
    27d2:	25 c0       	rjmp	.+74     	; 0x281e <_Z6rhythmf+0x1a0>
		}
		else if(agent0.neix[2]!=0)
    27d4:	c0 90 57 2b 	lds	r12, 0x2B57
    27d8:	d0 90 58 2b 	lds	r13, 0x2B58
    27dc:	e0 90 59 2b 	lds	r14, 0x2B59
    27e0:	f0 90 5a 2b 	lds	r15, 0x2B5A
    27e4:	c7 01       	movw	r24, r14
    27e6:	b6 01       	movw	r22, r12
    27e8:	20 e0       	ldi	r18, 0x00	; 0
    27ea:	30 e0       	ldi	r19, 0x00	; 0
    27ec:	a9 01       	movw	r20, r18
    27ee:	0e 94 6d 2f 	call	0x5eda	; 0x5eda <__cmpsf2>
    27f2:	88 23       	and	r24, r24
    27f4:	d9 f0       	breq	.+54     	; 0x282c <_Z6rhythmf+0x1ae>
		{
			self = agent0.neix[2];
			agent0.px = self - shift;
    27f6:	c7 01       	movw	r24, r14
    27f8:	b6 01       	movw	r22, r12
    27fa:	20 e0       	ldi	r18, 0x00	; 0
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	40 e8       	ldi	r20, 0x80	; 128
    2800:	5f e3       	ldi	r21, 0x3F	; 63
    2802:	0e 94 08 2f 	call	0x5e10	; 0x5e10 <__subsf3>
    2806:	dc 01       	movw	r26, r24
    2808:	cb 01       	movw	r24, r22
    280a:	80 93 3b 2b 	sts	0x2B3B, r24
    280e:	90 93 3c 2b 	sts	0x2B3C, r25
    2812:	a0 93 3d 2b 	sts	0x2B3D, r26
    2816:	b0 93 3e 2b 	sts	0x2B3E, r27
			send_message(MESSAGE_NUMDATA, 0b00010000, NULL, "");
    281a:	80 e0       	ldi	r24, 0x00	; 0
    281c:	60 e1       	ldi	r22, 0x10	; 16
    281e:	40 e0       	ldi	r20, 0x00	; 0
    2820:	50 e0       	ldi	r21, 0x00	; 0
    2822:	20 e0       	ldi	r18, 0x00	; 0
    2824:	30 e2       	ldi	r19, 0x20	; 32
    2826:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <_Z12send_messagehhiPKc>
    282a:	30 c0       	rjmp	.+96     	; 0x288c <_Z6rhythmf+0x20e>
		}
		else if(agent0.neix[4]!=0)
    282c:	c0 90 5f 2b 	lds	r12, 0x2B5F
    2830:	d0 90 60 2b 	lds	r13, 0x2B60
    2834:	e0 90 61 2b 	lds	r14, 0x2B61
    2838:	f0 90 62 2b 	lds	r15, 0x2B62
    283c:	c7 01       	movw	r24, r14
    283e:	b6 01       	movw	r22, r12
    2840:	20 e0       	ldi	r18, 0x00	; 0
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	a9 01       	movw	r20, r18
    2846:	0e 94 6d 2f 	call	0x5eda	; 0x5eda <__cmpsf2>
    284a:	88 23       	and	r24, r24
    284c:	a9 f0       	breq	.+42     	; 0x2878 <_Z6rhythmf+0x1fa>
		{
			self = agent0.neix[4];
			agent0.px = self - shift;
    284e:	c7 01       	movw	r24, r14
    2850:	b6 01       	movw	r22, r12
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	40 e8       	ldi	r20, 0x80	; 128
    2858:	5f e3       	ldi	r21, 0x3F	; 63
    285a:	0e 94 08 2f 	call	0x5e10	; 0x5e10 <__subsf3>
    285e:	dc 01       	movw	r26, r24
    2860:	cb 01       	movw	r24, r22
    2862:	80 93 3b 2b 	sts	0x2B3B, r24
    2866:	90 93 3c 2b 	sts	0x2B3C, r25
    286a:	a0 93 3d 2b 	sts	0x2B3D, r26
    286e:	b0 93 3e 2b 	sts	0x2B3E, r27
			send_message(MESSAGE_NUMDATA, 0b00000100, NULL, "");
    2872:	80 e0       	ldi	r24, 0x00	; 0
    2874:	64 e0       	ldi	r22, 0x04	; 4
    2876:	d3 cf       	rjmp	.-90     	; 0x281e <_Z6rhythmf+0x1a0>
// SWARM DYNAMICS 5 --- rhythm ---
// ============================================================================================
// ============================================================================================
float rhythm(float stp)
{
	float self = 0, shift = 1.0;
    2878:	0f 2e       	mov	r0, r31
    287a:	f0 e0       	ldi	r31, 0x00	; 0
    287c:	cf 2e       	mov	r12, r31
    287e:	f0 e0       	ldi	r31, 0x00	; 0
    2880:	df 2e       	mov	r13, r31
    2882:	f0 e0       	ldi	r31, 0x00	; 0
    2884:	ef 2e       	mov	r14, r31
    2886:	f0 e0       	ldi	r31, 0x00	; 0
    2888:	ff 2e       	mov	r15, r31
    288a:	f0 2d       	mov	r31, r0
			agent0.px = self - shift;
			send_message(MESSAGE_NUMDATA, 0b00000100, NULL, "");
		}
	}

	return sin(self);
    288c:	c7 01       	movw	r24, r14
    288e:	b6 01       	movw	r22, r12
    2890:	0e 94 25 32 	call	0x644a	; 0x644a <sin>
}
    2894:	46 2f       	mov	r20, r22
    2896:	57 2f       	mov	r21, r23
    2898:	68 2f       	mov	r22, r24
    289a:	79 2f       	mov	r23, r25
    289c:	cb 01       	movw	r24, r22
    289e:	ba 01       	movw	r22, r20
    28a0:	df 91       	pop	r29
    28a2:	cf 91       	pop	r28
    28a4:	1f 91       	pop	r17
    28a6:	0f 91       	pop	r16
    28a8:	ff 90       	pop	r15
    28aa:	ef 90       	pop	r14
    28ac:	df 90       	pop	r13
    28ae:	cf 90       	pop	r12
    28b0:	bf 90       	pop	r11
    28b2:	af 90       	pop	r10
    28b4:	9f 90       	pop	r9
    28b6:	8f 90       	pop	r8
    28b8:	08 95       	ret

000028ba <_Z15rhythm_control2v>:
	return global_amp * rhythm(0.6);
}

// --------------------------------------------------------------------------------------------
float rhythm_control2()	//Frequency Modulation
{
    28ba:	cf 93       	push	r28
    28bc:	df 93       	push	r29
	static int timestep = 0;
	float stp, tim, dtim = 2.0 * PI / 30.0;	// 1cycle = 30 sec
	
	tim = (float)timestep * dtim;
    28be:	c0 91 81 2b 	lds	r28, 0x2B81
    28c2:	d0 91 82 2b 	lds	r29, 0x2B82
    28c6:	be 01       	movw	r22, r28
    28c8:	88 27       	eor	r24, r24
    28ca:	77 fd       	sbrc	r23, 7
    28cc:	80 95       	com	r24
    28ce:	98 2f       	mov	r25, r24
    28d0:	0e 94 40 30 	call	0x6080	; 0x6080 <__floatsisf>
    28d4:	24 e4       	ldi	r18, 0x44	; 68
    28d6:	37 e7       	ldi	r19, 0x77	; 119
    28d8:	46 e5       	ldi	r20, 0x56	; 86
    28da:	5e e3       	ldi	r21, 0x3E	; 62
    28dc:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
	stp = 0.6 + 0.4 * cos(tim);
    28e0:	0e 94 71 2f 	call	0x5ee2	; 0x5ee2 <cos>
    28e4:	2d ec       	ldi	r18, 0xCD	; 205
    28e6:	3c ec       	ldi	r19, 0xCC	; 204
    28e8:	4c ec       	ldi	r20, 0xCC	; 204
    28ea:	5e e3       	ldi	r21, 0x3E	; 62
    28ec:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    28f0:	2a e9       	ldi	r18, 0x9A	; 154
    28f2:	39 e9       	ldi	r19, 0x99	; 153
    28f4:	49 e1       	ldi	r20, 0x19	; 25
    28f6:	5f e3       	ldi	r21, 0x3F	; 63
    28f8:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__addsf3>

	if(rhythm_on)
    28fc:	20 91 9e 2a 	lds	r18, 0x2A9E
    2900:	22 23       	and	r18, r18
    2902:	39 f0       	breq	.+14     	; 0x2912 <_Z15rhythm_control2v+0x58>
	{
		timestep++;
    2904:	21 96       	adiw	r28, 0x01	; 1
    2906:	c0 93 81 2b 	sts	0x2B81, r28
    290a:	d0 93 82 2b 	sts	0x2B82, r29
		rhythm_on = false;
    290e:	10 92 9e 2a 	sts	0x2A9E, r1
	}

	return rhythm(stp);
    2912:	38 2f       	mov	r19, r24
    2914:	29 2f       	mov	r18, r25
    2916:	86 2f       	mov	r24, r22
    2918:	97 2f       	mov	r25, r23
    291a:	a3 2f       	mov	r26, r19
    291c:	b2 2f       	mov	r27, r18
    291e:	bc 01       	movw	r22, r24
    2920:	cd 01       	movw	r24, r26
    2922:	0e 94 3f 13 	call	0x267e	; 0x267e <_Z6rhythmf>
}
    2926:	46 2f       	mov	r20, r22
    2928:	57 2f       	mov	r21, r23
    292a:	68 2f       	mov	r22, r24
    292c:	79 2f       	mov	r23, r25
    292e:	cb 01       	movw	r24, r22
    2930:	ba 01       	movw	r22, r20
    2932:	df 91       	pop	r29
    2934:	cf 91       	pop	r28
    2936:	08 95       	ret

00002938 <_Z15rhythm_control1v>:
	return sin(self);
}

// --------------------------------------------------------------------------------------------
float rhythm_control1()	//Amplitude Modulation
{
    2938:	cf 92       	push	r12
    293a:	df 92       	push	r13
    293c:	ef 92       	push	r14
    293e:	ff 92       	push	r15
	static int timestep = 0;
	float tim, dtim = 2.0 * PI / 30.0;		// 1cycle = 30 sec
	
	tim = (float)timestep * dtim;
    2940:	c0 90 7f 2b 	lds	r12, 0x2B7F
    2944:	d0 90 80 2b 	lds	r13, 0x2B80
    2948:	b6 01       	movw	r22, r12
    294a:	88 27       	eor	r24, r24
    294c:	77 fd       	sbrc	r23, 7
    294e:	80 95       	com	r24
    2950:	98 2f       	mov	r25, r24
    2952:	0e 94 40 30 	call	0x6080	; 0x6080 <__floatsisf>
    2956:	24 e4       	ldi	r18, 0x44	; 68
    2958:	37 e7       	ldi	r19, 0x77	; 119
    295a:	46 e5       	ldi	r20, 0x56	; 86
    295c:	5e e3       	ldi	r21, 0x3E	; 62
    295e:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
	global_amp = sin(tim) * sin(tim);
    2962:	0e 94 25 32 	call	0x644a	; 0x644a <sin>
    2966:	9b 01       	movw	r18, r22
    2968:	ac 01       	movw	r20, r24
    296a:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    296e:	9b 01       	movw	r18, r22
    2970:	f8 2f       	mov	r31, r24
    2972:	e9 2f       	mov	r30, r25
    2974:	46 2f       	mov	r20, r22
    2976:	53 2f       	mov	r21, r19
    2978:	68 2f       	mov	r22, r24
    297a:	79 2f       	mov	r23, r25
    297c:	40 93 ac 2a 	sts	0x2AAC, r20
    2980:	50 93 ad 2a 	sts	0x2AAD, r21
    2984:	60 93 ae 2a 	sts	0x2AAE, r22
    2988:	70 93 af 2a 	sts	0x2AAF, r23
	if(global_amp < 0.1) global_amp = 0.1; // to avoid complete stop
    298c:	82 2f       	mov	r24, r18
    298e:	93 2f       	mov	r25, r19
    2990:	af 2f       	mov	r26, r31
    2992:	be 2f       	mov	r27, r30
    2994:	bc 01       	movw	r22, r24
    2996:	cd 01       	movw	r24, r26
    2998:	2d ec       	ldi	r18, 0xCD	; 205
    299a:	3c ec       	ldi	r19, 0xCC	; 204
    299c:	4c ec       	ldi	r20, 0xCC	; 204
    299e:	5d e3       	ldi	r21, 0x3D	; 61
    29a0:	0e 94 6d 2f 	call	0x5eda	; 0x5eda <__cmpsf2>
    29a4:	87 ff       	sbrs	r24, 7
    29a6:	0c c0       	rjmp	.+24     	; 0x29c0 <_Z15rhythm_control1v+0x88>
    29a8:	8d ec       	ldi	r24, 0xCD	; 205
    29aa:	9c ec       	ldi	r25, 0xCC	; 204
    29ac:	ac ec       	ldi	r26, 0xCC	; 204
    29ae:	bd e3       	ldi	r27, 0x3D	; 61
    29b0:	80 93 ac 2a 	sts	0x2AAC, r24
    29b4:	90 93 ad 2a 	sts	0x2AAD, r25
    29b8:	a0 93 ae 2a 	sts	0x2AAE, r26
    29bc:	b0 93 af 2a 	sts	0x2AAF, r27

	if(rhythm_on)
    29c0:	80 91 9e 2a 	lds	r24, 0x2A9E
    29c4:	88 23       	and	r24, r24
    29c6:	49 f0       	breq	.+18     	; 0x29da <_Z15rhythm_control1v+0xa2>
	{
		timestep++;
    29c8:	08 94       	sec
    29ca:	c1 1c       	adc	r12, r1
    29cc:	d1 1c       	adc	r13, r1
    29ce:	c0 92 7f 2b 	sts	0x2B7F, r12
    29d2:	d0 92 80 2b 	sts	0x2B80, r13
		rhythm_on = false;
    29d6:	10 92 9e 2a 	sts	0x2A9E, r1
	}

	return global_amp * rhythm(0.6);
    29da:	c0 90 ac 2a 	lds	r12, 0x2AAC
    29de:	d0 90 ad 2a 	lds	r13, 0x2AAD
    29e2:	e0 90 ae 2a 	lds	r14, 0x2AAE
    29e6:	f0 90 af 2a 	lds	r15, 0x2AAF
    29ea:	6a e9       	ldi	r22, 0x9A	; 154
    29ec:	79 e9       	ldi	r23, 0x99	; 153
    29ee:	89 e1       	ldi	r24, 0x19	; 25
    29f0:	9f e3       	ldi	r25, 0x3F	; 63
    29f2:	0e 94 3f 13 	call	0x267e	; 0x267e <_Z6rhythmf>
    29f6:	9b 01       	movw	r18, r22
    29f8:	ac 01       	movw	r20, r24
    29fa:	c7 01       	movw	r24, r14
    29fc:	b6 01       	movw	r22, r12
    29fe:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
}
    2a02:	46 2f       	mov	r20, r22
    2a04:	57 2f       	mov	r21, r23
    2a06:	68 2f       	mov	r22, r24
    2a08:	79 2f       	mov	r23, r25
    2a0a:	cb 01       	movw	r24, r22
    2a0c:	ba 01       	movw	r22, r20
    2a0e:	ff 90       	pop	r15
    2a10:	ef 90       	pop	r14
    2a12:	df 90       	pop	r13
    2a14:	cf 90       	pop	r12
    2a16:	08 95       	ret

00002a18 <_Z14init_variablesv>:

// ============================================================================================
// for initialization of swarm dynamics function
// ============================================================================================
void init_variables()
{
    2a18:	4f 92       	push	r4
    2a1a:	5f 92       	push	r5
    2a1c:	6f 92       	push	r6
    2a1e:	7f 92       	push	r7
    2a20:	8f 92       	push	r8
    2a22:	9f 92       	push	r9
    2a24:	af 92       	push	r10
    2a26:	bf 92       	push	r11
    2a28:	cf 92       	push	r12
    2a2a:	df 92       	push	r13
    2a2c:	ef 92       	push	r14
    2a2e:	ff 92       	push	r15
    2a30:	0f 93       	push	r16
    2a32:	1f 93       	push	r17
    2a34:	cf 93       	push	r28
    2a36:	df 93       	push	r29
	int i;

	if(special) 
    2a38:	80 91 a3 2a 	lds	r24, 0x2AA3
    2a3c:	88 23       	and	r24, r24
    2a3e:	41 f0       	breq	.+16     	; 0x2a50 <_Z14init_variablesv+0x38>
		send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, "i");
    2a40:	81 e0       	ldi	r24, 0x01	; 1
    2a42:	6f e3       	ldi	r22, 0x3F	; 63
    2a44:	44 e1       	ldi	r20, 0x14	; 20
    2a46:	50 e0       	ldi	r21, 0x00	; 0
    2a48:	27 e0       	ldi	r18, 0x07	; 7
    2a4a:	30 e2       	ldi	r19, 0x20	; 32
    2a4c:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <_Z12send_messagehhiPKc>
    2a50:	ef e4       	ldi	r30, 0x4F	; 79
    2a52:	fb e2       	ldi	r31, 0x2B	; 43
    2a54:	78 e1       	ldi	r23, 0x18	; 24
    2a56:	c7 2e       	mov	r12, r23
    2a58:	d1 2c       	mov	r13, r1
    2a5a:	ce 0e       	add	r12, r30
    2a5c:	df 1e       	adc	r13, r31
    2a5e:	ab e0       	ldi	r26, 0x0B	; 11
    2a60:	bb e2       	ldi	r27, 0x2B	; 43
    2a62:	cd 01       	movw	r24, r26
    2a64:	48 96       	adiw	r24, 0x18	; 24
    2a66:	03 ec       	ldi	r16, 0xC3	; 195
    2a68:	1a e2       	ldi	r17, 0x2A	; 42

// ============================================================================================
// for initialization of swarm dynamics function
// ============================================================================================
void init_variables()
{
    2a6a:	26 e0       	ldi	r18, 0x06	; 6
    2a6c:	30 e0       	ldi	r19, 0x00	; 0
	if(special) 
		send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, "i");

	for(i=0;i<NUM_NEIGHBORS;i++)
	{
		agent0.neix[i] = 0.0;	agent0.neiy[i] = 0.0;
    2a6e:	40 e0       	ldi	r20, 0x00	; 0
    2a70:	50 e0       	ldi	r21, 0x00	; 0
    2a72:	ba 01       	movw	r22, r20
    2a74:	41 93       	st	Z+, r20
    2a76:	51 93       	st	Z+, r21
    2a78:	61 93       	st	Z+, r22
    2a7a:	71 93       	st	Z+, r23
    2a7c:	e6 01       	movw	r28, r12
    2a7e:	49 93       	st	Y+, r20
    2a80:	59 93       	st	Y+, r21
    2a82:	69 93       	st	Y+, r22
    2a84:	79 93       	st	Y+, r23
    2a86:	6e 01       	movw	r12, r28
		agent1.neix[i] = 0.0;	agent1.neiy[i] = 0.0;
    2a88:	4d 93       	st	X+, r20
    2a8a:	5d 93       	st	X+, r21
    2a8c:	6d 93       	st	X+, r22
    2a8e:	7d 93       	st	X+, r23
    2a90:	ec 01       	movw	r28, r24
    2a92:	49 93       	st	Y+, r20
    2a94:	59 93       	st	Y+, r21
    2a96:	69 93       	st	Y+, r22
    2a98:	79 93       	st	Y+, r23
    2a9a:	ce 01       	movw	r24, r28
		connected[i] = false;
    2a9c:	e8 01       	movw	r28, r16
    2a9e:	19 92       	st	Y+, r1
    2aa0:	8e 01       	movw	r16, r28
    2aa2:	21 50       	subi	r18, 0x01	; 1
    2aa4:	30 40       	sbci	r19, 0x00	; 0
	int i;

	if(special) 
		send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, "i");

	for(i=0;i<NUM_NEIGHBORS;i++)
    2aa6:	31 f7       	brne	.-52     	; 0x2a74 <_Z14init_variablesv+0x5c>
		agent1.neix[i] = 0.0;	agent1.neiy[i] = 0.0;
		connected[i] = false;
	}

	// for chaotic motion
	agent0.px = 22.0; agent0.py = 40.0; agent0.vx = 0.186; agent0.vy = -4.8; agent0.hd = 4.75;
    2aa8:	40 e0       	ldi	r20, 0x00	; 0
    2aaa:	50 e0       	ldi	r21, 0x00	; 0
    2aac:	60 eb       	ldi	r22, 0xB0	; 176
    2aae:	71 e4       	ldi	r23, 0x41	; 65
    2ab0:	40 93 3b 2b 	sts	0x2B3B, r20
    2ab4:	50 93 3c 2b 	sts	0x2B3C, r21
    2ab8:	60 93 3d 2b 	sts	0x2B3D, r22
    2abc:	70 93 3e 2b 	sts	0x2B3E, r23
    2ac0:	80 e0       	ldi	r24, 0x00	; 0
    2ac2:	90 e0       	ldi	r25, 0x00	; 0
    2ac4:	a0 e2       	ldi	r26, 0x20	; 32
    2ac6:	b2 e4       	ldi	r27, 0x42	; 66
    2ac8:	80 93 3f 2b 	sts	0x2B3F, r24
    2acc:	90 93 40 2b 	sts	0x2B40, r25
    2ad0:	a0 93 41 2b 	sts	0x2B41, r26
    2ad4:	b0 93 42 2b 	sts	0x2B42, r27
    2ad8:	0f 2e       	mov	r0, r31
    2ada:	f9 ec       	ldi	r31, 0xC9	; 201
    2adc:	cf 2e       	mov	r12, r31
    2ade:	f6 e7       	ldi	r31, 0x76	; 118
    2ae0:	df 2e       	mov	r13, r31
    2ae2:	fe e3       	ldi	r31, 0x3E	; 62
    2ae4:	ef 2e       	mov	r14, r31
    2ae6:	fe e3       	ldi	r31, 0x3E	; 62
    2ae8:	ff 2e       	mov	r15, r31
    2aea:	f0 2d       	mov	r31, r0
    2aec:	c0 92 43 2b 	sts	0x2B43, r12
    2af0:	d0 92 44 2b 	sts	0x2B44, r13
    2af4:	e0 92 45 2b 	sts	0x2B45, r14
    2af8:	f0 92 46 2b 	sts	0x2B46, r15
    2afc:	0f 2e       	mov	r0, r31
    2afe:	fa e9       	ldi	r31, 0x9A	; 154
    2b00:	8f 2e       	mov	r8, r31
    2b02:	f9 e9       	ldi	r31, 0x99	; 153
    2b04:	9f 2e       	mov	r9, r31
    2b06:	f9 e9       	ldi	r31, 0x99	; 153
    2b08:	af 2e       	mov	r10, r31
    2b0a:	f0 ec       	ldi	r31, 0xC0	; 192
    2b0c:	bf 2e       	mov	r11, r31
    2b0e:	f0 2d       	mov	r31, r0
    2b10:	80 92 47 2b 	sts	0x2B47, r8
    2b14:	90 92 48 2b 	sts	0x2B48, r9
    2b18:	a0 92 49 2b 	sts	0x2B49, r10
    2b1c:	b0 92 4a 2b 	sts	0x2B4A, r11
    2b20:	0f 2e       	mov	r0, r31
    2b22:	f0 e0       	ldi	r31, 0x00	; 0
    2b24:	4f 2e       	mov	r4, r31
    2b26:	f0 e0       	ldi	r31, 0x00	; 0
    2b28:	5f 2e       	mov	r5, r31
    2b2a:	f8 e9       	ldi	r31, 0x98	; 152
    2b2c:	6f 2e       	mov	r6, r31
    2b2e:	f0 e4       	ldi	r31, 0x40	; 64
    2b30:	7f 2e       	mov	r7, r31
    2b32:	f0 2d       	mov	r31, r0
    2b34:	40 92 4b 2b 	sts	0x2B4B, r4
    2b38:	50 92 4c 2b 	sts	0x2B4C, r5
    2b3c:	60 92 4d 2b 	sts	0x2B4D, r6
    2b40:	70 92 4e 2b 	sts	0x2B4E, r7

	//for ordered motion
	if(sec_counter < STGtime4)
    2b44:	20 91 b4 2a 	lds	r18, 0x2AB4
    2b48:	30 91 b5 2a 	lds	r19, 0x2AB5
    2b4c:	d1 e0       	ldi	r29, 0x01	; 1
    2b4e:	2e 30       	cpi	r18, 0x0E	; 14
    2b50:	3d 07       	cpc	r19, r29
    2b52:	e4 f5       	brge	.+120    	; 0x2bcc <_Z14init_variablesv+0x1b4>
	{
		agent1.px =  2.7; agent1.py = 75.6; agent1.vx = 3.8;   agent1.vy = 1.3;	 agent1.hd = 0.0;
    2b54:	8d ec       	ldi	r24, 0xCD	; 205
    2b56:	9c ec       	ldi	r25, 0xCC	; 204
    2b58:	ac e2       	ldi	r26, 0x2C	; 44
    2b5a:	b0 e4       	ldi	r27, 0x40	; 64
    2b5c:	80 93 f7 2a 	sts	0x2AF7, r24
    2b60:	90 93 f8 2a 	sts	0x2AF8, r25
    2b64:	a0 93 f9 2a 	sts	0x2AF9, r26
    2b68:	b0 93 fa 2a 	sts	0x2AFA, r27
    2b6c:	83 e3       	ldi	r24, 0x33	; 51
    2b6e:	93 e3       	ldi	r25, 0x33	; 51
    2b70:	a7 e9       	ldi	r26, 0x97	; 151
    2b72:	b2 e4       	ldi	r27, 0x42	; 66
    2b74:	80 93 fb 2a 	sts	0x2AFB, r24
    2b78:	90 93 fc 2a 	sts	0x2AFC, r25
    2b7c:	a0 93 fd 2a 	sts	0x2AFD, r26
    2b80:	b0 93 fe 2a 	sts	0x2AFE, r27
    2b84:	83 e3       	ldi	r24, 0x33	; 51
    2b86:	93 e3       	ldi	r25, 0x33	; 51
    2b88:	a3 e7       	ldi	r26, 0x73	; 115
    2b8a:	b0 e4       	ldi	r27, 0x40	; 64
    2b8c:	80 93 ff 2a 	sts	0x2AFF, r24
    2b90:	90 93 00 2b 	sts	0x2B00, r25
    2b94:	a0 93 01 2b 	sts	0x2B01, r26
    2b98:	b0 93 02 2b 	sts	0x2B02, r27
    2b9c:	86 e6       	ldi	r24, 0x66	; 102
    2b9e:	96 e6       	ldi	r25, 0x66	; 102
    2ba0:	a6 ea       	ldi	r26, 0xA6	; 166
    2ba2:	bf e3       	ldi	r27, 0x3F	; 63
    2ba4:	80 93 03 2b 	sts	0x2B03, r24
    2ba8:	90 93 04 2b 	sts	0x2B04, r25
    2bac:	a0 93 05 2b 	sts	0x2B05, r26
    2bb0:	b0 93 06 2b 	sts	0x2B06, r27
    2bb4:	80 e0       	ldi	r24, 0x00	; 0
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	dc 01       	movw	r26, r24
    2bba:	80 93 07 2b 	sts	0x2B07, r24
    2bbe:	90 93 08 2b 	sts	0x2B08, r25
    2bc2:	a0 93 09 2b 	sts	0x2B09, r26
    2bc6:	b0 93 0a 2b 	sts	0x2B0A, r27
    2bca:	28 c0       	rjmp	.+80     	; 0x2c1c <_Z14init_variablesv+0x204>
	}
	else
	{
		agent1.px = 22.0; agent1.py = 40.0; agent1.vx = 0.186; agent1.vy = -4.8; agent1.hd = 4.75;
    2bcc:	40 93 f7 2a 	sts	0x2AF7, r20
    2bd0:	50 93 f8 2a 	sts	0x2AF8, r21
    2bd4:	60 93 f9 2a 	sts	0x2AF9, r22
    2bd8:	70 93 fa 2a 	sts	0x2AFA, r23
    2bdc:	80 93 fb 2a 	sts	0x2AFB, r24
    2be0:	90 93 fc 2a 	sts	0x2AFC, r25
    2be4:	a0 93 fd 2a 	sts	0x2AFD, r26
    2be8:	b0 93 fe 2a 	sts	0x2AFE, r27
    2bec:	c0 92 ff 2a 	sts	0x2AFF, r12
    2bf0:	d0 92 00 2b 	sts	0x2B00, r13
    2bf4:	e0 92 01 2b 	sts	0x2B01, r14
    2bf8:	f0 92 02 2b 	sts	0x2B02, r15
    2bfc:	80 92 03 2b 	sts	0x2B03, r8
    2c00:	90 92 04 2b 	sts	0x2B04, r9
    2c04:	a0 92 05 2b 	sts	0x2B05, r10
    2c08:	b0 92 06 2b 	sts	0x2B06, r11
    2c0c:	40 92 07 2b 	sts	0x2B07, r4
    2c10:	50 92 08 2b 	sts	0x2B08, r5
    2c14:	60 92 09 2b 	sts	0x2B09, r6
    2c18:	70 92 0a 2b 	sts	0x2B0A, r7
	}

	wave_flg = false; 
    2c1c:	10 92 a2 2a 	sts	0x2AA2, r1
	wave_ping = false;
    2c20:	10 92 a1 2a 	sts	0x2AA1, r1
	column_flg = false;
    2c24:	10 92 a0 2a 	sts	0x2AA0, r1
	rhythm_on = false;
    2c28:	10 92 9e 2a 	sts	0x2A9E, r1

	agent2.flg = false;
    2c2c:	10 92 f6 2a 	sts	0x2AF6, r1

	agent3.tim2 = 20.0;
    2c30:	80 e0       	ldi	r24, 0x00	; 0
    2c32:	90 e0       	ldi	r25, 0x00	; 0
    2c34:	a0 ea       	ldi	r26, 0xA0	; 160
    2c36:	b1 e4       	ldi	r27, 0x41	; 65
    2c38:	80 93 e9 2a 	sts	0x2AE9, r24
    2c3c:	90 93 ea 2a 	sts	0x2AEA, r25
    2c40:	a0 93 eb 2a 	sts	0x2AEB, r26
    2c44:	b0 93 ec 2a 	sts	0x2AEC, r27

	global_amp = 0;
    2c48:	80 e0       	ldi	r24, 0x00	; 0
    2c4a:	90 e0       	ldi	r25, 0x00	; 0
    2c4c:	dc 01       	movw	r26, r24
    2c4e:	80 93 ac 2a 	sts	0x2AAC, r24
    2c52:	90 93 ad 2a 	sts	0x2AAD, r25
    2c56:	a0 93 ae 2a 	sts	0x2AAE, r26
    2c5a:	b0 93 af 2a 	sts	0x2AAF, r27
	
	enable_servo();
    2c5e:	0e 94 de 2c 	call	0x59bc	; 0x59bc <enable_servo>
	
	set_servo_position(0);
    2c62:	60 e0       	ldi	r22, 0x00	; 0
    2c64:	70 e0       	ldi	r23, 0x00	; 0
    2c66:	cb 01       	movw	r24, r22
    2c68:	0e 94 ed 2c 	call	0x59da	; 0x59da <set_servo_position>
}
    2c6c:	df 91       	pop	r29
    2c6e:	cf 91       	pop	r28
    2c70:	1f 91       	pop	r17
    2c72:	0f 91       	pop	r16
    2c74:	ff 90       	pop	r15
    2c76:	ef 90       	pop	r14
    2c78:	df 90       	pop	r13
    2c7a:	cf 90       	pop	r12
    2c7c:	bf 90       	pop	r11
    2c7e:	af 90       	pop	r10
    2c80:	9f 90       	pop	r9
    2c82:	8f 90       	pop	r8
    2c84:	7f 90       	pop	r7
    2c86:	6f 90       	pop	r6
    2c88:	5f 90       	pop	r5
    2c8a:	4f 90       	pop	r4
    2c8c:	08 95       	ret

00002c8e <_Z6rx_pktPN5Xgrid6PacketE>:

// ============================================================================================
// receive packet
// ============================================================================================
void rx_pkt(Xgrid::Packet *pkt)
{
    2c8e:	0f 93       	push	r16
    2c90:	1f 93       	push	r17
    2c92:	cf 93       	push	r28
    2c94:	df 93       	push	r29
    2c96:	8c 01       	movw	r16, r24
	uint8_t port = pkt->rx_node;	//pkt->rx_node
    2c98:	dc 01       	movw	r26, r24
    2c9a:	1a 96       	adiw	r26, 0x0a	; 10
    2c9c:	cc 91       	ld	r28, X
    2c9e:	1a 97       	sbiw	r26, 0x0a	; 10
	char command;

	if(port >= 0 && port < NUM_NEIGHBORS){
    2ca0:	c6 30       	cpi	r28, 0x06	; 6
    2ca2:	08 f0       	brcs	.+2      	; 0x2ca6 <_Z6rx_pktPN5Xgrid6PacketE+0x18>
    2ca4:	e9 c0       	rjmp	.+466    	; 0x2e78 <_Z6rx_pktPN5Xgrid6PacketE+0x1ea>

		if(pkt->type == MESSAGE_COMMAND)
    2ca6:	12 96       	adiw	r26, 0x02	; 2
    2ca8:	9c 91       	ld	r25, X
    2caa:	12 97       	sbiw	r26, 0x02	; 2
    2cac:	91 30       	cpi	r25, 0x01	; 1
    2cae:	09 f0       	breq	.+2      	; 0x2cb2 <_Z6rx_pktPN5Xgrid6PacketE+0x24>
    2cb0:	96 c0       	rjmp	.+300    	; 0x2dde <_Z6rx_pktPN5Xgrid6PacketE+0x150>
		{
			char* char_ptr = (char*) pkt->data;
			command = *char_ptr;
    2cb2:	16 96       	adiw	r26, 0x06	; 6
    2cb4:	ed 91       	ld	r30, X+
    2cb6:	fc 91       	ld	r31, X
    2cb8:	17 97       	sbiw	r26, 0x07	; 7
    2cba:	80 81       	ld	r24, Z
			
			connected[port] = true;
    2cbc:	ec 2f       	mov	r30, r28
    2cbe:	f0 e0       	ldi	r31, 0x00	; 0
    2cc0:	ed 53       	subi	r30, 0x3D	; 61
    2cc2:	f5 4d       	sbci	r31, 0xD5	; 213
    2cc4:	90 83       	st	Z, r25

			switch(command)
    2cc6:	89 33       	cpi	r24, 0x39	; 57
    2cc8:	09 f4       	brne	.+2      	; 0x2ccc <_Z6rx_pktPN5Xgrid6PacketE+0x3e>
    2cca:	7e c0       	rjmp	.+252    	; 0x2dc8 <_Z6rx_pktPN5Xgrid6PacketE+0x13a>
    2ccc:	8a 33       	cpi	r24, 0x3A	; 58
    2cce:	10 f5       	brcc	.+68     	; 0x2d14 <_Z6rx_pktPN5Xgrid6PacketE+0x86>
    2cd0:	84 33       	cpi	r24, 0x34	; 52
    2cd2:	09 f4       	brne	.+2      	; 0x2cd6 <_Z6rx_pktPN5Xgrid6PacketE+0x48>
    2cd4:	6a c0       	rjmp	.+212    	; 0x2daa <_Z6rx_pktPN5Xgrid6PacketE+0x11c>
    2cd6:	85 33       	cpi	r24, 0x35	; 53
    2cd8:	80 f4       	brcc	.+32     	; 0x2cfa <_Z6rx_pktPN5Xgrid6PacketE+0x6c>
    2cda:	81 33       	cpi	r24, 0x31	; 49
    2cdc:	09 f4       	brne	.+2      	; 0x2ce0 <_Z6rx_pktPN5Xgrid6PacketE+0x52>
    2cde:	5a c0       	rjmp	.+180    	; 0x2d94 <_Z6rx_pktPN5Xgrid6PacketE+0x106>
    2ce0:	82 33       	cpi	r24, 0x32	; 50
    2ce2:	20 f4       	brcc	.+8      	; 0x2cec <_Z6rx_pktPN5Xgrid6PacketE+0x5e>
    2ce4:	80 33       	cpi	r24, 0x30	; 48
    2ce6:	09 f0       	breq	.+2      	; 0x2cea <_Z6rx_pktPN5Xgrid6PacketE+0x5c>
    2ce8:	7a c0       	rjmp	.+244    	; 0x2dde <_Z6rx_pktPN5Xgrid6PacketE+0x150>
    2cea:	71 c0       	rjmp	.+226    	; 0x2dce <_Z6rx_pktPN5Xgrid6PacketE+0x140>
    2cec:	82 33       	cpi	r24, 0x32	; 50
    2cee:	09 f4       	brne	.+2      	; 0x2cf2 <_Z6rx_pktPN5Xgrid6PacketE+0x64>
    2cf0:	56 c0       	rjmp	.+172    	; 0x2d9e <_Z6rx_pktPN5Xgrid6PacketE+0x110>
    2cf2:	83 33       	cpi	r24, 0x33	; 51
    2cf4:	09 f0       	breq	.+2      	; 0x2cf8 <_Z6rx_pktPN5Xgrid6PacketE+0x6a>
    2cf6:	73 c0       	rjmp	.+230    	; 0x2dde <_Z6rx_pktPN5Xgrid6PacketE+0x150>
    2cf8:	55 c0       	rjmp	.+170    	; 0x2da4 <_Z6rx_pktPN5Xgrid6PacketE+0x116>
    2cfa:	86 33       	cpi	r24, 0x36	; 54
    2cfc:	09 f4       	brne	.+2      	; 0x2d00 <_Z6rx_pktPN5Xgrid6PacketE+0x72>
    2cfe:	5b c0       	rjmp	.+182    	; 0x2db6 <_Z6rx_pktPN5Xgrid6PacketE+0x128>
    2d00:	86 33       	cpi	r24, 0x36	; 54
    2d02:	08 f4       	brcc	.+2      	; 0x2d06 <_Z6rx_pktPN5Xgrid6PacketE+0x78>
    2d04:	55 c0       	rjmp	.+170    	; 0x2db0 <_Z6rx_pktPN5Xgrid6PacketE+0x122>
    2d06:	87 33       	cpi	r24, 0x37	; 55
    2d08:	09 f4       	brne	.+2      	; 0x2d0c <_Z6rx_pktPN5Xgrid6PacketE+0x7e>
    2d0a:	58 c0       	rjmp	.+176    	; 0x2dbc <_Z6rx_pktPN5Xgrid6PacketE+0x12e>
    2d0c:	88 33       	cpi	r24, 0x38	; 56
    2d0e:	09 f0       	breq	.+2      	; 0x2d12 <_Z6rx_pktPN5Xgrid6PacketE+0x84>
    2d10:	66 c0       	rjmp	.+204    	; 0x2dde <_Z6rx_pktPN5Xgrid6PacketE+0x150>
    2d12:	57 c0       	rjmp	.+174    	; 0x2dc2 <_Z6rx_pktPN5Xgrid6PacketE+0x134>
    2d14:	81 36       	cpi	r24, 0x61	; 97
    2d16:	99 f1       	breq	.+102    	; 0x2d7e <_Z6rx_pktPN5Xgrid6PacketE+0xf0>
    2d18:	82 36       	cpi	r24, 0x62	; 98
    2d1a:	70 f4       	brcc	.+28     	; 0x2d38 <_Z6rx_pktPN5Xgrid6PacketE+0xaa>
    2d1c:	89 34       	cpi	r24, 0x49	; 73
    2d1e:	41 f1       	breq	.+80     	; 0x2d70 <_Z6rx_pktPN5Xgrid6PacketE+0xe2>
    2d20:	8a 34       	cpi	r24, 0x4A	; 74
    2d22:	20 f4       	brcc	.+8      	; 0x2d2c <_Z6rx_pktPN5Xgrid6PacketE+0x9e>
    2d24:	84 34       	cpi	r24, 0x44	; 68
    2d26:	09 f0       	breq	.+2      	; 0x2d2a <_Z6rx_pktPN5Xgrid6PacketE+0x9c>
    2d28:	5a c0       	rjmp	.+180    	; 0x2dde <_Z6rx_pktPN5Xgrid6PacketE+0x150>
    2d2a:	14 c0       	rjmp	.+40     	; 0x2d54 <_Z6rx_pktPN5Xgrid6PacketE+0xc6>
    2d2c:	82 35       	cpi	r24, 0x52	; 82
    2d2e:	c9 f0       	breq	.+50     	; 0x2d62 <_Z6rx_pktPN5Xgrid6PacketE+0xd4>
    2d30:	8a 35       	cpi	r24, 0x5A	; 90
    2d32:	09 f0       	breq	.+2      	; 0x2d36 <_Z6rx_pktPN5Xgrid6PacketE+0xa8>
    2d34:	54 c0       	rjmp	.+168    	; 0x2dde <_Z6rx_pktPN5Xgrid6PacketE+0x150>
    2d36:	0b c0       	rjmp	.+22     	; 0x2d4e <_Z6rx_pktPN5Xgrid6PacketE+0xc0>
    2d38:	83 36       	cpi	r24, 0x63	; 99
    2d3a:	49 f1       	breq	.+82     	; 0x2d8e <_Z6rx_pktPN5Xgrid6PacketE+0x100>
    2d3c:	83 36       	cpi	r24, 0x63	; 99
    2d3e:	20 f1       	brcs	.+72     	; 0x2d88 <_Z6rx_pktPN5Xgrid6PacketE+0xfa>
    2d40:	89 36       	cpi	r24, 0x69	; 105
    2d42:	09 f4       	brne	.+2      	; 0x2d46 <_Z6rx_pktPN5Xgrid6PacketE+0xb8>
    2d44:	4a c0       	rjmp	.+148    	; 0x2dda <_Z6rx_pktPN5Xgrid6PacketE+0x14c>
    2d46:	82 37       	cpi	r24, 0x72	; 114
    2d48:	09 f0       	breq	.+2      	; 0x2d4c <_Z6rx_pktPN5Xgrid6PacketE+0xbe>
    2d4a:	49 c0       	rjmp	.+146    	; 0x2dde <_Z6rx_pktPN5Xgrid6PacketE+0x150>
    2d4c:	13 c0       	rjmp	.+38     	; 0x2d74 <_Z6rx_pktPN5Xgrid6PacketE+0xe6>
			{
				case 'Z': reboot_on = true;
    2d4e:	81 e0       	ldi	r24, 0x01	; 1
    2d50:	80 93 a7 2a 	sts	0x2AA7, r24

				case 'D':	speedup_on = false;	communication_on = false;	
    2d54:	10 92 a5 2a 	sts	0x2AA5, r1
    2d58:	10 92 ab 2a 	sts	0x2AAB, r1
							disable_servo();	break;
    2d5c:	0e 94 cf 2c 	call	0x599e	; 0x599e <disable_servo>
    2d60:	3e c0       	rjmp	.+124    	; 0x2dde <_Z6rx_pktPN5Xgrid6PacketE+0x150>
				case 'R':	speedup_on = true;	communication_on = true;
    2d62:	90 93 a5 2a 	sts	0x2AA5, r25
    2d66:	90 93 ab 2a 	sts	0x2AAB, r25
							enable_servo();		break;
    2d6a:	0e 94 de 2c 	call	0x59bc	; 0x59bc <enable_servo>
    2d6e:	37 c0       	rjmp	.+110    	; 0x2dde <_Z6rx_pktPN5Xgrid6PacketE+0x150>

				case 'i':	init_variables();	break;
				case 'r':	sec_counter = 0;	break;
				case 'I':	init_variables();	sec_counter = 0;	break;
    2d70:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <_Z14init_variablesv>
    2d74:	10 92 b4 2a 	sts	0x2AB4, r1
    2d78:	10 92 b5 2a 	sts	0x2AB5, r1
    2d7c:	30 c0       	rjmp	.+96     	; 0x2dde <_Z6rx_pktPN5Xgrid6PacketE+0x150>

				case 'a':	wave_flg = true;	wave_port = port;	break;
    2d7e:	90 93 a2 2a 	sts	0x2AA2, r25
    2d82:	c0 93 9f 2a 	sts	0x2A9F, r28
    2d86:	2b c0       	rjmp	.+86     	; 0x2dde <_Z6rx_pktPN5Xgrid6PacketE+0x150>
				case 'b':	column_flg = true;	break;
    2d88:	90 93 a0 2a 	sts	0x2AA0, r25
    2d8c:	28 c0       	rjmp	.+80     	; 0x2dde <_Z6rx_pktPN5Xgrid6PacketE+0x150>

				case 'c':	sync = false;		break;
    2d8e:	10 92 5d 20 	sts	0x205D, r1
    2d92:	25 c0       	rjmp	.+74     	; 0x2dde <_Z6rx_pktPN5Xgrid6PacketE+0x150>

				case '1':	sec_counter = STGtime1;	init_variables();	break;
    2d94:	10 92 b4 2a 	sts	0x2AB4, r1
    2d98:	10 92 b5 2a 	sts	0x2AB5, r1
    2d9c:	1e c0       	rjmp	.+60     	; 0x2dda <_Z6rx_pktPN5Xgrid6PacketE+0x14c>
				case '2':	sec_counter = STGtime2;	init_variables();	break;
    2d9e:	86 e9       	ldi	r24, 0x96	; 150
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	17 c0       	rjmp	.+46     	; 0x2dd2 <_Z6rx_pktPN5Xgrid6PacketE+0x144>
				case '3':	sec_counter = STGtime3;	init_variables();	break;
    2da4:	82 ed       	ldi	r24, 0xD2	; 210
    2da6:	90 e0       	ldi	r25, 0x00	; 0
    2da8:	14 c0       	rjmp	.+40     	; 0x2dd2 <_Z6rx_pktPN5Xgrid6PacketE+0x144>
				case '4':	sec_counter = STGtime4;	init_variables();	break;
    2daa:	8e e0       	ldi	r24, 0x0E	; 14
    2dac:	91 e0       	ldi	r25, 0x01	; 1
    2dae:	11 c0       	rjmp	.+34     	; 0x2dd2 <_Z6rx_pktPN5Xgrid6PacketE+0x144>
				case '5':	sec_counter = STGtime5;	init_variables();	break;
    2db0:	8c e2       	ldi	r24, 0x2C	; 44
    2db2:	91 e0       	ldi	r25, 0x01	; 1
    2db4:	0e c0       	rjmp	.+28     	; 0x2dd2 <_Z6rx_pktPN5Xgrid6PacketE+0x144>
				case '6':	sec_counter = STGtime6;	init_variables();	break;
    2db6:	88 e6       	ldi	r24, 0x68	; 104
    2db8:	91 e0       	ldi	r25, 0x01	; 1
    2dba:	0b c0       	rjmp	.+22     	; 0x2dd2 <_Z6rx_pktPN5Xgrid6PacketE+0x144>
				case '7':	sec_counter = STGtime7;	init_variables();	break;
    2dbc:	84 ea       	ldi	r24, 0xA4	; 164
    2dbe:	91 e0       	ldi	r25, 0x01	; 1
    2dc0:	08 c0       	rjmp	.+16     	; 0x2dd2 <_Z6rx_pktPN5Xgrid6PacketE+0x144>
				case '8':	sec_counter = STGtime8;	init_variables();	break;
    2dc2:	80 ee       	ldi	r24, 0xE0	; 224
    2dc4:	91 e0       	ldi	r25, 0x01	; 1
    2dc6:	05 c0       	rjmp	.+10     	; 0x2dd2 <_Z6rx_pktPN5Xgrid6PacketE+0x144>
				case '9':	sec_counter = STGtime9;	init_variables();	break;
    2dc8:	8a e3       	ldi	r24, 0x3A	; 58
    2dca:	92 e0       	ldi	r25, 0x02	; 2
    2dcc:	02 c0       	rjmp	.+4      	; 0x2dd2 <_Z6rx_pktPN5Xgrid6PacketE+0x144>
				case '0':	sec_counter = LASTtime;	init_variables();	break;
    2dce:	86 e7       	ldi	r24, 0x76	; 118
    2dd0:	92 e0       	ldi	r25, 0x02	; 2
    2dd2:	80 93 b4 2a 	sts	0x2AB4, r24
    2dd6:	90 93 b5 2a 	sts	0x2AB5, r25
    2dda:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <_Z14init_variablesv>

			}
		}
		
		if(pkt->type == MESSAGE_NUMDATA)
    2dde:	f8 01       	movw	r30, r16
    2de0:	82 81       	ldd	r24, Z+2	; 0x02
    2de2:	88 23       	and	r24, r24
    2de4:	09 f0       	breq	.+2      	; 0x2de8 <_Z6rx_pktPN5Xgrid6PacketE+0x15a>
    2de6:	48 c0       	rjmp	.+144    	; 0x2e78 <_Z6rx_pktPN5Xgrid6PacketE+0x1ea>
		{
			connected[port] = true;
    2de8:	d0 e0       	ldi	r29, 0x00	; 0
    2dea:	fe 01       	movw	r30, r28
    2dec:	ed 53       	subi	r30, 0x3D	; 61
    2dee:	f5 4d       	sbci	r31, 0xD5	; 213
    2df0:	81 e0       	ldi	r24, 0x01	; 1
    2df2:	80 83       	st	Z, r24

			point* pt_ptr = (point*) pkt->data;
    2df4:	d8 01       	movw	r26, r16
    2df6:	16 96       	adiw	r26, 0x06	; 6
    2df8:	4d 91       	ld	r20, X+
    2dfa:	5c 91       	ld	r21, X
    2dfc:	17 97       	sbiw	r26, 0x07	; 7

			agent0.neix[port] = pt_ptr->x0;
    2dfe:	9e 01       	movw	r18, r28
    2e00:	2b 5f       	subi	r18, 0xFB	; 251
    2e02:	3f 4f       	sbci	r19, 0xFF	; 255
    2e04:	22 0f       	add	r18, r18
    2e06:	33 1f       	adc	r19, r19
    2e08:	22 0f       	add	r18, r18
    2e0a:	33 1f       	adc	r19, r19
    2e0c:	b9 01       	movw	r22, r18
    2e0e:	65 5c       	subi	r22, 0xC5	; 197
    2e10:	74 4d       	sbci	r23, 0xD4	; 212
    2e12:	fa 01       	movw	r30, r20
    2e14:	80 85       	ldd	r24, Z+8	; 0x08
    2e16:	91 85       	ldd	r25, Z+9	; 0x09
    2e18:	a2 85       	ldd	r26, Z+10	; 0x0a
    2e1a:	b3 85       	ldd	r27, Z+11	; 0x0b
    2e1c:	fb 01       	movw	r30, r22
    2e1e:	80 83       	st	Z, r24
    2e20:	91 83       	std	Z+1, r25	; 0x01
    2e22:	a2 83       	std	Z+2, r26	; 0x02
    2e24:	b3 83       	std	Z+3, r27	; 0x03
			agent0.neiy[port] = pt_ptr->y0;
    2e26:	2b 96       	adiw	r28, 0x0b	; 11
    2e28:	cc 0f       	add	r28, r28
    2e2a:	dd 1f       	adc	r29, r29
    2e2c:	cc 0f       	add	r28, r28
    2e2e:	dd 1f       	adc	r29, r29
    2e30:	be 01       	movw	r22, r28
    2e32:	65 5c       	subi	r22, 0xC5	; 197
    2e34:	74 4d       	sbci	r23, 0xD4	; 212
    2e36:	fa 01       	movw	r30, r20
    2e38:	84 85       	ldd	r24, Z+12	; 0x0c
    2e3a:	95 85       	ldd	r25, Z+13	; 0x0d
    2e3c:	a6 85       	ldd	r26, Z+14	; 0x0e
    2e3e:	b7 85       	ldd	r27, Z+15	; 0x0f
    2e40:	fb 01       	movw	r30, r22
    2e42:	80 83       	st	Z, r24
    2e44:	91 83       	std	Z+1, r25	; 0x01
    2e46:	a2 83       	std	Z+2, r26	; 0x02
    2e48:	b3 83       	std	Z+3, r27	; 0x03
			
			agent1.neix[port] = pt_ptr->x1;
    2e4a:	29 50       	subi	r18, 0x09	; 9
    2e4c:	35 4d       	sbci	r19, 0xD5	; 213
    2e4e:	fa 01       	movw	r30, r20
    2e50:	80 81       	ld	r24, Z
    2e52:	91 81       	ldd	r25, Z+1	; 0x01
    2e54:	a2 81       	ldd	r26, Z+2	; 0x02
    2e56:	b3 81       	ldd	r27, Z+3	; 0x03
    2e58:	f9 01       	movw	r30, r18
    2e5a:	80 83       	st	Z, r24
    2e5c:	91 83       	std	Z+1, r25	; 0x01
    2e5e:	a2 83       	std	Z+2, r26	; 0x02
    2e60:	b3 83       	std	Z+3, r27	; 0x03
			agent1.neiy[port] = pt_ptr->y1;
    2e62:	c9 50       	subi	r28, 0x09	; 9
    2e64:	d5 4d       	sbci	r29, 0xD5	; 213
    2e66:	fa 01       	movw	r30, r20
    2e68:	84 81       	ldd	r24, Z+4	; 0x04
    2e6a:	95 81       	ldd	r25, Z+5	; 0x05
    2e6c:	a6 81       	ldd	r26, Z+6	; 0x06
    2e6e:	b7 81       	ldd	r27, Z+7	; 0x07
    2e70:	88 83       	st	Y, r24
    2e72:	99 83       	std	Y+1, r25	; 0x01
    2e74:	aa 83       	std	Y+2, r26	; 0x02
    2e76:	bb 83       	std	Y+3, r27	; 0x03
		}
		
		//LED_PORT.OUTTGL = LED_USR_2_PIN_bm;	//green LED
	}
}
    2e78:	df 91       	pop	r29
    2e7a:	cf 91       	pop	r28
    2e7c:	1f 91       	pop	r17
    2e7e:	0f 91       	pop	r16
    2e80:	08 95       	ret

00002e82 <_Z9key_inputv>:
// ============================================================================================
void key_input()
{
	char input_char = 0;
	
	if (usart.available()) input_char = usart.get();
    2e82:	8f ef       	ldi	r24, 0xFF	; 255
    2e84:	99 e2       	ldi	r25, 0x29	; 41
    2e86:	0e 94 cb 1c 	call	0x3996	; 0x3996 <_ZN5Usart9availableEv>
    2e8a:	00 97       	sbiw	r24, 0x00	; 0
    2e8c:	09 f4       	brne	.+2      	; 0x2e90 <_Z9key_inputv+0xe>
    2e8e:	5a c1       	rjmp	.+692    	; 0x3144 <_Z9key_inputv+0x2c2>
    2e90:	8f ef       	ldi	r24, 0xFF	; 255
    2e92:	99 e2       	ldi	r25, 0x29	; 41
    2e94:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <_ZN5Usart3getEv>
	
	if(input_char == 0x1b) xboot_reset(); //reboot the board
    2e98:	8b 31       	cpi	r24, 0x1B	; 27
    2e9a:	09 f4       	brne	.+2      	; 0x2e9e <_Z9key_inputv+0x1c>
    2e9c:	42 c0       	rjmp	.+132    	; 0x2f22 <_Z9key_inputv+0xa0>

	if(input_char == 'Z')	//Reboot whole system
    2e9e:	8a 35       	cpi	r24, 0x5A	; 90
    2ea0:	09 f0       	breq	.+2      	; 0x2ea4 <_Z9key_inputv+0x22>
    2ea2:	41 c0       	rjmp	.+130    	; 0x2f26 <_Z9key_inputv+0xa4>
	{
		send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, "Z");
    2ea4:	81 e0       	ldi	r24, 0x01	; 1
    2ea6:	6f e3       	ldi	r22, 0x3F	; 63
    2ea8:	44 e1       	ldi	r20, 0x14	; 20
    2eaa:	50 e0       	ldi	r21, 0x00	; 0
    2eac:	29 e0       	ldi	r18, 0x09	; 9
    2eae:	30 e2       	ldi	r19, 0x20	; 32
    2eb0:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <_Z12send_messagehhiPKc>
		temp_time = jiffies + 3000;
    2eb4:	80 91 d1 2a 	lds	r24, 0x2AD1
    2eb8:	90 91 d2 2a 	lds	r25, 0x2AD2
    2ebc:	a0 91 d3 2a 	lds	r26, 0x2AD3
    2ec0:	b0 91 d4 2a 	lds	r27, 0x2AD4
    2ec4:	88 54       	subi	r24, 0x48	; 72
    2ec6:	94 4f       	sbci	r25, 0xF4	; 244
    2ec8:	af 4f       	sbci	r26, 0xFF	; 255
    2eca:	bf 4f       	sbci	r27, 0xFF	; 255
    2ecc:	80 93 cd 2a 	sts	0x2ACD, r24
    2ed0:	90 93 ce 2a 	sts	0x2ACE, r25
    2ed4:	a0 93 cf 2a 	sts	0x2ACF, r26
    2ed8:	b0 93 d0 2a 	sts	0x2AD0, r27
		while(jiffies < temp_time)
		{
			LED_PORT.OUTTGL = LED_USR_1_PIN_bm; _delay_ms(100);
    2edc:	e0 e2       	ldi	r30, 0x20	; 32
    2ede:	f6 e0       	ldi	r31, 0x06	; 6
    2ee0:	22 e0       	ldi	r18, 0x02	; 2

	if(input_char == 'Z')	//Reboot whole system
	{
		send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, "Z");
		temp_time = jiffies + 3000;
		while(jiffies < temp_time)
    2ee2:	0a c0       	rjmp	.+20     	; 0x2ef8 <_Z9key_inputv+0x76>
		{
			LED_PORT.OUTTGL = LED_USR_1_PIN_bm; _delay_ms(100);
    2ee4:	27 83       	std	Z+7, r18	; 0x07
    2ee6:	8f ef       	ldi	r24, 0xFF	; 255
    2ee8:	93 ec       	ldi	r25, 0xC3	; 195
    2eea:	a9 e0       	ldi	r26, 0x09	; 9
    2eec:	81 50       	subi	r24, 0x01	; 1
    2eee:	90 40       	sbci	r25, 0x00	; 0
    2ef0:	a0 40       	sbci	r26, 0x00	; 0
    2ef2:	e1 f7       	brne	.-8      	; 0x2eec <_Z9key_inputv+0x6a>
    2ef4:	00 c0       	rjmp	.+0      	; 0x2ef6 <_Z9key_inputv+0x74>
    2ef6:	00 00       	nop

	if(input_char == 'Z')	//Reboot whole system
	{
		send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, "Z");
		temp_time = jiffies + 3000;
		while(jiffies < temp_time)
    2ef8:	40 91 d1 2a 	lds	r20, 0x2AD1
    2efc:	50 91 d2 2a 	lds	r21, 0x2AD2
    2f00:	60 91 d3 2a 	lds	r22, 0x2AD3
    2f04:	70 91 d4 2a 	lds	r23, 0x2AD4
    2f08:	80 91 cd 2a 	lds	r24, 0x2ACD
    2f0c:	90 91 ce 2a 	lds	r25, 0x2ACE
    2f10:	a0 91 cf 2a 	lds	r26, 0x2ACF
    2f14:	b0 91 d0 2a 	lds	r27, 0x2AD0
    2f18:	48 17       	cp	r20, r24
    2f1a:	59 07       	cpc	r21, r25
    2f1c:	6a 07       	cpc	r22, r26
    2f1e:	7b 07       	cpc	r23, r27
    2f20:	08 f3       	brcs	.-62     	; 0x2ee4 <_Z9key_inputv+0x62>
		{
			LED_PORT.OUTTGL = LED_USR_1_PIN_bm; _delay_ms(100);
		}
		xboot_reset();
    2f22:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <xboot_reset>
	}

	if(input_char == 'D')	//Debug Mode
    2f26:	84 34       	cpi	r24, 0x44	; 68
    2f28:	59 f4       	brne	.+22     	; 0x2f40 <_Z9key_inputv+0xbe>
	{
		speedup_on = false;
    2f2a:	10 92 a5 2a 	sts	0x2AA5, r1
		communication_on = false;
    2f2e:	10 92 ab 2a 	sts	0x2AAB, r1
		send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, "D");
    2f32:	81 e0       	ldi	r24, 0x01	; 1
    2f34:	6f e3       	ldi	r22, 0x3F	; 63
    2f36:	44 e1       	ldi	r20, 0x14	; 20
    2f38:	50 e0       	ldi	r21, 0x00	; 0
    2f3a:	2b e0       	ldi	r18, 0x0B	; 11
    2f3c:	30 e2       	ldi	r19, 0x20	; 32
    2f3e:	0c c0       	rjmp	.+24     	; 0x2f58 <_Z9key_inputv+0xd6>
	}

	if(input_char == 'R')	//Run Mode
    2f40:	82 35       	cpi	r24, 0x52	; 82
    2f42:	69 f4       	brne	.+26     	; 0x2f5e <_Z9key_inputv+0xdc>
	{
		speedup_on = true;
    2f44:	81 e0       	ldi	r24, 0x01	; 1
    2f46:	80 93 a5 2a 	sts	0x2AA5, r24
		communication_on = true;
    2f4a:	80 93 ab 2a 	sts	0x2AAB, r24
		send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, "R");
    2f4e:	6f e3       	ldi	r22, 0x3F	; 63
    2f50:	44 e1       	ldi	r20, 0x14	; 20
    2f52:	50 e0       	ldi	r21, 0x00	; 0
    2f54:	2d e0       	ldi	r18, 0x0D	; 13
    2f56:	30 e2       	ldi	r19, 0x20	; 32
    2f58:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <_Z12send_messagehhiPKc>
    2f5c:	08 95       	ret
	}

	if(input_char == 'v')
    2f5e:	86 37       	cpi	r24, 0x76	; 118
    2f60:	21 f5       	brne	.+72     	; 0x2faa <_Z9key_inputv+0x128>
		fprintf_P(&usart_stream, PSTR("build number = %ld\r\n"), (unsigned long) &__BUILD_NUMBER);
    2f62:	ad b7       	in	r26, 0x3d	; 61
    2f64:	be b7       	in	r27, 0x3e	; 62
    2f66:	18 97       	sbiw	r26, 0x08	; 8
    2f68:	ad bf       	out	0x3d, r26	; 61
    2f6a:	be bf       	out	0x3e, r27	; 62
    2f6c:	ed b7       	in	r30, 0x3d	; 61
    2f6e:	fe b7       	in	r31, 0x3e	; 62
    2f70:	31 96       	adiw	r30, 0x01	; 1
    2f72:	81 ef       	ldi	r24, 0xF1	; 241
    2f74:	99 e2       	ldi	r25, 0x29	; 41
    2f76:	11 96       	adiw	r26, 0x01	; 1
    2f78:	8d 93       	st	X+, r24
    2f7a:	9c 93       	st	X, r25
    2f7c:	12 97       	sbiw	r26, 0x02	; 2
    2f7e:	8e e2       	ldi	r24, 0x2E	; 46
    2f80:	92 e0       	ldi	r25, 0x02	; 2
    2f82:	82 83       	std	Z+2, r24	; 0x02
    2f84:	93 83       	std	Z+3, r25	; 0x03
    2f86:	83 eb       	ldi	r24, 0xB3	; 179
    2f88:	94 e0       	ldi	r25, 0x04	; 4
    2f8a:	aa 27       	eor	r26, r26
    2f8c:	97 fd       	sbrc	r25, 7
    2f8e:	a0 95       	com	r26
    2f90:	ba 2f       	mov	r27, r26
    2f92:	84 83       	std	Z+4, r24	; 0x04
    2f94:	95 83       	std	Z+5, r25	; 0x05
    2f96:	a6 83       	std	Z+6, r26	; 0x06
    2f98:	b7 83       	std	Z+7, r27	; 0x07
    2f9a:	0e 94 cd 32 	call	0x659a	; 0x659a <fprintf_P>
    2f9e:	8d b7       	in	r24, 0x3d	; 61
    2fa0:	9e b7       	in	r25, 0x3e	; 62
    2fa2:	08 96       	adiw	r24, 0x08	; 8
    2fa4:	8d bf       	out	0x3d, r24	; 61
    2fa6:	9e bf       	out	0x3e, r25	; 62
    2fa8:	08 95       	ret

	if(input_char == 'd')
    2faa:	84 36       	cpi	r24, 0x64	; 100
    2fac:	59 f4       	brne	.+22     	; 0x2fc4 <_Z9key_inputv+0x142>
	{
		if(display) display = false;
    2fae:	80 91 a9 2a 	lds	r24, 0x2AA9
    2fb2:	88 23       	and	r24, r24
    2fb4:	19 f0       	breq	.+6      	; 0x2fbc <_Z9key_inputv+0x13a>
    2fb6:	10 92 a9 2a 	sts	0x2AA9, r1
    2fba:	08 95       	ret
		else		display = true;
    2fbc:	81 e0       	ldi	r24, 0x01	; 1
    2fbe:	80 93 a9 2a 	sts	0x2AA9, r24
    2fc2:	08 95       	ret
	}

	if(input_char == 'I')	//initialization
    2fc4:	89 34       	cpi	r24, 0x49	; 73
    2fc6:	39 f4       	brne	.+14     	; 0x2fd6 <_Z9key_inputv+0x154>
	{
		send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, "I");	
    2fc8:	81 e0       	ldi	r24, 0x01	; 1
    2fca:	6f e3       	ldi	r22, 0x3F	; 63
    2fcc:	44 e1       	ldi	r20, 0x14	; 20
    2fce:	50 e0       	ldi	r21, 0x00	; 0
    2fd0:	2f e0       	ldi	r18, 0x0F	; 15
    2fd2:	30 e2       	ldi	r19, 0x20	; 32
    2fd4:	20 c0       	rjmp	.+64     	; 0x3016 <_Z9key_inputv+0x194>
		init_variables();
		sec_counter = 0;
	}

	if(input_char == 'i')	//reset variables
    2fd6:	89 36       	cpi	r24, 0x69	; 105
    2fd8:	59 f4       	brne	.+22     	; 0x2ff0 <_Z9key_inputv+0x16e>
	{
		send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, "i");	
    2fda:	81 e0       	ldi	r24, 0x01	; 1
    2fdc:	6f e3       	ldi	r22, 0x3F	; 63
    2fde:	44 e1       	ldi	r20, 0x14	; 20
    2fe0:	50 e0       	ldi	r21, 0x00	; 0
    2fe2:	27 e0       	ldi	r18, 0x07	; 7
    2fe4:	30 e2       	ldi	r19, 0x20	; 32
    2fe6:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <_Z12send_messagehhiPKc>
		init_variables();
    2fea:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <_Z14init_variablesv>
    2fee:	08 95       	ret
	}

	if(input_char == 'r')	//set sec_counter as 0
    2ff0:	82 37       	cpi	r24, 0x72	; 114
    2ff2:	49 f4       	brne	.+18     	; 0x3006 <_Z9key_inputv+0x184>
	{
		send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, "r");	
    2ff4:	81 e0       	ldi	r24, 0x01	; 1
    2ff6:	6f e3       	ldi	r22, 0x3F	; 63
    2ff8:	44 e1       	ldi	r20, 0x14	; 20
    2ffa:	50 e0       	ldi	r21, 0x00	; 0
    2ffc:	21 e1       	ldi	r18, 0x11	; 17
    2ffe:	30 e2       	ldi	r19, 0x20	; 32
    3000:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <_Z12send_messagehhiPKc>
    3004:	0c c0       	rjmp	.+24     	; 0x301e <_Z9key_inputv+0x19c>
		sec_counter = 0;
	}

	if(input_char == '1')
    3006:	81 33       	cpi	r24, 0x31	; 49
    3008:	79 f4       	brne	.+30     	; 0x3028 <_Z9key_inputv+0x1a6>
	{
		send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, "1");	
    300a:	81 e0       	ldi	r24, 0x01	; 1
    300c:	6f e3       	ldi	r22, 0x3F	; 63
    300e:	44 e1       	ldi	r20, 0x14	; 20
    3010:	50 e0       	ldi	r21, 0x00	; 0
    3012:	23 e1       	ldi	r18, 0x13	; 19
    3014:	30 e2       	ldi	r19, 0x20	; 32
    3016:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <_Z12send_messagehhiPKc>
		init_variables();
    301a:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <_Z14init_variablesv>
		sec_counter = STGtime1;
    301e:	10 92 b4 2a 	sts	0x2AB4, r1
    3022:	10 92 b5 2a 	sts	0x2AB5, r1
    3026:	08 95       	ret
	}

	if(input_char == '2')
    3028:	82 33       	cpi	r24, 0x32	; 50
    302a:	69 f4       	brne	.+26     	; 0x3046 <_Z9key_inputv+0x1c4>
	{
		send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, "2");	
    302c:	81 e0       	ldi	r24, 0x01	; 1
    302e:	6f e3       	ldi	r22, 0x3F	; 63
    3030:	44 e1       	ldi	r20, 0x14	; 20
    3032:	50 e0       	ldi	r21, 0x00	; 0
    3034:	25 e1       	ldi	r18, 0x15	; 21
    3036:	30 e2       	ldi	r19, 0x20	; 32
    3038:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <_Z12send_messagehhiPKc>
		init_variables();
    303c:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <_Z14init_variablesv>
		sec_counter = STGtime2;
    3040:	86 e9       	ldi	r24, 0x96	; 150
    3042:	90 e0       	ldi	r25, 0x00	; 0
    3044:	68 c0       	rjmp	.+208    	; 0x3116 <_Z9key_inputv+0x294>
	}

	if(input_char == '3')
    3046:	83 33       	cpi	r24, 0x33	; 51
    3048:	69 f4       	brne	.+26     	; 0x3064 <_Z9key_inputv+0x1e2>
	{
		send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, "3");	
    304a:	81 e0       	ldi	r24, 0x01	; 1
    304c:	6f e3       	ldi	r22, 0x3F	; 63
    304e:	44 e1       	ldi	r20, 0x14	; 20
    3050:	50 e0       	ldi	r21, 0x00	; 0
    3052:	27 e1       	ldi	r18, 0x17	; 23
    3054:	30 e2       	ldi	r19, 0x20	; 32
    3056:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <_Z12send_messagehhiPKc>
		init_variables();
    305a:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <_Z14init_variablesv>
		sec_counter = STGtime3;
    305e:	82 ed       	ldi	r24, 0xD2	; 210
    3060:	90 e0       	ldi	r25, 0x00	; 0
    3062:	59 c0       	rjmp	.+178    	; 0x3116 <_Z9key_inputv+0x294>
	}

	if(input_char == '4')	//initialization
    3064:	84 33       	cpi	r24, 0x34	; 52
    3066:	69 f4       	brne	.+26     	; 0x3082 <_Z9key_inputv+0x200>
	{
		send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, "4");	
    3068:	81 e0       	ldi	r24, 0x01	; 1
    306a:	6f e3       	ldi	r22, 0x3F	; 63
    306c:	44 e1       	ldi	r20, 0x14	; 20
    306e:	50 e0       	ldi	r21, 0x00	; 0
    3070:	29 e1       	ldi	r18, 0x19	; 25
    3072:	30 e2       	ldi	r19, 0x20	; 32
    3074:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <_Z12send_messagehhiPKc>
		init_variables();
    3078:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <_Z14init_variablesv>
		sec_counter = STGtime4;
    307c:	8e e0       	ldi	r24, 0x0E	; 14
    307e:	91 e0       	ldi	r25, 0x01	; 1
    3080:	4a c0       	rjmp	.+148    	; 0x3116 <_Z9key_inputv+0x294>
	}

	if(input_char == '5')	//initialization
    3082:	85 33       	cpi	r24, 0x35	; 53
    3084:	69 f4       	brne	.+26     	; 0x30a0 <_Z9key_inputv+0x21e>
	{
		send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, "5");	
    3086:	81 e0       	ldi	r24, 0x01	; 1
    3088:	6f e3       	ldi	r22, 0x3F	; 63
    308a:	44 e1       	ldi	r20, 0x14	; 20
    308c:	50 e0       	ldi	r21, 0x00	; 0
    308e:	2b e1       	ldi	r18, 0x1B	; 27
    3090:	30 e2       	ldi	r19, 0x20	; 32
    3092:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <_Z12send_messagehhiPKc>
		init_variables();
    3096:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <_Z14init_variablesv>
		sec_counter = STGtime5;
    309a:	8c e2       	ldi	r24, 0x2C	; 44
    309c:	91 e0       	ldi	r25, 0x01	; 1
    309e:	3b c0       	rjmp	.+118    	; 0x3116 <_Z9key_inputv+0x294>
	}

	if(input_char == '6')	//initialization
    30a0:	86 33       	cpi	r24, 0x36	; 54
    30a2:	69 f4       	brne	.+26     	; 0x30be <_Z9key_inputv+0x23c>
	{
		send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, "6");	
    30a4:	81 e0       	ldi	r24, 0x01	; 1
    30a6:	6f e3       	ldi	r22, 0x3F	; 63
    30a8:	44 e1       	ldi	r20, 0x14	; 20
    30aa:	50 e0       	ldi	r21, 0x00	; 0
    30ac:	2d e1       	ldi	r18, 0x1D	; 29
    30ae:	30 e2       	ldi	r19, 0x20	; 32
    30b0:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <_Z12send_messagehhiPKc>
		init_variables();
    30b4:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <_Z14init_variablesv>
		sec_counter = STGtime6;
    30b8:	88 e6       	ldi	r24, 0x68	; 104
    30ba:	91 e0       	ldi	r25, 0x01	; 1
    30bc:	2c c0       	rjmp	.+88     	; 0x3116 <_Z9key_inputv+0x294>
	}

	if(input_char == '7')	//initialization
    30be:	87 33       	cpi	r24, 0x37	; 55
    30c0:	69 f4       	brne	.+26     	; 0x30dc <_Z9key_inputv+0x25a>
	{
		send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, "7");	
    30c2:	81 e0       	ldi	r24, 0x01	; 1
    30c4:	6f e3       	ldi	r22, 0x3F	; 63
    30c6:	44 e1       	ldi	r20, 0x14	; 20
    30c8:	50 e0       	ldi	r21, 0x00	; 0
    30ca:	2f e1       	ldi	r18, 0x1F	; 31
    30cc:	30 e2       	ldi	r19, 0x20	; 32
    30ce:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <_Z12send_messagehhiPKc>
		init_variables();
    30d2:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <_Z14init_variablesv>
		sec_counter = STGtime7;
    30d6:	84 ea       	ldi	r24, 0xA4	; 164
    30d8:	91 e0       	ldi	r25, 0x01	; 1
    30da:	1d c0       	rjmp	.+58     	; 0x3116 <_Z9key_inputv+0x294>
	}

	if(input_char == '8')	//initialization
    30dc:	88 33       	cpi	r24, 0x38	; 56
    30de:	69 f4       	brne	.+26     	; 0x30fa <_Z9key_inputv+0x278>
	{
		send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, "8");	
    30e0:	81 e0       	ldi	r24, 0x01	; 1
    30e2:	6f e3       	ldi	r22, 0x3F	; 63
    30e4:	44 e1       	ldi	r20, 0x14	; 20
    30e6:	50 e0       	ldi	r21, 0x00	; 0
    30e8:	21 e2       	ldi	r18, 0x21	; 33
    30ea:	30 e2       	ldi	r19, 0x20	; 32
    30ec:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <_Z12send_messagehhiPKc>
		init_variables();
    30f0:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <_Z14init_variablesv>
		sec_counter = STGtime8;
    30f4:	80 ee       	ldi	r24, 0xE0	; 224
    30f6:	91 e0       	ldi	r25, 0x01	; 1
    30f8:	0e c0       	rjmp	.+28     	; 0x3116 <_Z9key_inputv+0x294>
	}

	if(input_char == '9')	//initialization
    30fa:	89 33       	cpi	r24, 0x39	; 57
    30fc:	89 f4       	brne	.+34     	; 0x3120 <_Z9key_inputv+0x29e>
	{
		send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, "9");	
    30fe:	81 e0       	ldi	r24, 0x01	; 1
    3100:	6f e3       	ldi	r22, 0x3F	; 63
    3102:	44 e1       	ldi	r20, 0x14	; 20
    3104:	50 e0       	ldi	r21, 0x00	; 0
    3106:	23 e2       	ldi	r18, 0x23	; 35
    3108:	30 e2       	ldi	r19, 0x20	; 32
    310a:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <_Z12send_messagehhiPKc>
		init_variables();
    310e:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <_Z14init_variablesv>
		sec_counter = STGtime9;
    3112:	8a e3       	ldi	r24, 0x3A	; 58
    3114:	92 e0       	ldi	r25, 0x02	; 2
    3116:	80 93 b4 2a 	sts	0x2AB4, r24
    311a:	90 93 b5 2a 	sts	0x2AB5, r25
    311e:	08 95       	ret
	}

	if(input_char == '0')	//initialization
    3120:	80 33       	cpi	r24, 0x30	; 48
    3122:	81 f4       	brne	.+32     	; 0x3144 <_Z9key_inputv+0x2c2>
	{
		send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, "0");	
    3124:	81 e0       	ldi	r24, 0x01	; 1
    3126:	6f e3       	ldi	r22, 0x3F	; 63
    3128:	44 e1       	ldi	r20, 0x14	; 20
    312a:	50 e0       	ldi	r21, 0x00	; 0
    312c:	25 e2       	ldi	r18, 0x25	; 37
    312e:	30 e2       	ldi	r19, 0x20	; 32
    3130:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <_Z12send_messagehhiPKc>
		init_variables();
    3134:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <_Z14init_variablesv>
		sec_counter = LASTtime;
    3138:	86 e7       	ldi	r24, 0x76	; 118
    313a:	92 e0       	ldi	r25, 0x02	; 2
    313c:	80 93 b4 2a 	sts	0x2AB4, r24
    3140:	90 93 b5 2a 	sts	0x2AB5, r25
    3144:	08 95       	ret

00003146 <__vector_14>:

// ============================================================================================
// Timer tick ISR (1 kHz)
// ============================================================================================
ISR(TCC0_OVF_vect)
{
    3146:	1f 92       	push	r1
    3148:	0f 92       	push	r0
    314a:	0f b6       	in	r0, 0x3f	; 63
    314c:	0f 92       	push	r0
    314e:	0b b6       	in	r0, 0x3b	; 59
    3150:	0f 92       	push	r0
    3152:	11 24       	eor	r1, r1
    3154:	2f 93       	push	r18
    3156:	3f 93       	push	r19
    3158:	4f 93       	push	r20
    315a:	5f 93       	push	r21
    315c:	6f 93       	push	r22
    315e:	7f 93       	push	r23
    3160:	8f 93       	push	r24
    3162:	9f 93       	push	r25
    3164:	af 93       	push	r26
    3166:	bf 93       	push	r27
    3168:	ef 93       	push	r30
    316a:	ff 93       	push	r31
	jiffies++;	// Timers
    316c:	80 91 d1 2a 	lds	r24, 0x2AD1
    3170:	90 91 d2 2a 	lds	r25, 0x2AD2
    3174:	a0 91 d3 2a 	lds	r26, 0x2AD3
    3178:	b0 91 d4 2a 	lds	r27, 0x2AD4
    317c:	01 96       	adiw	r24, 0x01	; 1
    317e:	a1 1d       	adc	r26, r1
    3180:	b1 1d       	adc	r27, r1
    3182:	80 93 d1 2a 	sts	0x2AD1, r24
    3186:	90 93 d2 2a 	sts	0x2AD2, r25
    318a:	a0 93 d3 2a 	sts	0x2AD3, r26
    318e:	b0 93 d4 2a 	sts	0x2AD4, r27

	if(jiffies%100 == 0)
    3192:	60 91 d1 2a 	lds	r22, 0x2AD1
    3196:	70 91 d2 2a 	lds	r23, 0x2AD2
    319a:	80 91 d3 2a 	lds	r24, 0x2AD3
    319e:	90 91 d4 2a 	lds	r25, 0x2AD4
    31a2:	24 e6       	ldi	r18, 0x64	; 100
    31a4:	30 e0       	ldi	r19, 0x00	; 0
    31a6:	40 e0       	ldi	r20, 0x00	; 0
    31a8:	50 e0       	ldi	r21, 0x00	; 0
    31aa:	0e 94 a7 32 	call	0x654e	; 0x654e <__udivmodsi4>
    31ae:	dc 01       	movw	r26, r24
    31b0:	cb 01       	movw	r24, r22
    31b2:	00 97       	sbiw	r24, 0x00	; 0
    31b4:	a1 05       	cpc	r26, r1
    31b6:	b1 05       	cpc	r27, r1
    31b8:	29 f4       	brne	.+10     	; 0x31c4 <__vector_14+0x7e>
	{
		servo_motor_on   = true;
    31ba:	81 e0       	ldi	r24, 0x01	; 1
    31bc:	80 93 a6 2a 	sts	0x2AA6, r24
		sendmessage_fast = true;	
    31c0:	80 93 aa 2a 	sts	0x2AAA, r24
	}

	if(jiffies%200 == 0)
    31c4:	60 91 d1 2a 	lds	r22, 0x2AD1
    31c8:	70 91 d2 2a 	lds	r23, 0x2AD2
    31cc:	80 91 d3 2a 	lds	r24, 0x2AD3
    31d0:	90 91 d4 2a 	lds	r25, 0x2AD4
    31d4:	28 ec       	ldi	r18, 0xC8	; 200
    31d6:	30 e0       	ldi	r19, 0x00	; 0
    31d8:	40 e0       	ldi	r20, 0x00	; 0
    31da:	50 e0       	ldi	r21, 0x00	; 0
    31dc:	0e 94 a7 32 	call	0x654e	; 0x654e <__udivmodsi4>
    31e0:	dc 01       	movw	r26, r24
    31e2:	cb 01       	movw	r24, r22
    31e4:	00 97       	sbiw	r24, 0x00	; 0
    31e6:	a1 05       	cpc	r26, r1
    31e8:	b1 05       	cpc	r27, r1
    31ea:	09 f0       	breq	.+2      	; 0x31ee <__vector_14+0xa8>
    31ec:	a3 c0       	rjmp	.+326    	; 0x3334 <__vector_14+0x1ee>
	{
		use_sensor_data_on = true;
    31ee:	81 e0       	ldi	r24, 0x01	; 1
    31f0:	80 93 a4 2a 	sts	0x2AA4, r24
		cnt4sensor++;
    31f4:	80 91 c9 2a 	lds	r24, 0x2AC9
    31f8:	90 91 ca 2a 	lds	r25, 0x2ACA
    31fc:	a0 91 cb 2a 	lds	r26, 0x2ACB
    3200:	b0 91 cc 2a 	lds	r27, 0x2ACC
    3204:	01 96       	adiw	r24, 0x01	; 1
    3206:	a1 1d       	adc	r26, r1
    3208:	b1 1d       	adc	r27, r1
    320a:	80 93 c9 2a 	sts	0x2AC9, r24
    320e:	90 93 ca 2a 	sts	0x2ACA, r25
    3212:	a0 93 cb 2a 	sts	0x2ACB, r26
    3216:	b0 93 cc 2a 	sts	0x2ACC, r27
		
		if(sonar_attached)
    321a:	80 91 c2 2a 	lds	r24, 0x2AC2
    321e:	88 23       	and	r24, r24
    3220:	09 f4       	brne	.+2      	; 0x3224 <__vector_14+0xde>
    3222:	85 c0       	rjmp	.+266    	; 0x332e <__vector_14+0x1e8>
		{
			sensor_value = get_sonar_value();
    3224:	0e 94 2c 05 	call	0xa58	; 0xa58 <_Z15get_sonar_valuev>
    3228:	80 93 c0 2a 	sts	0x2AC0, r24
    322c:	90 93 c1 2a 	sts	0x2AC1, r25
			
			if(sensor_value != 0 && sensor_value < RANGE3)
    3230:	9c 01       	movw	r18, r24
    3232:	21 50       	subi	r18, 0x01	; 1
    3234:	30 40       	sbci	r19, 0x00	; 0
    3236:	29 3f       	cpi	r18, 0xF9	; 249
    3238:	31 05       	cpc	r19, r1
    323a:	08 f5       	brcc	.+66     	; 0x327e <__vector_14+0x138>
			{
				sensor_value_now = sensor_value;
    323c:	80 93 be 2a 	sts	0x2ABE, r24
    3240:	90 93 bf 2a 	sts	0x2ABF, r25
				if(dblchk) sum_dbl += sensor_value_now;
    3244:	20 91 5f 20 	lds	r18, 0x205F
    3248:	22 23       	and	r18, r18
    324a:	51 f0       	breq	.+20     	; 0x3260 <__vector_14+0x11a>
    324c:	20 91 b8 2a 	lds	r18, 0x2AB8
    3250:	30 91 b9 2a 	lds	r19, 0x2AB9
    3254:	28 0f       	add	r18, r24
    3256:	39 1f       	adc	r19, r25
    3258:	20 93 b8 2a 	sts	0x2AB8, r18
    325c:	30 93 b9 2a 	sts	0x2AB9, r19
				if(trichk) sum_tri += sensor_value_now;
    3260:	20 91 5e 20 	lds	r18, 0x205E
    3264:	22 23       	and	r18, r18
    3266:	79 f0       	breq	.+30     	; 0x3286 <__vector_14+0x140>
    3268:	20 91 b6 2a 	lds	r18, 0x2AB6
    326c:	30 91 b7 2a 	lds	r19, 0x2AB7
    3270:	28 0f       	add	r18, r24
    3272:	39 1f       	adc	r19, r25
    3274:	20 93 b6 2a 	sts	0x2AB6, r18
    3278:	30 93 b7 2a 	sts	0x2AB7, r19
    327c:	04 c0       	rjmp	.+8      	; 0x3286 <__vector_14+0x140>
			}
			else {dblchk = false; trichk = false;}
    327e:	10 92 5f 20 	sts	0x205F, r1
    3282:	10 92 5e 20 	sts	0x205E, r1

			if(cnt4sensor%2 == 0)
    3286:	80 91 c9 2a 	lds	r24, 0x2AC9
    328a:	90 91 ca 2a 	lds	r25, 0x2ACA
    328e:	a0 91 cb 2a 	lds	r26, 0x2ACB
    3292:	b0 91 cc 2a 	lds	r27, 0x2ACC
    3296:	80 fd       	sbrc	r24, 0
    3298:	1a c0       	rjmp	.+52     	; 0x32ce <__vector_14+0x188>
			{ 
				if(dblchk) 	sensor_value_dblchk = sum_dbl / 2;
    329a:	80 91 5f 20 	lds	r24, 0x205F
    329e:	88 23       	and	r24, r24
    32a0:	59 f0       	breq	.+22     	; 0x32b8 <__vector_14+0x172>
    32a2:	80 91 b8 2a 	lds	r24, 0x2AB8
    32a6:	90 91 b9 2a 	lds	r25, 0x2AB9
    32aa:	96 95       	lsr	r25
    32ac:	87 95       	ror	r24
    32ae:	80 93 bc 2a 	sts	0x2ABC, r24
    32b2:	90 93 bd 2a 	sts	0x2ABD, r25
    32b6:	04 c0       	rjmp	.+8      	; 0x32c0 <__vector_14+0x17a>
				else 		sensor_value_dblchk = 0;
    32b8:	10 92 bc 2a 	sts	0x2ABC, r1
    32bc:	10 92 bd 2a 	sts	0x2ABD, r1
				sum_dbl = 0;
    32c0:	10 92 b8 2a 	sts	0x2AB8, r1
    32c4:	10 92 b9 2a 	sts	0x2AB9, r1
				dblchk = true;
    32c8:	81 e0       	ldi	r24, 0x01	; 1
    32ca:	80 93 5f 20 	sts	0x205F, r24
			}
			
			if(cnt4sensor%3 == 0)
    32ce:	60 91 c9 2a 	lds	r22, 0x2AC9
    32d2:	70 91 ca 2a 	lds	r23, 0x2ACA
    32d6:	80 91 cb 2a 	lds	r24, 0x2ACB
    32da:	90 91 cc 2a 	lds	r25, 0x2ACC
    32de:	23 e0       	ldi	r18, 0x03	; 3
    32e0:	30 e0       	ldi	r19, 0x00	; 0
    32e2:	40 e0       	ldi	r20, 0x00	; 0
    32e4:	50 e0       	ldi	r21, 0x00	; 0
    32e6:	0e 94 a7 32 	call	0x654e	; 0x654e <__udivmodsi4>
    32ea:	dc 01       	movw	r26, r24
    32ec:	cb 01       	movw	r24, r22
    32ee:	00 97       	sbiw	r24, 0x00	; 0
    32f0:	a1 05       	cpc	r26, r1
    32f2:	b1 05       	cpc	r27, r1
    32f4:	e1 f4       	brne	.+56     	; 0x332e <__vector_14+0x1e8>
			{
				if(trichk) 	sensor_value_trichk = sum_tri / 3;
    32f6:	80 91 5e 20 	lds	r24, 0x205E
    32fa:	88 23       	and	r24, r24
    32fc:	69 f0       	breq	.+26     	; 0x3318 <__vector_14+0x1d2>
    32fe:	80 91 b6 2a 	lds	r24, 0x2AB6
    3302:	90 91 b7 2a 	lds	r25, 0x2AB7
    3306:	63 e0       	ldi	r22, 0x03	; 3
    3308:	70 e0       	ldi	r23, 0x00	; 0
    330a:	0e 94 93 32 	call	0x6526	; 0x6526 <__udivmodhi4>
    330e:	60 93 ba 2a 	sts	0x2ABA, r22
    3312:	70 93 bb 2a 	sts	0x2ABB, r23
    3316:	04 c0       	rjmp	.+8      	; 0x3320 <__vector_14+0x1da>
				else 		sensor_value_trichk = 0;
    3318:	10 92 ba 2a 	sts	0x2ABA, r1
    331c:	10 92 bb 2a 	sts	0x2ABB, r1
				sum_tri = 0;
    3320:	10 92 b6 2a 	sts	0x2AB6, r1
    3324:	10 92 b7 2a 	sts	0x2AB7, r1
				trichk = true;
    3328:	81 e0       	ldi	r24, 0x01	; 1
    332a:	80 93 5e 20 	sts	0x205E, r24
			}
		}
			
		display_on = true;
    332e:	81 e0       	ldi	r24, 0x01	; 1
    3330:	80 93 a8 2a 	sts	0x2AA8, r24

//LED_PORT.OUTTGL = LED_USR_1_PIN_bm;	
//LED_PORT.OUTTGL = LED_USR_2_PIN_bm;	
	}
	
	if(jiffies%1000 == 0)
    3334:	60 91 d1 2a 	lds	r22, 0x2AD1
    3338:	70 91 d2 2a 	lds	r23, 0x2AD2
    333c:	80 91 d3 2a 	lds	r24, 0x2AD3
    3340:	90 91 d4 2a 	lds	r25, 0x2AD4
    3344:	28 ee       	ldi	r18, 0xE8	; 232
    3346:	33 e0       	ldi	r19, 0x03	; 3
    3348:	40 e0       	ldi	r20, 0x00	; 0
    334a:	50 e0       	ldi	r21, 0x00	; 0
    334c:	0e 94 a7 32 	call	0x654e	; 0x654e <__udivmodsi4>
    3350:	dc 01       	movw	r26, r24
    3352:	cb 01       	movw	r24, r22
    3354:	00 97       	sbiw	r24, 0x00	; 0
    3356:	a1 05       	cpc	r26, r1
    3358:	b1 05       	cpc	r27, r1
    335a:	e9 f4       	brne	.+58     	; 0x3396 <__vector_14+0x250>
	{		
		if(communication_on) sec_counter++;
    335c:	20 91 ab 2a 	lds	r18, 0x2AAB
    3360:	22 23       	and	r18, r18
    3362:	49 f0       	breq	.+18     	; 0x3376 <__vector_14+0x230>
    3364:	80 91 b4 2a 	lds	r24, 0x2AB4
    3368:	90 91 b5 2a 	lds	r25, 0x2AB5
    336c:	01 96       	adiw	r24, 0x01	; 1
    336e:	80 93 b4 2a 	sts	0x2AB4, r24
    3372:	90 93 b5 2a 	sts	0x2AB5, r25
		sync = true;		//synchro bit should be set every 1 sec
    3376:	81 e0       	ldi	r24, 0x01	; 1
    3378:	80 93 5d 20 	sts	0x205D, r24
		rhythm_on = true;
    337c:	80 93 9e 2a 	sts	0x2A9E, r24
		sensor_value_now = 0;
    3380:	10 92 be 2a 	sts	0x2ABE, r1
    3384:	10 92 bf 2a 	sts	0x2ABF, r1

		if(!communication_on) LED_PORT.OUT =  LED_USR_0_PIN_bm;
    3388:	e0 e2       	ldi	r30, 0x20	; 32
    338a:	f6 e0       	ldi	r31, 0x06	; 6
    338c:	22 23       	and	r18, r18
    338e:	11 f4       	brne	.+4      	; 0x3394 <__vector_14+0x24e>
    3390:	84 83       	std	Z+4, r24	; 0x04
    3392:	01 c0       	rjmp	.+2      	; 0x3396 <__vector_14+0x250>
		if(communication_on)  LED_PORT.OUT = !LED_USR_0_PIN_bm;		
    3394:	14 82       	std	Z+4, r1	; 0x04
	}
	xgrid.process();
    3396:	8e ee       	ldi	r24, 0xEE	; 238
    3398:	90 e2       	ldi	r25, 0x20	; 32
    339a:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <_ZN5Xgrid7processEv>
}
    339e:	ff 91       	pop	r31
    33a0:	ef 91       	pop	r30
    33a2:	bf 91       	pop	r27
    33a4:	af 91       	pop	r26
    33a6:	9f 91       	pop	r25
    33a8:	8f 91       	pop	r24
    33aa:	7f 91       	pop	r23
    33ac:	6f 91       	pop	r22
    33ae:	5f 91       	pop	r21
    33b0:	4f 91       	pop	r20
    33b2:	3f 91       	pop	r19
    33b4:	2f 91       	pop	r18
    33b6:	0f 90       	pop	r0
    33b8:	0b be       	out	0x3b, r0	; 59
    33ba:	0f 90       	pop	r0
    33bc:	0f be       	out	0x3f, r0	; 63
    33be:	0f 90       	pop	r0
    33c0:	1f 90       	pop	r1
    33c2:	18 95       	reti

000033c4 <_Z9StageInitiPKc>:

void StageInit(int StageTime, const char str[])
{
    33c4:	9b 01       	movw	r18, r22
	if(sec_counter == StageTime && special)
    33c6:	40 91 b4 2a 	lds	r20, 0x2AB4
    33ca:	50 91 b5 2a 	lds	r21, 0x2AB5
    33ce:	48 17       	cp	r20, r24
    33d0:	59 07       	cpc	r21, r25
    33d2:	61 f4       	brne	.+24     	; 0x33ec <_Z9StageInitiPKc+0x28>
    33d4:	80 91 a3 2a 	lds	r24, 0x2AA3
    33d8:	88 23       	and	r24, r24
    33da:	41 f0       	breq	.+16     	; 0x33ec <_Z9StageInitiPKc+0x28>
	{
		send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, str);
    33dc:	81 e0       	ldi	r24, 0x01	; 1
    33de:	6f e3       	ldi	r22, 0x3F	; 63
    33e0:	44 e1       	ldi	r20, 0x14	; 20
    33e2:	50 e0       	ldi	r21, 0x00	; 0
    33e4:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <_Z12send_messagehhiPKc>
		init_variables();
    33e8:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <_Z14init_variablesv>
    33ec:	08 95       	ret

000033ee <main>:
// ============================================================================================
int main(void)
{
	float angle = 0;
	
	xgrid.rx_pkt = &rx_pkt;
    33ee:	87 e4       	ldi	r24, 0x47	; 71
    33f0:	96 e1       	ldi	r25, 0x16	; 22
    33f2:	80 93 f5 26 	sts	0x26F5, r24
    33f6:	90 93 f6 26 	sts	0x26F6, r25
    33fa:	8f ef       	ldi	r24, 0xFF	; 255
    33fc:	91 ee       	ldi	r25, 0xE1	; 225
    33fe:	a4 e0       	ldi	r26, 0x04	; 4
    3400:	81 50       	subi	r24, 0x01	; 1
    3402:	90 40       	sbci	r25, 0x00	; 0
    3404:	a0 40       	sbci	r26, 0x00	; 0
    3406:	e1 f7       	brne	.-8      	; 0x3400 <main+0x12>
    3408:	00 c0       	rjmp	.+0      	; 0x340a <main+0x1c>
    340a:	00 00       	nop

	_delay_ms(50);

	// ========== INITIALIZATION ==========
    init();				//for board
    340c:	0e 94 de 03 	call	0x7bc	; 0x7bc <_Z4initv>
	init_servo();		//for servo
    3410:	0e 94 8f 2c 	call	0x591e	; 0x591e <init_servo>
	init_variables();	//for program
    3414:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <_Z14init_variablesv>
	init_sonar();		//for sensor
    3418:	0e 94 21 05 	call	0xa42	; 0xa42 <_Z10init_sonarv>

	fprintf_P(&usart_stream, PSTR("START (build number : %ld)\r\n"), (unsigned long) &__BUILD_NUMBER);
    341c:	ad b7       	in	r26, 0x3d	; 61
    341e:	be b7       	in	r27, 0x3e	; 62
    3420:	18 97       	sbiw	r26, 0x08	; 8
    3422:	ad bf       	out	0x3d, r26	; 61
    3424:	be bf       	out	0x3e, r27	; 62
    3426:	ed b7       	in	r30, 0x3d	; 61
    3428:	fe b7       	in	r31, 0x3e	; 62
    342a:	31 96       	adiw	r30, 0x01	; 1
    342c:	81 ef       	ldi	r24, 0xF1	; 241
    342e:	99 e2       	ldi	r25, 0x29	; 41
    3430:	11 96       	adiw	r26, 0x01	; 1
    3432:	8d 93       	st	X+, r24
    3434:	9c 93       	st	X, r25
    3436:	12 97       	sbiw	r26, 0x02	; 2
    3438:	83 e4       	ldi	r24, 0x43	; 67
    343a:	92 e0       	ldi	r25, 0x02	; 2
    343c:	82 83       	std	Z+2, r24	; 0x02
    343e:	93 83       	std	Z+3, r25	; 0x03
    3440:	83 eb       	ldi	r24, 0xB3	; 179
    3442:	94 e0       	ldi	r25, 0x04	; 4
    3444:	aa 27       	eor	r26, r26
    3446:	97 fd       	sbrc	r25, 7
    3448:	a0 95       	com	r26
    344a:	ba 2f       	mov	r27, r26
    344c:	84 83       	std	Z+4, r24	; 0x04
    344e:	95 83       	std	Z+5, r25	; 0x05
    3450:	a6 83       	std	Z+6, r26	; 0x06
    3452:	b7 83       	std	Z+7, r27	; 0x07
    3454:	0e 94 cd 32 	call	0x659a	; 0x659a <fprintf_P>

	// ===== SONAR CHECK & Indicated by LED (attached/not = GREEN/RED) =====
	sonar_attached = check_sonar_attached();	//1:attached, 0:no
    3458:	ed b7       	in	r30, 0x3d	; 61
    345a:	fe b7       	in	r31, 0x3e	; 62
    345c:	38 96       	adiw	r30, 0x08	; 8
    345e:	ed bf       	out	0x3d, r30	; 61
    3460:	fe bf       	out	0x3e, r31	; 62
    3462:	0e 94 74 05 	call	0xae8	; 0xae8 <_Z20check_sonar_attachedv>
    3466:	80 93 c2 2a 	sts	0x2AC2, r24

	if(sonar_attached)	{LED_PORT.OUT = LED_USR_2_PIN_bm; _delay_ms(2000);}
    346a:	88 23       	and	r24, r24
    346c:	11 f0       	breq	.+4      	; 0x3472 <main+0x84>
    346e:	88 e0       	ldi	r24, 0x08	; 8
    3470:	01 c0       	rjmp	.+2      	; 0x3474 <main+0x86>
	else				{LED_PORT.OUT = LED_USR_0_PIN_bm; _delay_ms(2000);}
    3472:	81 e0       	ldi	r24, 0x01	; 1
    3474:	e0 e2       	ldi	r30, 0x20	; 32
    3476:	f6 e0       	ldi	r31, 0x06	; 6
    3478:	84 83       	std	Z+4, r24	; 0x04
    347a:	8f ef       	ldi	r24, 0xFF	; 255
    347c:	9f e4       	ldi	r25, 0x4F	; 79
    347e:	a3 ec       	ldi	r26, 0xC3	; 195
    3480:	81 50       	subi	r24, 0x01	; 1
    3482:	90 40       	sbci	r25, 0x00	; 0
    3484:	a0 40       	sbci	r26, 0x00	; 0
    3486:	e1 f7       	brne	.-8      	; 0x3480 <main+0x92>
    3488:	00 c0       	rjmp	.+0      	; 0x348a <main+0x9c>
    348a:	00 00       	nop

	// ===== Identification of Left Bottom Corner module =====
	// Special module is necessary 
	// 1) as a pace maker in "rhythm" mode,
	// 2) as a messanger of variable-reset signal 
	temp_time = jiffies + 2000;
    348c:	80 91 d1 2a 	lds	r24, 0x2AD1
    3490:	90 91 d2 2a 	lds	r25, 0x2AD2
    3494:	a0 91 d3 2a 	lds	r26, 0x2AD3
    3498:	b0 91 d4 2a 	lds	r27, 0x2AD4
    349c:	80 53       	subi	r24, 0x30	; 48
    349e:	98 4f       	sbci	r25, 0xF8	; 248
    34a0:	af 4f       	sbci	r26, 0xFF	; 255
    34a2:	bf 4f       	sbci	r27, 0xFF	; 255
    34a4:	80 93 cd 2a 	sts	0x2ACD, r24
    34a8:	90 93 ce 2a 	sts	0x2ACE, r25
    34ac:	a0 93 cf 2a 	sts	0x2ACF, r26
    34b0:	b0 93 d0 2a 	sts	0x2AD0, r27
	while(jiffies < temp_time)
    34b4:	0c c0       	rjmp	.+24     	; 0x34ce <main+0xe0>
	{
		// send dummy data
		if(sendmessage_fast)
    34b6:	22 23       	and	r18, r18
    34b8:	61 f0       	breq	.+24     	; 0x34d2 <main+0xe4>
		{
			send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, "@");
    34ba:	81 e0       	ldi	r24, 0x01	; 1
    34bc:	6f e3       	ldi	r22, 0x3F	; 63
    34be:	44 e1       	ldi	r20, 0x14	; 20
    34c0:	50 e0       	ldi	r21, 0x00	; 0
    34c2:	27 e2       	ldi	r18, 0x27	; 39
    34c4:	30 e2       	ldi	r19, 0x20	; 32
    34c6:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <_Z12send_messagehhiPKc>
			sendmessage_fast = false;
    34ca:	10 92 aa 2a 	sts	0x2AAA, r1
	// 2) as a messanger of variable-reset signal 
	temp_time = jiffies + 2000;
	while(jiffies < temp_time)
	{
		// send dummy data
		if(sendmessage_fast)
    34ce:	20 91 aa 2a 	lds	r18, 0x2AAA
	// ===== Identification of Left Bottom Corner module =====
	// Special module is necessary 
	// 1) as a pace maker in "rhythm" mode,
	// 2) as a messanger of variable-reset signal 
	temp_time = jiffies + 2000;
	while(jiffies < temp_time)
    34d2:	40 91 d1 2a 	lds	r20, 0x2AD1
    34d6:	50 91 d2 2a 	lds	r21, 0x2AD2
    34da:	60 91 d3 2a 	lds	r22, 0x2AD3
    34de:	70 91 d4 2a 	lds	r23, 0x2AD4
    34e2:	80 91 cd 2a 	lds	r24, 0x2ACD
    34e6:	90 91 ce 2a 	lds	r25, 0x2ACE
    34ea:	a0 91 cf 2a 	lds	r26, 0x2ACF
    34ee:	b0 91 d0 2a 	lds	r27, 0x2AD0
    34f2:	48 17       	cp	r20, r24
    34f4:	59 07       	cpc	r21, r25
    34f6:	6a 07       	cpc	r22, r26
    34f8:	7b 07       	cpc	r23, r27
    34fa:	e8 f2       	brcs	.-70     	; 0x34b6 <main+0xc8>
		{
			send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, "@");
			sendmessage_fast = false;
		}
	}
	if(!connected[0] && connected[2] && connected[3] && !connected[4]) special = true;
    34fc:	80 91 c3 2a 	lds	r24, 0x2AC3
    3500:	88 23       	and	r24, r24
    3502:	79 f4       	brne	.+30     	; 0x3522 <main+0x134>
    3504:	80 91 c5 2a 	lds	r24, 0x2AC5
    3508:	88 23       	and	r24, r24
    350a:	59 f0       	breq	.+22     	; 0x3522 <main+0x134>
    350c:	80 91 c6 2a 	lds	r24, 0x2AC6
    3510:	88 23       	and	r24, r24
    3512:	39 f0       	breq	.+14     	; 0x3522 <main+0x134>
    3514:	80 91 c7 2a 	lds	r24, 0x2AC7
    3518:	88 23       	and	r24, r24
    351a:	19 f4       	brne	.+6      	; 0x3522 <main+0x134>
    351c:	81 e0       	ldi	r24, 0x01	; 1
    351e:	80 93 a3 2a 	sts	0x2AA3, r24

// ============================================================================================
// MAIN FUNCTION
// ============================================================================================
int main(void)
{
    3522:	c0 e0       	ldi	r28, 0x00	; 0
    3524:	d0 e0       	ldi	r29, 0x00	; 0
    3526:	10 e0       	ldi	r17, 0x00	; 0
    3528:	00 e0       	ldi	r16, 0x00	; 0
    352a:	31 ef       	ldi	r19, 0xF1	; 241
    352c:	e3 2e       	mov	r14, r19
    352e:	39 e2       	ldi	r19, 0x29	; 41
    3530:	f3 2e       	mov	r15, r19
			else
			{
				if(sonar_attached)
				fprintf_P(&usart_stream, PSTR("sec cnt=%d SONAR=%d, dblchk=%d,trichk=%d\r\n"),sec_counter, sensor_value, sensor_value_dblchk, sensor_value_trichk);
				else
				fprintf_P(&usart_stream, PSTR("sec cnt=%d\r\n"),sec_counter);
    3532:	46 e9       	ldi	r20, 0x96	; 150
    3534:	c4 2e       	mov	r12, r20
    3536:	42 e0       	ldi	r20, 0x02	; 2
    3538:	d4 2e       	mov	r13, r20
		{
			if(!communication_on) fprintf_P(&usart_stream, PSTR("NO COMM.\r\n"));
			else
			{
				if(sonar_attached)
				fprintf_P(&usart_stream, PSTR("sec cnt=%d SONAR=%d, dblchk=%d,trichk=%d\r\n"),sec_counter, sensor_value, sensor_value_dblchk, sensor_value_trichk);
    353a:	5b e6       	ldi	r21, 0x6B	; 107
    353c:	a5 2e       	mov	r10, r21
    353e:	52 e0       	ldi	r21, 0x02	; 2
    3540:	b5 2e       	mov	r11, r21
		}

		// ==========  DISPLAY ==========
		if(display_on && display)
		{
			if(!communication_on) fprintf_P(&usart_stream, PSTR("NO COMM.\r\n"));
    3542:	60 e6       	ldi	r22, 0x60	; 96
    3544:	86 2e       	mov	r8, r22
    3546:	62 e0       	ldi	r22, 0x02	; 2
    3548:	96 2e       	mov	r9, r22
	// #################### MAIN LOOP ####################

	while (1)
	{
		// ========== REBOOT PROCESS ==========
		if(reboot_on)
    354a:	80 91 a7 2a 	lds	r24, 0x2AA7
    354e:	88 23       	and	r24, r24
    3550:	c1 f1       	breq	.+112    	; 0x35c2 <main+0x1d4>
		{
			temp_time = jiffies + 3000;
    3552:	80 91 d1 2a 	lds	r24, 0x2AD1
    3556:	90 91 d2 2a 	lds	r25, 0x2AD2
    355a:	a0 91 d3 2a 	lds	r26, 0x2AD3
    355e:	b0 91 d4 2a 	lds	r27, 0x2AD4
    3562:	88 54       	subi	r24, 0x48	; 72
    3564:	94 4f       	sbci	r25, 0xF4	; 244
    3566:	af 4f       	sbci	r26, 0xFF	; 255
    3568:	bf 4f       	sbci	r27, 0xFF	; 255
    356a:	80 93 cd 2a 	sts	0x2ACD, r24
    356e:	90 93 ce 2a 	sts	0x2ACE, r25
    3572:	a0 93 cf 2a 	sts	0x2ACF, r26
    3576:	b0 93 d0 2a 	sts	0x2AD0, r27
			while(jiffies < temp_time){LED_PORT.OUTTGL = LED_USR_1_PIN_bm; _delay_ms(100);}
    357a:	e0 e2       	ldi	r30, 0x20	; 32
    357c:	f6 e0       	ldi	r31, 0x06	; 6
    357e:	22 e0       	ldi	r18, 0x02	; 2
    3580:	0a c0       	rjmp	.+20     	; 0x3596 <main+0x1a8>
    3582:	27 83       	std	Z+7, r18	; 0x07
    3584:	8f ef       	ldi	r24, 0xFF	; 255
    3586:	93 ec       	ldi	r25, 0xC3	; 195
    3588:	a9 e0       	ldi	r26, 0x09	; 9
    358a:	81 50       	subi	r24, 0x01	; 1
    358c:	90 40       	sbci	r25, 0x00	; 0
    358e:	a0 40       	sbci	r26, 0x00	; 0
    3590:	e1 f7       	brne	.-8      	; 0x358a <main+0x19c>
    3592:	00 c0       	rjmp	.+0      	; 0x3594 <main+0x1a6>
    3594:	00 00       	nop
    3596:	40 91 d1 2a 	lds	r20, 0x2AD1
    359a:	50 91 d2 2a 	lds	r21, 0x2AD2
    359e:	60 91 d3 2a 	lds	r22, 0x2AD3
    35a2:	70 91 d4 2a 	lds	r23, 0x2AD4
    35a6:	80 91 cd 2a 	lds	r24, 0x2ACD
    35aa:	90 91 ce 2a 	lds	r25, 0x2ACE
    35ae:	a0 91 cf 2a 	lds	r26, 0x2ACF
    35b2:	b0 91 d0 2a 	lds	r27, 0x2AD0
    35b6:	48 17       	cp	r20, r24
    35b8:	59 07       	cpc	r21, r25
    35ba:	6a 07       	cpc	r22, r26
    35bc:	7b 07       	cpc	r23, r27
    35be:	08 f3       	brcs	.-62     	; 0x3582 <main+0x194>
    35c0:	4b c1       	rjmp	.+662    	; 0x3858 <main+0x46a>
			xboot_reset();	
		}
			
		// ========== KEY INPUT ==========
		key_input();
    35c2:	0e 94 41 17 	call	0x2e82	; 0x2e82 <_Z9key_inputv>

		// ========== CALCULATION ==========
		if(sonar_attached && !communication_on)
    35c6:	80 91 c2 2a 	lds	r24, 0x2AC2
    35ca:	88 23       	and	r24, r24
    35cc:	41 f1       	breq	.+80     	; 0x361e <main+0x230>
    35ce:	80 91 ab 2a 	lds	r24, 0x2AAB
    35d2:	88 23       	and	r24, r24
    35d4:	21 f5       	brne	.+72     	; 0x361e <main+0x230>
		{
			if(sensor_value_trichk > RANGE1 && sensor_value_trichk < RANGE3)
    35d6:	80 91 ba 2a 	lds	r24, 0x2ABA
    35da:	90 91 bb 2a 	lds	r25, 0x2ABB
    35de:	c3 97       	sbiw	r24, 0x33	; 51
    35e0:	87 3c       	cpi	r24, 0xC7	; 199
    35e2:	91 05       	cpc	r25, r1
    35e4:	e0 f4       	brcc	.+56     	; 0x361e <main+0x230>
			{
				send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, "R");
    35e6:	81 e0       	ldi	r24, 0x01	; 1
    35e8:	6f e3       	ldi	r22, 0x3F	; 63
    35ea:	44 e1       	ldi	r20, 0x14	; 20
    35ec:	50 e0       	ldi	r21, 0x00	; 0
    35ee:	2d e0       	ldi	r18, 0x0D	; 13
    35f0:	30 e2       	ldi	r19, 0x20	; 32
    35f2:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <_Z12send_messagehhiPKc>
    35f6:	8f ef       	ldi	r24, 0xFF	; 255
    35f8:	93 ec       	ldi	r25, 0xC3	; 195
    35fa:	a9 e0       	ldi	r26, 0x09	; 9
    35fc:	81 50       	subi	r24, 0x01	; 1
    35fe:	90 40       	sbci	r25, 0x00	; 0
    3600:	a0 40       	sbci	r26, 0x00	; 0
    3602:	e1 f7       	brne	.-8      	; 0x35fc <main+0x20e>
    3604:	00 c0       	rjmp	.+0      	; 0x3606 <main+0x218>
    3606:	00 00       	nop
				_delay_ms(100);
				send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, "1");
    3608:	81 e0       	ldi	r24, 0x01	; 1
    360a:	6f e3       	ldi	r22, 0x3F	; 63
    360c:	44 e1       	ldi	r20, 0x14	; 20
    360e:	50 e0       	ldi	r21, 0x00	; 0
    3610:	23 e1       	ldi	r18, 0x13	; 19
    3612:	30 e2       	ldi	r19, 0x20	; 32
    3614:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <_Z12send_messagehhiPKc>
				communication_on = true;
    3618:	81 e0       	ldi	r24, 0x01	; 1
    361a:	80 93 ab 2a 	sts	0x2AAB, r24
			}
		}

		if(communication_on)
    361e:	80 91 ab 2a 	lds	r24, 0x2AAB
    3622:	88 23       	and	r24, r24
    3624:	09 f4       	brne	.+2      	; 0x3628 <main+0x23a>
    3626:	2b c1       	rjmp	.+598    	; 0x387e <main+0x490>
		{
			// ========== SENSOR DATA ==========
			//SENSOR: works every 200 ms (See ISR() function)

			// ========== SELECT BEHAVIOR ==========
			if(sendmessage_fast)
    3628:	80 91 aa 2a 	lds	r24, 0x2AAA
    362c:	88 23       	and	r24, r24
    362e:	09 f4       	brne	.+2      	; 0x3632 <main+0x244>
    3630:	17 c1       	rjmp	.+558    	; 0x3860 <main+0x472>
			{
				// SCENARIO
				// === STAGE 1: Ken's model
				if(sec_counter < STGtime2) 
    3632:	80 91 b4 2a 	lds	r24, 0x2AB4
    3636:	90 91 b5 2a 	lds	r25, 0x2AB5
    363a:	86 39       	cpi	r24, 0x96	; 150
    363c:	91 05       	cpc	r25, r1
    363e:	6c f4       	brge	.+26     	; 0x365a <main+0x26c>
					angle = 90 * Sync_Disorder(STGtime2);
    3640:	86 e9       	ldi	r24, 0x96	; 150
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	0e 94 29 10 	call	0x2052	; 0x2052 <_Z13Sync_Disorderi>
    3648:	20 e0       	ldi	r18, 0x00	; 0
    364a:	30 e0       	ldi	r19, 0x00	; 0
    364c:	44 eb       	ldi	r20, 0xB4	; 180
    364e:	52 e4       	ldi	r21, 0x42	; 66
    3650:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    3654:	eb 01       	movw	r28, r22
    3656:	18 2f       	mov	r17, r24
    3658:	09 2f       	mov	r16, r25
//angle = 90 * rhythm_control3();

				// === STAGE 2: Rhythm 2 (Frequency Modulation)
				StageInit(STGtime2, "2");
    365a:	86 e9       	ldi	r24, 0x96	; 150
    365c:	90 e0       	ldi	r25, 0x00	; 0
    365e:	65 e1       	ldi	r22, 0x15	; 21
    3660:	70 e2       	ldi	r23, 0x20	; 32
    3662:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <_Z9StageInitiPKc>
				if(sec_counter > STGtime2 && sec_counter < STGtime3)
    3666:	80 91 b4 2a 	lds	r24, 0x2AB4
    366a:	90 91 b5 2a 	lds	r25, 0x2AB5
    366e:	87 59       	subi	r24, 0x97	; 151
    3670:	90 40       	sbci	r25, 0x00	; 0
    3672:	8b 33       	cpi	r24, 0x3B	; 59
    3674:	91 05       	cpc	r25, r1
    3676:	58 f4       	brcc	.+22     	; 0x368e <main+0x2a0>
					angle = 45 * rhythm_control2();
    3678:	0e 94 5d 14 	call	0x28ba	; 0x28ba <_Z15rhythm_control2v>
    367c:	20 e0       	ldi	r18, 0x00	; 0
    367e:	30 e0       	ldi	r19, 0x00	; 0
    3680:	44 e3       	ldi	r20, 0x34	; 52
    3682:	52 e4       	ldi	r21, 0x42	; 66
    3684:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    3688:	eb 01       	movw	r28, r22
    368a:	18 2f       	mov	r17, r24
    368c:	09 2f       	mov	r16, r25


				// === STAGE 3: Rhythm 1 (Amplitude Modulation)
				StageInit(STGtime3, "3");
    368e:	82 ed       	ldi	r24, 0xD2	; 210
    3690:	90 e0       	ldi	r25, 0x00	; 0
    3692:	67 e1       	ldi	r22, 0x17	; 23
    3694:	70 e2       	ldi	r23, 0x20	; 32
    3696:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <_Z9StageInitiPKc>
				if(sec_counter > STGtime3 && sec_counter < STGtime4)
    369a:	80 91 b4 2a 	lds	r24, 0x2AB4
    369e:	90 91 b5 2a 	lds	r25, 0x2AB5
    36a2:	83 5d       	subi	r24, 0xD3	; 211
    36a4:	90 40       	sbci	r25, 0x00	; 0
    36a6:	8b 33       	cpi	r24, 0x3B	; 59
    36a8:	91 05       	cpc	r25, r1
    36aa:	58 f4       	brcc	.+22     	; 0x36c2 <main+0x2d4>
					angle = 90 * rhythm_control1();
    36ac:	0e 94 9c 14 	call	0x2938	; 0x2938 <_Z15rhythm_control1v>
    36b0:	20 e0       	ldi	r18, 0x00	; 0
    36b2:	30 e0       	ldi	r19, 0x00	; 0
    36b4:	44 eb       	ldi	r20, 0xB4	; 180
    36b6:	52 e4       	ldi	r21, 0x42	; 66
    36b8:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    36bc:	eb 01       	movw	r28, r22
    36be:	18 2f       	mov	r17, r24
    36c0:	09 2f       	mov	r16, r25


				// === STAGE 4: Break
				StageInit(STGtime4, "4");
    36c2:	8e e0       	ldi	r24, 0x0E	; 14
    36c4:	91 e0       	ldi	r25, 0x01	; 1
    36c6:	69 e1       	ldi	r22, 0x19	; 25
    36c8:	70 e2       	ldi	r23, 0x20	; 32
    36ca:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <_Z9StageInitiPKc>
				if(sec_counter > STGtime4 && sec_counter < STGtime5)
    36ce:	80 91 b4 2a 	lds	r24, 0x2AB4
    36d2:	90 91 b5 2a 	lds	r25, 0x2AB5
    36d6:	8f 50       	subi	r24, 0x0F	; 15
    36d8:	91 40       	sbci	r25, 0x01	; 1
    36da:	8d 31       	cpi	r24, 0x1D	; 29
    36dc:	91 05       	cpc	r25, r1
    36de:	10 f4       	brcc	.+4      	; 0x36e4 <main+0x2f6>
					disable_servo();
    36e0:	0e 94 cf 2c 	call	0x599e	; 0x599e <disable_servo>


				// === STAGE 5: Ken's model
				StageInit(STGtime5, "5");
    36e4:	8c e2       	ldi	r24, 0x2C	; 44
    36e6:	91 e0       	ldi	r25, 0x01	; 1
    36e8:	6b e1       	ldi	r22, 0x1B	; 27
    36ea:	70 e2       	ldi	r23, 0x20	; 32
    36ec:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <_Z9StageInitiPKc>
				if(sec_counter > STGtime5 && sec_counter < STGtime6)
    36f0:	80 91 b4 2a 	lds	r24, 0x2AB4
    36f4:	90 91 b5 2a 	lds	r25, 0x2AB5
    36f8:	8d 52       	subi	r24, 0x2D	; 45
    36fa:	91 40       	sbci	r25, 0x01	; 1
    36fc:	8b 33       	cpi	r24, 0x3B	; 59
    36fe:	91 05       	cpc	r25, r1
    3700:	68 f4       	brcc	.+26     	; 0x371c <main+0x32e>
					angle = 75 * Sync_Disorder(STGtime6);
    3702:	88 e6       	ldi	r24, 0x68	; 104
    3704:	91 e0       	ldi	r25, 0x01	; 1
    3706:	0e 94 29 10 	call	0x2052	; 0x2052 <_Z13Sync_Disorderi>
    370a:	20 e0       	ldi	r18, 0x00	; 0
    370c:	30 e0       	ldi	r19, 0x00	; 0
    370e:	46 e9       	ldi	r20, 0x96	; 150
    3710:	52 e4       	ldi	r21, 0x42	; 66
    3712:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    3716:	eb 01       	movw	r28, r22
    3718:	18 2f       	mov	r17, r24
    371a:	09 2f       	mov	r16, r25


				// === STAGE 6: Column swing
				StageInit(STGtime6, "6");
    371c:	88 e6       	ldi	r24, 0x68	; 104
    371e:	91 e0       	ldi	r25, 0x01	; 1
    3720:	6d e1       	ldi	r22, 0x1D	; 29
    3722:	70 e2       	ldi	r23, 0x20	; 32
    3724:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <_Z9StageInitiPKc>
				if(sec_counter > STGtime6 && sec_counter < STGtime7)
    3728:	80 91 b4 2a 	lds	r24, 0x2AB4
    372c:	90 91 b5 2a 	lds	r25, 0x2AB5
    3730:	89 56       	subi	r24, 0x69	; 105
    3732:	91 40       	sbci	r25, 0x01	; 1
    3734:	8b 33       	cpi	r24, 0x3B	; 59
    3736:	91 05       	cpc	r25, r1
    3738:	58 f4       	brcc	.+22     	; 0x3750 <main+0x362>
					angle = 90 * column();
    373a:	0e 94 22 11 	call	0x2244	; 0x2244 <_Z6columnv>
    373e:	20 e0       	ldi	r18, 0x00	; 0
    3740:	30 e0       	ldi	r19, 0x00	; 0
    3742:	44 eb       	ldi	r20, 0xB4	; 180
    3744:	52 e4       	ldi	r21, 0x42	; 66
    3746:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    374a:	eb 01       	movw	r28, r22
    374c:	18 2f       	mov	r17, r24
    374e:	09 2f       	mov	r16, r25


				// === STAGE 7: Horizontal propagation
				StageInit(STGtime7, "7");
    3750:	84 ea       	ldi	r24, 0xA4	; 164
    3752:	91 e0       	ldi	r25, 0x01	; 1
    3754:	6f e1       	ldi	r22, 0x1F	; 31
    3756:	70 e2       	ldi	r23, 0x20	; 32
    3758:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <_Z9StageInitiPKc>
				if(sec_counter > STGtime7 && sec_counter < STGtime8)
    375c:	80 91 b4 2a 	lds	r24, 0x2AB4
    3760:	90 91 b5 2a 	lds	r25, 0x2AB5
    3764:	85 5a       	subi	r24, 0xA5	; 165
    3766:	91 40       	sbci	r25, 0x01	; 1
    3768:	8b 33       	cpi	r24, 0x3B	; 59
    376a:	91 05       	cpc	r25, r1
    376c:	58 f4       	brcc	.+22     	; 0x3784 <main+0x396>
					angle = 90 * plane_wave();
    376e:	0e 94 1c 12 	call	0x2438	; 0x2438 <_Z10plane_wavev>
    3772:	20 e0       	ldi	r18, 0x00	; 0
    3774:	30 e0       	ldi	r19, 0x00	; 0
    3776:	44 eb       	ldi	r20, 0xB4	; 180
    3778:	52 e4       	ldi	r21, 0x42	; 66
    377a:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    377e:	eb 01       	movw	r28, r22
    3780:	18 2f       	mov	r17, r24
    3782:	09 2f       	mov	r16, r25


				// === STAGE 8: Avalanche
				StageInit(STGtime8, "8");
    3784:	80 ee       	ldi	r24, 0xE0	; 224
    3786:	91 e0       	ldi	r25, 0x01	; 1
    3788:	61 e2       	ldi	r22, 0x21	; 33
    378a:	70 e2       	ldi	r23, 0x20	; 32
    378c:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <_Z9StageInitiPKc>
				if(sec_counter > STGtime8 && sec_counter < STGtime9)
    3790:	80 91 b4 2a 	lds	r24, 0x2AB4
    3794:	90 91 b5 2a 	lds	r25, 0x2AB5
    3798:	81 5e       	subi	r24, 0xE1	; 225
    379a:	91 40       	sbci	r25, 0x01	; 1
    379c:	89 35       	cpi	r24, 0x59	; 89
    379e:	91 05       	cpc	r25, r1
    37a0:	58 f4       	brcc	.+22     	; 0x37b8 <main+0x3ca>
					angle = 90 * avalanche();
    37a2:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <_Z9avalanchev>
    37a6:	20 e0       	ldi	r18, 0x00	; 0
    37a8:	30 e0       	ldi	r19, 0x00	; 0
    37aa:	44 eb       	ldi	r20, 0xB4	; 180
    37ac:	52 e4       	ldi	r21, 0x42	; 66
    37ae:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    37b2:	eb 01       	movw	r28, r22
    37b4:	18 2f       	mov	r17, r24
    37b6:	09 2f       	mov	r16, r25


				// === STAGE 8: Break
				StageInit(STGtime9, "9");
    37b8:	8a e3       	ldi	r24, 0x3A	; 58
    37ba:	92 e0       	ldi	r25, 0x02	; 2
    37bc:	63 e2       	ldi	r22, 0x23	; 35
    37be:	70 e2       	ldi	r23, 0x20	; 32
    37c0:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <_Z9StageInitiPKc>
				if(sec_counter > STGtime9 && sec_counter < LASTtime)
    37c4:	80 91 b4 2a 	lds	r24, 0x2AB4
    37c8:	90 91 b5 2a 	lds	r25, 0x2AB5
    37cc:	8b 53       	subi	r24, 0x3B	; 59
    37ce:	92 40       	sbci	r25, 0x02	; 2
    37d0:	8b 33       	cpi	r24, 0x3B	; 59
    37d2:	91 05       	cpc	r25, r1
    37d4:	10 f4       	brcc	.+4      	; 0x37da <main+0x3ec>
					disable_servo();
    37d6:	0e 94 cf 2c 	call	0x599e	; 0x599e <disable_servo>


				// === Waiting for next run
				StageInit(LASTtime, "0");
    37da:	86 e7       	ldi	r24, 0x76	; 118
    37dc:	92 e0       	ldi	r25, 0x02	; 2
    37de:	65 e2       	ldi	r22, 0x25	; 37
    37e0:	70 e2       	ldi	r23, 0x20	; 32
    37e2:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <_Z9StageInitiPKc>
				if(sec_counter > LASTtime)
    37e6:	80 91 b4 2a 	lds	r24, 0x2AB4
    37ea:	90 91 b5 2a 	lds	r25, 0x2AB5
    37ee:	a2 e0       	ldi	r26, 0x02	; 2
    37f0:	87 37       	cpi	r24, 0x77	; 119
    37f2:	9a 07       	cpc	r25, r26
    37f4:	9c f1       	brlt	.+102    	; 0x385c <main+0x46e>
				{
					send_message(MESSAGE_COMMAND, ALL_DIRECTION, ALL, "Z");
    37f6:	81 e0       	ldi	r24, 0x01	; 1
    37f8:	6f e3       	ldi	r22, 0x3F	; 63
    37fa:	44 e1       	ldi	r20, 0x14	; 20
    37fc:	50 e0       	ldi	r21, 0x00	; 0
    37fe:	29 e0       	ldi	r18, 0x09	; 9
    3800:	30 e2       	ldi	r19, 0x20	; 32
    3802:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <_Z12send_messagehhiPKc>
					temp_time = jiffies + 3000;
    3806:	80 91 d1 2a 	lds	r24, 0x2AD1
    380a:	90 91 d2 2a 	lds	r25, 0x2AD2
    380e:	a0 91 d3 2a 	lds	r26, 0x2AD3
    3812:	b0 91 d4 2a 	lds	r27, 0x2AD4
    3816:	88 54       	subi	r24, 0x48	; 72
    3818:	94 4f       	sbci	r25, 0xF4	; 244
    381a:	af 4f       	sbci	r26, 0xFF	; 255
    381c:	bf 4f       	sbci	r27, 0xFF	; 255
    381e:	80 93 cd 2a 	sts	0x2ACD, r24
    3822:	90 93 ce 2a 	sts	0x2ACE, r25
    3826:	a0 93 cf 2a 	sts	0x2ACF, r26
    382a:	b0 93 d0 2a 	sts	0x2AD0, r27
					while(jiffies < temp_time);
    382e:	40 91 d1 2a 	lds	r20, 0x2AD1
    3832:	50 91 d2 2a 	lds	r21, 0x2AD2
    3836:	60 91 d3 2a 	lds	r22, 0x2AD3
    383a:	70 91 d4 2a 	lds	r23, 0x2AD4
    383e:	80 91 cd 2a 	lds	r24, 0x2ACD
    3842:	90 91 ce 2a 	lds	r25, 0x2ACE
    3846:	a0 91 cf 2a 	lds	r26, 0x2ACF
    384a:	b0 91 d0 2a 	lds	r27, 0x2AD0
    384e:	48 17       	cp	r20, r24
    3850:	59 07       	cpc	r21, r25
    3852:	6a 07       	cpc	r22, r26
    3854:	7b 07       	cpc	r23, r27
    3856:	58 f3       	brcs	.-42     	; 0x382e <main+0x440>
					xboot_reset();
    3858:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <xboot_reset>
				}

				sendmessage_fast = false;
    385c:	10 92 aa 2a 	sts	0x2AAA, r1
			}
		
			// ========== SERVO MOTOR CONTROL ==========
			if(servo_motor_on)
    3860:	80 91 a6 2a 	lds	r24, 0x2AA6
    3864:	88 23       	and	r24, r24
    3866:	59 f0       	breq	.+22     	; 0x387e <main+0x490>
			{
				set_servo_position(angle);
    3868:	98 01       	movw	r18, r16
    386a:	8c 2f       	mov	r24, r28
    386c:	9d 2f       	mov	r25, r29
    386e:	a3 2f       	mov	r26, r19
    3870:	b0 2f       	mov	r27, r16
    3872:	bc 01       	movw	r22, r24
    3874:	cd 01       	movw	r24, r26
    3876:	0e 94 ed 2c 	call	0x59da	; 0x59da <set_servo_position>
				servo_motor_on = false;
    387a:	10 92 a6 2a 	sts	0x2AA6, r1
			}
		}

		// ==========  DISPLAY ==========
		if(display_on && display)
    387e:	80 91 a8 2a 	lds	r24, 0x2AA8
    3882:	88 23       	and	r24, r24
    3884:	09 f4       	brne	.+2      	; 0x3888 <main+0x49a>
    3886:	61 ce       	rjmp	.-830    	; 0x354a <main+0x15c>
    3888:	80 91 a9 2a 	lds	r24, 0x2AA9
    388c:	88 23       	and	r24, r24
    388e:	09 f4       	brne	.+2      	; 0x3892 <main+0x4a4>
    3890:	5c ce       	rjmp	.-840    	; 0x354a <main+0x15c>
		{
			if(!communication_on) fprintf_P(&usart_stream, PSTR("NO COMM.\r\n"));
    3892:	80 91 ab 2a 	lds	r24, 0x2AAB
    3896:	88 23       	and	r24, r24
    3898:	79 f4       	brne	.+30     	; 0x38b8 <main+0x4ca>
    389a:	00 d0       	rcall	.+0      	; 0x389c <main+0x4ae>
    389c:	0f 92       	push	r0
    389e:	ed b7       	in	r30, 0x3d	; 61
    38a0:	fe b7       	in	r31, 0x3e	; 62
    38a2:	e1 82       	std	Z+1, r14	; 0x01
    38a4:	f2 82       	std	Z+2, r15	; 0x02
    38a6:	83 82       	std	Z+3, r8	; 0x03
    38a8:	94 82       	std	Z+4, r9	; 0x04
    38aa:	0e 94 cd 32 	call	0x659a	; 0x659a <fprintf_P>
    38ae:	0f 90       	pop	r0
    38b0:	0f 90       	pop	r0
    38b2:	0f 90       	pop	r0
    38b4:	0f 90       	pop	r0
    38b6:	4c c0       	rjmp	.+152    	; 0x3950 <main+0x562>
			else
			{
				if(sonar_attached)
    38b8:	80 91 c2 2a 	lds	r24, 0x2AC2
    38bc:	88 23       	and	r24, r24
    38be:	71 f1       	breq	.+92     	; 0x391c <main+0x52e>
				fprintf_P(&usart_stream, PSTR("sec cnt=%d SONAR=%d, dblchk=%d,trichk=%d\r\n"),sec_counter, sensor_value, sensor_value_dblchk, sensor_value_trichk);
    38c0:	8d b7       	in	r24, 0x3d	; 61
    38c2:	9e b7       	in	r25, 0x3e	; 62
    38c4:	0c 97       	sbiw	r24, 0x0c	; 12
    38c6:	8d bf       	out	0x3d, r24	; 61
    38c8:	9e bf       	out	0x3e, r25	; 62
    38ca:	ed b7       	in	r30, 0x3d	; 61
    38cc:	fe b7       	in	r31, 0x3e	; 62
    38ce:	31 96       	adiw	r30, 0x01	; 1
    38d0:	ad b7       	in	r26, 0x3d	; 61
    38d2:	be b7       	in	r27, 0x3e	; 62
    38d4:	11 96       	adiw	r26, 0x01	; 1
    38d6:	ed 92       	st	X+, r14
    38d8:	fc 92       	st	X, r15
    38da:	12 97       	sbiw	r26, 0x02	; 2
    38dc:	a2 82       	std	Z+2, r10	; 0x02
    38de:	b3 82       	std	Z+3, r11	; 0x03
    38e0:	80 91 b4 2a 	lds	r24, 0x2AB4
    38e4:	90 91 b5 2a 	lds	r25, 0x2AB5
    38e8:	84 83       	std	Z+4, r24	; 0x04
    38ea:	95 83       	std	Z+5, r25	; 0x05
    38ec:	80 91 c0 2a 	lds	r24, 0x2AC0
    38f0:	90 91 c1 2a 	lds	r25, 0x2AC1
    38f4:	86 83       	std	Z+6, r24	; 0x06
    38f6:	97 83       	std	Z+7, r25	; 0x07
    38f8:	80 91 bc 2a 	lds	r24, 0x2ABC
    38fc:	90 91 bd 2a 	lds	r25, 0x2ABD
    3900:	80 87       	std	Z+8, r24	; 0x08
    3902:	91 87       	std	Z+9, r25	; 0x09
    3904:	80 91 ba 2a 	lds	r24, 0x2ABA
    3908:	90 91 bb 2a 	lds	r25, 0x2ABB
    390c:	82 87       	std	Z+10, r24	; 0x0a
    390e:	93 87       	std	Z+11, r25	; 0x0b
    3910:	0e 94 cd 32 	call	0x659a	; 0x659a <fprintf_P>
    3914:	ed b7       	in	r30, 0x3d	; 61
    3916:	fe b7       	in	r31, 0x3e	; 62
    3918:	3c 96       	adiw	r30, 0x0c	; 12
    391a:	18 c0       	rjmp	.+48     	; 0x394c <main+0x55e>
				else
				fprintf_P(&usart_stream, PSTR("sec cnt=%d\r\n"),sec_counter);
    391c:	00 d0       	rcall	.+0      	; 0x391e <main+0x530>
    391e:	00 d0       	rcall	.+0      	; 0x3920 <main+0x532>
    3920:	ed b7       	in	r30, 0x3d	; 61
    3922:	fe b7       	in	r31, 0x3e	; 62
    3924:	31 96       	adiw	r30, 0x01	; 1
    3926:	ad b7       	in	r26, 0x3d	; 61
    3928:	be b7       	in	r27, 0x3e	; 62
    392a:	11 96       	adiw	r26, 0x01	; 1
    392c:	ed 92       	st	X+, r14
    392e:	fc 92       	st	X, r15
    3930:	12 97       	sbiw	r26, 0x02	; 2
    3932:	c2 82       	std	Z+2, r12	; 0x02
    3934:	d3 82       	std	Z+3, r13	; 0x03
    3936:	80 91 b4 2a 	lds	r24, 0x2AB4
    393a:	90 91 b5 2a 	lds	r25, 0x2AB5
    393e:	84 83       	std	Z+4, r24	; 0x04
    3940:	95 83       	std	Z+5, r25	; 0x05
    3942:	0e 94 cd 32 	call	0x659a	; 0x659a <fprintf_P>
    3946:	ed b7       	in	r30, 0x3d	; 61
    3948:	fe b7       	in	r31, 0x3e	; 62
    394a:	36 96       	adiw	r30, 0x06	; 6
    394c:	ed bf       	out	0x3d, r30	; 61
    394e:	fe bf       	out	0x3e, r31	; 62
			}
			//fprintf_P(&usart_stream, PSTR("hd: %i.%i\n\r"), prt_flt3(agent1.hd));
			display_on = false;
    3950:	10 92 a8 2a 	sts	0x2AA8, r1
    3954:	fa cd       	rjmp	.-1036   	; 0x354a <main+0x15c>

00003956 <_GLOBAL__sub_I_agent0>:
		}
	}
	
	return 0;
}
    3956:	81 e0       	ldi	r24, 0x01	; 1
    3958:	90 e0       	ldi	r25, 0x00	; 0
    395a:	0e 94 46 02 	call	0x48c	; 0x48c <_Z41__static_initialization_and_destruction_0ii.constprop.2>
    395e:	08 95       	ret

00003960 <_GLOBAL__sub_D_agent0>:
    3960:	80 e0       	ldi	r24, 0x00	; 0
    3962:	90 e0       	ldi	r25, 0x00	; 0
    3964:	0e 94 46 02 	call	0x48c	; 0x48c <_Z41__static_initialization_and_destruction_0ii.constprop.2>
    3968:	08 95       	ret

0000396a <_ZThn2_N5Usart4freeEv>:
    396a:	02 97       	sbiw	r24, 0x02	; 2
    396c:	0e 94 b9 1c 	call	0x3972	; 0x3972 <_ZN5Usart4freeEv>
    3970:	08 95       	ret

00003972 <_ZN5Usart4freeEv>:
        }
}


size_t Usart::free()
{
    3972:	fc 01       	movw	r30, r24
        int cnt = txbuf_tail - txbuf_head;
    3974:	25 85       	ldd	r18, Z+13	; 0x0d
    3976:	36 85       	ldd	r19, Z+14	; 0x0e
    3978:	83 85       	ldd	r24, Z+11	; 0x0b
    397a:	94 85       	ldd	r25, Z+12	; 0x0c
    397c:	28 1b       	sub	r18, r24
    397e:	39 0b       	sbc	r19, r25
    3980:	c9 01       	movw	r24, r18
        if (cnt < 0 || flags & USART_TX_QUEUE_EMPTY)
    3982:	37 fd       	sbrc	r19, 7
    3984:	03 c0       	rjmp	.+6      	; 0x398c <_ZN5Usart4freeEv+0x1a>
    3986:	46 8d       	ldd	r20, Z+30	; 0x1e
    3988:	44 ff       	sbrs	r20, 4
    398a:	04 c0       	rjmp	.+8      	; 0x3994 <_ZN5Usart4freeEv+0x22>
                cnt += txbuf_size;
    398c:	81 85       	ldd	r24, Z+9	; 0x09
    398e:	92 85       	ldd	r25, Z+10	; 0x0a
    3990:	82 0f       	add	r24, r18
    3992:	93 1f       	adc	r25, r19
        return cnt;
}
    3994:	08 95       	ret

00003996 <_ZN5Usart9availableEv>:
        SREG = saved_status;
}


size_t Usart::available()
{
    3996:	fc 01       	movw	r30, r24
        int cnt = rxbuf_head - rxbuf_tail;
    3998:	23 89       	ldd	r18, Z+19	; 0x13
    399a:	34 89       	ldd	r19, Z+20	; 0x14
    399c:	85 89       	ldd	r24, Z+21	; 0x15
    399e:	96 89       	ldd	r25, Z+22	; 0x16
    39a0:	28 1b       	sub	r18, r24
    39a2:	39 0b       	sbc	r19, r25
    39a4:	c9 01       	movw	r24, r18
        if (cnt < 0 || flags & USART_RX_QUEUE_FULL)
    39a6:	37 fd       	sbrc	r19, 7
    39a8:	03 c0       	rjmp	.+6      	; 0x39b0 <_ZN5Usart9availableEv+0x1a>
    39aa:	46 8d       	ldd	r20, Z+30	; 0x1e
    39ac:	47 ff       	sbrs	r20, 7
    39ae:	04 c0       	rjmp	.+8      	; 0x39b8 <_ZN5Usart9availableEv+0x22>
                cnt += rxbuf_size;
    39b0:	81 89       	ldd	r24, Z+17	; 0x11
    39b2:	92 89       	ldd	r25, Z+18	; 0x12
    39b4:	82 0f       	add	r24, r18
    39b6:	93 1f       	adc	r25, r19
        return cnt;
}
    39b8:	08 95       	ret

000039ba <_ZN5Usart4peekEj>:
        return c;
}


int Usart::peek(size_t index)
{
    39ba:	fc 01       	movw	r30, r24
        uint8_t saved_status = 0;
        char c;
        
        if (!(flags & USART_RUNNING) || (flags & USART_RX_QUEUE_EMPTY))
    39bc:	86 8d       	ldd	r24, Z+30	; 0x1e
    39be:	80 ff       	sbrs	r24, 0
    39c0:	1a c0       	rjmp	.+52     	; 0x39f6 <_ZN5Usart4peekEj+0x3c>
    39c2:	86 8d       	ldd	r24, Z+30	; 0x1e
    39c4:	86 fd       	sbrc	r24, 6
    39c6:	17 c0       	rjmp	.+46     	; 0x39f6 <_ZN5Usart4peekEj+0x3c>
    39c8:	1c c0       	rjmp	.+56     	; 0x3a02 <_ZN5Usart4peekEj+0x48>
        
        // return EOF if invalid index
        if (index >= rxbuf_size)
                return EOF;
        
        saved_status = SREG;
    39ca:	4f b7       	in	r20, 0x3f	; 63
        cli();
    39cc:	f8 94       	cli
        
        index += rxbuf_tail;
    39ce:	85 89       	ldd	r24, Z+21	; 0x15
    39d0:	96 89       	ldd	r25, Z+22	; 0x16
    39d2:	86 0f       	add	r24, r22
    39d4:	97 1f       	adc	r25, r23
        if (index >= rxbuf_size)
    39d6:	21 89       	ldd	r18, Z+17	; 0x11
    39d8:	32 89       	ldd	r19, Z+18	; 0x12
    39da:	82 17       	cp	r24, r18
    39dc:	93 07       	cpc	r25, r19
    39de:	10 f0       	brcs	.+4      	; 0x39e4 <_ZN5Usart4peekEj+0x2a>
                index -= rxbuf_size;
    39e0:	82 1b       	sub	r24, r18
    39e2:	93 0b       	sbc	r25, r19
        
        c = rxbuf[index];
    39e4:	07 84       	ldd	r0, Z+15	; 0x0f
    39e6:	f0 89       	ldd	r31, Z+16	; 0x10
    39e8:	e0 2d       	mov	r30, r0
    39ea:	e8 0f       	add	r30, r24
    39ec:	f9 1f       	adc	r31, r25
    39ee:	80 81       	ld	r24, Z
        
        SREG = saved_status;
    39f0:	4f bf       	out	0x3f, r20	; 63
        
        return c;
    39f2:	90 e0       	ldi	r25, 0x00	; 0
    39f4:	08 95       	ret
{
        uint8_t saved_status = 0;
        char c;
        
        if (!(flags & USART_RUNNING) || (flags & USART_RX_QUEUE_EMPTY))
                return EOF;
    39f6:	8f ef       	ldi	r24, 0xFF	; 255
    39f8:	9f ef       	ldi	r25, 0xFF	; 255
    39fa:	08 95       	ret
        
        // return EOF if invalid index
        if (index >= rxbuf_size)
                return EOF;
    39fc:	8f ef       	ldi	r24, 0xFF	; 255
    39fe:	9f ef       	ldi	r25, 0xFF	; 255
        c = rxbuf[index];
        
        SREG = saved_status;
        
        return c;
}
    3a00:	08 95       	ret
        
        if (!(flags & USART_RUNNING) || (flags & USART_RX_QUEUE_EMPTY))
                return EOF;
        
        // return EOF if invalid index
        if (index >= rxbuf_size)
    3a02:	81 89       	ldd	r24, Z+17	; 0x11
    3a04:	92 89       	ldd	r25, Z+18	; 0x12
    3a06:	68 17       	cp	r22, r24
    3a08:	79 07       	cpc	r23, r25
    3a0a:	f8 f2       	brcs	.-66     	; 0x39ca <_ZN5Usart4peekEj+0x10>
    3a0c:	f7 cf       	rjmp	.-18     	; 0x39fc <_ZN5Usart4peekEj+0x42>

00003a0e <_ZN5Usart3putEcP6__file>:
}


// static
int Usart::put(char c, FILE *stream)
{
    3a0e:	28 2f       	mov	r18, r24
    3a10:	fb 01       	movw	r30, r22
        Usart *u;
        u = (Usart *)fdev_get_udata(stream);
    3a12:	a4 85       	ldd	r26, Z+12	; 0x0c
    3a14:	b5 85       	ldd	r27, Z+13	; 0x0d
        if (u != 0)
    3a16:	10 97       	sbiw	r26, 0x00	; 0
    3a18:	61 f0       	breq	.+24     	; 0x3a32 <_ZN5Usart3putEcP6__file+0x24>
        {
                u->put(c);
    3a1a:	ed 91       	ld	r30, X+
    3a1c:	fc 91       	ld	r31, X
    3a1e:	11 97       	sbiw	r26, 0x01	; 1
    3a20:	04 84       	ldd	r0, Z+12	; 0x0c
    3a22:	f5 85       	ldd	r31, Z+13	; 0x0d
    3a24:	e0 2d       	mov	r30, r0
    3a26:	cd 01       	movw	r24, r26
    3a28:	62 2f       	mov	r22, r18
    3a2a:	19 95       	eicall
                return 0;
    3a2c:	80 e0       	ldi	r24, 0x00	; 0
    3a2e:	90 e0       	ldi	r25, 0x00	; 0
    3a30:	08 95       	ret
        }
        return _FDEV_ERR;
    3a32:	8f ef       	ldi	r24, 0xFF	; 255
    3a34:	9f ef       	ldi	r25, 0xFF	; 255
}
    3a36:	08 95       	ret

00003a38 <_ZN5Usart3getEP6__file>:

// static
int Usart::get(FILE *stream)
{
        Usart *u;
        u = (Usart *)fdev_get_udata(stream);
    3a38:	dc 01       	movw	r26, r24
    3a3a:	1c 96       	adiw	r26, 0x0c	; 12
    3a3c:	8d 91       	ld	r24, X+
    3a3e:	9c 91       	ld	r25, X
    3a40:	1d 97       	sbiw	r26, 0x0d	; 13
        if (u != 0)
    3a42:	00 97       	sbiw	r24, 0x00	; 0
    3a44:	49 f0       	breq	.+18     	; 0x3a58 <_ZN5Usart3getEP6__file+0x20>
        {
                return u->get();
    3a46:	dc 01       	movw	r26, r24
    3a48:	ed 91       	ld	r30, X+
    3a4a:	fc 91       	ld	r31, X
    3a4c:	02 80       	ldd	r0, Z+2	; 0x02
    3a4e:	f3 81       	ldd	r31, Z+3	; 0x03
    3a50:	e0 2d       	mov	r30, r0
    3a52:	19 95       	eicall
    3a54:	90 e0       	ldi	r25, 0x00	; 0
    3a56:	08 95       	ret
        }
        return _FDEV_ERR;
    3a58:	8f ef       	ldi	r24, 0xFF	; 255
    3a5a:	9f ef       	ldi	r25, 0xFF	; 255
}
    3a5c:	08 95       	ret

00003a5e <_ZThn2_N5Usart3putEc>:
    3a5e:	02 97       	sbiw	r24, 0x02	; 2
    3a60:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <_ZN5Usart3putEc>
    3a64:	08 95       	ret

00003a66 <_ZN5Usart3putEc>:
        return cnt;
}


void Usart::put(char c)
{
    3a66:	fc 01       	movw	r30, r24
        uint8_t saved_status = 0;
        
        if (!(flags & USART_RUNNING) || (!(SREG & SREG_I) && (flags & USART_TX_QUEUE_FULL)))
    3a68:	86 8d       	ldd	r24, Z+30	; 0x1e
    3a6a:	80 ff       	sbrs	r24, 0
    3a6c:	48 c0       	rjmp	.+144    	; 0x3afe <_ZN5Usart3putEc+0x98>
    3a6e:	8f b7       	in	r24, 0x3f	; 63
    3a70:	90 e0       	ldi	r25, 0x00	; 0
    3a72:	87 70       	andi	r24, 0x07	; 7
    3a74:	90 70       	andi	r25, 0x00	; 0
    3a76:	00 97       	sbiw	r24, 0x00	; 0
    3a78:	d1 f5       	brne	.+116    	; 0x3aee <_ZN5Usart3putEc+0x88>
    3a7a:	86 8d       	ldd	r24, Z+30	; 0x1e
    3a7c:	85 fd       	sbrc	r24, 5
    3a7e:	3f c0       	rjmp	.+126    	; 0x3afe <_ZN5Usart3putEc+0x98>
    3a80:	36 c0       	rjmp	.+108    	; 0x3aee <_ZN5Usart3putEc+0x88>
        
        // blocking write if no buffer
        if (txbuf_size == 0)
        {
#ifdef __AVR_XMEGA__
                while (!(usart->STATUS & USART_DREIF_bm)) { };
    3a82:	81 81       	ldd	r24, Z+1	; 0x01
    3a84:	85 ff       	sbrs	r24, 5
    3a86:	fd cf       	rjmp	.-6      	; 0x3a82 <_ZN5Usart3putEc+0x1c>
                usart->DATA = c;
    3a88:	60 83       	st	Z, r22
#else // __AVR_XMEGA__
                while (!(*ucsra & _BV(UDRE0))) { };
                *udr = c;
#endif // __AVR_XMEGA__
                return;
    3a8a:	08 95       	ret
        }
        
        // return if nonblocking
        if ((flags & USART_TX_QUEUE_FULL) && nonblocking)
    3a8c:	86 8d       	ldd	r24, Z+30	; 0x1e
    3a8e:	85 ff       	sbrs	r24, 5
    3a90:	03 c0       	rjmp	.+6      	; 0x3a98 <_ZN5Usart3putEc+0x32>
    3a92:	85 8d       	ldd	r24, Z+29	; 0x1d
    3a94:	88 23       	and	r24, r24
    3a96:	99 f5       	brne	.+102    	; 0x3afe <_ZN5Usart3putEc+0x98>
                return;
        
        while (flags & USART_TX_QUEUE_FULL) { };
    3a98:	86 8d       	ldd	r24, Z+30	; 0x1e
    3a9a:	85 fd       	sbrc	r24, 5
    3a9c:	fd cf       	rjmp	.-6      	; 0x3a98 <_ZN5Usart3putEc+0x32>
        
        saved_status = SREG;
    3a9e:	4f b7       	in	r20, 0x3f	; 63
        cli();
    3aa0:	f8 94       	cli
        
        txbuf[txbuf_head++] = c;
    3aa2:	83 85       	ldd	r24, Z+11	; 0x0b
    3aa4:	94 85       	ldd	r25, Z+12	; 0x0c
    3aa6:	a7 81       	ldd	r26, Z+7	; 0x07
    3aa8:	b0 85       	ldd	r27, Z+8	; 0x08
    3aaa:	a8 0f       	add	r26, r24
    3aac:	b9 1f       	adc	r27, r25
    3aae:	6c 93       	st	X, r22
    3ab0:	01 96       	adiw	r24, 0x01	; 1
    3ab2:	83 87       	std	Z+11, r24	; 0x0b
    3ab4:	94 87       	std	Z+12, r25	; 0x0c
        flags &= ~USART_TX_QUEUE_EMPTY;
    3ab6:	26 8d       	ldd	r18, Z+30	; 0x1e
    3ab8:	2f 7e       	andi	r18, 0xEF	; 239
    3aba:	26 8f       	std	Z+30, r18	; 0x1e
        if (txbuf_head >= txbuf_size)
    3abc:	21 85       	ldd	r18, Z+9	; 0x09
    3abe:	32 85       	ldd	r19, Z+10	; 0x0a
    3ac0:	82 17       	cp	r24, r18
    3ac2:	93 07       	cpc	r25, r19
    3ac4:	10 f0       	brcs	.+4      	; 0x3aca <_ZN5Usart3putEc+0x64>
                txbuf_head = 0;
    3ac6:	13 86       	std	Z+11, r1	; 0x0b
    3ac8:	14 86       	std	Z+12, r1	; 0x0c
        if (txbuf_head == txbuf_tail)
    3aca:	23 85       	ldd	r18, Z+11	; 0x0b
    3acc:	34 85       	ldd	r19, Z+12	; 0x0c
    3ace:	85 85       	ldd	r24, Z+13	; 0x0d
    3ad0:	96 85       	ldd	r25, Z+14	; 0x0e
    3ad2:	28 17       	cp	r18, r24
    3ad4:	39 07       	cpc	r19, r25
    3ad6:	19 f4       	brne	.+6      	; 0x3ade <_ZN5Usart3putEc+0x78>
                flags |= USART_TX_QUEUE_FULL;
    3ad8:	86 8d       	ldd	r24, Z+30	; 0x1e
    3ada:	80 62       	ori	r24, 0x20	; 32
    3adc:	86 8f       	std	Z+30, r24	; 0x1e
        
#ifdef __AVR_XMEGA__
        usart->CTRLA |= USART_DREINTLVL_MED_gc;
    3ade:	04 80       	ldd	r0, Z+4	; 0x04
    3ae0:	f5 81       	ldd	r31, Z+5	; 0x05
    3ae2:	e0 2d       	mov	r30, r0
    3ae4:	83 81       	ldd	r24, Z+3	; 0x03
    3ae6:	82 60       	ori	r24, 0x02	; 2
    3ae8:	83 83       	std	Z+3, r24	; 0x03
#else // __AVR_XMEGA__
        *ucsrb |= _BV(UDRIE0);
#endif // __AVR_XMEGA__
        
        SREG = saved_status;
    3aea:	4f bf       	out	0x3f, r20	; 63
    3aec:	08 95       	ret
        
        if (!(flags & USART_RUNNING) || (!(SREG & SREG_I) && (flags & USART_TX_QUEUE_FULL)))
                return;
        
        // blocking write if no buffer
        if (txbuf_size == 0)
    3aee:	81 85       	ldd	r24, Z+9	; 0x09
    3af0:	92 85       	ldd	r25, Z+10	; 0x0a
    3af2:	00 97       	sbiw	r24, 0x00	; 0
    3af4:	59 f6       	brne	.-106    	; 0x3a8c <_ZN5Usart3putEc+0x26>
        {
#ifdef __AVR_XMEGA__
                while (!(usart->STATUS & USART_DREIF_bm)) { };
    3af6:	04 80       	ldd	r0, Z+4	; 0x04
    3af8:	f5 81       	ldd	r31, Z+5	; 0x05
    3afa:	e0 2d       	mov	r30, r0
    3afc:	c2 cf       	rjmp	.-124    	; 0x3a82 <_ZN5Usart3putEc+0x1c>
    3afe:	08 95       	ret

00003b00 <_ZN5Usart11which_usartEP12USART_struct>:
#ifdef __AVR_XMEGA__

char __attribute__ ((noinline)) Usart::which_usart(USART_t *_usart)
{
#if MAX_USART_IND >= USARTC0_IND
        if ((uintptr_t)_usart == (uintptr_t)&USARTC0)
    3b00:	28 e0       	ldi	r18, 0x08	; 8
    3b02:	80 3a       	cpi	r24, 0xA0	; 160
    3b04:	92 07       	cpc	r25, r18
    3b06:	f1 f0       	breq	.+60     	; 0x3b44 <_ZN5Usart11which_usartEP12USART_struct+0x44>
                return USARTC0_IND;
#endif
#if MAX_USART_IND >= USARTC1_IND
        if ((uintptr_t)_usart == (uintptr_t)&USARTC1)
    3b08:	28 e0       	ldi	r18, 0x08	; 8
    3b0a:	80 3b       	cpi	r24, 0xB0	; 176
    3b0c:	92 07       	cpc	r25, r18
    3b0e:	e1 f0       	breq	.+56     	; 0x3b48 <_ZN5Usart11which_usartEP12USART_struct+0x48>
                return USARTC1_IND;
#endif
#if MAX_USART_IND >= USARTD0_IND
        if ((uintptr_t)_usart == (uintptr_t)&USARTD0)
    3b10:	29 e0       	ldi	r18, 0x09	; 9
    3b12:	80 3a       	cpi	r24, 0xA0	; 160
    3b14:	92 07       	cpc	r25, r18
    3b16:	d1 f0       	breq	.+52     	; 0x3b4c <_ZN5Usart11which_usartEP12USART_struct+0x4c>
                return USARTD0_IND;
#endif
#if MAX_USART_IND >= USARTD1_IND
        if ((uintptr_t)_usart == (uintptr_t)&USARTD1)
    3b18:	29 e0       	ldi	r18, 0x09	; 9
    3b1a:	80 3b       	cpi	r24, 0xB0	; 176
    3b1c:	92 07       	cpc	r25, r18
    3b1e:	c1 f0       	breq	.+48     	; 0x3b50 <_ZN5Usart11which_usartEP12USART_struct+0x50>
                return USARTD1_IND;
#endif
#if MAX_USART_IND >= USARTE0_IND
        if ((uintptr_t)_usart == (uintptr_t)&USARTE0)
    3b20:	2a e0       	ldi	r18, 0x0A	; 10
    3b22:	80 3a       	cpi	r24, 0xA0	; 160
    3b24:	92 07       	cpc	r25, r18
    3b26:	b1 f0       	breq	.+44     	; 0x3b54 <_ZN5Usart11which_usartEP12USART_struct+0x54>
                return USARTE0_IND;
#endif
#if MAX_USART_IND >= USARTE1_IND
        if ((uintptr_t)_usart == (uintptr_t)&USARTE1)
    3b28:	2a e0       	ldi	r18, 0x0A	; 10
    3b2a:	80 3b       	cpi	r24, 0xB0	; 176
    3b2c:	92 07       	cpc	r25, r18
    3b2e:	a1 f0       	breq	.+40     	; 0x3b58 <_ZN5Usart11which_usartEP12USART_struct+0x58>
                return USARTE1_IND;
#endif
#if MAX_USART_IND >= USARTF0_IND
        if ((uintptr_t)_usart == (uintptr_t)&USARTF0)
    3b30:	2b e0       	ldi	r18, 0x0B	; 11
    3b32:	80 3a       	cpi	r24, 0xA0	; 160
    3b34:	92 07       	cpc	r25, r18
    3b36:	91 f0       	breq	.+36     	; 0x3b5c <_ZN5Usart11which_usartEP12USART_struct+0x5c>
                return USARTF0_IND;
#endif
#if MAX_USART_IND >= USARTF1_IND
        if ((uintptr_t)_usart == (uintptr_t)&USARTF1)
    3b38:	2b e0       	ldi	r18, 0x0B	; 11
    3b3a:	80 3b       	cpi	r24, 0xB0	; 176
    3b3c:	92 07       	cpc	r25, r18
    3b3e:	81 f4       	brne	.+32     	; 0x3b60 <_ZN5Usart11which_usartEP12USART_struct+0x60>
                return USARTF1_IND;
    3b40:	87 e0       	ldi	r24, 0x07	; 7
    3b42:	08 95       	ret

char __attribute__ ((noinline)) Usart::which_usart(USART_t *_usart)
{
#if MAX_USART_IND >= USARTC0_IND
        if ((uintptr_t)_usart == (uintptr_t)&USARTC0)
                return USARTC0_IND;
    3b44:	80 e0       	ldi	r24, 0x00	; 0
    3b46:	08 95       	ret
#endif
#if MAX_USART_IND >= USARTC1_IND
        if ((uintptr_t)_usart == (uintptr_t)&USARTC1)
                return USARTC1_IND;
    3b48:	83 e0       	ldi	r24, 0x03	; 3
    3b4a:	08 95       	ret
#endif
#if MAX_USART_IND >= USARTD0_IND
        if ((uintptr_t)_usart == (uintptr_t)&USARTD0)
                return USARTD0_IND;
    3b4c:	81 e0       	ldi	r24, 0x01	; 1
    3b4e:	08 95       	ret
#endif
#if MAX_USART_IND >= USARTD1_IND
        if ((uintptr_t)_usart == (uintptr_t)&USARTD1)
                return USARTD1_IND;
    3b50:	84 e0       	ldi	r24, 0x04	; 4
    3b52:	08 95       	ret
#endif
#if MAX_USART_IND >= USARTE0_IND
        if ((uintptr_t)_usart == (uintptr_t)&USARTE0)
                return USARTE0_IND;
    3b54:	82 e0       	ldi	r24, 0x02	; 2
    3b56:	08 95       	ret
#endif
#if MAX_USART_IND >= USARTE1_IND
        if ((uintptr_t)_usart == (uintptr_t)&USARTE1)
                return USARTE1_IND;
    3b58:	85 e0       	ldi	r24, 0x05	; 5
    3b5a:	08 95       	ret
#endif
#if MAX_USART_IND >= USARTF0_IND
        if ((uintptr_t)_usart == (uintptr_t)&USARTF0)
                return USARTF0_IND;
    3b5c:	86 e0       	ldi	r24, 0x06	; 6
    3b5e:	08 95       	ret
#endif
#if MAX_USART_IND >= USARTF1_IND
        if ((uintptr_t)_usart == (uintptr_t)&USARTF1)
                return USARTF1_IND;
#endif
        return USART_INVALID_IND;
    3b60:	8f ef       	ldi	r24, 0xFF	; 255
}
    3b62:	08 95       	ret

00003b64 <_ZN5Usart8get_portEc>:
        }
}


PORT_t * __attribute__ ((noinline)) Usart::get_port(char _usart)
{
    3b64:	88 30       	cpi	r24, 0x08	; 8
    3b66:	48 f4       	brcc	.+18     	; 0x3b7a <_ZN5Usart8get_portEc+0x16>
    3b68:	e8 2f       	mov	r30, r24
    3b6a:	f0 e0       	ldi	r31, 0x00	; 0
    3b6c:	ee 0f       	add	r30, r30
    3b6e:	ff 1f       	adc	r31, r31
    3b70:	e0 58       	subi	r30, 0x80	; 128
    3b72:	ff 4d       	sbci	r31, 0xDF	; 223
    3b74:	80 81       	ld	r24, Z
    3b76:	91 81       	ldd	r25, Z+1	; 0x01
    3b78:	08 95       	ret
    3b7a:	80 e0       	ldi	r24, 0x00	; 0
    3b7c:	90 e0       	ldi	r25, 0x00	; 0
                        return &PORTF;
#endif
                default:
                        return 0;
        }
}
    3b7e:	08 95       	ret

00003b80 <_ZN5Usart9get_txpinEc>:


char __attribute__ ((noinline)) Usart::get_txpin(char _usart)
{
    3b80:	88 30       	cpi	r24, 0x08	; 8
    3b82:	30 f4       	brcc	.+12     	; 0x3b90 <_ZN5Usart9get_txpinEc+0x10>
    3b84:	e8 2f       	mov	r30, r24
    3b86:	f0 e0       	ldi	r31, 0x00	; 0
    3b88:	e0 57       	subi	r30, 0x70	; 112
    3b8a:	ff 4d       	sbci	r31, 0xDF	; 223
    3b8c:	80 81       	ld	r24, Z
    3b8e:	08 95       	ret
    3b90:	80 e0       	ldi	r24, 0x00	; 0
                        return 7;
#endif
                default:
                        return 0;
        }
}
    3b92:	08 95       	ret

00003b94 <_ZN5UsartC1EP12USART_struct>:

#endif // __AVR_XMEGA__

#ifdef __AVR_XMEGA__
Usart::Usart(USART_t *_usart) :
    3b94:	cf 93       	push	r28
    3b96:	df 93       	push	r29
    3b98:	ec 01       	movw	r28, r24
    3b9a:	cb 01       	movw	r24, r22
        ctsport(0),
        rtspin_bm(0),
        ctspin_bm(0),
#endif // __AVR_XMEGA__
        nonblocking(0),
        flags(USART_TX_QUEUE_FULL | USART_RX_QUEUE_FULL)
    3b9c:	26 e6       	ldi	r18, 0x66	; 102
    3b9e:	30 e2       	ldi	r19, 0x20	; 32
    3ba0:	28 83       	st	Y, r18
    3ba2:	39 83       	std	Y+1, r19	; 0x01
    3ba4:	2e 5e       	subi	r18, 0xEE	; 238
    3ba6:	3f 4f       	sbci	r19, 0xFF	; 255
    3ba8:	2a 83       	std	Y+2, r18	; 0x02
    3baa:	3b 83       	std	Y+3, r19	; 0x03
    3bac:	6c 83       	std	Y+4, r22	; 0x04
    3bae:	7d 83       	std	Y+5, r23	; 0x05
    3bb0:	1f 82       	std	Y+7, r1	; 0x07
    3bb2:	18 86       	std	Y+8, r1	; 0x08
    3bb4:	19 86       	std	Y+9, r1	; 0x09
    3bb6:	1a 86       	std	Y+10, r1	; 0x0a
    3bb8:	1b 86       	std	Y+11, r1	; 0x0b
    3bba:	1c 86       	std	Y+12, r1	; 0x0c
    3bbc:	1d 86       	std	Y+13, r1	; 0x0d
    3bbe:	1e 86       	std	Y+14, r1	; 0x0e
    3bc0:	1f 86       	std	Y+15, r1	; 0x0f
    3bc2:	18 8a       	std	Y+16, r1	; 0x10
    3bc4:	19 8a       	std	Y+17, r1	; 0x11
    3bc6:	1a 8a       	std	Y+18, r1	; 0x12
    3bc8:	1b 8a       	std	Y+19, r1	; 0x13
    3bca:	1c 8a       	std	Y+20, r1	; 0x14
    3bcc:	1d 8a       	std	Y+21, r1	; 0x15
    3bce:	1e 8a       	std	Y+22, r1	; 0x16
    3bd0:	1f 8a       	std	Y+23, r1	; 0x17
    3bd2:	18 8e       	std	Y+24, r1	; 0x18
    3bd4:	19 8e       	std	Y+25, r1	; 0x19
    3bd6:	1a 8e       	std	Y+26, r1	; 0x1a
    3bd8:	1b 8e       	std	Y+27, r1	; 0x1b
    3bda:	1c 8e       	std	Y+28, r1	; 0x1c
    3bdc:	1d 8e       	std	Y+29, r1	; 0x1d
    3bde:	20 ea       	ldi	r18, 0xA0	; 160
    3be0:	2e 8f       	std	Y+30, r18	; 0x1e
{
#ifdef __AVR_XMEGA__
        usart_ind = which_usart(_usart);
    3be2:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <_ZN5Usart11which_usartEP12USART_struct>
    3be6:	8e 83       	std	Y+6, r24	; 0x06
#endif // __AVR_XMEGA__
        usart_list[(int)usart_ind] = this;
    3be8:	e8 2f       	mov	r30, r24
    3bea:	f0 e0       	ldi	r31, 0x00	; 0
    3bec:	ee 0f       	add	r30, r30
    3bee:	ff 1f       	adc	r31, r31
    3bf0:	ed 57       	subi	r30, 0x7D	; 125
    3bf2:	f4 4d       	sbci	r31, 0xD4	; 212
    3bf4:	c0 83       	st	Z, r28
    3bf6:	d1 83       	std	Z+1, r29	; 0x01
                ucsrc = &UCSR1C;
                ubrr = &UBRR1;
        }
        #endif // UDR1
#endif // __AVR_XMEGA__
}
    3bf8:	df 91       	pop	r29
    3bfa:	cf 91       	pop	r28
    3bfc:	08 95       	ret

00003bfe <_ZN5Usart13set_tx_bufferEPcj>:
        usart_list[(int)usart_ind] = 0;
}


void Usart::set_tx_buffer(char *_txbuf, size_t _txbuf_size)
{
    3bfe:	fc 01       	movw	r30, r24
        txbuf = _txbuf;
    3c00:	67 83       	std	Z+7, r22	; 0x07
    3c02:	70 87       	std	Z+8, r23	; 0x08
        txbuf_size = _txbuf_size;
    3c04:	41 87       	std	Z+9, r20	; 0x09
    3c06:	52 87       	std	Z+10, r21	; 0x0a
        txbuf_head = 0;
    3c08:	13 86       	std	Z+11, r1	; 0x0b
    3c0a:	14 86       	std	Z+12, r1	; 0x0c
        txbuf_tail = 0;
    3c0c:	15 86       	std	Z+13, r1	; 0x0d
    3c0e:	16 86       	std	Z+14, r1	; 0x0e
        flags &= ~USART_TX_QUEUE_FULL;
    3c10:	86 8d       	ldd	r24, Z+30	; 0x1e
    3c12:	8f 7d       	andi	r24, 0xDF	; 223
    3c14:	86 8f       	std	Z+30, r24	; 0x1e
        flags |= USART_TX_QUEUE_EMPTY;
    3c16:	86 8d       	ldd	r24, Z+30	; 0x1e
    3c18:	80 61       	ori	r24, 0x10	; 16
    3c1a:	86 8f       	std	Z+30, r24	; 0x1e
}
    3c1c:	08 95       	ret

00003c1e <_ZN5Usart13set_rx_bufferEPcj>:


void Usart::set_rx_buffer(char *_rxbuf, size_t _rxbuf_size)
{
    3c1e:	fc 01       	movw	r30, r24
        rxbuf = _rxbuf;
    3c20:	67 87       	std	Z+15, r22	; 0x0f
    3c22:	70 8b       	std	Z+16, r23	; 0x10
        rxbuf_size = _rxbuf_size;
    3c24:	41 8b       	std	Z+17, r20	; 0x11
    3c26:	52 8b       	std	Z+18, r21	; 0x12
        rxbuf_head = 0;
    3c28:	13 8a       	std	Z+19, r1	; 0x13
    3c2a:	14 8a       	std	Z+20, r1	; 0x14
        rxbuf_tail = 0;
    3c2c:	15 8a       	std	Z+21, r1	; 0x15
    3c2e:	16 8a       	std	Z+22, r1	; 0x16
        flags &= ~USART_RX_QUEUE_FULL;
    3c30:	86 8d       	ldd	r24, Z+30	; 0x1e
    3c32:	8f 77       	andi	r24, 0x7F	; 127
    3c34:	86 8f       	std	Z+30, r24	; 0x1e
        flags |= USART_RX_QUEUE_EMPTY;
    3c36:	86 8d       	ldd	r24, Z+30	; 0x1e
    3c38:	80 64       	ori	r24, 0x40	; 64
    3c3a:	86 8f       	std	Z+30, r24	; 0x1e
        
        if (flags & USART_RUNNING)
    3c3c:	86 8d       	ldd	r24, Z+30	; 0x1e
    3c3e:	80 ff       	sbrs	r24, 0
    3c40:	0f c0       	rjmp	.+30     	; 0x3c60 <_ZN5Usart13set_rx_bufferEPcj+0x42>
        {
#ifdef __AVR_XMEGA__
                usart->CTRLA &= ~USART_RXCINTLVL_gm;
    3c42:	a4 81       	ldd	r26, Z+4	; 0x04
    3c44:	b5 81       	ldd	r27, Z+5	; 0x05
    3c46:	13 96       	adiw	r26, 0x03	; 3
    3c48:	8c 91       	ld	r24, X
    3c4a:	13 97       	sbiw	r26, 0x03	; 3
    3c4c:	8f 7c       	andi	r24, 0xCF	; 207
    3c4e:	13 96       	adiw	r26, 0x03	; 3
    3c50:	8c 93       	st	X, r24
    3c52:	13 97       	sbiw	r26, 0x03	; 3
                usart->CTRLA |= USART_RXCINTLVL_MED_gc;
    3c54:	04 80       	ldd	r0, Z+4	; 0x04
    3c56:	f5 81       	ldd	r31, Z+5	; 0x05
    3c58:	e0 2d       	mov	r30, r0
    3c5a:	83 81       	ldd	r24, Z+3	; 0x03
    3c5c:	80 62       	ori	r24, 0x20	; 32
    3c5e:	83 83       	std	Z+3, r24	; 0x03
    3c60:	08 95       	ret

00003c62 <_ZN5Usart10update_rtsEv>:
}


#ifdef __AVR_XMEGA__
void Usart::update_rts()
{
    3c62:	cf 93       	push	r28
    3c64:	df 93       	push	r29
    3c66:	ec 01       	movw	r28, r24
        if (rtsport == 0)
    3c68:	ef 89       	ldd	r30, Y+23	; 0x17
    3c6a:	f8 8d       	ldd	r31, Y+24	; 0x18
    3c6c:	30 97       	sbiw	r30, 0x00	; 0
    3c6e:	11 f1       	breq	.+68     	; 0x3cb4 <_ZN5Usart10update_rtsEv+0x52>
                return;
        if (txbuf_size == 0)
    3c70:	89 85       	ldd	r24, Y+9	; 0x09
    3c72:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c74:	00 97       	sbiw	r24, 0x00	; 0
    3c76:	19 f4       	brne	.+6      	; 0x3c7e <_ZN5Usart10update_rtsEv+0x1c>
        {
                // no buffer, so just assert it
                rtsport->OUTCLR = rtspin_bm;
    3c78:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c7a:	86 83       	std	Z+6, r24	; 0x06
    3c7c:	1b c0       	rjmp	.+54     	; 0x3cb4 <_ZN5Usart10update_rtsEv+0x52>
        }
        else
        {
                // define 'getting full' as 3/4
                if (available() > ((rxbuf_size >> 1) + (rxbuf_size >> 2)))
    3c7e:	e8 81       	ld	r30, Y
    3c80:	f9 81       	ldd	r31, Y+1	; 0x01
    3c82:	01 90       	ld	r0, Z+
    3c84:	f0 81       	ld	r31, Z
    3c86:	e0 2d       	mov	r30, r0
    3c88:	ce 01       	movw	r24, r28
    3c8a:	19 95       	eicall
    3c8c:	29 89       	ldd	r18, Y+17	; 0x11
    3c8e:	3a 89       	ldd	r19, Y+18	; 0x12
    3c90:	a9 01       	movw	r20, r18
    3c92:	56 95       	lsr	r21
    3c94:	47 95       	ror	r20
    3c96:	56 95       	lsr	r21
    3c98:	47 95       	ror	r20
    3c9a:	36 95       	lsr	r19
    3c9c:	27 95       	ror	r18
    3c9e:	42 0f       	add	r20, r18
    3ca0:	53 1f       	adc	r21, r19
    3ca2:	ef 89       	ldd	r30, Y+23	; 0x17
    3ca4:	f8 8d       	ldd	r31, Y+24	; 0x18
    3ca6:	2b 8d       	ldd	r18, Y+27	; 0x1b
    3ca8:	48 17       	cp	r20, r24
    3caa:	59 07       	cpc	r21, r25
    3cac:	10 f4       	brcc	.+4      	; 0x3cb2 <_ZN5Usart10update_rtsEv+0x50>
                {
                        rtsport->OUTSET = rtspin_bm;
    3cae:	25 83       	std	Z+5, r18	; 0x05
    3cb0:	01 c0       	rjmp	.+2      	; 0x3cb4 <_ZN5Usart10update_rtsEv+0x52>
                }
                else
                {
                        rtsport->OUTCLR = rtspin_bm;
    3cb2:	26 83       	std	Z+6, r18	; 0x06
                }
        }
}
    3cb4:	df 91       	pop	r29
    3cb6:	cf 91       	pop	r28
    3cb8:	08 95       	ret

00003cba <_ZN5Usart3getEv>:
        return cnt;
}


char Usart::get()
{
    3cba:	cf 93       	push	r28
    3cbc:	df 93       	push	r29
    3cbe:	fc 01       	movw	r30, r24
        uint8_t saved_status = 0;
        char c;
        
        if (!(flags & USART_RUNNING) || (!(SREG & SREG_I) && (flags & USART_RX_QUEUE_EMPTY)))
    3cc0:	86 8d       	ldd	r24, Z+30	; 0x1e
    3cc2:	80 ff       	sbrs	r24, 0
    3cc4:	3d c0       	rjmp	.+122    	; 0x3d40 <_ZN5Usart3getEv+0x86>
    3cc6:	8f b7       	in	r24, 0x3f	; 63
    3cc8:	90 e0       	ldi	r25, 0x00	; 0
    3cca:	87 70       	andi	r24, 0x07	; 7
    3ccc:	90 70       	andi	r25, 0x00	; 0
    3cce:	00 97       	sbiw	r24, 0x00	; 0
    3cd0:	e1 f5       	brne	.+120    	; 0x3d4a <_ZN5Usart3getEv+0x90>
    3cd2:	86 8d       	ldd	r24, Z+30	; 0x1e
    3cd4:	86 fd       	sbrc	r24, 6
    3cd6:	34 c0       	rjmp	.+104    	; 0x3d40 <_ZN5Usart3getEv+0x86>
    3cd8:	38 c0       	rjmp	.+112    	; 0x3d4a <_ZN5Usart3getEv+0x90>
        
        // blocking read if no buffer
        if (rxbuf_size == 0)
        {
#ifdef __AVR_XMEGA__
                while (!(usart->STATUS & USART_RXCIF_bm)) { };
    3cda:	81 81       	ldd	r24, Z+1	; 0x01
    3cdc:	87 ff       	sbrs	r24, 7
    3cde:	fd cf       	rjmp	.-6      	; 0x3cda <_ZN5Usart3getEv+0x20>
                return usart->DATA;
    3ce0:	c0 81       	ld	r28, Z
    3ce2:	2f c0       	rjmp	.+94     	; 0x3d42 <_ZN5Usart3getEv+0x88>
                return *udr;
#endif // __AVR_XMEGA__
        }
        
        // return if nonblocking
        if ((flags & USART_RX_QUEUE_EMPTY) && nonblocking)
    3ce4:	86 8d       	ldd	r24, Z+30	; 0x1e
    3ce6:	86 ff       	sbrs	r24, 6
    3ce8:	03 c0       	rjmp	.+6      	; 0x3cf0 <_ZN5Usart3getEv+0x36>
    3cea:	85 8d       	ldd	r24, Z+29	; 0x1d
    3cec:	88 23       	and	r24, r24
    3cee:	41 f5       	brne	.+80     	; 0x3d40 <_ZN5Usart3getEv+0x86>
                return 0;
        
        while (flags & USART_RX_QUEUE_EMPTY) { };
    3cf0:	86 8d       	ldd	r24, Z+30	; 0x1e
    3cf2:	86 fd       	sbrc	r24, 6
    3cf4:	fd cf       	rjmp	.-6      	; 0x3cf0 <_ZN5Usart3getEv+0x36>
        
        saved_status = SREG;
    3cf6:	df b7       	in	r29, 0x3f	; 63
        cli();
    3cf8:	f8 94       	cli
        
        c = rxbuf[rxbuf_tail++];
    3cfa:	85 89       	ldd	r24, Z+21	; 0x15
    3cfc:	96 89       	ldd	r25, Z+22	; 0x16
    3cfe:	a7 85       	ldd	r26, Z+15	; 0x0f
    3d00:	b0 89       	ldd	r27, Z+16	; 0x10
    3d02:	a8 0f       	add	r26, r24
    3d04:	b9 1f       	adc	r27, r25
    3d06:	cc 91       	ld	r28, X
    3d08:	01 96       	adiw	r24, 0x01	; 1
    3d0a:	85 8b       	std	Z+21, r24	; 0x15
    3d0c:	96 8b       	std	Z+22, r25	; 0x16
        flags &= ~USART_RX_QUEUE_FULL;
    3d0e:	26 8d       	ldd	r18, Z+30	; 0x1e
    3d10:	2f 77       	andi	r18, 0x7F	; 127
    3d12:	26 8f       	std	Z+30, r18	; 0x1e
        if (rxbuf_tail >= rxbuf_size)
    3d14:	21 89       	ldd	r18, Z+17	; 0x11
    3d16:	32 89       	ldd	r19, Z+18	; 0x12
    3d18:	82 17       	cp	r24, r18
    3d1a:	93 07       	cpc	r25, r19
    3d1c:	10 f0       	brcs	.+4      	; 0x3d22 <_ZN5Usart3getEv+0x68>
                rxbuf_tail = 0;
    3d1e:	15 8a       	std	Z+21, r1	; 0x15
    3d20:	16 8a       	std	Z+22, r1	; 0x16
        if (rxbuf_head == rxbuf_tail)
    3d22:	23 89       	ldd	r18, Z+19	; 0x13
    3d24:	34 89       	ldd	r19, Z+20	; 0x14
    3d26:	85 89       	ldd	r24, Z+21	; 0x15
    3d28:	96 89       	ldd	r25, Z+22	; 0x16
    3d2a:	28 17       	cp	r18, r24
    3d2c:	39 07       	cpc	r19, r25
    3d2e:	19 f4       	brne	.+6      	; 0x3d36 <_ZN5Usart3getEv+0x7c>
                flags |= USART_RX_QUEUE_EMPTY;
    3d30:	86 8d       	ldd	r24, Z+30	; 0x1e
    3d32:	80 64       	ori	r24, 0x40	; 64
    3d34:	86 8f       	std	Z+30, r24	; 0x1e
        
#ifdef __AVR_XMEGA__
        update_rts();
    3d36:	cf 01       	movw	r24, r30
    3d38:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <_ZN5Usart10update_rtsEv>
#endif // __AVR_XMEGA__
        
        SREG = saved_status;
    3d3c:	df bf       	out	0x3f, r29	; 63
    3d3e:	01 c0       	rjmp	.+2      	; 0x3d42 <_ZN5Usart3getEv+0x88>
#endif // __AVR_XMEGA__
        }
        
        // return if nonblocking
        if ((flags & USART_RX_QUEUE_EMPTY) && nonblocking)
                return 0;
    3d40:	c0 e0       	ldi	r28, 0x00	; 0
#endif // __AVR_XMEGA__
        
        SREG = saved_status;
        
        return c;
}
    3d42:	8c 2f       	mov	r24, r28
    3d44:	df 91       	pop	r29
    3d46:	cf 91       	pop	r28
    3d48:	08 95       	ret
        
        if (!(flags & USART_RUNNING) || (!(SREG & SREG_I) && (flags & USART_RX_QUEUE_EMPTY)))
                return 0;
        
        // blocking read if no buffer
        if (rxbuf_size == 0)
    3d4a:	81 89       	ldd	r24, Z+17	; 0x11
    3d4c:	92 89       	ldd	r25, Z+18	; 0x12
    3d4e:	00 97       	sbiw	r24, 0x00	; 0
    3d50:	49 f6       	brne	.-110    	; 0x3ce4 <_ZN5Usart3getEv+0x2a>
        {
#ifdef __AVR_XMEGA__
                while (!(usart->STATUS & USART_RXCIF_bm)) { };
    3d52:	04 80       	ldd	r0, Z+4	; 0x04
    3d54:	f5 81       	ldd	r31, Z+5	; 0x05
    3d56:	e0 2d       	mov	r30, r0
    3d58:	c0 cf       	rjmp	.-128    	; 0x3cda <_ZN5Usart3getEv+0x20>

00003d5a <_ZN5Usart5beginElcc>:
}
#endif // __AVR_XMEGA__


void __attribute__ ((noinline)) Usart::begin(long baud, char _clk2x, char puen)
{
    3d5a:	9f 92       	push	r9
    3d5c:	af 92       	push	r10
    3d5e:	bf 92       	push	r11
    3d60:	cf 92       	push	r12
    3d62:	df 92       	push	r13
    3d64:	ef 92       	push	r14
    3d66:	ff 92       	push	r15
    3d68:	0f 93       	push	r16
    3d6a:	1f 93       	push	r17
    3d6c:	cf 93       	push	r28
    3d6e:	df 93       	push	r29
    3d70:	0f 92       	push	r0
    3d72:	cd b7       	in	r28, 0x3d	; 61
    3d74:	de b7       	in	r29, 0x3e	; 62
    3d76:	5c 01       	movw	r10, r24
    3d78:	6a 01       	movw	r12, r20
    3d7a:	7b 01       	movw	r14, r22
        PORT_t *port;
        unsigned int bsel;
        char bscale;
        char clk2x;
        
        pin = get_txpin(usart_ind);
    3d7c:	dc 01       	movw	r26, r24
    3d7e:	16 96       	adiw	r26, 0x06	; 6
    3d80:	9c 90       	ld	r9, X
    3d82:	89 2d       	mov	r24, r9
    3d84:	29 83       	std	Y+1, r18	; 0x01
    3d86:	0e 94 c0 1d 	call	0x3b80	; 0x3b80 <_ZN5Usart9get_txpinEc>
    3d8a:	18 2f       	mov	r17, r24
        port = get_port(usart_ind);
    3d8c:	89 2d       	mov	r24, r9
    3d8e:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <_ZN5Usart8get_portEc>
    3d92:	fc 01       	movw	r30, r24
        pinmask = 1 << pin;
    3d94:	81 e0       	ldi	r24, 0x01	; 1
    3d96:	90 e0       	ldi	r25, 0x00	; 0
    3d98:	01 2e       	mov	r0, r17
    3d9a:	02 c0       	rjmp	.+4      	; 0x3da0 <_ZN5Usart5beginElcc+0x46>
    3d9c:	88 0f       	add	r24, r24
    3d9e:	99 1f       	adc	r25, r25
    3da0:	0a 94       	dec	r0
    3da2:	e2 f7       	brpl	.-8      	; 0x3d9c <_ZN5Usart5beginElcc+0x42>
        port->DIRSET = pinmask;
    3da4:	81 83       	std	Z+1, r24	; 0x01
        port->DIRCLR = pinmask >> 1;
    3da6:	90 e0       	ldi	r25, 0x00	; 0
    3da8:	95 95       	asr	r25
    3daa:	87 95       	ror	r24
    3dac:	82 83       	std	Z+2, r24	; 0x02
        
        if (puen)
    3dae:	29 81       	ldd	r18, Y+1	; 0x01
    3db0:	00 23       	and	r16, r16
    3db2:	29 f0       	breq	.+10     	; 0x3dbe <_ZN5Usart5beginElcc+0x64>
        {
                *(&(port->PIN0CTRL)+(pin-1)) = PORT_OPC_PULLUP_gc;
    3db4:	e1 0f       	add	r30, r17
    3db6:	f1 1d       	adc	r31, r1
    3db8:	3f 96       	adiw	r30, 0x0f	; 15
    3dba:	88 e1       	ldi	r24, 0x18	; 24
    3dbc:	80 83       	st	Z, r24
        {
                bsel = 5;
                bscale = -6;
                clk2x = 0;
        }
        else if ((F_CPU == 32000000L) && (baud == 19200))
    3dbe:	b0 e0       	ldi	r27, 0x00	; 0
    3dc0:	cb 16       	cp	r12, r27
    3dc2:	bb e4       	ldi	r27, 0x4B	; 75
    3dc4:	db 06       	cpc	r13, r27
    3dc6:	b0 e0       	ldi	r27, 0x00	; 0
    3dc8:	eb 06       	cpc	r14, r27
    3dca:	b0 e0       	ldi	r27, 0x00	; 0
    3dcc:	fb 06       	cpc	r15, r27
    3dce:	09 f4       	brne	.+2      	; 0x3dd2 <_ZN5Usart5beginElcc+0x78>
    3dd0:	45 c0       	rjmp	.+138    	; 0x3e5c <_ZN5Usart5beginElcc+0x102>
        {
                bsel = 3301;
                bscale = -5;
                clk2x = 0;
        }
        else if ((F_CPU == 32000000L) && (baud == 38400))
    3dd2:	e0 e0       	ldi	r30, 0x00	; 0
    3dd4:	ce 16       	cp	r12, r30
    3dd6:	e6 e9       	ldi	r30, 0x96	; 150
    3dd8:	de 06       	cpc	r13, r30
    3dda:	e0 e0       	ldi	r30, 0x00	; 0
    3ddc:	ee 06       	cpc	r14, r30
    3dde:	e0 e0       	ldi	r30, 0x00	; 0
    3de0:	fe 06       	cpc	r15, r30
    3de2:	09 f4       	brne	.+2      	; 0x3de6 <_ZN5Usart5beginElcc+0x8c>
    3de4:	40 c0       	rjmp	.+128    	; 0x3e66 <_ZN5Usart5beginElcc+0x10c>
        {
                bsel = 3269;
                bscale = -6;
                clk2x = 0;
        }
        else if ((F_CPU == 32000000L) && (baud == 57600))
    3de6:	f0 e0       	ldi	r31, 0x00	; 0
    3de8:	cf 16       	cp	r12, r31
    3dea:	f1 ee       	ldi	r31, 0xE1	; 225
    3dec:	df 06       	cpc	r13, r31
    3dee:	f0 e0       	ldi	r31, 0x00	; 0
    3df0:	ef 06       	cpc	r14, r31
    3df2:	f0 e0       	ldi	r31, 0x00	; 0
    3df4:	ff 06       	cpc	r15, r31
    3df6:	e1 f1       	breq	.+120    	; 0x3e70 <_ZN5Usart5beginElcc+0x116>
        {
                bsel = 2158;
                bscale = -6;
                clk2x = 0;
        }
        else if ((F_CPU == 32000000L) && (baud == 115200))
    3df8:	80 e0       	ldi	r24, 0x00	; 0
    3dfa:	c8 16       	cp	r12, r24
    3dfc:	82 ec       	ldi	r24, 0xC2	; 194
    3dfe:	d8 06       	cpc	r13, r24
    3e00:	81 e0       	ldi	r24, 0x01	; 1
    3e02:	e8 06       	cpc	r14, r24
    3e04:	80 e0       	ldi	r24, 0x00	; 0
    3e06:	f8 06       	cpc	r15, r24
    3e08:	c1 f1       	breq	.+112    	; 0x3e7a <_ZN5Usart5beginElcc+0x120>
        {
                bsel = 1047;
                bscale = -6;
                clk2x = 0;
        }
        else if (_clk2x)
    3e0a:	22 23       	and	r18, r18
    3e0c:	99 f0       	breq	.+38     	; 0x3e34 <_ZN5Usart5beginElcc+0xda>
        {
                bsel = ((F_CPU) / ((uint32_t)baud * 8) - 1);
    3e0e:	a7 01       	movw	r20, r14
    3e10:	96 01       	movw	r18, r12
    3e12:	f3 e0       	ldi	r31, 0x03	; 3
    3e14:	22 0f       	add	r18, r18
    3e16:	33 1f       	adc	r19, r19
    3e18:	44 1f       	adc	r20, r20
    3e1a:	55 1f       	adc	r21, r21
    3e1c:	fa 95       	dec	r31
    3e1e:	d1 f7       	brne	.-12     	; 0x3e14 <_ZN5Usart5beginElcc+0xba>
    3e20:	60 e0       	ldi	r22, 0x00	; 0
    3e22:	78 e4       	ldi	r23, 0x48	; 72
    3e24:	88 ee       	ldi	r24, 0xE8	; 232
    3e26:	91 e0       	ldi	r25, 0x01	; 1
    3e28:	0e 94 a7 32 	call	0x654e	; 0x654e <__udivmodsi4>
    3e2c:	21 50       	subi	r18, 0x01	; 1
    3e2e:	30 40       	sbci	r19, 0x00	; 0
                bscale = 0;
                clk2x = 1;
    3e30:	81 e0       	ldi	r24, 0x01	; 1
    3e32:	12 c0       	rjmp	.+36     	; 0x3e58 <_ZN5Usart5beginElcc+0xfe>
        }
        else
        {
                bsel = ((F_CPU) / ((uint32_t)baud * 16) - 1);
    3e34:	a7 01       	movw	r20, r14
    3e36:	96 01       	movw	r18, r12
    3e38:	e4 e0       	ldi	r30, 0x04	; 4
    3e3a:	22 0f       	add	r18, r18
    3e3c:	33 1f       	adc	r19, r19
    3e3e:	44 1f       	adc	r20, r20
    3e40:	55 1f       	adc	r21, r21
    3e42:	ea 95       	dec	r30
    3e44:	d1 f7       	brne	.-12     	; 0x3e3a <_ZN5Usart5beginElcc+0xe0>
    3e46:	60 e0       	ldi	r22, 0x00	; 0
    3e48:	78 e4       	ldi	r23, 0x48	; 72
    3e4a:	88 ee       	ldi	r24, 0xE8	; 232
    3e4c:	91 e0       	ldi	r25, 0x01	; 1
    3e4e:	0e 94 a7 32 	call	0x654e	; 0x654e <__udivmodsi4>
    3e52:	21 50       	subi	r18, 0x01	; 1
    3e54:	30 40       	sbci	r19, 0x00	; 0
                bscale = 0;
                clk2x = 0;
    3e56:	80 e0       	ldi	r24, 0x00	; 0
                clk2x = 1;
        }
        else
        {
                bsel = ((F_CPU) / ((uint32_t)baud * 16) - 1);
                bscale = 0;
    3e58:	90 e0       	ldi	r25, 0x00	; 0
    3e5a:	13 c0       	rjmp	.+38     	; 0x3e82 <_ZN5Usart5beginElcc+0x128>
        }
        else if ((F_CPU == 32000000L) && (baud == 19200))
        {
                bsel = 3301;
                bscale = -5;
                clk2x = 0;
    3e5c:	80 e0       	ldi	r24, 0x00	; 0
                clk2x = 0;
        }
        else if ((F_CPU == 32000000L) && (baud == 19200))
        {
                bsel = 3301;
                bscale = -5;
    3e5e:	9b ef       	ldi	r25, 0xFB	; 251
                bscale = -6;
                clk2x = 0;
        }
        else if ((F_CPU == 32000000L) && (baud == 19200))
        {
                bsel = 3301;
    3e60:	25 ee       	ldi	r18, 0xE5	; 229
    3e62:	3c e0       	ldi	r19, 0x0C	; 12
    3e64:	0e c0       	rjmp	.+28     	; 0x3e82 <_ZN5Usart5beginElcc+0x128>
        }
        else if ((F_CPU == 32000000L) && (baud == 38400))
        {
                bsel = 3269;
                bscale = -6;
                clk2x = 0;
    3e66:	80 e0       	ldi	r24, 0x00	; 0
                clk2x = 0;
        }
        else if ((F_CPU == 32000000L) && (baud == 38400))
        {
                bsel = 3269;
                bscale = -6;
    3e68:	9a ef       	ldi	r25, 0xFA	; 250
                bscale = -5;
                clk2x = 0;
        }
        else if ((F_CPU == 32000000L) && (baud == 38400))
        {
                bsel = 3269;
    3e6a:	25 ec       	ldi	r18, 0xC5	; 197
    3e6c:	3c e0       	ldi	r19, 0x0C	; 12
    3e6e:	09 c0       	rjmp	.+18     	; 0x3e82 <_ZN5Usart5beginElcc+0x128>
        }
        else if ((F_CPU == 32000000L) && (baud == 57600))
        {
                bsel = 2158;
                bscale = -6;
                clk2x = 0;
    3e70:	80 e0       	ldi	r24, 0x00	; 0
                clk2x = 0;
        }
        else if ((F_CPU == 32000000L) && (baud == 57600))
        {
                bsel = 2158;
                bscale = -6;
    3e72:	9a ef       	ldi	r25, 0xFA	; 250
                bscale = -6;
                clk2x = 0;
        }
        else if ((F_CPU == 32000000L) && (baud == 57600))
        {
                bsel = 2158;
    3e74:	2e e6       	ldi	r18, 0x6E	; 110
    3e76:	38 e0       	ldi	r19, 0x08	; 8
    3e78:	04 c0       	rjmp	.+8      	; 0x3e82 <_ZN5Usart5beginElcc+0x128>
        }
        else if ((F_CPU == 32000000L) && (baud == 115200))
        {
                bsel = 1047;
                bscale = -6;
                clk2x = 0;
    3e7a:	80 e0       	ldi	r24, 0x00	; 0
                clk2x = 0;
        }
        else if ((F_CPU == 32000000L) && (baud == 115200))
        {
                bsel = 1047;
                bscale = -6;
    3e7c:	9a ef       	ldi	r25, 0xFA	; 250
                bscale = -6;
                clk2x = 0;
        }
        else if ((F_CPU == 32000000L) && (baud == 115200))
        {
                bsel = 1047;
    3e7e:	27 e1       	ldi	r18, 0x17	; 23
    3e80:	34 e0       	ldi	r19, 0x04	; 4
                bsel = ((F_CPU) / ((uint32_t)baud * 16) - 1);
                bscale = 0;
                clk2x = 0;
        }
        
        usart->BAUDCTRLA = (bsel & USART_BSEL_gm);
    3e82:	d5 01       	movw	r26, r10
    3e84:	14 96       	adiw	r26, 0x04	; 4
    3e86:	ed 91       	ld	r30, X+
    3e88:	fc 91       	ld	r31, X
    3e8a:	15 97       	sbiw	r26, 0x05	; 5
    3e8c:	26 83       	std	Z+6, r18	; 0x06
        usart->BAUDCTRLB = ((bscale << USART_BSCALE_gp) & USART_BSCALE_gm) | ((bsel >> 8) & 0x0f);
    3e8e:	14 96       	adiw	r26, 0x04	; 4
    3e90:	ed 91       	ld	r30, X+
    3e92:	fc 91       	ld	r31, X
    3e94:	15 97       	sbiw	r26, 0x05	; 5
    3e96:	23 2f       	mov	r18, r19
    3e98:	2f 70       	andi	r18, 0x0F	; 15
    3e9a:	92 95       	swap	r25
    3e9c:	90 7f       	andi	r25, 0xF0	; 240
    3e9e:	29 2b       	or	r18, r25
    3ea0:	27 83       	std	Z+7, r18	; 0x07
    3ea2:	14 96       	adiw	r26, 0x04	; 4
    3ea4:	ed 91       	ld	r30, X+
    3ea6:	fc 91       	ld	r31, X
    3ea8:	15 97       	sbiw	r26, 0x05	; 5
        
        if (clk2x)
    3eaa:	88 23       	and	r24, r24
    3eac:	11 f0       	breq	.+4      	; 0x3eb2 <_ZN5Usart5beginElcc+0x158>
        {
                usart->CTRLB = USART_RXEN_bm | USART_CLK2X_bm | USART_TXEN_bm;
    3eae:	8c e1       	ldi	r24, 0x1C	; 28
    3eb0:	01 c0       	rjmp	.+2      	; 0x3eb4 <_ZN5Usart5beginElcc+0x15a>
        }
        else
        {
                usart->CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    3eb2:	88 e1       	ldi	r24, 0x18	; 24
    3eb4:	84 83       	std	Z+4, r24	; 0x04
        }
        
        if (rxbuf_size > 0)
    3eb6:	f5 01       	movw	r30, r10
    3eb8:	81 89       	ldd	r24, Z+17	; 0x11
    3eba:	92 89       	ldd	r25, Z+18	; 0x12
    3ebc:	04 80       	ldd	r0, Z+4	; 0x04
    3ebe:	f5 81       	ldd	r31, Z+5	; 0x05
    3ec0:	e0 2d       	mov	r30, r0
    3ec2:	00 97       	sbiw	r24, 0x00	; 0
    3ec4:	19 f0       	breq	.+6      	; 0x3ecc <_ZN5Usart5beginElcc+0x172>
        {
                usart->CTRLA = USART_RXCINTLVL_MED_gc;
    3ec6:	80 e2       	ldi	r24, 0x20	; 32
    3ec8:	83 83       	std	Z+3, r24	; 0x03
    3eca:	01 c0       	rjmp	.+2      	; 0x3ece <_ZN5Usart5beginElcc+0x174>
        }
        else
        {
                usart->CTRLA = 0;
    3ecc:	13 82       	std	Z+3, r1	; 0x03
        }
        
        flags |= USART_RUNNING;
    3ece:	d5 01       	movw	r26, r10
    3ed0:	5e 96       	adiw	r26, 0x1e	; 30
    3ed2:	8c 91       	ld	r24, X
    3ed4:	5e 97       	sbiw	r26, 0x1e	; 30
    3ed6:	81 60       	ori	r24, 0x01	; 1
    3ed8:	5e 96       	adiw	r26, 0x1e	; 30
    3eda:	8c 93       	st	X, r24
        
        update_rts();
    3edc:	c5 01       	movw	r24, r10
    3ede:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <_ZN5Usart10update_rtsEv>
        
        *ucsrc = _BV(UCSZ01) | _BV(UCSZ00);
        
        flags |= USART_RUNNING;
#endif // __AVR_XMEGA__
}
    3ee2:	0f 90       	pop	r0
    3ee4:	df 91       	pop	r29
    3ee6:	cf 91       	pop	r28
    3ee8:	1f 91       	pop	r17
    3eea:	0f 91       	pop	r16
    3eec:	ff 90       	pop	r15
    3eee:	ef 90       	pop	r14
    3ef0:	df 90       	pop	r13
    3ef2:	cf 90       	pop	r12
    3ef4:	bf 90       	pop	r11
    3ef6:	af 90       	pop	r10
    3ef8:	9f 90       	pop	r9
    3efa:	08 95       	ret

00003efc <_ZN5Usart3endEv>:


void __attribute__ ((noinline)) Usart::end()
{
    3efc:	fc 01       	movw	r30, r24
#ifdef __AVR_XMEGA__
        usart->CTRLA = 0;
    3efe:	a4 81       	ldd	r26, Z+4	; 0x04
    3f00:	b5 81       	ldd	r27, Z+5	; 0x05
    3f02:	13 96       	adiw	r26, 0x03	; 3
    3f04:	1c 92       	st	X, r1
        usart->CTRLB = 0;
    3f06:	a4 81       	ldd	r26, Z+4	; 0x04
    3f08:	b5 81       	ldd	r27, Z+5	; 0x05
    3f0a:	14 96       	adiw	r26, 0x04	; 4
    3f0c:	1c 92       	st	X, r1
    3f0e:	14 97       	sbiw	r26, 0x04	; 4
#else // __AVR_XMEGA__
        *ucsrb = 0;
#endif // __AVR_XMEGA__
        flags &= ~USART_RUNNING;
    3f10:	86 8d       	ldd	r24, Z+30	; 0x1e
    3f12:	8e 7f       	andi	r24, 0xFE	; 254
    3f14:	86 8f       	std	Z+30, r24	; 0x1e
}
    3f16:	08 95       	ret

00003f18 <_ZN5UsartD1Ev>:
        #endif // UDR1
#endif // __AVR_XMEGA__
}


Usart::~Usart()
    3f18:	cf 93       	push	r28
    3f1a:	df 93       	push	r29
    3f1c:	ec 01       	movw	r28, r24
    3f1e:	86 e6       	ldi	r24, 0x66	; 102
    3f20:	90 e2       	ldi	r25, 0x20	; 32
    3f22:	88 83       	st	Y, r24
    3f24:	99 83       	std	Y+1, r25	; 0x01
    3f26:	42 96       	adiw	r24, 0x12	; 18
    3f28:	8a 83       	std	Y+2, r24	; 0x02
    3f2a:	9b 83       	std	Y+3, r25	; 0x03
{
        end();
    3f2c:	ce 01       	movw	r24, r28
    3f2e:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <_ZN5Usart3endEv>
        usart_list[(int)usart_ind] = 0;
    3f32:	ee 81       	ldd	r30, Y+6	; 0x06
    3f34:	f0 e0       	ldi	r31, 0x00	; 0
    3f36:	ee 0f       	add	r30, r30
    3f38:	ff 1f       	adc	r31, r31
    3f3a:	ed 57       	subi	r30, 0x7D	; 125
    3f3c:	f4 4d       	sbci	r31, 0xD4	; 212
    3f3e:	10 82       	st	Z, r1
    3f40:	11 82       	std	Z+1, r1	; 0x01
}
    3f42:	df 91       	pop	r29
    3f44:	cf 91       	pop	r28
    3f46:	08 95       	ret

00003f48 <_ZN5Usart4recvEv>:
        flags &= ~USART_RUNNING;
}


void Usart::recv()
{
    3f48:	fc 01       	movw	r30, r24
        char tmp;
#ifdef __AVR_XMEGA__
        if (usart->STATUS & USART_RXCIF_bm)
    3f4a:	a4 81       	ldd	r26, Z+4	; 0x04
    3f4c:	b5 81       	ldd	r27, Z+5	; 0x05
    3f4e:	11 96       	adiw	r26, 0x01	; 1
    3f50:	8c 91       	ld	r24, X
    3f52:	11 97       	sbiw	r26, 0x01	; 1
    3f54:	87 ff       	sbrs	r24, 7
    3f56:	25 c0       	rjmp	.+74     	; 0x3fa2 <_ZN5Usart4recvEv+0x5a>
#else // __AVR_XMEGA__
        if (*ucsra & _BV(RXC0))
#endif // __AVR_XMEGA__
        {
#ifdef __AVR_XMEGA__
                tmp = usart->DATA;
    3f58:	2c 91       	ld	r18, X
#else // __AVR_XMEGA__
                tmp = *udr;
#endif // __AVR_XMEGA__
                if (!(flags & USART_RX_QUEUE_FULL))
    3f5a:	86 8d       	ldd	r24, Z+30	; 0x1e
    3f5c:	87 fd       	sbrc	r24, 7
    3f5e:	1e c0       	rjmp	.+60     	; 0x3f9c <_ZN5Usart4recvEv+0x54>
                {
                        rxbuf[rxbuf_head++] = tmp;
    3f60:	83 89       	ldd	r24, Z+19	; 0x13
    3f62:	94 89       	ldd	r25, Z+20	; 0x14
    3f64:	a7 85       	ldd	r26, Z+15	; 0x0f
    3f66:	b0 89       	ldd	r27, Z+16	; 0x10
    3f68:	a8 0f       	add	r26, r24
    3f6a:	b9 1f       	adc	r27, r25
    3f6c:	2c 93       	st	X, r18
    3f6e:	01 96       	adiw	r24, 0x01	; 1
    3f70:	83 8b       	std	Z+19, r24	; 0x13
    3f72:	94 8b       	std	Z+20, r25	; 0x14
                        flags &= ~USART_RX_QUEUE_EMPTY;
    3f74:	26 8d       	ldd	r18, Z+30	; 0x1e
    3f76:	2f 7b       	andi	r18, 0xBF	; 191
    3f78:	26 8f       	std	Z+30, r18	; 0x1e
                        if (rxbuf_head >= rxbuf_size)
    3f7a:	21 89       	ldd	r18, Z+17	; 0x11
    3f7c:	32 89       	ldd	r19, Z+18	; 0x12
    3f7e:	82 17       	cp	r24, r18
    3f80:	93 07       	cpc	r25, r19
    3f82:	10 f0       	brcs	.+4      	; 0x3f88 <_ZN5Usart4recvEv+0x40>
                                rxbuf_head = 0;
    3f84:	13 8a       	std	Z+19, r1	; 0x13
    3f86:	14 8a       	std	Z+20, r1	; 0x14
                        if (rxbuf_head == rxbuf_tail)
    3f88:	23 89       	ldd	r18, Z+19	; 0x13
    3f8a:	34 89       	ldd	r19, Z+20	; 0x14
    3f8c:	85 89       	ldd	r24, Z+21	; 0x15
    3f8e:	96 89       	ldd	r25, Z+22	; 0x16
    3f90:	28 17       	cp	r18, r24
    3f92:	39 07       	cpc	r19, r25
    3f94:	19 f4       	brne	.+6      	; 0x3f9c <_ZN5Usart4recvEv+0x54>
                                flags |= USART_RX_QUEUE_FULL;
    3f96:	86 8d       	ldd	r24, Z+30	; 0x1e
    3f98:	80 68       	ori	r24, 0x80	; 128
    3f9a:	86 8f       	std	Z+30, r24	; 0x1e
                }
#ifdef __AVR_XMEGA__
                update_rts();
    3f9c:	cf 01       	movw	r24, r30
    3f9e:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <_ZN5Usart10update_rtsEv>
    3fa2:	08 95       	ret

00003fa4 <_ZN5Usart4xmitEv>:
        }
}


void Usart::xmit()
{
    3fa4:	cf 93       	push	r28
    3fa6:	df 93       	push	r29
    3fa8:	fc 01       	movw	r30, r24
        if (!(flags & USART_TX_QUEUE_EMPTY))
    3faa:	86 8d       	ldd	r24, Z+30	; 0x1e
    3fac:	84 fd       	sbrc	r24, 4
    3fae:	21 c0       	rjmp	.+66     	; 0x3ff2 <_ZN5Usart4xmitEv+0x4e>
        {
#ifdef __AVR_XMEGA__
                usart->DATA = txbuf[txbuf_tail++];
    3fb0:	c4 81       	ldd	r28, Z+4	; 0x04
    3fb2:	d5 81       	ldd	r29, Z+5	; 0x05
    3fb4:	85 85       	ldd	r24, Z+13	; 0x0d
    3fb6:	96 85       	ldd	r25, Z+14	; 0x0e
    3fb8:	a7 81       	ldd	r26, Z+7	; 0x07
    3fba:	b0 85       	ldd	r27, Z+8	; 0x08
    3fbc:	a8 0f       	add	r26, r24
    3fbe:	b9 1f       	adc	r27, r25
    3fc0:	2c 91       	ld	r18, X
    3fc2:	28 83       	st	Y, r18
    3fc4:	01 96       	adiw	r24, 0x01	; 1
    3fc6:	85 87       	std	Z+13, r24	; 0x0d
    3fc8:	96 87       	std	Z+14, r25	; 0x0e
#else // __AVR_XMEGA__
                *udr = txbuf[txbuf_tail++];
#endif // __AVR_XMEGA__
                flags &= ~USART_TX_QUEUE_FULL;
    3fca:	26 8d       	ldd	r18, Z+30	; 0x1e
    3fcc:	2f 7d       	andi	r18, 0xDF	; 223
    3fce:	26 8f       	std	Z+30, r18	; 0x1e
                if (txbuf_tail >= txbuf_size)
    3fd0:	21 85       	ldd	r18, Z+9	; 0x09
    3fd2:	32 85       	ldd	r19, Z+10	; 0x0a
    3fd4:	82 17       	cp	r24, r18
    3fd6:	93 07       	cpc	r25, r19
    3fd8:	10 f0       	brcs	.+4      	; 0x3fde <_ZN5Usart4xmitEv+0x3a>
                        txbuf_tail = 0;
    3fda:	15 86       	std	Z+13, r1	; 0x0d
    3fdc:	16 86       	std	Z+14, r1	; 0x0e
                if (txbuf_head == txbuf_tail)
    3fde:	23 85       	ldd	r18, Z+11	; 0x0b
    3fe0:	34 85       	ldd	r19, Z+12	; 0x0c
    3fe2:	85 85       	ldd	r24, Z+13	; 0x0d
    3fe4:	96 85       	ldd	r25, Z+14	; 0x0e
    3fe6:	28 17       	cp	r18, r24
    3fe8:	39 07       	cpc	r19, r25
    3fea:	19 f4       	brne	.+6      	; 0x3ff2 <_ZN5Usart4xmitEv+0x4e>
                        flags |= USART_TX_QUEUE_EMPTY;
    3fec:	86 8d       	ldd	r24, Z+30	; 0x1e
    3fee:	80 61       	ori	r24, 0x10	; 16
    3ff0:	86 8f       	std	Z+30, r24	; 0x1e
        }
        if (flags & USART_TX_QUEUE_EMPTY)
    3ff2:	86 8d       	ldd	r24, Z+30	; 0x1e
    3ff4:	84 ff       	sbrs	r24, 4
    3ff6:	06 c0       	rjmp	.+12     	; 0x4004 <__stack+0x5>
        {
#ifdef __AVR_XMEGA__
                usart->CTRLA &= ~USART_DREINTLVL_gm;
    3ff8:	04 80       	ldd	r0, Z+4	; 0x04
    3ffa:	f5 81       	ldd	r31, Z+5	; 0x05
    3ffc:	e0 2d       	mov	r30, r0
    3ffe:	83 81       	ldd	r24, Z+3	; 0x03
    4000:	8c 7f       	andi	r24, 0xFC	; 252
    4002:	83 83       	std	Z+3, r24	; 0x03
#else // __AVR_XMEGA__
                *ucsrb &= ~_BV(UDRIE0);
#endif // __AVR_XMEGA__
        }
}
    4004:	df 91       	pop	r29
    4006:	cf 91       	pop	r28
    4008:	08 95       	ret

0000400a <_ZN5Usart12setup_streamEP6__file>:
        return c;
}


void Usart::setup_stream(FILE *stream)
{
    400a:	fb 01       	movw	r30, r22
        fdev_setup_stream(stream, put, get, _FDEV_SETUP_RW);
    400c:	27 e0       	ldi	r18, 0x07	; 7
    400e:	3d e1       	ldi	r19, 0x1D	; 29
    4010:	20 87       	std	Z+8, r18	; 0x08
    4012:	31 87       	std	Z+9, r19	; 0x09
    4014:	2c e1       	ldi	r18, 0x1C	; 28
    4016:	3d e1       	ldi	r19, 0x1D	; 29
    4018:	22 87       	std	Z+10, r18	; 0x0a
    401a:	33 87       	std	Z+11, r19	; 0x0b
    401c:	23 e0       	ldi	r18, 0x03	; 3
    401e:	23 83       	std	Z+3, r18	; 0x03
        fdev_set_udata(stream, this);
    4020:	84 87       	std	Z+12, r24	; 0x0c
    4022:	95 87       	std	Z+13, r25	; 0x0d
}
    4024:	08 95       	ret

00004026 <_ZN5Usart17handle_interruptsEPS_>:
}


// static
void Usart::handle_interrupts(Usart *_usart)
{
    4026:	0f 93       	push	r16
    4028:	1f 93       	push	r17
    402a:	cf 93       	push	r28
    402c:	df 93       	push	r29
    402e:	8c 01       	movw	r16, r24
        if (_usart)
    4030:	00 97       	sbiw	r24, 0x00	; 0
    4032:	79 f0       	breq	.+30     	; 0x4052 <_ZN5Usart17handle_interruptsEPS_+0x2c>
        {
#ifdef __AVR_XMEGA__
                USART_t *dev = _usart->usart;
    4034:	fc 01       	movw	r30, r24
    4036:	c4 81       	ldd	r28, Z+4	; 0x04
    4038:	d5 81       	ldd	r29, Z+5	; 0x05
                if (dev->STATUS & USART_DREIF_bm)
    403a:	89 81       	ldd	r24, Y+1	; 0x01
    403c:	85 ff       	sbrs	r24, 5
    403e:	03 c0       	rjmp	.+6      	; 0x4046 <_ZN5Usart17handle_interruptsEPS_+0x20>
                        _usart->xmit();
    4040:	c8 01       	movw	r24, r16
    4042:	0e 94 d2 1f 	call	0x3fa4	; 0x3fa4 <_ZN5Usart4xmitEv>
                if (dev->STATUS & USART_RXCIF_bm)
    4046:	89 81       	ldd	r24, Y+1	; 0x01
    4048:	87 ff       	sbrs	r24, 7
    404a:	03 c0       	rjmp	.+6      	; 0x4052 <_ZN5Usart17handle_interruptsEPS_+0x2c>
                        _usart->recv();
    404c:	c8 01       	movw	r24, r16
    404e:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <_ZN5Usart4recvEv>
                        _usart->xmit();
                if (*(_usart->ucsra) & _BV(RXC0))
                        _usart->recv();
#endif // __AVR_XMEGA__
        }
}
    4052:	df 91       	pop	r29
    4054:	cf 91       	pop	r28
    4056:	1f 91       	pop	r17
    4058:	0f 91       	pop	r16
    405a:	08 95       	ret

0000405c <_ZThn2_N3Spi3putEc>:
    405c:	02 97       	sbiw	r24, 0x02	; 2
    405e:	0e 94 32 20 	call	0x4064	; 0x4064 <_ZN3Spi3putEc>
    4062:	08 95       	ret

00004064 <_ZN3Spi3putEc>:
        SREG = saved_status;
}


void Spi::put(char c)
{
    4064:	fc 01       	movw	r30, r24
        uint8_t saved_status = 0;
        
        saved_status = SREG;
    4066:	8f b7       	in	r24, 0x3f	; 63
        cli();
    4068:	f8 94       	cli
        
        spi->DATA = c;
    406a:	a4 81       	ldd	r26, Z+4	; 0x04
    406c:	b5 81       	ldd	r27, Z+5	; 0x05
    406e:	13 96       	adiw	r26, 0x03	; 3
    4070:	6c 93       	st	X, r22
    4072:	13 97       	sbiw	r26, 0x03	; 3
        SPI_WAIT();
    4074:	04 80       	ldd	r0, Z+4	; 0x04
    4076:	f5 81       	ldd	r31, Z+5	; 0x05
    4078:	e0 2d       	mov	r30, r0
    407a:	92 81       	ldd	r25, Z+2	; 0x02
    407c:	97 ff       	sbrs	r25, 7
    407e:	fd cf       	rjmp	.-6      	; 0x407a <_ZN3Spi3putEc+0x16>
        
        SREG = saved_status;
    4080:	8f bf       	out	0x3f, r24	; 63
}
    4082:	08 95       	ret

00004084 <_ZN3Spi9which_spiEP10SPI_struct>:


char __attribute__ ((noinline)) Spi::which_spi(SPI_t *_spi)
{
#if MAX_SPI_IND >= SPIC_IND
        if ((uintptr_t)_spi == (uintptr_t)&SPIC)
    4084:	28 e0       	ldi	r18, 0x08	; 8
    4086:	80 3c       	cpi	r24, 0xC0	; 192
    4088:	92 07       	cpc	r25, r18
    408a:	71 f0       	breq	.+28     	; 0x40a8 <_ZN3Spi9which_spiEP10SPI_struct+0x24>
                return SPIC_IND;
#endif
#if MAX_SPI_IND >= SPID_IND
        if ((uintptr_t)_spi == (uintptr_t)&SPID)
    408c:	29 e0       	ldi	r18, 0x09	; 9
    408e:	80 3c       	cpi	r24, 0xC0	; 192
    4090:	92 07       	cpc	r25, r18
    4092:	61 f0       	breq	.+24     	; 0x40ac <_ZN3Spi9which_spiEP10SPI_struct+0x28>
                return SPID_IND;
#endif
#if MAX_SPI_IND >= SPIE_IND
        if ((uintptr_t)_spi == (uintptr_t)&SPIE)
    4094:	2a e0       	ldi	r18, 0x0A	; 10
    4096:	80 3c       	cpi	r24, 0xC0	; 192
    4098:	92 07       	cpc	r25, r18
    409a:	51 f0       	breq	.+20     	; 0x40b0 <_ZN3Spi9which_spiEP10SPI_struct+0x2c>
                return SPIE_IND;
#endif
#if MAX_SPI_IND >= SPIF_IND
        if ((uintptr_t)_spi == (uintptr_t)&SPIF)
    409c:	2b e0       	ldi	r18, 0x0B	; 11
    409e:	80 3c       	cpi	r24, 0xC0	; 192
    40a0:	92 07       	cpc	r25, r18
    40a2:	41 f4       	brne	.+16     	; 0x40b4 <_ZN3Spi9which_spiEP10SPI_struct+0x30>
                return SPIF_IND;
    40a4:	84 e0       	ldi	r24, 0x04	; 4
    40a6:	08 95       	ret

char __attribute__ ((noinline)) Spi::which_spi(SPI_t *_spi)
{
#if MAX_SPI_IND >= SPIC_IND
        if ((uintptr_t)_spi == (uintptr_t)&SPIC)
                return SPIC_IND;
    40a8:	81 e0       	ldi	r24, 0x01	; 1
    40aa:	08 95       	ret
#endif
#if MAX_SPI_IND >= SPID_IND
        if ((uintptr_t)_spi == (uintptr_t)&SPID)
                return SPID_IND;
    40ac:	82 e0       	ldi	r24, 0x02	; 2
    40ae:	08 95       	ret
#endif
#if MAX_SPI_IND >= SPIE_IND
        if ((uintptr_t)_spi == (uintptr_t)&SPIE)
                return SPIE_IND;
    40b0:	83 e0       	ldi	r24, 0x03	; 3
    40b2:	08 95       	ret
#endif
#if MAX_SPI_IND >= SPIF_IND
        if ((uintptr_t)_spi == (uintptr_t)&SPIF)
                return SPIF_IND;
#endif
        return 0;
    40b4:	80 e0       	ldi	r24, 0x00	; 0
}
    40b6:	08 95       	ret

000040b8 <_ZN3SpiC1EP10SPI_struct>:
                default:
                        return 0;
        }
}

Spi::Spi(SPI_t *_spi) :
    40b8:	cf 93       	push	r28
    40ba:	df 93       	push	r29
    40bc:	ec 01       	movw	r28, r24
    40be:	cb 01       	movw	r24, r22
        spi(_spi),
        flags(0)
    40c0:	2c e9       	ldi	r18, 0x9C	; 156
    40c2:	30 e2       	ldi	r19, 0x20	; 32
    40c4:	28 83       	st	Y, r18
    40c6:	39 83       	std	Y+1, r19	; 0x01
    40c8:	20 5f       	subi	r18, 0xF0	; 240
    40ca:	3f 4f       	sbci	r19, 0xFF	; 255
    40cc:	2a 83       	std	Y+2, r18	; 0x02
    40ce:	3b 83       	std	Y+3, r19	; 0x03
    40d0:	6c 83       	std	Y+4, r22	; 0x04
    40d2:	7d 83       	std	Y+5, r23	; 0x05
    40d4:	18 86       	std	Y+8, r1	; 0x08
{
        spi_ind = which_spi(spi);
    40d6:	0e 94 42 20 	call	0x4084	; 0x4084 <_ZN3Spi9which_spiEP10SPI_struct>
    40da:	90 e0       	ldi	r25, 0x00	; 0
    40dc:	8e 83       	std	Y+6, r24	; 0x06
    40de:	9f 83       	std	Y+7, r25	; 0x07
        spi_list[spi_ind-1] = this;
    40e0:	fc 01       	movw	r30, r24
    40e2:	ee 0f       	add	r30, r30
    40e4:	ff 1f       	adc	r31, r31
    40e6:	ef 56       	subi	r30, 0x6F	; 111
    40e8:	f4 4d       	sbci	r31, 0xD4	; 212
    40ea:	c0 83       	st	Z, r28
    40ec:	d1 83       	std	Z+1, r29	; 0x01
}
    40ee:	df 91       	pop	r29
    40f0:	cf 91       	pop	r28
    40f2:	08 95       	ret

000040f4 <_ZN3Spi3endEv>:
}


void __attribute__ ((noinline)) Spi::end()
{
        spi->CTRL = 0;
    40f4:	dc 01       	movw	r26, r24
    40f6:	14 96       	adiw	r26, 0x04	; 4
    40f8:	ed 91       	ld	r30, X+
    40fa:	fc 91       	ld	r31, X
    40fc:	15 97       	sbiw	r26, 0x05	; 5
    40fe:	10 82       	st	Z, r1
}
    4100:	08 95       	ret

00004102 <_ZN3SpiD1Ev>:
        spi_ind = which_spi(spi);
        spi_list[spi_ind-1] = this;
}


Spi::~Spi()
    4102:	cf 93       	push	r28
    4104:	df 93       	push	r29
    4106:	ec 01       	movw	r28, r24
    4108:	8c e9       	ldi	r24, 0x9C	; 156
    410a:	90 e2       	ldi	r25, 0x20	; 32
    410c:	88 83       	st	Y, r24
    410e:	99 83       	std	Y+1, r25	; 0x01
    4110:	40 96       	adiw	r24, 0x10	; 16
    4112:	8a 83       	std	Y+2, r24	; 0x02
    4114:	9b 83       	std	Y+3, r25	; 0x03
{
        end();
    4116:	ce 01       	movw	r24, r28
    4118:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <_ZN3Spi3endEv>
        spi_list[spi_ind-1] = 0;
    411c:	ee 81       	ldd	r30, Y+6	; 0x06
    411e:	ff 81       	ldd	r31, Y+7	; 0x07
    4120:	ee 0f       	add	r30, r30
    4122:	ff 1f       	adc	r31, r31
    4124:	ef 56       	subi	r30, 0x6F	; 111
    4126:	f4 4d       	sbci	r31, 0xD4	; 212
    4128:	10 82       	st	Z, r1
    412a:	11 82       	std	Z+1, r1	; 0x01
}
    412c:	df 91       	pop	r29
    412e:	cf 91       	pop	r28
    4130:	08 95       	ret

00004132 <_ZN3Spi10transceiveEc>:
        spi->CTRL = 0;
}


char Spi::transceive(char c)
{
    4132:	fc 01       	movw	r30, r24
        uint8_t saved_status = 0;
        
        saved_status = SREG;
    4134:	8f b7       	in	r24, 0x3f	; 63
        cli();
    4136:	f8 94       	cli
        
        spi->DATA = c;
    4138:	a4 81       	ldd	r26, Z+4	; 0x04
    413a:	b5 81       	ldd	r27, Z+5	; 0x05
    413c:	13 96       	adiw	r26, 0x03	; 3
    413e:	6c 93       	st	X, r22
    4140:	13 97       	sbiw	r26, 0x03	; 3
        SPI_WAIT();
    4142:	04 80       	ldd	r0, Z+4	; 0x04
    4144:	f5 81       	ldd	r31, Z+5	; 0x05
    4146:	e0 2d       	mov	r30, r0
    4148:	82 81       	ldd	r24, Z+2	; 0x02
    414a:	87 ff       	sbrs	r24, 7
    414c:	fd cf       	rjmp	.-6      	; 0x4148 <_ZN3Spi10transceiveEc+0x16>
        return spi->DATA;
    414e:	83 81       	ldd	r24, Z+3	; 0x03
        
        SREG = saved_status;
}
    4150:	08 95       	ret

00004152 <_ZN3Spi3getEv>:
}


char Spi::get()
{
        return transceive(0);
    4152:	60 e0       	ldi	r22, 0x00	; 0
    4154:	0e 94 99 20 	call	0x4132	; 0x4132 <_ZN3Spi10transceiveEc>
}
    4158:	08 95       	ret

0000415a <_ZThn2_N3I2c3putEc>:
    415a:	02 97       	sbiw	r24, 0x02	; 2
    415c:	0e 94 b1 20 	call	0x4162	; 0x4162 <_ZN3I2c3putEc>
    4160:	08 95       	ret

00004162 <_ZN3I2c3putEc>:
        }
}


void I2c::put(char c)
{
    4162:	fc 01       	movw	r30, r24
        if (flags & I2C_STATE_ACTIVE)
    4164:	80 85       	ldd	r24, Z+8	; 0x08
    4166:	80 ff       	sbrs	r24, 0
    4168:	10 c0       	rjmp	.+32     	; 0x418a <_ZN3I2c3putEc+0x28>
        {
                twi->MASTER.DATA = c;
    416a:	a4 81       	ldd	r26, Z+4	; 0x04
    416c:	b5 81       	ldd	r27, Z+5	; 0x05
    416e:	17 96       	adiw	r26, 0x07	; 7
    4170:	6c 93       	st	X, r22
                twi->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    4172:	a4 81       	ldd	r26, Z+4	; 0x04
    4174:	b5 81       	ldd	r27, Z+5	; 0x05
    4176:	82 e0       	ldi	r24, 0x02	; 2
    4178:	13 96       	adiw	r26, 0x03	; 3
    417a:	8c 93       	st	X, r24
    417c:	13 97       	sbiw	r26, 0x03	; 3
                I2C_WAIT_WRITE_MASTER();
    417e:	04 80       	ldd	r0, Z+4	; 0x04
    4180:	f5 81       	ldd	r31, Z+5	; 0x05
    4182:	e0 2d       	mov	r30, r0
    4184:	84 81       	ldd	r24, Z+4	; 0x04
    4186:	86 ff       	sbrs	r24, 6
    4188:	fd cf       	rjmp	.-6      	; 0x4184 <_ZN3I2c3putEc+0x22>
    418a:	08 95       	ret

0000418c <_ZN3I2c3getEv>:
        }
}


char I2c::get()
{
    418c:	fc 01       	movw	r30, r24
        char c = 0;
        if (flags & I2C_STATE_ACTIVE)
    418e:	80 85       	ldd	r24, Z+8	; 0x08
    4190:	80 ff       	sbrs	r24, 0
    4192:	16 c0       	rjmp	.+44     	; 0x41c0 <_ZN3I2c3getEv+0x34>
        {
                if (!(twi->MASTER.STATUS & TWI_MASTER_RIF_bm))
    4194:	a4 81       	ldd	r26, Z+4	; 0x04
    4196:	b5 81       	ldd	r27, Z+5	; 0x05
    4198:	14 96       	adiw	r26, 0x04	; 4
    419a:	8c 91       	ld	r24, X
    419c:	14 97       	sbiw	r26, 0x04	; 4
    419e:	87 fd       	sbrc	r24, 7
    41a0:	0a c0       	rjmp	.+20     	; 0x41b6 <_ZN3I2c3getEv+0x2a>
                {
                        twi->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    41a2:	82 e0       	ldi	r24, 0x02	; 2
    41a4:	13 96       	adiw	r26, 0x03	; 3
    41a6:	8c 93       	st	X, r24
                        I2C_WAIT_READ_MASTER();
    41a8:	a4 81       	ldd	r26, Z+4	; 0x04
    41aa:	b5 81       	ldd	r27, Z+5	; 0x05
    41ac:	14 96       	adiw	r26, 0x04	; 4
    41ae:	8c 91       	ld	r24, X
    41b0:	14 97       	sbiw	r26, 0x04	; 4
    41b2:	87 ff       	sbrs	r24, 7
    41b4:	fb cf       	rjmp	.-10     	; 0x41ac <_ZN3I2c3getEv+0x20>
                }
                c = twi->MASTER.DATA;
    41b6:	04 80       	ldd	r0, Z+4	; 0x04
    41b8:	f5 81       	ldd	r31, Z+5	; 0x05
    41ba:	e0 2d       	mov	r30, r0
    41bc:	87 81       	ldd	r24, Z+7	; 0x07
    41be:	08 95       	ret
}


char I2c::get()
{
        char c = 0;
    41c0:	80 e0       	ldi	r24, 0x00	; 0
                        I2C_WAIT_READ_MASTER();
                }
                c = twi->MASTER.DATA;
        }
        return c;
}
    41c2:	08 95       	ret

000041c4 <_ZN3I2c9which_twiEP10TWI_struct>:


char __attribute__ ((noinline)) I2c::which_twi(TWI_t *_twi)
{
#if MAX_TWI_IND >= TWIC_IND
        if ((uintptr_t)_twi == (uintptr_t)&TWIC)
    41c4:	24 e0       	ldi	r18, 0x04	; 4
    41c6:	80 38       	cpi	r24, 0x80	; 128
    41c8:	92 07       	cpc	r25, r18
    41ca:	31 f0       	breq	.+12     	; 0x41d8 <_ZN3I2c9which_twiEP10TWI_struct+0x14>
                return TWIC_IND;
#endif
#if MAX_TWI_IND >= TWIE_IND
        if ((uintptr_t)_twi == (uintptr_t)&TWIE)
    41cc:	24 e0       	ldi	r18, 0x04	; 4
    41ce:	80 3a       	cpi	r24, 0xA0	; 160
    41d0:	92 07       	cpc	r25, r18
    41d2:	21 f4       	brne	.+8      	; 0x41dc <_ZN3I2c9which_twiEP10TWI_struct+0x18>
                return TWIE_IND;
    41d4:	82 e0       	ldi	r24, 0x02	; 2
    41d6:	08 95       	ret

char __attribute__ ((noinline)) I2c::which_twi(TWI_t *_twi)
{
#if MAX_TWI_IND >= TWIC_IND
        if ((uintptr_t)_twi == (uintptr_t)&TWIC)
                return TWIC_IND;
    41d8:	81 e0       	ldi	r24, 0x01	; 1
    41da:	08 95       	ret
#endif
#if MAX_TWI_IND >= TWIF_IND
        if ((uintptr_t)_twi == (uintptr_t)&TWIF)
                return TWIF_IND;
#endif
        return 0;
    41dc:	80 e0       	ldi	r24, 0x00	; 0
}
    41de:	08 95       	ret

000041e0 <_ZN3I2cC1EP10TWI_struct>:
                default:
                        return 0;
        }
}

I2c::I2c(TWI_t *_twi) :
    41e0:	cf 93       	push	r28
    41e2:	df 93       	push	r29
    41e4:	ec 01       	movw	r28, r24
    41e6:	cb 01       	movw	r24, r22
        twi(_twi),
        flags(0)
    41e8:	28 eb       	ldi	r18, 0xB8	; 184
    41ea:	30 e2       	ldi	r19, 0x20	; 32
    41ec:	28 83       	st	Y, r18
    41ee:	39 83       	std	Y+1, r19	; 0x01
    41f0:	20 5f       	subi	r18, 0xF0	; 240
    41f2:	3f 4f       	sbci	r19, 0xFF	; 255
    41f4:	2a 83       	std	Y+2, r18	; 0x02
    41f6:	3b 83       	std	Y+3, r19	; 0x03
    41f8:	6c 83       	std	Y+4, r22	; 0x04
    41fa:	7d 83       	std	Y+5, r23	; 0x05
    41fc:	18 86       	std	Y+8, r1	; 0x08
{
        twi_ind = which_twi(twi);
    41fe:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <_ZN3I2c9which_twiEP10TWI_struct>
    4202:	90 e0       	ldi	r25, 0x00	; 0
    4204:	8e 83       	std	Y+6, r24	; 0x06
    4206:	9f 83       	std	Y+7, r25	; 0x07
        i2c_list[twi_ind-1] = this;
    4208:	fc 01       	movw	r30, r24
    420a:	ee 0f       	add	r30, r30
    420c:	ff 1f       	adc	r31, r31
    420e:	e7 56       	subi	r30, 0x67	; 103
    4210:	f4 4d       	sbci	r31, 0xD4	; 212
    4212:	c0 83       	st	Z, r28
    4214:	d1 83       	std	Z+1, r29	; 0x01
}
    4216:	df 91       	pop	r29
    4218:	cf 91       	pop	r28
    421a:	08 95       	ret

0000421c <_ZN3I2c3endEv>:
        twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
}


void __attribute__ ((noinline)) I2c::end()
{
    421c:	fc 01       	movw	r30, r24
        twi->MASTER.CTRLA = 0;
    421e:	a4 81       	ldd	r26, Z+4	; 0x04
    4220:	b5 81       	ldd	r27, Z+5	; 0x05
    4222:	11 96       	adiw	r26, 0x01	; 1
    4224:	1c 92       	st	X, r1
    4226:	11 97       	sbiw	r26, 0x01	; 1
        
        flags = 0;
    4228:	10 86       	std	Z+8, r1	; 0x08
}
    422a:	08 95       	ret

0000422c <_ZN3I2cD1Ev>:
        twi_ind = which_twi(twi);
        i2c_list[twi_ind-1] = this;
}


I2c::~I2c()
    422c:	cf 93       	push	r28
    422e:	df 93       	push	r29
    4230:	ec 01       	movw	r28, r24
    4232:	88 eb       	ldi	r24, 0xB8	; 184
    4234:	90 e2       	ldi	r25, 0x20	; 32
    4236:	88 83       	st	Y, r24
    4238:	99 83       	std	Y+1, r25	; 0x01
    423a:	40 96       	adiw	r24, 0x10	; 16
    423c:	8a 83       	std	Y+2, r24	; 0x02
    423e:	9b 83       	std	Y+3, r25	; 0x03
{
        end();
    4240:	ce 01       	movw	r24, r28
    4242:	0e 94 0e 21 	call	0x421c	; 0x421c <_ZN3I2c3endEv>
        i2c_list[twi_ind-1] = 0;
    4246:	ee 81       	ldd	r30, Y+6	; 0x06
    4248:	ff 81       	ldd	r31, Y+7	; 0x07
    424a:	ee 0f       	add	r30, r30
    424c:	ff 1f       	adc	r31, r31
    424e:	e7 56       	subi	r30, 0x67	; 103
    4250:	f4 4d       	sbci	r31, 0xD4	; 212
    4252:	10 82       	st	Z, r1
    4254:	11 82       	std	Z+1, r1	; 0x01
}
    4256:	df 91       	pop	r29
    4258:	cf 91       	pop	r28
    425a:	08 95       	ret

0000425c <_ZN7IStream9availableEv>:


size_t IStream::available()
{
        return 0;
}
    425c:	80 e0       	ldi	r24, 0x00	; 0
    425e:	90 e0       	ldi	r25, 0x00	; 0
    4260:	08 95       	ret

00004262 <_ZN7IStream4peekEj>:


int IStream::peek(size_t index)
{
        return EOF;
}
    4262:	8f ef       	ldi	r24, 0xFF	; 255
    4264:	9f ef       	ldi	r25, 0xFF	; 255
    4266:	08 95       	ret

00004268 <_ZN7IStream11read_stringEPc>:


void IStream::read_string(char *dest)
{
    4268:	0f 93       	push	r16
    426a:	1f 93       	push	r17
    426c:	cf 93       	push	r28
    426e:	df 93       	push	r29
    4270:	8c 01       	movw	r16, r24
    4272:	eb 01       	movw	r28, r22
    4274:	01 c0       	rjmp	.+2      	; 0x4278 <_ZN7IStream11read_stringEPc+0x10>
        char last;
        do
        {
                last = this->get();
                *(dest++) = last;
    4276:	ef 01       	movw	r28, r30
void IStream::read_string(char *dest)
{
        char last;
        do
        {
                last = this->get();
    4278:	d8 01       	movw	r26, r16
    427a:	ed 91       	ld	r30, X+
    427c:	fc 91       	ld	r31, X
    427e:	02 80       	ldd	r0, Z+2	; 0x02
    4280:	f3 81       	ldd	r31, Z+3	; 0x03
    4282:	e0 2d       	mov	r30, r0
    4284:	c8 01       	movw	r24, r16
    4286:	19 95       	eicall
                *(dest++) = last;
    4288:	fe 01       	movw	r30, r28
    428a:	81 93       	st	Z+, r24


void IStream::read_string(char *dest)
{
        char last;
        do
    428c:	88 23       	and	r24, r24
    428e:	21 f0       	breq	.+8      	; 0x4298 <_ZN7IStream11read_stringEPc+0x30>
    4290:	8d 30       	cpi	r24, 0x0D	; 13
    4292:	11 f0       	breq	.+4      	; 0x4298 <_ZN7IStream11read_stringEPc+0x30>
    4294:	8a 30       	cpi	r24, 0x0A	; 10
    4296:	79 f7       	brne	.-34     	; 0x4276 <_ZN7IStream11read_stringEPc+0xe>
        {
                last = this->get();
                *(dest++) = last;
        }
        while (last != 0 && last != '\r' && last != '\n');
        *(dest++) = 0;
    4298:	19 82       	std	Y+1, r1	; 0x01
}
    429a:	df 91       	pop	r29
    429c:	cf 91       	pop	r28
    429e:	1f 91       	pop	r17
    42a0:	0f 91       	pop	r16
    42a2:	08 95       	ret

000042a4 <_ZN7IStream4readEPvj>:


size_t IStream::read(void *dest, size_t num)
{
    42a4:	cf 92       	push	r12
    42a6:	df 92       	push	r13
    42a8:	ef 92       	push	r14
    42aa:	ff 92       	push	r15
    42ac:	0f 93       	push	r16
    42ae:	1f 93       	push	r17
    42b0:	cf 93       	push	r28
    42b2:	df 93       	push	r29
    42b4:	6c 01       	movw	r12, r24
    42b6:	7b 01       	movw	r14, r22
    42b8:	8a 01       	movw	r16, r20
        size_t j = num;
        char *ptr2 = (char *)dest;
        if (num == 0 || ptr2 == 0)
    42ba:	41 15       	cp	r20, r1
    42bc:	51 05       	cpc	r21, r1
    42be:	99 f0       	breq	.+38     	; 0x42e6 <_ZN7IStream4readEPvj+0x42>
    42c0:	61 15       	cp	r22, r1
    42c2:	71 05       	cpc	r23, r1
    42c4:	81 f0       	breq	.+32     	; 0x42e6 <_ZN7IStream4readEPvj+0x42>
    42c6:	ea 01       	movw	r28, r20
                return 0;
        while (num--)
        {
                *(ptr2++) = this->get();
    42c8:	d6 01       	movw	r26, r12
    42ca:	ed 91       	ld	r30, X+
    42cc:	fc 91       	ld	r31, X
    42ce:	02 80       	ldd	r0, Z+2	; 0x02
    42d0:	f3 81       	ldd	r31, Z+3	; 0x03
    42d2:	e0 2d       	mov	r30, r0
    42d4:	c6 01       	movw	r24, r12
    42d6:	19 95       	eicall
    42d8:	f7 01       	movw	r30, r14
    42da:	81 93       	st	Z+, r24
    42dc:	7f 01       	movw	r14, r30
    42de:	21 97       	sbiw	r28, 0x01	; 1
{
        size_t j = num;
        char *ptr2 = (char *)dest;
        if (num == 0 || ptr2 == 0)
                return 0;
        while (num--)
    42e0:	99 f7       	brne	.-26     	; 0x42c8 <_ZN7IStream4readEPvj+0x24>
    42e2:	c8 01       	movw	r24, r16
    42e4:	02 c0       	rjmp	.+4      	; 0x42ea <_ZN7IStream4readEPvj+0x46>
size_t IStream::read(void *dest, size_t num)
{
        size_t j = num;
        char *ptr2 = (char *)dest;
        if (num == 0 || ptr2 == 0)
                return 0;
    42e6:	80 e0       	ldi	r24, 0x00	; 0
    42e8:	90 e0       	ldi	r25, 0x00	; 0
        while (num--)
        {
                *(ptr2++) = this->get();
        }
        return j;
}
    42ea:	df 91       	pop	r29
    42ec:	cf 91       	pop	r28
    42ee:	1f 91       	pop	r17
    42f0:	0f 91       	pop	r16
    42f2:	ff 90       	pop	r15
    42f4:	ef 90       	pop	r14
    42f6:	df 90       	pop	r13
    42f8:	cf 90       	pop	r12
    42fa:	08 95       	ret

000042fc <_ZN7OStream4freeEv>:


size_t OStream::free()
{
        return 0;
}
    42fc:	80 e0       	ldi	r24, 0x00	; 0
    42fe:	90 e0       	ldi	r25, 0x00	; 0
    4300:	08 95       	ret

00004302 <_ZN7OStream12write_stringEPKc>:
        
}


void OStream::write_string(const char *str)
{
    4302:	0f 93       	push	r16
    4304:	1f 93       	push	r17
    4306:	cf 93       	push	r28
    4308:	df 93       	push	r29
    430a:	8c 01       	movw	r16, r24
    430c:	eb 01       	movw	r28, r22
        while (*str)
    430e:	08 c0       	rjmp	.+16     	; 0x4320 <_ZN7OStream12write_stringEPKc+0x1e>
        {
                this->put(*(str++));
    4310:	d8 01       	movw	r26, r16
    4312:	ed 91       	ld	r30, X+
    4314:	fc 91       	ld	r31, X
    4316:	02 80       	ldd	r0, Z+2	; 0x02
    4318:	f3 81       	ldd	r31, Z+3	; 0x03
    431a:	e0 2d       	mov	r30, r0
    431c:	c8 01       	movw	r24, r16
    431e:	19 95       	eicall
}


void OStream::write_string(const char *str)
{
        while (*str)
    4320:	69 91       	ld	r22, Y+
    4322:	66 23       	and	r22, r22
    4324:	a9 f7       	brne	.-22     	; 0x4310 <_ZN7OStream12write_stringEPKc+0xe>
        {
                this->put(*(str++));
        }
}
    4326:	df 91       	pop	r29
    4328:	cf 91       	pop	r28
    432a:	1f 91       	pop	r17
    432c:	0f 91       	pop	r16
    432e:	08 95       	ret

00004330 <_ZN7OStream5writeEPKvj>:


size_t OStream::write(const void *ptr, size_t num)
{
    4330:	cf 92       	push	r12
    4332:	df 92       	push	r13
    4334:	ef 92       	push	r14
    4336:	ff 92       	push	r15
    4338:	0f 93       	push	r16
    433a:	1f 93       	push	r17
    433c:	cf 93       	push	r28
    433e:	df 93       	push	r29
    4340:	6c 01       	movw	r12, r24
    4342:	7b 01       	movw	r14, r22
    4344:	8a 01       	movw	r16, r20
        size_t j = num;
        const char *ptr2 = (const char *)ptr;
        if (num == 0 || ptr2 == 0)
    4346:	41 15       	cp	r20, r1
    4348:	51 05       	cpc	r21, r1
    434a:	99 f0       	breq	.+38     	; 0x4372 <_ZN7OStream5writeEPKvj+0x42>
    434c:	61 15       	cp	r22, r1
    434e:	71 05       	cpc	r23, r1
    4350:	81 f0       	breq	.+32     	; 0x4372 <_ZN7OStream5writeEPKvj+0x42>
    4352:	ea 01       	movw	r28, r20
                return 0;
        while (num--)
        {
                this->put(*(ptr2++));
    4354:	d7 01       	movw	r26, r14
    4356:	6d 91       	ld	r22, X+
    4358:	7d 01       	movw	r14, r26
    435a:	d6 01       	movw	r26, r12
    435c:	ed 91       	ld	r30, X+
    435e:	fc 91       	ld	r31, X
    4360:	02 80       	ldd	r0, Z+2	; 0x02
    4362:	f3 81       	ldd	r31, Z+3	; 0x03
    4364:	e0 2d       	mov	r30, r0
    4366:	c6 01       	movw	r24, r12
    4368:	19 95       	eicall
    436a:	21 97       	sbiw	r28, 0x01	; 1
{
        size_t j = num;
        const char *ptr2 = (const char *)ptr;
        if (num == 0 || ptr2 == 0)
                return 0;
        while (num--)
    436c:	99 f7       	brne	.-26     	; 0x4354 <_ZN7OStream5writeEPKvj+0x24>
    436e:	c8 01       	movw	r24, r16
    4370:	02 c0       	rjmp	.+4      	; 0x4376 <_ZN7OStream5writeEPKvj+0x46>
size_t OStream::write(const void *ptr, size_t num)
{
        size_t j = num;
        const char *ptr2 = (const char *)ptr;
        if (num == 0 || ptr2 == 0)
                return 0;
    4372:	80 e0       	ldi	r24, 0x00	; 0
    4374:	90 e0       	ldi	r25, 0x00	; 0
        while (num--)
        {
                this->put(*(ptr2++));
        }
        return j;
}
    4376:	df 91       	pop	r29
    4378:	cf 91       	pop	r28
    437a:	1f 91       	pop	r17
    437c:	0f 91       	pop	r16
    437e:	ff 90       	pop	r15
    4380:	ef 90       	pop	r14
    4382:	df 90       	pop	r13
    4384:	cf 90       	pop	r12
    4386:	08 95       	ret

00004388 <_ZN5XgridC1Ev>:
#define PGM_READ_BYTE pgm_read_byte_near
#define PGM_READ_WORD pgm_read_word_near
#define PGM_READ_DWORD pgm_read_dword_near
#endif

Xgrid::Xgrid() :
    4388:	cf 93       	push	r28
    438a:	df 93       	push	r29
    438c:	ec 01       	movw	r28, r24
        state(XGRID_STATE_INIT),
        firmware_offset(0),
        firmware_updated(0),
        node_cnt(0),
        compare_buffer_ptr(0),
        rx_pkt(0)
    438e:	1a 82       	std	Y+2, r1	; 0x02
    4390:	19 86       	std	Y+9, r1	; 0x09
    4392:	1a 86       	std	Y+10, r1	; 0x0a
    4394:	81 e0       	ldi	r24, 0x01	; 1
    4396:	8f 87       	std	Y+15, r24	; 0x0f
    4398:	18 8e       	std	Y+24, r1	; 0x18
    439a:	19 8e       	std	Y+25, r1	; 0x19
    439c:	1a 8e       	std	Y+26, r1	; 0x1a
    439e:	1b 8e       	std	Y+27, r1	; 0x1b
    43a0:	1c 8e       	std	Y+28, r1	; 0x1c
    43a2:	fe 01       	movw	r30, r28
    43a4:	e3 58       	subi	r30, 0x83	; 131
    43a6:	ff 4f       	sbci	r31, 0xFF	; 255
    43a8:	10 82       	st	Z, r1
    43aa:	fe 01       	movw	r30, r28
    43ac:	e2 54       	subi	r30, 0x42	; 66
    43ae:	ff 4f       	sbci	r31, 0xFF	; 255
    43b0:	10 82       	st	Z, r1
    43b2:	fe 01       	movw	r30, r28
    43b4:	e9 5f       	subi	r30, 0xF9	; 249
    43b6:	f9 4f       	sbci	r31, 0xF9	; 249
    43b8:	10 82       	st	Z, r1
    43ba:	11 82       	std	Z+1, r1	; 0x01
{
        uint8_t b;
        uint16_t crc = 0;
        
        // zero compare buffer
        memset(compare_buffer, 0, sizeof(xgrid_header_minimal_t) * XGRID_COMPARE_BUFFER_SIZE);
    43bc:	ce 01       	movw	r24, r28
    43be:	82 58       	subi	r24, 0x82	; 130
    43c0:	9f 4f       	sbci	r25, 0xFF	; 255
    43c2:	fc 01       	movw	r30, r24
    43c4:	80 e4       	ldi	r24, 0x40	; 64
    43c6:	df 01       	movw	r26, r30
    43c8:	1d 92       	st	X+, r1
    43ca:	8a 95       	dec	r24
    43cc:	e9 f7       	brne	.-6      	; 0x43c8 <_ZN5XgridC1Ev+0x40>
    43ce:	9e 01       	movw	r18, r28
        
        // init packet buffers
        for (int i = 0; i < XGRID_SM_BUFFER_COUNT; i++)
    43d0:	40 e0       	ldi	r20, 0x00	; 0
    43d2:	50 e0       	ldi	r21, 0x00	; 0
        {
                pkt_buffer[i].buffer = pkt_buffer_sm[i];
                pkt_buffer[i].buffer_len = XGRID_SM_BUFFER_SIZE;
    43d4:	60 e4       	ldi	r22, 0x40	; 64
    43d6:	70 e0       	ldi	r23, 0x00	; 0
#define PGM_READ_BYTE pgm_read_byte_near
#define PGM_READ_WORD pgm_read_word_near
#define PGM_READ_DWORD pgm_read_dword_near
#endif

Xgrid::Xgrid() :
    43d8:	f9 01       	movw	r30, r18
    43da:	e6 5b       	subi	r30, 0xB6	; 182
    43dc:	fa 4f       	sbci	r31, 0xFA	; 250
        memset(compare_buffer, 0, sizeof(xgrid_header_minimal_t) * XGRID_COMPARE_BUFFER_SIZE);
        
        // init packet buffers
        for (int i = 0; i < XGRID_SM_BUFFER_COUNT; i++)
        {
                pkt_buffer[i].buffer = pkt_buffer_sm[i];
    43de:	ca 01       	movw	r24, r20
    43e0:	a6 e0       	ldi	r26, 0x06	; 6
    43e2:	88 0f       	add	r24, r24
    43e4:	99 1f       	adc	r25, r25
    43e6:	aa 95       	dec	r26
    43e8:	e1 f7       	brne	.-8      	; 0x43e2 <_ZN5XgridC1Ev+0x5a>
    43ea:	81 54       	subi	r24, 0x41	; 65
    43ec:	9f 4f       	sbci	r25, 0xFF	; 255
    43ee:	8c 0f       	add	r24, r28
    43f0:	9d 1f       	adc	r25, r29
    43f2:	80 83       	st	Z, r24
    43f4:	91 83       	std	Z+1, r25	; 0x01
#define PGM_READ_BYTE pgm_read_byte_near
#define PGM_READ_WORD pgm_read_word_near
#define PGM_READ_DWORD pgm_read_dword_near
#endif

Xgrid::Xgrid() :
    43f6:	f9 01       	movw	r30, r18
    43f8:	e4 5b       	subi	r30, 0xB4	; 180
    43fa:	fa 4f       	sbci	r31, 0xFA	; 250
        
        // init packet buffers
        for (int i = 0; i < XGRID_SM_BUFFER_COUNT; i++)
        {
                pkt_buffer[i].buffer = pkt_buffer_sm[i];
                pkt_buffer[i].buffer_len = XGRID_SM_BUFFER_SIZE;
    43fc:	60 83       	st	Z, r22
    43fe:	71 83       	std	Z+1, r23	; 0x01
#define PGM_READ_BYTE pgm_read_byte_near
#define PGM_READ_WORD pgm_read_word_near
#define PGM_READ_DWORD pgm_read_dword_near
#endif

Xgrid::Xgrid() :
    4400:	f9 01       	movw	r30, r18
    4402:	ee 5a       	subi	r30, 0xAE	; 174
    4404:	fa 4f       	sbci	r31, 0xFA	; 250
        // init packet buffers
        for (int i = 0; i < XGRID_SM_BUFFER_COUNT; i++)
        {
                pkt_buffer[i].buffer = pkt_buffer_sm[i];
                pkt_buffer[i].buffer_len = XGRID_SM_BUFFER_SIZE;
                pkt_buffer[i].flags = 0;
    4406:	10 82       	st	Z, r1
        
        // zero compare buffer
        memset(compare_buffer, 0, sizeof(xgrid_header_minimal_t) * XGRID_COMPARE_BUFFER_SIZE);
        
        // init packet buffers
        for (int i = 0; i < XGRID_SM_BUFFER_COUNT; i++)
    4408:	4f 5f       	subi	r20, 0xFF	; 255
    440a:	5f 4f       	sbci	r21, 0xFF	; 255
    440c:	2e 5e       	subi	r18, 0xEE	; 238
    440e:	3f 4f       	sbci	r19, 0xFF	; 255
    4410:	4a 30       	cpi	r20, 0x0A	; 10
    4412:	51 05       	cpc	r21, r1
    4414:	09 f7       	brne	.-62     	; 0x43d8 <_ZN5XgridC1Ev+0x50>
                pkt_buffer[i].flags = 0;
        }
        
        for (int i = 0; i < XGRID_LG_BUFFER_COUNT; i++)
        {
                pkt_buffer[XGRID_SM_BUFFER_COUNT+i].buffer = pkt_buffer_lg[i];
    4416:	fe 01       	movw	r30, r28
    4418:	e2 50       	subi	r30, 0x02	; 2
    441a:	fa 4f       	sbci	r31, 0xFA	; 250
    441c:	ce 01       	movw	r24, r28
    441e:	81 5c       	subi	r24, 0xC1	; 193
    4420:	9c 4f       	sbci	r25, 0xFC	; 252
    4422:	80 83       	st	Z, r24
    4424:	91 83       	std	Z+1, r25	; 0x01
                pkt_buffer[XGRID_SM_BUFFER_COUNT+i].buffer_len = XGRID_LG_BUFFER_SIZE;
    4426:	fe 01       	movw	r30, r28
    4428:	e0 50       	subi	r30, 0x00	; 0
    442a:	fa 4f       	sbci	r31, 0xFA	; 250
    442c:	82 e0       	ldi	r24, 0x02	; 2
    442e:	92 e0       	ldi	r25, 0x02	; 2
    4430:	80 83       	st	Z, r24
    4432:	91 83       	std	Z+1, r25	; 0x01
                pkt_buffer[XGRID_SM_BUFFER_COUNT+i].flags = 0;
    4434:	fe 01       	movw	r30, r28
    4436:	ea 5f       	subi	r30, 0xFA	; 250
    4438:	f9 4f       	sbci	r31, 0xF9	; 249
    443a:	10 82       	st	Z, r1
        }
        
        // calculate local id
        // simply crc of user sig row
        // likely to be unique and constant for each chip
        NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    443c:	82 e0       	ldi	r24, 0x02	; 2
    443e:	80 93 ca 01 	sts	0x01CA, r24
        
        for (uint32_t i = 0x08; i <= 0x15; i++)
    4442:	48 e0       	ldi	r20, 0x08	; 8
    4444:	50 e0       	ldi	r21, 0x00	; 0
    4446:	60 e0       	ldi	r22, 0x00	; 0
    4448:	70 e0       	ldi	r23, 0x00	; 0
        node_cnt(0),
        compare_buffer_ptr(0),
        rx_pkt(0)
{
        uint8_t b;
        uint16_t crc = 0;
    444a:	80 e0       	ldi	r24, 0x00	; 0
    444c:	90 e0       	ldi	r25, 0x00	; 0
        // likely to be unique and constant for each chip
        NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
        
        for (uint32_t i = 0x08; i <= 0x15; i++)
        {
                b = PGM_READ_BYTE(i);
    444e:	6b bf       	out	0x3b, r22	; 59
    4450:	fa 01       	movw	r30, r20
    4452:	27 91       	elpm	r18, Z+
		"eor %B0,__tmp_reg__" "\n\t"
		"eor %A0,%1"
		: "=r" (__ret), "=d" (__tmp)
		: "r" (__data), "0" (__crc)
		: "r0"
	);
    4454:	82 27       	eor	r24, r18
    4456:	28 2f       	mov	r18, r24
    4458:	22 95       	swap	r18
    445a:	28 27       	eor	r18, r24
    445c:	02 2e       	mov	r0, r18
    445e:	26 95       	lsr	r18
    4460:	26 95       	lsr	r18
    4462:	20 25       	eor	r18, r0
    4464:	02 2e       	mov	r0, r18
    4466:	26 95       	lsr	r18
    4468:	20 25       	eor	r18, r0
    446a:	27 70       	andi	r18, 0x07	; 7
    446c:	08 2e       	mov	r0, r24
    446e:	89 2f       	mov	r24, r25
    4470:	26 95       	lsr	r18
    4472:	07 94       	ror	r0
    4474:	27 95       	ror	r18
    4476:	90 2d       	mov	r25, r0
    4478:	82 27       	eor	r24, r18
    447a:	06 94       	lsr	r0
    447c:	27 95       	ror	r18
    447e:	90 25       	eor	r25, r0
    4480:	82 27       	eor	r24, r18
        // calculate local id
        // simply crc of user sig row
        // likely to be unique and constant for each chip
        NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
        
        for (uint32_t i = 0x08; i <= 0x15; i++)
    4482:	4f 5f       	subi	r20, 0xFF	; 255
    4484:	5f 4f       	sbci	r21, 0xFF	; 255
    4486:	6f 4f       	sbci	r22, 0xFF	; 255
    4488:	7f 4f       	sbci	r23, 0xFF	; 255
    448a:	46 31       	cpi	r20, 0x16	; 22
    448c:	51 05       	cpc	r21, r1
    448e:	61 05       	cpc	r22, r1
    4490:	71 05       	cpc	r23, r1
    4492:	e9 f6       	brne	.-70     	; 0x444e <_ZN5XgridC1Ev+0xc6>
        {
                b = PGM_READ_BYTE(i);
                crc = _crc16_update(crc, b);
        }
        
        my_id = crc;
    4494:	88 83       	st	Y, r24
    4496:	99 83       	std	Y+1, r25	; 0x01
        
        NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    4498:	10 92 ca 01 	sts	0x01CA, r1
        
        // set initial delay
        // add some entropy
        delay = (3 * 1000) + (my_id & 0x03FF);
    449c:	88 81       	ld	r24, Y
    449e:	99 81       	ldd	r25, Y+1	; 0x01
    44a0:	93 70       	andi	r25, 0x03	; 3
    44a2:	88 54       	subi	r24, 0x48	; 72
    44a4:	94 4f       	sbci	r25, 0xF4	; 244
    44a6:	a0 e0       	ldi	r26, 0x00	; 0
    44a8:	b0 e0       	ldi	r27, 0x00	; 0
    44aa:	8b 87       	std	Y+11, r24	; 0x0b
    44ac:	9c 87       	std	Y+12, r25	; 0x0c
    44ae:	ad 87       	std	Y+13, r26	; 0x0d
    44b0:	be 87       	std	Y+14, r27	; 0x0e
        
        xboot_app_crc16(&firmware_crc);
    44b2:	ce 01       	movw	r24, r28
    44b4:	03 96       	adiw	r24, 0x03	; 3
    44b6:	0e 94 a0 2e 	call	0x5d40	; 0x5d40 <xboot_app_crc16>
        
        build_number = (uint32_t) &__BUILD_NUMBER;
    44ba:	83 eb       	ldi	r24, 0xB3	; 179
    44bc:	94 e0       	ldi	r25, 0x04	; 4
    44be:	aa 27       	eor	r26, r26
    44c0:	97 fd       	sbrc	r25, 7
    44c2:	a0 95       	com	r26
    44c4:	ba 2f       	mov	r27, r26
    44c6:	8d 83       	std	Y+5, r24	; 0x05
    44c8:	9e 83       	std	Y+6, r25	; 0x06
    44ca:	af 83       	std	Y+7, r26	; 0x07
    44cc:	b8 87       	std	Y+8, r27	; 0x08
}
    44ce:	df 91       	pop	r29
    44d0:	cf 91       	pop	r28
    44d2:	08 95       	ret

000044d4 <_ZN5XgridD1Ev>:


Xgrid::~Xgrid()
{
        
}
    44d4:	08 95       	ret

000044d6 <_ZN5Xgrid8add_nodeEP8IOStream>:
        return my_id;
}


int8_t Xgrid::add_node(IOStream *stream)
{
    44d6:	9c 01       	movw	r18, r24
        if (node_cnt < XGRID_MAX_NODES)
    44d8:	dc 01       	movw	r26, r24
    44da:	a3 58       	subi	r26, 0x83	; 131
    44dc:	bf 4f       	sbci	r27, 0xFF	; 255
    44de:	8c 91       	ld	r24, X
    44e0:	88 30       	cpi	r24, 0x08	; 8
    44e2:	04 f5       	brge	.+64     	; 0x4524 <_ZN5Xgrid8add_nodeEP8IOStream+0x4e>
        {
                nodes[node_cnt].stream = stream;
    44e4:	48 2f       	mov	r20, r24
    44e6:	55 27       	eor	r21, r21
    44e8:	47 fd       	sbrc	r20, 7
    44ea:	50 95       	com	r21
    44ec:	fa 01       	movw	r30, r20
    44ee:	ee 0f       	add	r30, r30
    44f0:	ff 1f       	adc	r31, r31
    44f2:	e4 0f       	add	r30, r20
    44f4:	f5 1f       	adc	r31, r21
    44f6:	ee 0f       	add	r30, r30
    44f8:	ff 1f       	adc	r31, r31
    44fa:	ee 0f       	add	r30, r30
    44fc:	ff 1f       	adc	r31, r31
    44fe:	e2 0f       	add	r30, r18
    4500:	f3 1f       	adc	r31, r19
    4502:	65 8f       	std	Z+29, r22	; 0x1d
    4504:	76 8f       	std	Z+30, r23	; 0x1e
                nodes[node_cnt].tx_buffer = -1;
    4506:	9f ef       	ldi	r25, 0xFF	; 255
    4508:	90 a3       	lds	r25, 0x50
                nodes[node_cnt].rx_buffer = -1;
    450a:	97 8f       	std	Z+31, r25	; 0x1f
                nodes[node_cnt].drop_chars = 0;
    450c:	11 a2       	lds	r17, 0x91
    450e:	12 a2       	lds	r17, 0x92
                nodes[node_cnt].build = 0;
    4510:	13 a2       	lds	r17, 0x93
    4512:	14 a2       	lds	r17, 0x94
    4514:	15 a2       	lds	r17, 0x95
    4516:	16 a2       	lds	r17, 0x96
                nodes[node_cnt].crc = 0;
    4518:	17 a2       	lds	r17, 0x97
    451a:	10 a6       	lds	r17, 0xb0
                return node_cnt++;
    451c:	98 2f       	mov	r25, r24
    451e:	9f 5f       	subi	r25, 0xFF	; 255
    4520:	9c 93       	st	X, r25
    4522:	08 95       	ret
        }
        
        return -1;
    4524:	8f ef       	ldi	r24, 0xFF	; 255
}
    4526:	08 95       	ret

00004528 <_ZN5Xgrid9is_uniqueEPNS_6PacketE>:
        hdr->radius = pkt->radius;
}


uint8_t Xgrid::is_unique(Packet *pkt)
{
    4528:	fb 01       	movw	r30, r22
        for (uint8_t i = 0; i < XGRID_COMPARE_BUFFER_SIZE; i++)
        {
                if (compare_buffer[i].seq == pkt->seq &&
    452a:	63 81       	ldd	r22, Z+3	; 0x03
    452c:	ac 01       	movw	r20, r24
}


uint8_t Xgrid::is_unique(Packet *pkt)
{
        for (uint8_t i = 0; i < XGRID_COMPARE_BUFFER_SIZE; i++)
    452e:	70 e0       	ldi	r23, 0x00	; 0
        hdr->flags = pkt->flags;
        hdr->radius = pkt->radius;
}


uint8_t Xgrid::is_unique(Packet *pkt)
    4530:	da 01       	movw	r26, r20
    4532:	af 57       	subi	r26, 0x7F	; 127
    4534:	bf 4f       	sbci	r27, 0xFF	; 255
{
        for (uint8_t i = 0; i < XGRID_COMPARE_BUFFER_SIZE; i++)
        {
                if (compare_buffer[i].seq == pkt->seq &&
    4536:	8c 91       	ld	r24, X
    4538:	86 17       	cp	r24, r22
    453a:	91 f4       	brne	.+36     	; 0x4560 <_ZN5Xgrid9is_uniqueEPNS_6PacketE+0x38>
        hdr->flags = pkt->flags;
        hdr->radius = pkt->radius;
}


uint8_t Xgrid::is_unique(Packet *pkt)
    453c:	da 01       	movw	r26, r20
    453e:	a2 58       	subi	r26, 0x82	; 130
    4540:	bf 4f       	sbci	r27, 0xFF	; 255
{
        for (uint8_t i = 0; i < XGRID_COMPARE_BUFFER_SIZE; i++)
        {
                if (compare_buffer[i].seq == pkt->seq &&
    4542:	2d 91       	ld	r18, X+
    4544:	3c 91       	ld	r19, X
    4546:	11 97       	sbiw	r26, 0x01	; 1
    4548:	80 81       	ld	r24, Z
    454a:	91 81       	ldd	r25, Z+1	; 0x01
    454c:	28 17       	cp	r18, r24
    454e:	39 07       	cpc	r19, r25
    4550:	39 f4       	brne	.+14     	; 0x4560 <_ZN5Xgrid9is_uniqueEPNS_6PacketE+0x38>
        hdr->flags = pkt->flags;
        hdr->radius = pkt->radius;
}


uint8_t Xgrid::is_unique(Packet *pkt)
    4552:	da 01       	movw	r26, r20
    4554:	a0 58       	subi	r26, 0x80	; 128
    4556:	bf 4f       	sbci	r27, 0xFF	; 255
{
        for (uint8_t i = 0; i < XGRID_COMPARE_BUFFER_SIZE; i++)
        {
                if (compare_buffer[i].seq == pkt->seq &&
    4558:	9c 91       	ld	r25, X
    455a:	82 81       	ldd	r24, Z+2	; 0x02
    455c:	98 17       	cp	r25, r24
    455e:	39 f0       	breq	.+14     	; 0x456e <_ZN5Xgrid9is_uniqueEPNS_6PacketE+0x46>
}


uint8_t Xgrid::is_unique(Packet *pkt)
{
        for (uint8_t i = 0; i < XGRID_COMPARE_BUFFER_SIZE; i++)
    4560:	7f 5f       	subi	r23, 0xFF	; 255
    4562:	4c 5f       	subi	r20, 0xFC	; 252
    4564:	5f 4f       	sbci	r21, 0xFF	; 255
    4566:	70 31       	cpi	r23, 0x10	; 16
    4568:	19 f7       	brne	.-58     	; 0x4530 <_ZN5Xgrid9is_uniqueEPNS_6PacketE+0x8>
                        compare_buffer[i].type == pkt->type)
                        
                        return 0;
        }
        
        return 1;
    456a:	81 e0       	ldi	r24, 0x01	; 1
    456c:	08 95       	ret
        {
                if (compare_buffer[i].seq == pkt->seq &&
                        compare_buffer[i].source_id == pkt->source_id &&
                        compare_buffer[i].type == pkt->type)
                        
                        return 0;
    456e:	80 e0       	ldi	r24, 0x00	; 0
        }
        
        return 1;
}
    4570:	08 95       	ret

00004572 <_ZN5Xgrid12check_uniqueEPNS_6PacketE>:


uint8_t Xgrid::check_unique(Packet *pkt)
{
    4572:	ef 92       	push	r14
    4574:	ff 92       	push	r15
    4576:	0f 93       	push	r16
    4578:	1f 93       	push	r17
    457a:	cf 93       	push	r28
    457c:	df 93       	push	r29
    457e:	ec 01       	movw	r28, r24
    4580:	8b 01       	movw	r16, r22
        uint8_t ret = is_unique(pkt);
    4582:	0e 94 94 22 	call	0x4528	; 0x4528 <_ZN5Xgrid9is_uniqueEPNS_6PacketE>
        
        if (ret)
    4586:	88 23       	and	r24, r24
    4588:	81 f1       	breq	.+96     	; 0x45ea <_ZN5Xgrid12check_uniqueEPNS_6PacketE+0x78>
        {
                compare_buffer[compare_buffer_ptr].source_id = pkt->source_id;
    458a:	de 01       	movw	r26, r28
    458c:	a2 54       	subi	r26, 0x42	; 66
    458e:	bf 4f       	sbci	r27, 0xFF	; 255
    4590:	9c 91       	ld	r25, X
    4592:	49 2f       	mov	r20, r25
    4594:	55 27       	eor	r21, r21
    4596:	47 fd       	sbrc	r20, 7
    4598:	50 95       	com	r21
    459a:	9a 01       	movw	r18, r20
    459c:	22 0f       	add	r18, r18
    459e:	33 1f       	adc	r19, r19
    45a0:	22 0f       	add	r18, r18
    45a2:	33 1f       	adc	r19, r19
    45a4:	2c 0f       	add	r18, r28
    45a6:	3d 1f       	adc	r19, r29
    45a8:	7e e7       	ldi	r23, 0x7E	; 126
    45aa:	e7 2e       	mov	r14, r23
    45ac:	f1 2c       	mov	r15, r1
    45ae:	e2 0e       	add	r14, r18
    45b0:	f3 1e       	adc	r15, r19
    45b2:	f8 01       	movw	r30, r16
    45b4:	60 81       	ld	r22, Z
    45b6:	71 81       	ldd	r23, Z+1	; 0x01
    45b8:	f7 01       	movw	r30, r14
    45ba:	60 83       	st	Z, r22
    45bc:	71 83       	std	Z+1, r23	; 0x01
                compare_buffer[compare_buffer_ptr].type = pkt->type;
    45be:	f8 01       	movw	r30, r16
    45c0:	62 81       	ldd	r22, Z+2	; 0x02
    45c2:	fa 01       	movw	r30, r20
    45c4:	b0 96       	adiw	r30, 0x20	; 32
    45c6:	ee 0f       	add	r30, r30
    45c8:	ff 1f       	adc	r31, r31
    45ca:	ee 0f       	add	r30, r30
    45cc:	ff 1f       	adc	r31, r31
    45ce:	ec 0f       	add	r30, r28
    45d0:	fd 1f       	adc	r31, r29
    45d2:	60 83       	st	Z, r22
                compare_buffer[compare_buffer_ptr].seq = pkt->seq;
    45d4:	f8 01       	movw	r30, r16
    45d6:	43 81       	ldd	r20, Z+3	; 0x03
    45d8:	2f 57       	subi	r18, 0x7F	; 127
    45da:	3f 4f       	sbci	r19, 0xFF	; 255
    45dc:	f9 01       	movw	r30, r18
    45de:	40 83       	st	Z, r20
                
                compare_buffer_ptr++;
    45e0:	9f 5f       	subi	r25, 0xFF	; 255
    45e2:	9c 93       	st	X, r25
                if (compare_buffer_ptr >= XGRID_COMPARE_BUFFER_SIZE)
    45e4:	90 31       	cpi	r25, 0x10	; 16
    45e6:	0c f0       	brlt	.+2      	; 0x45ea <_ZN5Xgrid12check_uniqueEPNS_6PacketE+0x78>
                        compare_buffer_ptr = 0;
    45e8:	1c 92       	st	X, r1
        }
        
        return ret;
}
    45ea:	df 91       	pop	r29
    45ec:	cf 91       	pop	r28
    45ee:	1f 91       	pop	r17
    45f0:	0f 91       	pop	r16
    45f2:	ff 90       	pop	r15
    45f4:	ef 90       	pop	r14
    45f6:	08 95       	ret

000045f8 <_ZN5Xgrid15get_free_bufferEj>:
        for (int i = 0; i < XGRID_BUFFER_COUNT; i++)
        {
                if ((pkt_buffer[i].flags & XGRID_BUFFER_IN_USE) == 0 && pkt_buffer[i].buffer_len >= data_size)
                        return i;
        }
        return -1;
    45f8:	9c 01       	movw	r18, r24
}


int8_t Xgrid::get_free_buffer(uint16_t data_size)
{
        for (int i = 0; i < XGRID_BUFFER_COUNT; i++)
    45fa:	40 e0       	ldi	r20, 0x00	; 0
    45fc:	50 e0       	ldi	r21, 0x00	; 0
        
        return ret;
}


int8_t Xgrid::get_free_buffer(uint16_t data_size)
    45fe:	f9 01       	movw	r30, r18
    4600:	ee 5a       	subi	r30, 0xAE	; 174
    4602:	fa 4f       	sbci	r31, 0xFA	; 250
{
        for (int i = 0; i < XGRID_BUFFER_COUNT; i++)
        {
                if ((pkt_buffer[i].flags & XGRID_BUFFER_IN_USE) == 0 && pkt_buffer[i].buffer_len >= data_size)
    4604:	80 81       	ld	r24, Z
    4606:	90 e0       	ldi	r25, 0x00	; 0
    4608:	83 70       	andi	r24, 0x03	; 3
    460a:	90 70       	andi	r25, 0x00	; 0
    460c:	00 97       	sbiw	r24, 0x00	; 0
    460e:	51 f4       	brne	.+20     	; 0x4624 <_ZN5Xgrid15get_free_bufferEj+0x2c>
        
        return ret;
}


int8_t Xgrid::get_free_buffer(uint16_t data_size)
    4610:	f9 01       	movw	r30, r18
    4612:	e4 5b       	subi	r30, 0xB4	; 180
    4614:	fa 4f       	sbci	r31, 0xFA	; 250
{
        for (int i = 0; i < XGRID_BUFFER_COUNT; i++)
        {
                if ((pkt_buffer[i].flags & XGRID_BUFFER_IN_USE) == 0 && pkt_buffer[i].buffer_len >= data_size)
    4616:	80 81       	ld	r24, Z
    4618:	91 81       	ldd	r25, Z+1	; 0x01
    461a:	86 17       	cp	r24, r22
    461c:	97 07       	cpc	r25, r23
    461e:	10 f0       	brcs	.+4      	; 0x4624 <_ZN5Xgrid15get_free_bufferEj+0x2c>
                        return i;
    4620:	84 2f       	mov	r24, r20
    4622:	08 95       	ret
}


int8_t Xgrid::get_free_buffer(uint16_t data_size)
{
        for (int i = 0; i < XGRID_BUFFER_COUNT; i++)
    4624:	4f 5f       	subi	r20, 0xFF	; 255
    4626:	5f 4f       	sbci	r21, 0xFF	; 255
    4628:	2e 5e       	subi	r18, 0xEE	; 238
    462a:	3f 4f       	sbci	r19, 0xFF	; 255
    462c:	4b 30       	cpi	r20, 0x0B	; 11
    462e:	51 05       	cpc	r21, r1
    4630:	31 f7       	brne	.-52     	; 0x45fe <_ZN5Xgrid15get_free_bufferEj+0x6>
        {
                if ((pkt_buffer[i].flags & XGRID_BUFFER_IN_USE) == 0 && pkt_buffer[i].buffer_len >= data_size)
                        return i;
        }
        return -1;
    4632:	8f ef       	ldi	r24, 0xFF	; 255
}
    4634:	08 95       	ret

00004636 <_ZN5Xgrid15send_raw_packetEPNS_6PacketEj>:
        send_raw_packet(pkt, mask);
}


void Xgrid::send_raw_packet(Packet *pkt, uint16_t mask)
{
    4636:	df 92       	push	r13
    4638:	ef 92       	push	r14
    463a:	ff 92       	push	r15
    463c:	0f 93       	push	r16
    463e:	1f 93       	push	r17
    4640:	cf 93       	push	r28
    4642:	df 93       	push	r29
    4644:	8c 01       	movw	r16, r24
    4646:	eb 01       	movw	r28, r22
    4648:	7a 01       	movw	r14, r20
        uint8_t saved_status = SREG;
    464a:	df b6       	in	r13, 0x3f	; 63
        cli();
    464c:	f8 94       	cli
        
        // drop packet if not firmware releated during update cycle
        if (state == XGRID_STATE_FW_RX && ((pkt->type & 0xF0) != 0xF0))
    464e:	fc 01       	movw	r30, r24
    4650:	87 85       	ldd	r24, Z+15	; 0x0f
    4652:	88 32       	cpi	r24, 0x28	; 40
    4654:	31 f4       	brne	.+12     	; 0x4662 <_ZN5Xgrid15send_raw_packetEPNS_6PacketEj+0x2c>
    4656:	8a 81       	ldd	r24, Y+2	; 0x02
    4658:	80 7f       	andi	r24, 0xF0	; 240
    465a:	80 3f       	cpi	r24, 0xF0	; 240
    465c:	09 f0       	breq	.+2      	; 0x4660 <_ZN5Xgrid15send_raw_packetEPNS_6PacketEj+0x2a>
    465e:	54 c0       	rjmp	.+168    	; 0x4708 <_ZN5Xgrid15send_raw_packetEPNS_6PacketEj+0xd2>
    4660:	0d c0       	rjmp	.+26     	; 0x467c <_ZN5Xgrid15send_raw_packetEPNS_6PacketEj+0x46>
        {
                SREG = saved_status;
                return;
        }
        // don't send extra packets to the node we're updating
        if (state == XGRID_STATE_FW_TX && ((pkt->type & 0xF0) != 0xF0))
    4662:	80 32       	cpi	r24, 0x20	; 32
    4664:	59 f4       	brne	.+22     	; 0x467c <_ZN5Xgrid15send_raw_packetEPNS_6PacketEj+0x46>
    4666:	8a 81       	ldd	r24, Y+2	; 0x02
    4668:	80 7f       	andi	r24, 0xF0	; 240
    466a:	80 3f       	cpi	r24, 0xF0	; 240
    466c:	39 f0       	breq	.+14     	; 0x467c <_ZN5Xgrid15send_raw_packetEPNS_6PacketEj+0x46>
                mask &= ~ update_node_mask;
    466e:	f8 01       	movw	r30, r16
    4670:	80 89       	ldd	r24, Z+16	; 0x10
    4672:	91 89       	ldd	r25, Z+17	; 0x11
    4674:	80 95       	com	r24
    4676:	90 95       	com	r25
    4678:	e8 22       	and	r14, r24
    467a:	f9 22       	and	r15, r25
        
        // get buffer index
        int8_t bi = get_free_buffer(pkt->data_len);
    467c:	68 85       	ldd	r22, Y+8	; 0x08
    467e:	79 85       	ldd	r23, Y+9	; 0x09
    4680:	c8 01       	movw	r24, r16
    4682:	0e 94 fc 22 	call	0x45f8	; 0x45f8 <_ZN5Xgrid15get_free_bufferEj>
        
        if (bi < 0)
    4686:	87 fd       	sbrc	r24, 7
    4688:	3f c0       	rjmp	.+126    	; 0x4708 <_ZN5Xgrid15send_raw_packetEPNS_6PacketEj+0xd2>
        {
                SREG = saved_status;
                return;
        }
        
        xgrid_buffer_t *buffer = &(pkt_buffer[bi]);
    468a:	99 27       	eor	r25, r25
    468c:	87 fd       	sbrc	r24, 7
    468e:	90 95       	com	r25
    4690:	88 0f       	add	r24, r24
    4692:	99 1f       	adc	r25, r25
    4694:	fc 01       	movw	r30, r24
    4696:	33 e0       	ldi	r19, 0x03	; 3
    4698:	ee 0f       	add	r30, r30
    469a:	ff 1f       	adc	r31, r31
    469c:	3a 95       	dec	r19
    469e:	e1 f7       	brne	.-8      	; 0x4698 <_ZN5Xgrid15send_raw_packetEPNS_6PacketEj+0x62>
    46a0:	e8 0f       	add	r30, r24
    46a2:	f9 1f       	adc	r31, r25
    46a4:	ef 5b       	subi	r30, 0xBF	; 191
    46a6:	fa 4f       	sbci	r31, 0xFA	; 250
    46a8:	e0 0f       	add	r30, r16
    46aa:	f1 1f       	adc	r31, r17
        
        // flag it for use
        buffer->flags |= XGRID_BUFFER_IN_USE_TX;
    46ac:	81 89       	ldd	r24, Z+17	; 0x11
    46ae:	81 60       	ori	r24, 0x01	; 1
    46b0:	81 8b       	std	Z+17, r24	; 0x11
        
        xgrid_header_t *hdr = &(buffer->hdr);
        
        // packet header information
        hdr->identifier = XGRID_IDENTIFIER;
    46b2:	8a e5       	ldi	r24, 0x5A	; 90
    46b4:	80 83       	st	Z, r24
        hdr->size = pkt->data_len + sizeof(xgrid_header_short_t);
    46b6:	88 85       	ldd	r24, Y+8	; 0x08
    46b8:	99 85       	ldd	r25, Y+9	; 0x09
    46ba:	06 96       	adiw	r24, 0x06	; 6
    46bc:	81 83       	std	Z+1, r24	; 0x01
    46be:	92 83       	std	Z+2, r25	; 0x02
        hdr->source_id = pkt->source_id;
    46c0:	88 81       	ld	r24, Y
    46c2:	99 81       	ldd	r25, Y+1	; 0x01
    46c4:	83 83       	std	Z+3, r24	; 0x03
    46c6:	94 83       	std	Z+4, r25	; 0x04
        hdr->type = pkt->type;
    46c8:	8a 81       	ldd	r24, Y+2	; 0x02
    46ca:	85 83       	std	Z+5, r24	; 0x05
        hdr->seq = pkt->seq;
    46cc:	8b 81       	ldd	r24, Y+3	; 0x03
    46ce:	86 83       	std	Z+6, r24	; 0x06
        hdr->flags = pkt->flags;
    46d0:	8c 81       	ldd	r24, Y+4	; 0x04
    46d2:	87 83       	std	Z+7, r24	; 0x07
        hdr->radius = pkt->radius;
    46d4:	8d 81       	ldd	r24, Y+5	; 0x05
    46d6:	80 87       	std	Z+8, r24	; 0x08
        
        buffer->mask = mask;
    46d8:	e7 86       	std	Z+15, r14	; 0x0f
    46da:	f0 8a       	std	Z+16, r15	; 0x10
        
        // copy in data
        for (uint16_t i = 0; i < pkt->data_len; i++)
    46dc:	20 e0       	ldi	r18, 0x00	; 0
    46de:	30 e0       	ldi	r19, 0x00	; 0
    46e0:	0c c0       	rjmp	.+24     	; 0x46fa <_ZN5Xgrid15send_raw_packetEPNS_6PacketEj+0xc4>
        {
                buffer->buffer[i] = pkt->data[i];
    46e2:	ae 81       	ldd	r26, Y+6	; 0x06
    46e4:	bf 81       	ldd	r27, Y+7	; 0x07
    46e6:	a2 0f       	add	r26, r18
    46e8:	b3 1f       	adc	r27, r19
    46ea:	8c 91       	ld	r24, X
    46ec:	a1 85       	ldd	r26, Z+9	; 0x09
    46ee:	b2 85       	ldd	r27, Z+10	; 0x0a
    46f0:	a2 0f       	add	r26, r18
    46f2:	b3 1f       	adc	r27, r19
    46f4:	8c 93       	st	X, r24
        hdr->radius = pkt->radius;
        
        buffer->mask = mask;
        
        // copy in data
        for (uint16_t i = 0; i < pkt->data_len; i++)
    46f6:	2f 5f       	subi	r18, 0xFF	; 255
    46f8:	3f 4f       	sbci	r19, 0xFF	; 255
    46fa:	88 85       	ldd	r24, Y+8	; 0x08
    46fc:	99 85       	ldd	r25, Y+9	; 0x09
    46fe:	28 17       	cp	r18, r24
    4700:	39 07       	cpc	r19, r25
    4702:	78 f3       	brcs	.-34     	; 0x46e2 <_ZN5Xgrid15send_raw_packetEPNS_6PacketEj+0xac>
        {
                buffer->buffer[i] = pkt->data[i];
        }
        
        // start at zero
        buffer->ptr = 0;
    4704:	15 86       	std	Z+13, r1	; 0x0d
    4706:	16 86       	std	Z+14, r1	; 0x0e
        
        SREG = saved_status;
    4708:	df be       	out	0x3f, r13	; 63
}
    470a:	df 91       	pop	r29
    470c:	cf 91       	pop	r28
    470e:	1f 91       	pop	r17
    4710:	0f 91       	pop	r16
    4712:	ff 90       	pop	r15
    4714:	ef 90       	pop	r14
    4716:	df 90       	pop	r13
    4718:	08 95       	ret

0000471a <_ZN5Xgrid11send_packetEPNS_6PacketEj>:
}


void Xgrid::send_packet(Packet *pkt, uint16_t mask)
{
        pkt->source_id = my_id;
    471a:	fc 01       	movw	r30, r24
    471c:	20 81       	ld	r18, Z
    471e:	31 81       	ldd	r19, Z+1	; 0x01
    4720:	fb 01       	movw	r30, r22
    4722:	20 83       	st	Z, r18
    4724:	31 83       	std	Z+1, r19	; 0x01
        pkt->seq = cur_seq++;
    4726:	fc 01       	movw	r30, r24
    4728:	22 81       	ldd	r18, Z+2	; 0x02
    472a:	fb 01       	movw	r30, r22
    472c:	23 83       	std	Z+3, r18	; 0x03
    472e:	2f 5f       	subi	r18, 0xFF	; 255
    4730:	fc 01       	movw	r30, r24
    4732:	22 83       	std	Z+2, r18	; 0x02
        pkt->rx_node = 0xFF;
    4734:	2f ef       	ldi	r18, 0xFF	; 255
    4736:	fb 01       	movw	r30, r22
    4738:	22 87       	std	Z+10, r18	; 0x0a
        
        send_raw_packet(pkt, mask);
    473a:	0e 94 1b 23 	call	0x4636	; 0x4636 <_ZN5Xgrid15send_raw_packetEPNS_6PacketEj>
}
    473e:	08 95       	ret

00004740 <_ZN5Xgrid23internal_process_packetEPNS_6PacketE>:
        }
}


void Xgrid::internal_process_packet(Packet *pkt)
{
    4740:	ef 92       	push	r14
    4742:	ff 92       	push	r15
    4744:	0f 93       	push	r16
    4746:	1f 93       	push	r17
    4748:	cf 93       	push	r28
    474a:	df 93       	push	r29
    474c:	cd b7       	in	r28, 0x3d	; 61
    474e:	de b7       	in	r29, 0x3e	; 62
    4750:	64 97       	sbiw	r28, 0x14	; 20
    4752:	cd bf       	out	0x3d, r28	; 61
    4754:	de bf       	out	0x3e, r29	; 62
    4756:	8c 01       	movw	r16, r24
    4758:	7b 01       	movw	r14, r22
        if (pkt->type == XGRID_PKT_PING_REQUEST)
    475a:	db 01       	movw	r26, r22
    475c:	12 96       	adiw	r26, 0x02	; 2
    475e:	8c 91       	ld	r24, X
    4760:	12 97       	sbiw	r26, 0x02	; 2
    4762:	8d 3f       	cpi	r24, 0xFD	; 253
    4764:	b9 f5       	brne	.+110    	; 0x47d4 <_ZN5Xgrid23internal_process_packetEPNS_6PacketE+0x94>
        {
#ifdef DEBUG
                printf_P(PSTR("rx ping req\n"));
    4766:	0f 92       	push	r0
    4768:	0f 92       	push	r0
    476a:	8c e6       	ldi	r24, 0x6C	; 108
    476c:	93 e0       	ldi	r25, 0x03	; 3
    476e:	ed b7       	in	r30, 0x3d	; 61
    4770:	fe b7       	in	r31, 0x3e	; 62
    4772:	81 83       	std	Z+1, r24	; 0x01
    4774:	92 83       	std	Z+2, r25	; 0x02
    4776:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <printf_P>
#endif // DEBUG
                xgrid_pkt_ping_reply_t d;
                d.build = build_number;
    477a:	f8 01       	movw	r30, r16
    477c:	85 81       	ldd	r24, Z+5	; 0x05
    477e:	96 81       	ldd	r25, Z+6	; 0x06
    4780:	a7 81       	ldd	r26, Z+7	; 0x07
    4782:	b0 85       	ldd	r27, Z+8	; 0x08
    4784:	8b 83       	std	Y+3, r24	; 0x03
    4786:	9c 83       	std	Y+4, r25	; 0x04
    4788:	ad 83       	std	Y+5, r26	; 0x05
    478a:	be 83       	std	Y+6, r27	; 0x06
                d.crc = firmware_crc;
    478c:	83 81       	ldd	r24, Z+3	; 0x03
    478e:	94 81       	ldd	r25, Z+4	; 0x04
    4790:	8f 83       	std	Y+7, r24	; 0x07
    4792:	98 87       	std	Y+8, r25	; 0x08
                
                Packet reply;
                reply.type = XGRID_PKT_PING_REPLY;
    4794:	8e ef       	ldi	r24, 0xFE	; 254
    4796:	8b 87       	std	Y+11, r24	; 0x0b
                reply.flags = 0;
    4798:	1d 86       	std	Y+13, r1	; 0x0d
                reply.radius = 1;
    479a:	81 e0       	ldi	r24, 0x01	; 1
    479c:	8e 87       	std	Y+14, r24	; 0x0e
                reply.data = (uint8_t *)&d;
    479e:	ce 01       	movw	r24, r28
    47a0:	03 96       	adiw	r24, 0x03	; 3
    47a2:	8f 87       	std	Y+15, r24	; 0x0f
    47a4:	98 8b       	std	Y+16, r25	; 0x10
                reply.data_len = sizeof(xgrid_pkt_ping_reply_t);
    47a6:	86 e0       	ldi	r24, 0x06	; 6
    47a8:	90 e0       	ldi	r25, 0x00	; 0
    47aa:	89 8b       	std	Y+17, r24	; 0x11
    47ac:	9a 8b       	std	Y+18, r25	; 0x12
                
                send_packet(&reply, (1 << pkt->rx_node));
    47ae:	0f 90       	pop	r0
    47b0:	0f 90       	pop	r0
    47b2:	41 e0       	ldi	r20, 0x01	; 1
    47b4:	50 e0       	ldi	r21, 0x00	; 0
    47b6:	d7 01       	movw	r26, r14
    47b8:	1a 96       	adiw	r26, 0x0a	; 10
    47ba:	0c 90       	ld	r0, X
    47bc:	02 c0       	rjmp	.+4      	; 0x47c2 <_ZN5Xgrid23internal_process_packetEPNS_6PacketE+0x82>
    47be:	44 0f       	add	r20, r20
    47c0:	55 1f       	adc	r21, r21
    47c2:	0a 94       	dec	r0
    47c4:	e2 f7       	brpl	.-8      	; 0x47be <_ZN5Xgrid23internal_process_packetEPNS_6PacketE+0x7e>
    47c6:	c8 01       	movw	r24, r16
    47c8:	be 01       	movw	r22, r28
    47ca:	67 5f       	subi	r22, 0xF7	; 247
    47cc:	7f 4f       	sbci	r23, 0xFF	; 255
    47ce:	0e 94 8d 23 	call	0x471a	; 0x471a <_ZN5Xgrid11send_packetEPNS_6PacketEj>
    47d2:	f0 c1       	rjmp	.+992    	; 0x4bb4 <_ZN5Xgrid23internal_process_packetEPNS_6PacketE+0x474>
        }
        else if (pkt->type == XGRID_PKT_PING_REPLY)
    47d4:	8e 3f       	cpi	r24, 0xFE	; 254
    47d6:	e1 f5       	brne	.+120    	; 0x4850 <_ZN5Xgrid23internal_process_packetEPNS_6PacketE+0x110>
        {
#ifdef DEBUG
                printf_P(PSTR("rx ping reply\n"));
    47d8:	0f 92       	push	r0
    47da:	0f 92       	push	r0
    47dc:	89 e7       	ldi	r24, 0x79	; 121
    47de:	93 e0       	ldi	r25, 0x03	; 3
    47e0:	ed b7       	in	r30, 0x3d	; 61
    47e2:	fe b7       	in	r31, 0x3e	; 62
    47e4:	81 83       	std	Z+1, r24	; 0x01
    47e6:	92 83       	std	Z+2, r25	; 0x02
    47e8:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <printf_P>
#endif // DEBUG
                xgrid_pkt_ping_reply_t *d = (xgrid_pkt_ping_reply_t *)(pkt->data);
    47ec:	d7 01       	movw	r26, r14
    47ee:	16 96       	adiw	r26, 0x06	; 6
    47f0:	2d 91       	ld	r18, X+
    47f2:	3c 91       	ld	r19, X
    47f4:	17 97       	sbiw	r26, 0x07	; 7
                
                nodes[pkt->rx_node].build = d->build;
    47f6:	1a 96       	adiw	r26, 0x0a	; 10
    47f8:	8c 91       	ld	r24, X
    47fa:	90 e0       	ldi	r25, 0x00	; 0
    47fc:	fc 01       	movw	r30, r24
    47fe:	ee 0f       	add	r30, r30
    4800:	ff 1f       	adc	r31, r31
    4802:	e8 0f       	add	r30, r24
    4804:	f9 1f       	adc	r31, r25
    4806:	ee 0f       	add	r30, r30
    4808:	ff 1f       	adc	r31, r31
    480a:	ee 0f       	add	r30, r30
    480c:	ff 1f       	adc	r31, r31
    480e:	e0 0f       	add	r30, r16
    4810:	f1 1f       	adc	r31, r17
    4812:	d9 01       	movw	r26, r18
    4814:	4d 91       	ld	r20, X+
    4816:	5d 91       	ld	r21, X+
    4818:	6d 91       	ld	r22, X+
    481a:	7c 91       	ld	r23, X
    481c:	13 97       	sbiw	r26, 0x03	; 3
    481e:	43 a3       	lds	r20, 0x53
    4820:	54 a3       	lds	r21, 0x54
    4822:	65 a3       	lds	r22, 0x55
    4824:	76 a3       	lds	r23, 0x56
                nodes[pkt->rx_node].crc = d->crc;
    4826:	f7 01       	movw	r30, r14
    4828:	82 85       	ldd	r24, Z+10	; 0x0a
    482a:	90 e0       	ldi	r25, 0x00	; 0
    482c:	fc 01       	movw	r30, r24
    482e:	ee 0f       	add	r30, r30
    4830:	ff 1f       	adc	r31, r31
    4832:	e8 0f       	add	r30, r24
    4834:	f9 1f       	adc	r31, r25
    4836:	ee 0f       	add	r30, r30
    4838:	ff 1f       	adc	r31, r31
    483a:	ee 0f       	add	r30, r30
    483c:	ff 1f       	adc	r31, r31
    483e:	e0 0f       	add	r30, r16
    4840:	f1 1f       	adc	r31, r17
    4842:	14 96       	adiw	r26, 0x04	; 4
    4844:	8d 91       	ld	r24, X+
    4846:	9c 91       	ld	r25, X
    4848:	15 97       	sbiw	r26, 0x05	; 5
    484a:	87 a3       	lds	r24, 0x57
    484c:	90 a7       	lds	r25, 0x70
    484e:	3a c1       	rjmp	.+628    	; 0x4ac4 <_ZN5Xgrid23internal_process_packetEPNS_6PacketE+0x384>
        }
        else if (pkt->type == XGRID_PKT_MAINT_CMD)
    4850:	89 3f       	cpi	r24, 0xF9	; 249
    4852:	09 f0       	breq	.+2      	; 0x4856 <_ZN5Xgrid23internal_process_packetEPNS_6PacketE+0x116>
    4854:	5a c1       	rjmp	.+692    	; 0x4b0a <_ZN5Xgrid23internal_process_packetEPNS_6PacketE+0x3ca>
        {
#ifdef DEBUG
                printf_P(PSTR("rx maint cmd\n"));
    4856:	0f 92       	push	r0
    4858:	0f 92       	push	r0
    485a:	88 e8       	ldi	r24, 0x88	; 136
    485c:	93 e0       	ldi	r25, 0x03	; 3
    485e:	ad b7       	in	r26, 0x3d	; 61
    4860:	be b7       	in	r27, 0x3e	; 62
    4862:	11 96       	adiw	r26, 0x01	; 1
    4864:	8d 93       	st	X+, r24
    4866:	9c 93       	st	X, r25
    4868:	12 97       	sbiw	r26, 0x02	; 2
    486a:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <printf_P>
#endif // DEBUG
                xgrid_pkt_maint_cmd_t *c = (xgrid_pkt_maint_cmd_t *)(pkt->data);
    486e:	d7 01       	movw	r26, r14
    4870:	16 96       	adiw	r26, 0x06	; 6
    4872:	ed 91       	ld	r30, X+
    4874:	fc 91       	ld	r31, X
    4876:	17 97       	sbiw	r26, 0x07	; 7
                
                if (c->cmd == XGRID_CMD_START_UPDATE && c->magic == XGRID_CMD_UPDATE_MAGIC &&
    4878:	80 81       	ld	r24, Z
    487a:	0f 90       	pop	r0
    487c:	0f 90       	pop	r0
    487e:	81 38       	cpi	r24, 0x81	; 129
    4880:	09 f0       	breq	.+2      	; 0x4884 <_ZN5Xgrid23internal_process_packetEPNS_6PacketE+0x144>
    4882:	55 c0       	rjmp	.+170    	; 0x492e <_ZN5Xgrid23internal_process_packetEPNS_6PacketE+0x1ee>
    4884:	81 81       	ldd	r24, Z+1	; 0x01
    4886:	92 81       	ldd	r25, Z+2	; 0x02
    4888:	a3 81       	ldd	r26, Z+3	; 0x03
    488a:	b4 81       	ldd	r27, Z+4	; 0x04
    488c:	8e 37       	cpi	r24, 0x7E	; 126
    488e:	ee e1       	ldi	r30, 0x1E	; 30
    4890:	9e 07       	cpc	r25, r30
    4892:	e0 e5       	ldi	r30, 0x50	; 80
    4894:	ae 07       	cpc	r26, r30
    4896:	eb e0       	ldi	r30, 0x0B	; 11
    4898:	be 07       	cpc	r27, r30
    489a:	09 f0       	breq	.+2      	; 0x489e <_ZN5Xgrid23internal_process_packetEPNS_6PacketE+0x15e>
    489c:	8b c1       	rjmp	.+790    	; 0x4bb4 <_ZN5Xgrid23internal_process_packetEPNS_6PacketE+0x474>
    489e:	d8 01       	movw	r26, r16
    48a0:	1f 96       	adiw	r26, 0x0f	; 15
    48a2:	8c 91       	ld	r24, X
    48a4:	1f 97       	sbiw	r26, 0x0f	; 15
    48a6:	88 32       	cpi	r24, 0x28	; 40
    48a8:	09 f4       	brne	.+2      	; 0x48ac <_ZN5Xgrid23internal_process_packetEPNS_6PacketE+0x16c>
    48aa:	84 c1       	rjmp	.+776    	; 0x4bb4 <_ZN5Xgrid23internal_process_packetEPNS_6PacketE+0x474>
                                state != XGRID_STATE_FW_RX)
                {
#ifdef DEBUG
                        printf_P(PSTR("start update\n"));
    48ac:	0f 92       	push	r0
    48ae:	0f 92       	push	r0
    48b0:	86 e9       	ldi	r24, 0x96	; 150
    48b2:	93 e0       	ldi	r25, 0x03	; 3
    48b4:	ed b7       	in	r30, 0x3d	; 61
    48b6:	fe b7       	in	r31, 0x3e	; 62
    48b8:	81 83       	std	Z+1, r24	; 0x01
    48ba:	92 83       	std	Z+2, r25	; 0x02
    48bc:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <printf_P>
#endif // DEBUG
                        // start update
                        firmware_offset = 0;
    48c0:	d8 01       	movw	r26, r16
    48c2:	58 96       	adiw	r26, 0x18	; 24
    48c4:	1d 92       	st	X+, r1
    48c6:	1d 92       	st	X+, r1
    48c8:	1d 92       	st	X+, r1
    48ca:	1c 92       	st	X, r1
    48cc:	5b 97       	sbiw	r26, 0x1b	; 27
                        
                        xgrid_pkt_maint_cmd_start_update_t *csu = (xgrid_pkt_maint_cmd_start_update_t *)(pkt->data);
    48ce:	f7 01       	movw	r30, r14
    48d0:	26 81       	ldd	r18, Z+6	; 0x06
    48d2:	37 81       	ldd	r19, Z+7	; 0x07
                        
                        if (csu->build > build_number)
    48d4:	f9 01       	movw	r30, r18
    48d6:	87 81       	ldd	r24, Z+7	; 0x07
    48d8:	90 85       	ldd	r25, Z+8	; 0x08
    48da:	a1 85       	ldd	r26, Z+9	; 0x09
    48dc:	b2 85       	ldd	r27, Z+10	; 0x0a
    48de:	0f 90       	pop	r0
    48e0:	0f 90       	pop	r0
    48e2:	f8 01       	movw	r30, r16
    48e4:	45 81       	ldd	r20, Z+5	; 0x05
    48e6:	56 81       	ldd	r21, Z+6	; 0x06
    48e8:	67 81       	ldd	r22, Z+7	; 0x07
    48ea:	70 85       	ldd	r23, Z+8	; 0x08
    48ec:	48 17       	cp	r20, r24
    48ee:	59 07       	cpc	r21, r25
    48f0:	6a 07       	cpc	r22, r26
    48f2:	7b 07       	cpc	r23, r27
    48f4:	08 f0       	brcs	.+2      	; 0x48f8 <_ZN5Xgrid23internal_process_packetEPNS_6PacketE+0x1b8>
    48f6:	5e c1       	rjmp	.+700    	; 0x4bb4 <_ZN5Xgrid23internal_process_packetEPNS_6PacketE+0x474>
                        {
                                // sanity check: only update if being
                                // offered a more recent version
                                
                                new_build = csu->build;
    48f8:	84 8b       	std	Z+20, r24	; 0x14
    48fa:	95 8b       	std	Z+21, r25	; 0x15
    48fc:	a6 8b       	std	Z+22, r26	; 0x16
    48fe:	b7 8b       	std	Z+23, r27	; 0x17
                                new_crc = csu->crc;
    4900:	d9 01       	movw	r26, r18
    4902:	15 96       	adiw	r26, 0x05	; 5
    4904:	8d 91       	ld	r24, X+
    4906:	9c 91       	ld	r25, X
    4908:	16 97       	sbiw	r26, 0x06	; 6
    490a:	82 8b       	std	Z+18, r24	; 0x12
    490c:	93 8b       	std	Z+19, r25	; 0x13
                                
                                update_node_mask = pkt->rx_node;
    490e:	f7 01       	movw	r30, r14
    4910:	82 85       	ldd	r24, Z+10	; 0x0a
    4912:	d8 01       	movw	r26, r16
    4914:	50 96       	adiw	r26, 0x10	; 16
    4916:	8c 93       	st	X, r24
    4918:	50 97       	sbiw	r26, 0x10	; 16
    491a:	51 96       	adiw	r26, 0x11	; 17
    491c:	1c 92       	st	X, r1
    491e:	51 97       	sbiw	r26, 0x11	; 17
                                state = XGRID_STATE_FW_RX;
    4920:	88 e2       	ldi	r24, 0x28	; 40
    4922:	1f 96       	adiw	r26, 0x0f	; 15
    4924:	8c 93       	st	X, r24
    4926:	1f 97       	sbiw	r26, 0x0f	; 15
                                timeout = 1000;
    4928:	88 ee       	ldi	r24, 0xE8	; 232
    492a:	93 e0       	ldi	r25, 0x03	; 3
    492c:	20 c1       	rjmp	.+576    	; 0x4b6e <_ZN5Xgrid23internal_process_packetEPNS_6PacketE+0x42e>
                        }
                }
                else if (c->cmd == XGRID_CMD_FINISH_UPDATE && c->magic == XGRID_CMD_UPDATE_MAGIC &&
    492e:	82 38       	cpi	r24, 0x82	; 130
    4930:	09 f0       	breq	.+2      	; 0x4934 <_ZN5Xgrid23internal_process_packetEPNS_6PacketE+0x1f4>
    4932:	9e c0       	rjmp	.+316    	; 0x4a70 <_ZN5Xgrid23internal_process_packetEPNS_6PacketE+0x330>
    4934:	81 81       	ldd	r24, Z+1	; 0x01
    4936:	92 81       	ldd	r25, Z+2	; 0x02
    4938:	a3 81       	ldd	r26, Z+3	; 0x03
    493a:	b4 81       	ldd	r27, Z+4	; 0x04
    493c:	8e 37       	cpi	r24, 0x7E	; 126
    493e:	ee e1       	ldi	r30, 0x1E	; 30
    4940:	9e 07       	cpc	r25, r30
    4942:	e0 e5       	ldi	r30, 0x50	; 80
    4944:	ae 07       	cpc	r26, r30
    4946:	eb e0       	ldi	r30, 0x0B	; 11
    4948:	be 07       	cpc	r27, r30
    494a:	09 f0       	breq	.+2      	; 0x494e <_ZN5Xgrid23internal_process_packetEPNS_6PacketE+0x20e>
    494c:	33 c1       	rjmp	.+614    	; 0x4bb4 <_ZN5Xgrid23internal_process_packetEPNS_6PacketE+0x474>
    494e:	d8 01       	movw	r26, r16
    4950:	1f 96       	adiw	r26, 0x0f	; 15
    4952:	8c 91       	ld	r24, X
    4954:	1f 97       	sbiw	r26, 0x0f	; 15
    4956:	88 32       	cpi	r24, 0x28	; 40
    4958:	09 f0       	breq	.+2      	; 0x495c <_ZN5Xgrid23internal_process_packetEPNS_6PacketE+0x21c>
    495a:	2c c1       	rjmp	.+600    	; 0x4bb4 <_ZN5Xgrid23internal_process_packetEPNS_6PacketE+0x474>
                                state == XGRID_STATE_FW_RX)
                {
#ifdef DEBUG
                        printf_P(PSTR("finish update\n"));
    495c:	0f 92       	push	r0
    495e:	0f 92       	push	r0
    4960:	84 ea       	ldi	r24, 0xA4	; 164
    4962:	93 e0       	ldi	r25, 0x03	; 3
    4964:	ed b7       	in	r30, 0x3d	; 61
    4966:	fe b7       	in	r31, 0x3e	; 62
    4968:	81 83       	std	Z+1, r24	; 0x01
    496a:	92 83       	std	Z+2, r25	; 0x02
    496c:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <printf_P>
#endif // DEBUG
                        // check and install firmware
                        
                        uint16_t cur_crc;
                        
                        xboot_app_temp_crc16(&cur_crc);
    4970:	0f 90       	pop	r0
    4972:	0f 90       	pop	r0
    4974:	ce 01       	movw	r24, r28
    4976:	01 96       	adiw	r24, 0x01	; 1
    4978:	0e 94 91 2e 	call	0x5d22	; 0x5d22 <xboot_app_temp_crc16>
                        
#ifdef DEBUG
                        printf_P(PSTR("new crc: %04x\n"), new_crc);
    497c:	00 d0       	rcall	.+0      	; 0x497e <_ZN5Xgrid23internal_process_packetEPNS_6PacketE+0x23e>
    497e:	0f 92       	push	r0
    4980:	83 eb       	ldi	r24, 0xB3	; 179
    4982:	93 e0       	ldi	r25, 0x03	; 3
    4984:	ad b7       	in	r26, 0x3d	; 61
    4986:	be b7       	in	r27, 0x3e	; 62
    4988:	11 96       	adiw	r26, 0x01	; 1
    498a:	8d 93       	st	X+, r24
    498c:	9c 93       	st	X, r25
    498e:	12 97       	sbiw	r26, 0x02	; 2
    4990:	f8 01       	movw	r30, r16
    4992:	82 89       	ldd	r24, Z+18	; 0x12
    4994:	93 89       	ldd	r25, Z+19	; 0x13
    4996:	13 96       	adiw	r26, 0x03	; 3
    4998:	8d 93       	st	X+, r24
    499a:	9c 93       	st	X, r25
    499c:	14 97       	sbiw	r26, 0x04	; 4
    499e:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <printf_P>
                        printf_P(PSTR("cur crc: %04x\n"), cur_crc);
    49a2:	82 ec       	ldi	r24, 0xC2	; 194
    49a4:	93 e0       	ldi	r25, 0x03	; 3
    49a6:	ad b7       	in	r26, 0x3d	; 61
    49a8:	be b7       	in	r27, 0x3e	; 62
    49aa:	11 96       	adiw	r26, 0x01	; 1
    49ac:	8d 93       	st	X+, r24
    49ae:	9c 93       	st	X, r25
    49b0:	12 97       	sbiw	r26, 0x02	; 2
    49b2:	89 81       	ldd	r24, Y+1	; 0x01
    49b4:	9a 81       	ldd	r25, Y+2	; 0x02
    49b6:	13 96       	adiw	r26, 0x03	; 3
    49b8:	8d 93       	st	X+, r24
    49ba:	9c 93       	st	X, r25
    49bc:	14 97       	sbiw	r26, 0x04	; 4
    49be:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <printf_P>
#endif // DEBUG
                        
                        if (cur_crc == new_crc)
    49c2:	0f 90       	pop	r0
    49c4:	0f 90       	pop	r0
    49c6:	0f 90       	pop	r0
    49c8:	0f 90       	pop	r0
    49ca:	29 81       	ldd	r18, Y+1	; 0x01
    49cc:	3a 81       	ldd	r19, Y+2	; 0x02
    49ce:	f8 01       	movw	r30, r16
    49d0:	82 89       	ldd	r24, Z+18	; 0x12
    49d2:	93 89       	ldd	r25, Z+19	; 0x13
    49d4:	28 17       	cp	r18, r24
    49d6:	39 07       	cpc	r19, r25
    49d8:	41 f5       	brne	.+80     	; 0x4a2a <_ZN5Xgrid23internal_process_packetEPNS_6PacketE+0x2ea>
                        {
#ifdef DEBUG
                                printf_P(PSTR("good crc\n"));
    49da:	0f 92       	push	r0
    49dc:	0f 92       	push	r0
    49de:	81 ed       	ldi	r24, 0xD1	; 209
    49e0:	93 e0       	ldi	r25, 0x03	; 3
    49e2:	ad b7       	in	r26, 0x3d	; 61
    49e4:	be b7       	in	r27, 0x3e	; 62
    49e6:	11 96       	adiw	r26, 0x01	; 1
    49e8:	8d 93       	st	X+, r24
    49ea:	9c 93       	st	X, r25
    49ec:	12 97       	sbiw	r26, 0x02	; 2
    49ee:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <printf_P>
#endif // DEBUG
                                firmware_crc = new_crc;
    49f2:	f8 01       	movw	r30, r16
    49f4:	82 89       	ldd	r24, Z+18	; 0x12
    49f6:	93 89       	ldd	r25, Z+19	; 0x13
    49f8:	83 83       	std	Z+3, r24	; 0x03
    49fa:	94 83       	std	Z+4, r25	; 0x04
                                build_number = new_build;
    49fc:	44 89       	ldd	r20, Z+20	; 0x14
    49fe:	55 89       	ldd	r21, Z+21	; 0x15
    4a00:	66 89       	ldd	r22, Z+22	; 0x16
    4a02:	77 89       	ldd	r23, Z+23	; 0x17
    4a04:	45 83       	std	Z+5, r20	; 0x05
    4a06:	56 83       	std	Z+6, r21	; 0x06
    4a08:	67 83       	std	Z+7, r22	; 0x07
    4a0a:	70 87       	std	Z+8, r23	; 0x08
                                firmware_offset = XB_APP_TEMP_START;
    4a0c:	40 e0       	ldi	r20, 0x00	; 0
    4a0e:	50 e0       	ldi	r21, 0x00	; 0
    4a10:	61 e0       	ldi	r22, 0x01	; 1
    4a12:	70 e0       	ldi	r23, 0x00	; 0
    4a14:	40 8f       	std	Z+24, r20	; 0x18
    4a16:	51 8f       	std	Z+25, r21	; 0x19
    4a18:	62 8f       	std	Z+26, r22	; 0x1a
    4a1a:	73 8f       	std	Z+27, r23	; 0x1b
                                firmware_updated = 1;
    4a1c:	21 e0       	ldi	r18, 0x01	; 1
    4a1e:	24 8f       	std	Z+28, r18	; 0x1c
                                // init install
                                xboot_install_firmware(new_crc);
    4a20:	0f 90       	pop	r0
    4a22:	0f 90       	pop	r0
    4a24:	0e 94 af 2e 	call	0x5d5e	; 0x5d5e <xboot_install_firmware>
    4a28:	13 c0       	rjmp	.+38     	; 0x4a50 <_ZN5Xgrid23internal_process_packetEPNS_6PacketE+0x310>
                        }
                        else
                        {
#ifdef DEBUG
                                printf_P(PSTR("bad crc\n"));
    4a2a:	0f 92       	push	r0
    4a2c:	0f 92       	push	r0
    4a2e:	8b ed       	ldi	r24, 0xDB	; 219
    4a30:	93 e0       	ldi	r25, 0x03	; 3
    4a32:	ad b7       	in	r26, 0x3d	; 61
    4a34:	be b7       	in	r27, 0x3e	; 62
    4a36:	11 96       	adiw	r26, 0x01	; 1
    4a38:	8d 93       	st	X+, r24
    4a3a:	9c 93       	st	X, r25
    4a3c:	12 97       	sbiw	r26, 0x02	; 2
    4a3e:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <printf_P>
#endif // DEBUG
                                firmware_offset = 0;
    4a42:	f8 01       	movw	r30, r16
    4a44:	10 8e       	std	Z+24, r1	; 0x18
    4a46:	11 8e       	std	Z+25, r1	; 0x19
    4a48:	12 8e       	std	Z+26, r1	; 0x1a
    4a4a:	13 8e       	std	Z+27, r1	; 0x1b
    4a4c:	0f 90       	pop	r0
    4a4e:	0f 90       	pop	r0
                        }
                        
                        // go back to idle and check neighbor firmware versions
                        timeout = 0;
    4a50:	d8 01       	movw	r26, r16
    4a52:	19 96       	adiw	r26, 0x09	; 9
    4a54:	1d 92       	st	X+, r1
    4a56:	1c 92       	st	X, r1
    4a58:	1a 97       	sbiw	r26, 0x0a	; 10
                        delay = 100;
    4a5a:	84 e6       	ldi	r24, 0x64	; 100
    4a5c:	90 e0       	ldi	r25, 0x00	; 0
    4a5e:	a0 e0       	ldi	r26, 0x00	; 0
    4a60:	b0 e0       	ldi	r27, 0x00	; 0
    4a62:	f8 01       	movw	r30, r16
    4a64:	83 87       	std	Z+11, r24	; 0x0b
    4a66:	94 87       	std	Z+12, r25	; 0x0c
    4a68:	a5 87       	std	Z+13, r26	; 0x0d
    4a6a:	b6 87       	std	Z+14, r27	; 0x0e
                        state = XGRID_STATE_IDLE;
    4a6c:	17 86       	std	Z+15, r1	; 0x0f
    4a6e:	a2 c0       	rjmp	.+324    	; 0x4bb4 <_ZN5Xgrid23internal_process_packetEPNS_6PacketE+0x474>
                }
                else if (c->cmd == XGRID_CMD_ABORT_UPDATE && c->magic == XGRID_CMD_UPDATE_MAGIC &&
    4a70:	83 38       	cpi	r24, 0x83	; 131
    4a72:	59 f5       	brne	.+86     	; 0x4aca <_ZN5Xgrid23internal_process_packetEPNS_6PacketE+0x38a>
    4a74:	81 81       	ldd	r24, Z+1	; 0x01
    4a76:	92 81       	ldd	r25, Z+2	; 0x02
    4a78:	a3 81       	ldd	r26, Z+3	; 0x03
    4a7a:	b4 81       	ldd	r27, Z+4	; 0x04
    4a7c:	8e 37       	cpi	r24, 0x7E	; 126
    4a7e:	fe e1       	ldi	r31, 0x1E	; 30
    4a80:	9f 07       	cpc	r25, r31
    4a82:	f0 e5       	ldi	r31, 0x50	; 80
    4a84:	af 07       	cpc	r26, r31
    4a86:	fb e0       	ldi	r31, 0x0B	; 11
    4a88:	bf 07       	cpc	r27, r31
    4a8a:	09 f0       	breq	.+2      	; 0x4a8e <_ZN5Xgrid23internal_process_packetEPNS_6PacketE+0x34e>
    4a8c:	93 c0       	rjmp	.+294    	; 0x4bb4 <_ZN5Xgrid23internal_process_packetEPNS_6PacketE+0x474>
    4a8e:	d8 01       	movw	r26, r16
    4a90:	1f 96       	adiw	r26, 0x0f	; 15
    4a92:	8c 91       	ld	r24, X
    4a94:	1f 97       	sbiw	r26, 0x0f	; 15
    4a96:	88 32       	cpi	r24, 0x28	; 40
    4a98:	09 f0       	breq	.+2      	; 0x4a9c <_ZN5Xgrid23internal_process_packetEPNS_6PacketE+0x35c>
    4a9a:	8c c0       	rjmp	.+280    	; 0x4bb4 <_ZN5Xgrid23internal_process_packetEPNS_6PacketE+0x474>
                                state == XGRID_STATE_FW_RX)
                {
#ifdef DEBUG
                        printf_P(PSTR("abort update\n"));
    4a9c:	0f 92       	push	r0
    4a9e:	0f 92       	push	r0
    4aa0:	84 ee       	ldi	r24, 0xE4	; 228
    4aa2:	93 e0       	ldi	r25, 0x03	; 3
    4aa4:	ed b7       	in	r30, 0x3d	; 61
    4aa6:	fe b7       	in	r31, 0x3e	; 62
    4aa8:	81 83       	std	Z+1, r24	; 0x01
    4aaa:	92 83       	std	Z+2, r25	; 0x02
    4aac:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <printf_P>
#endif // DEBUG
                        // abort update (go back to idle)
                        firmware_offset = 0;
    4ab0:	d8 01       	movw	r26, r16
    4ab2:	58 96       	adiw	r26, 0x18	; 24
    4ab4:	1d 92       	st	X+, r1
    4ab6:	1d 92       	st	X+, r1
    4ab8:	1d 92       	st	X+, r1
    4aba:	1c 92       	st	X, r1
    4abc:	5b 97       	sbiw	r26, 0x1b	; 27
                        state = XGRID_STATE_IDLE;
    4abe:	1f 96       	adiw	r26, 0x0f	; 15
    4ac0:	1c 92       	st	X, r1
    4ac2:	1f 97       	sbiw	r26, 0x0f	; 15
    4ac4:	0f 90       	pop	r0
    4ac6:	0f 90       	pop	r0
    4ac8:	75 c0       	rjmp	.+234    	; 0x4bb4 <_ZN5Xgrid23internal_process_packetEPNS_6PacketE+0x474>
                }
                else if (c->cmd == XGRID_CMD_RESET && c->magic == XGRID_CMD_RESET_MAGIC)
    4aca:	80 39       	cpi	r24, 0x90	; 144
    4acc:	09 f0       	breq	.+2      	; 0x4ad0 <_ZN5Xgrid23internal_process_packetEPNS_6PacketE+0x390>
    4ace:	72 c0       	rjmp	.+228    	; 0x4bb4 <_ZN5Xgrid23internal_process_packetEPNS_6PacketE+0x474>
    4ad0:	81 81       	ldd	r24, Z+1	; 0x01
    4ad2:	92 81       	ldd	r25, Z+2	; 0x02
    4ad4:	a3 81       	ldd	r26, Z+3	; 0x03
    4ad6:	b4 81       	ldd	r27, Z+4	; 0x04
    4ad8:	8d 3a       	cpi	r24, 0xAD	; 173
    4ada:	ee ed       	ldi	r30, 0xDE	; 222
    4adc:	9e 07       	cpc	r25, r30
    4ade:	e1 ee       	ldi	r30, 0xE1	; 225
    4ae0:	ae 07       	cpc	r26, r30
    4ae2:	ee ef       	ldi	r30, 0xFE	; 254
    4ae4:	be 07       	cpc	r27, r30
    4ae6:	09 f0       	breq	.+2      	; 0x4aea <_ZN5Xgrid23internal_process_packetEPNS_6PacketE+0x3aa>
    4ae8:	65 c0       	rjmp	.+202    	; 0x4bb4 <_ZN5Xgrid23internal_process_packetEPNS_6PacketE+0x474>
                {
#ifdef DEBUG
                        printf_P(PSTR("reset\n"));
    4aea:	0f 92       	push	r0
    4aec:	0f 92       	push	r0
    4aee:	82 ef       	ldi	r24, 0xF2	; 242
    4af0:	93 e0       	ldi	r25, 0x03	; 3
    4af2:	ad b7       	in	r26, 0x3d	; 61
    4af4:	be b7       	in	r27, 0x3e	; 62
    4af6:	11 96       	adiw	r26, 0x01	; 1
    4af8:	8d 93       	st	X+, r24
    4afa:	9c 93       	st	X, r25
    4afc:	12 97       	sbiw	r26, 0x02	; 2
    4afe:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <printf_P>
#endif // DEBUG
                        xboot_reset();
    4b02:	0f 90       	pop	r0
    4b04:	0f 90       	pop	r0
    4b06:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <xboot_reset>
                }
        }
        else if (pkt->type == XGRID_PKT_FIRMWARE_BLOCK)
    4b0a:	8b 3f       	cpi	r24, 0xFB	; 251
    4b0c:	a9 f5       	brne	.+106    	; 0x4b78 <_ZN5Xgrid23internal_process_packetEPNS_6PacketE+0x438>
        {
#ifdef DEBUG
                printf_P(PSTR("rx firmware block\n"));
    4b0e:	0f 92       	push	r0
    4b10:	0f 92       	push	r0
    4b12:	89 ef       	ldi	r24, 0xF9	; 249
    4b14:	93 e0       	ldi	r25, 0x03	; 3
    4b16:	ed b7       	in	r30, 0x3d	; 61
    4b18:	fe b7       	in	r31, 0x3e	; 62
    4b1a:	81 83       	std	Z+1, r24	; 0x01
    4b1c:	92 83       	std	Z+2, r25	; 0x02
    4b1e:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <printf_P>
#endif // DEBUG
                if (state == XGRID_STATE_FW_RX && pkt->data_len == SPM_PAGESIZE+2)
    4b22:	0f 90       	pop	r0
    4b24:	0f 90       	pop	r0
    4b26:	d8 01       	movw	r26, r16
    4b28:	1f 96       	adiw	r26, 0x0f	; 15
    4b2a:	8c 91       	ld	r24, X
    4b2c:	1f 97       	sbiw	r26, 0x0f	; 15
    4b2e:	88 32       	cpi	r24, 0x28	; 40
    4b30:	09 f0       	breq	.+2      	; 0x4b34 <_ZN5Xgrid23internal_process_packetEPNS_6PacketE+0x3f4>
    4b32:	40 c0       	rjmp	.+128    	; 0x4bb4 <_ZN5Xgrid23internal_process_packetEPNS_6PacketE+0x474>
    4b34:	f7 01       	movw	r30, r14
    4b36:	80 85       	ldd	r24, Z+8	; 0x08
    4b38:	91 85       	ldd	r25, Z+9	; 0x09
    4b3a:	f2 e0       	ldi	r31, 0x02	; 2
    4b3c:	82 30       	cpi	r24, 0x02	; 2
    4b3e:	9f 07       	cpc	r25, r31
    4b40:	c9 f5       	brne	.+114    	; 0x4bb4 <_ZN5Xgrid23internal_process_packetEPNS_6PacketE+0x474>
                {
                        xgrid_pkt_firmware_block_t *b = (xgrid_pkt_firmware_block_t *)(pkt->data);
    4b42:	d7 01       	movw	r26, r14
    4b44:	16 96       	adiw	r26, 0x06	; 6
    4b46:	4d 91       	ld	r20, X+
    4b48:	5c 91       	ld	r21, X
    4b4a:	17 97       	sbiw	r26, 0x07	; 7
                        
                        xboot_app_temp_write_page(b->offset * SPM_PAGESIZE, b->data, 1);
    4b4c:	fa 01       	movw	r30, r20
    4b4e:	80 81       	ld	r24, Z
    4b50:	78 2f       	mov	r23, r24
    4b52:	77 0f       	add	r23, r23
    4b54:	60 e0       	ldi	r22, 0x00	; 0
    4b56:	88 27       	eor	r24, r24
    4b58:	77 fd       	sbrc	r23, 7
    4b5a:	80 95       	com	r24
    4b5c:	98 2f       	mov	r25, r24
    4b5e:	4e 5f       	subi	r20, 0xFE	; 254
    4b60:	5f 4f       	sbci	r21, 0xFF	; 255
    4b62:	21 e0       	ldi	r18, 0x01	; 1
    4b64:	0e 94 f0 2d 	call	0x5be0	; 0x5be0 <xboot_app_temp_write_page>
                        
                        timeout = 1000;
    4b68:	88 ee       	ldi	r24, 0xE8	; 232
    4b6a:	93 e0       	ldi	r25, 0x03	; 3
    4b6c:	d8 01       	movw	r26, r16
    4b6e:	19 96       	adiw	r26, 0x09	; 9
    4b70:	8d 93       	st	X+, r24
    4b72:	9c 93       	st	X, r25
    4b74:	1a 97       	sbiw	r26, 0x0a	; 10
    4b76:	1e c0       	rjmp	.+60     	; 0x4bb4 <_ZN5Xgrid23internal_process_packetEPNS_6PacketE+0x474>
                }
        }
        else if (pkt->type == XGRID_PKT_FLUSH_COMPARE_BUFFER)
    4b78:	8c 3f       	cpi	r24, 0xFC	; 252
    4b7a:	91 f4       	brne	.+36     	; 0x4ba0 <_ZN5Xgrid23internal_process_packetEPNS_6PacketE+0x460>
        {
#ifdef DEBUG
                printf_P(PSTR("rx flush buffer\n"));
    4b7c:	0f 92       	push	r0
    4b7e:	0f 92       	push	r0
    4b80:	8c e0       	ldi	r24, 0x0C	; 12
    4b82:	94 e0       	ldi	r25, 0x04	; 4
    4b84:	ed b7       	in	r30, 0x3d	; 61
    4b86:	fe b7       	in	r31, 0x3e	; 62
    4b88:	81 83       	std	Z+1, r24	; 0x01
    4b8a:	92 83       	std	Z+2, r25	; 0x02
    4b8c:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <printf_P>
#endif // DEBUG
                memset(compare_buffer, 0, sizeof(xgrid_header_minimal_t) * XGRID_COMPARE_BUFFER_SIZE);
    4b90:	02 58       	subi	r16, 0x82	; 130
    4b92:	1f 4f       	sbci	r17, 0xFF	; 255
    4b94:	80 e4       	ldi	r24, 0x40	; 64
    4b96:	d8 01       	movw	r26, r16
    4b98:	1d 92       	st	X+, r1
    4b9a:	8a 95       	dec	r24
    4b9c:	e9 f7       	brne	.-6      	; 0x4b98 <_ZN5Xgrid23internal_process_packetEPNS_6PacketE+0x458>
    4b9e:	92 cf       	rjmp	.-220    	; 0x4ac4 <_ZN5Xgrid23internal_process_packetEPNS_6PacketE+0x384>
        }
        else
        {
                // if we haven't processed the packet internally,
                // pass it to the application
                if (rx_pkt)
    4ba0:	f8 01       	movw	r30, r16
    4ba2:	e9 5f       	subi	r30, 0xF9	; 249
    4ba4:	f9 4f       	sbci	r31, 0xF9	; 249
    4ba6:	01 90       	ld	r0, Z+
    4ba8:	f0 81       	ld	r31, Z
    4baa:	e0 2d       	mov	r30, r0
    4bac:	30 97       	sbiw	r30, 0x00	; 0
    4bae:	11 f0       	breq	.+4      	; 0x4bb4 <_ZN5Xgrid23internal_process_packetEPNS_6PacketE+0x474>
                        (*rx_pkt)(pkt);
    4bb0:	cb 01       	movw	r24, r22
    4bb2:	19 95       	eicall
        }
}
    4bb4:	64 96       	adiw	r28, 0x14	; 20
    4bb6:	cd bf       	out	0x3d, r28	; 61
    4bb8:	de bf       	out	0x3e, r29	; 62
    4bba:	df 91       	pop	r29
    4bbc:	cf 91       	pop	r28
    4bbe:	1f 91       	pop	r17
    4bc0:	0f 91       	pop	r16
    4bc2:	ff 90       	pop	r15
    4bc4:	ef 90       	pop	r14
    4bc6:	08 95       	ret

00004bc8 <_ZN5Xgrid7processEv>:
        return 1;
}


void Xgrid::process()
{
    4bc8:	2f 92       	push	r2
    4bca:	3f 92       	push	r3
    4bcc:	4f 92       	push	r4
    4bce:	5f 92       	push	r5
    4bd0:	6f 92       	push	r6
    4bd2:	7f 92       	push	r7
    4bd4:	8f 92       	push	r8
    4bd6:	9f 92       	push	r9
    4bd8:	af 92       	push	r10
    4bda:	bf 92       	push	r11
    4bdc:	cf 92       	push	r12
    4bde:	df 92       	push	r13
    4be0:	ef 92       	push	r14
    4be2:	ff 92       	push	r15
    4be4:	0f 93       	push	r16
    4be6:	1f 93       	push	r17
    4be8:	cf 93       	push	r28
    4bea:	df 93       	push	r29
    4bec:	cd b7       	in	r28, 0x3d	; 61
    4bee:	de b7       	in	r29, 0x3e	; 62
    4bf0:	c2 51       	subi	r28, 0x12	; 18
    4bf2:	d2 40       	sbci	r29, 0x02	; 2
    4bf4:	cd bf       	out	0x3d, r28	; 61
    4bf6:	de bf       	out	0x3e, r29	; 62
    4bf8:	5c 01       	movw	r10, r24
        Packet pkt;
        
        // process nodes
        for (uint8_t i = 0; i < node_cnt; i++)
    4bfa:	99 24       	eor	r9, r9
    4bfc:	9c 01       	movw	r18, r24
    4bfe:	23 58       	subi	r18, 0x83	; 131
    4c00:	3f 4f       	sbci	r19, 0xFF	; 255
    4c02:	c1 5f       	subi	r28, 0xF1	; 241
    4c04:	dd 4f       	sbci	r29, 0xFD	; 253
    4c06:	28 83       	st	Y, r18
    4c08:	39 83       	std	Y+1, r19	; 0x01
    4c0a:	cf 50       	subi	r28, 0x0F	; 15
    4c0c:	d2 40       	sbci	r29, 0x02	; 2
                                
                                internal_process_packet(&pkt);
                                
                                // release buffer
                                buffer->flags &= ~ XGRID_BUFFER_IN_USE_RX;
                                nodes[i].rx_buffer = -1;
    4c0e:	88 24       	eor	r8, r8
    4c10:	8a 94       	dec	r8
void Xgrid::process()
{
        Packet pkt;
        
        // process nodes
        for (uint8_t i = 0; i < node_cnt; i++)
    4c12:	ee c1       	rjmp	.+988    	; 0x4ff0 <_ZN5Xgrid7processEv+0x428>
        {
                IOStream *stream = nodes[i].stream;
    4c14:	f2 01       	movw	r30, r4
    4c16:	ee 0f       	add	r30, r30
    4c18:	ff 1f       	adc	r31, r31
    4c1a:	e4 0d       	add	r30, r4
    4c1c:	f5 1d       	adc	r31, r5
    4c1e:	ee 0f       	add	r30, r30
    4c20:	ff 1f       	adc	r31, r31
    4c22:	ee 0f       	add	r30, r30
    4c24:	ff 1f       	adc	r31, r31
    4c26:	ea 0d       	add	r30, r10
    4c28:	fb 1d       	adc	r31, r11
    4c2a:	c5 8c       	ldd	r12, Z+29	; 0x1d
    4c2c:	d6 8c       	ldd	r13, Z+30	; 0x1e
                
                // drop chars if necessary
                // for discarding duplicate packets
                while (nodes[i].drop_chars > 0 && stream->available())
    4c2e:	8f 01       	movw	r16, r30
    4c30:	0f 5d       	subi	r16, 0xDF	; 223
    4c32:	1f 4f       	sbci	r17, 0xFF	; 255
    4c34:	d8 01       	movw	r26, r16
    4c36:	8d 91       	ld	r24, X+
    4c38:	9c 91       	ld	r25, X
    4c3a:	11 97       	sbiw	r26, 0x01	; 1
    4c3c:	00 97       	sbiw	r24, 0x00	; 0
    4c3e:	09 f4       	brne	.+2      	; 0x4c42 <_ZN5Xgrid7processEv+0x7a>
    4c40:	f8 c5       	rjmp	.+3056   	; 0x5832 <_ZN5Xgrid7processEv+0xc6a>
    4c42:	d6 01       	movw	r26, r12
    4c44:	ed 91       	ld	r30, X+
    4c46:	fc 91       	ld	r31, X
    4c48:	01 90       	ld	r0, Z+
    4c4a:	f0 81       	ld	r31, Z
    4c4c:	e0 2d       	mov	r30, r0
    4c4e:	c6 01       	movw	r24, r12
    4c50:	19 95       	eicall
    4c52:	00 97       	sbiw	r24, 0x00	; 0
    4c54:	09 f4       	brne	.+2      	; 0x4c58 <_ZN5Xgrid7processEv+0x90>
    4c56:	ed c5       	rjmp	.+3034   	; 0x5832 <_ZN5Xgrid7processEv+0xc6a>
                {
                        stream->get();
    4c58:	d6 01       	movw	r26, r12
    4c5a:	ed 91       	ld	r30, X+
    4c5c:	fc 91       	ld	r31, X
    4c5e:	02 80       	ldd	r0, Z+2	; 0x02
    4c60:	f3 81       	ldd	r31, Z+3	; 0x03
    4c62:	e0 2d       	mov	r30, r0
    4c64:	c6 01       	movw	r24, r12
    4c66:	19 95       	eicall
                        nodes[i].drop_chars--;
    4c68:	f8 01       	movw	r30, r16
    4c6a:	80 81       	ld	r24, Z
    4c6c:	91 81       	ldd	r25, Z+1	; 0x01
    4c6e:	01 97       	sbiw	r24, 0x01	; 1
    4c70:	80 83       	st	Z, r24
    4c72:	91 83       	std	Z+1, r25	; 0x01
    4c74:	df cf       	rjmp	.-66     	; 0x4c34 <_ZN5Xgrid7processEv+0x6c>
                }
                
                if (nodes[i].stream->available())
                {
                        // Process receive data
                        if (nodes[i].rx_buffer == -1)
    4c76:	d8 01       	movw	r26, r16
    4c78:	5f 96       	adiw	r26, 0x1f	; 31
    4c7a:	8c 91       	ld	r24, X
    4c7c:	5f 97       	sbiw	r26, 0x1f	; 31
    4c7e:	8f 3f       	cpi	r24, 0xFF	; 255
    4c80:	09 f0       	breq	.+2      	; 0x4c84 <_ZN5Xgrid7processEv+0xbc>
    4c82:	7e c0       	rjmp	.+252    	; 0x4d80 <_ZN5Xgrid7processEv+0x1b8>
                        {
                                uint16_t len;
                                
                                // drop chars to get to identifier
                                while (stream->available() > 0 && stream->peek() != XGRID_IDENTIFIER)
    4c84:	ec 2c       	mov	r14, r12
    4c86:	0d 2d       	mov	r16, r13
    4c88:	d6 01       	movw	r26, r12
    4c8a:	ed 91       	ld	r30, X+
    4c8c:	fc 91       	ld	r31, X
    4c8e:	01 90       	ld	r0, Z+
    4c90:	f0 81       	ld	r31, Z
    4c92:	e0 2d       	mov	r30, r0
    4c94:	8e 2d       	mov	r24, r14
    4c96:	90 2f       	mov	r25, r16
    4c98:	19 95       	eicall
    4c9a:	00 97       	sbiw	r24, 0x00	; 0
    4c9c:	09 f4       	brne	.+2      	; 0x4ca0 <_ZN5Xgrid7processEv+0xd8>
    4c9e:	e2 c5       	rjmp	.+3012   	; 0x5864 <_ZN5Xgrid7processEv+0xc9c>
    4ca0:	d6 01       	movw	r26, r12
    4ca2:	ed 91       	ld	r30, X+
    4ca4:	fc 91       	ld	r31, X
    4ca6:	04 80       	ldd	r0, Z+4	; 0x04
    4ca8:	f5 81       	ldd	r31, Z+5	; 0x05
    4caa:	e0 2d       	mov	r30, r0
    4cac:	8e 2d       	mov	r24, r14
    4cae:	90 2f       	mov	r25, r16
    4cb0:	60 e0       	ldi	r22, 0x00	; 0
    4cb2:	70 e0       	ldi	r23, 0x00	; 0
    4cb4:	19 95       	eicall
    4cb6:	8a 35       	cpi	r24, 0x5A	; 90
    4cb8:	91 05       	cpc	r25, r1
    4cba:	09 f4       	brne	.+2      	; 0x4cbe <_ZN5Xgrid7processEv+0xf6>
    4cbc:	d3 c5       	rjmp	.+2982   	; 0x5864 <_ZN5Xgrid7processEv+0xc9c>
                                        stream->get();
    4cbe:	d6 01       	movw	r26, r12
    4cc0:	ed 91       	ld	r30, X+
    4cc2:	fc 91       	ld	r31, X
    4cc4:	02 80       	ldd	r0, Z+2	; 0x02
    4cc6:	f3 81       	ldd	r31, Z+3	; 0x03
    4cc8:	e0 2d       	mov	r30, r0
    4cca:	8e 2d       	mov	r24, r14
    4ccc:	90 2f       	mov	r25, r16
    4cce:	19 95       	eicall
    4cd0:	db cf       	rjmp	.-74     	; 0x4c88 <_ZN5Xgrid7processEv+0xc0>
                                // continue if we're not looking at a packet
                                if (stream->peek() != XGRID_IDENTIFIER)
                                        continue;
                                
                                // grab length
                                if (stream->available() < 3)
    4cd2:	d6 01       	movw	r26, r12
    4cd4:	ed 91       	ld	r30, X+
    4cd6:	fc 91       	ld	r31, X
    4cd8:	01 90       	ld	r0, Z+
    4cda:	f0 81       	ld	r31, Z
    4cdc:	e0 2d       	mov	r30, r0
    4cde:	8e 2d       	mov	r24, r14
    4ce0:	90 2f       	mov	r25, r16
    4ce2:	19 95       	eicall
    4ce4:	83 30       	cpi	r24, 0x03	; 3
    4ce6:	91 05       	cpc	r25, r1
    4ce8:	08 f4       	brcc	.+2      	; 0x4cec <_ZN5Xgrid7processEv+0x124>
    4cea:	81 c1       	rjmp	.+770    	; 0x4fee <_ZN5Xgrid7processEv+0x426>
                                        continue;
                                
                                len = stream->peek(1) | (stream->peek(2) << 8);
    4cec:	d6 01       	movw	r26, r12
    4cee:	ed 91       	ld	r30, X+
    4cf0:	fc 91       	ld	r31, X
    4cf2:	04 80       	ldd	r0, Z+4	; 0x04
    4cf4:	f5 81       	ldd	r31, Z+5	; 0x05
    4cf6:	e0 2d       	mov	r30, r0
    4cf8:	8e 2d       	mov	r24, r14
    4cfa:	90 2f       	mov	r25, r16
    4cfc:	61 e0       	ldi	r22, 0x01	; 1
    4cfe:	70 e0       	ldi	r23, 0x00	; 0
    4d00:	19 95       	eicall
    4d02:	3c 01       	movw	r6, r24
    4d04:	d6 01       	movw	r26, r12
    4d06:	ed 91       	ld	r30, X+
    4d08:	fc 91       	ld	r31, X
    4d0a:	04 80       	ldd	r0, Z+4	; 0x04
    4d0c:	f5 81       	ldd	r31, Z+5	; 0x05
    4d0e:	e0 2d       	mov	r30, r0
    4d10:	8e 2d       	mov	r24, r14
    4d12:	90 2f       	mov	r25, r16
    4d14:	62 e0       	ldi	r22, 0x02	; 2
    4d16:	70 e0       	ldi	r23, 0x00	; 0
    4d18:	19 95       	eicall
    4d1a:	38 2e       	mov	r3, r24
    4d1c:	22 24       	eor	r2, r2
    4d1e:	b1 01       	movw	r22, r2
    4d20:	66 29       	or	r22, r6
    4d22:	77 29       	or	r23, r7
                                
                                int8_t bi = get_free_buffer(len-sizeof(xgrid_header_short_t));
    4d24:	66 50       	subi	r22, 0x06	; 6
    4d26:	70 40       	sbci	r23, 0x00	; 0
    4d28:	c5 01       	movw	r24, r10
    4d2a:	0e 94 fc 22 	call	0x45f8	; 0x45f8 <_ZN5Xgrid15get_free_bufferEj>
                                
                                if (bi < 0)
    4d2e:	87 fd       	sbrc	r24, 7
    4d30:	5e c1       	rjmp	.+700    	; 0x4fee <_ZN5Xgrid7processEv+0x426>
                                        continue;
                                
                                nodes[i].rx_buffer = bi;
    4d32:	f2 01       	movw	r30, r4
    4d34:	ee 0f       	add	r30, r30
    4d36:	ff 1f       	adc	r31, r31
    4d38:	e4 0d       	add	r30, r4
    4d3a:	f5 1d       	adc	r31, r5
    4d3c:	ee 0f       	add	r30, r30
    4d3e:	ff 1f       	adc	r31, r31
    4d40:	ee 0f       	add	r30, r30
    4d42:	ff 1f       	adc	r31, r31
    4d44:	ea 0d       	add	r30, r10
    4d46:	fb 1d       	adc	r31, r11
    4d48:	87 8f       	std	Z+31, r24	; 0x1f
                                
                                pkt_buffer[bi].flags |= XGRID_BUFFER_IN_USE_RX;
    4d4a:	99 27       	eor	r25, r25
    4d4c:	87 fd       	sbrc	r24, 7
    4d4e:	90 95       	com	r25
                                pkt_buffer[bi].flags &= ~XGRID_BUFFER_UNIQUE;
    4d50:	88 0f       	add	r24, r24
    4d52:	99 1f       	adc	r25, r25
    4d54:	9c 01       	movw	r18, r24
    4d56:	63 e0       	ldi	r22, 0x03	; 3
    4d58:	22 0f       	add	r18, r18
    4d5a:	33 1f       	adc	r19, r19
    4d5c:	6a 95       	dec	r22
    4d5e:	e1 f7       	brne	.-8      	; 0x4d58 <_ZN5Xgrid7processEv+0x190>
    4d60:	28 0f       	add	r18, r24
    4d62:	39 1f       	adc	r19, r25
    4d64:	2a 0d       	add	r18, r10
    4d66:	3b 1d       	adc	r19, r11
    4d68:	f9 01       	movw	r30, r18
    4d6a:	ee 5a       	subi	r30, 0xAE	; 174
    4d6c:	fa 4f       	sbci	r31, 0xFA	; 250
                                if (bi < 0)
                                        continue;
                                
                                nodes[i].rx_buffer = bi;
                                
                                pkt_buffer[bi].flags |= XGRID_BUFFER_IN_USE_RX;
    4d6e:	80 81       	ld	r24, Z
    4d70:	82 60       	ori	r24, 0x02	; 2
                                pkt_buffer[bi].flags &= ~XGRID_BUFFER_UNIQUE;
    4d72:	8b 7f       	andi	r24, 0xFB	; 251
    4d74:	80 83       	st	Z, r24
                                pkt_buffer[bi].ptr = 0;
    4d76:	22 5b       	subi	r18, 0xB2	; 178
    4d78:	3a 4f       	sbci	r19, 0xFA	; 250
    4d7a:	f9 01       	movw	r30, r18
    4d7c:	10 82       	st	Z, r1
    4d7e:	11 82       	std	Z+1, r1	; 0x01
                        }
                        
                        xgrid_buffer_t *buffer = &(pkt_buffer[nodes[i].rx_buffer]);
    4d80:	f2 01       	movw	r30, r4
    4d82:	ee 0f       	add	r30, r30
    4d84:	ff 1f       	adc	r31, r31
    4d86:	e4 0d       	add	r30, r4
    4d88:	f5 1d       	adc	r31, r5
    4d8a:	ee 0f       	add	r30, r30
    4d8c:	ff 1f       	adc	r31, r31
    4d8e:	ee 0f       	add	r30, r30
    4d90:	ff 1f       	adc	r31, r31
    4d92:	ea 0d       	add	r30, r10
    4d94:	fb 1d       	adc	r31, r11
    4d96:	87 8d       	ldd	r24, Z+31	; 0x1f
    4d98:	99 27       	eor	r25, r25
    4d9a:	87 fd       	sbrc	r24, 7
    4d9c:	90 95       	com	r25
    4d9e:	88 0f       	add	r24, r24
    4da0:	99 1f       	adc	r25, r25
    4da2:	8c 01       	movw	r16, r24
    4da4:	b3 e0       	ldi	r27, 0x03	; 3
    4da6:	00 0f       	add	r16, r16
    4da8:	11 1f       	adc	r17, r17
    4daa:	ba 95       	dec	r27
    4dac:	e1 f7       	brne	.-8      	; 0x4da6 <_ZN5Xgrid7processEv+0x1de>
    4dae:	08 0f       	add	r16, r24
    4db0:	19 1f       	adc	r17, r25
    4db2:	0f 5b       	subi	r16, 0xBF	; 191
    4db4:	1a 4f       	sbci	r17, 0xFA	; 250
    4db6:	0a 0d       	add	r16, r10
    4db8:	1b 1d       	adc	r17, r11
                        
                        // read header
                        while (buffer->ptr < sizeof(xgrid_header_t) && nodes[i].stream->available())
    4dba:	2d e1       	ldi	r18, 0x1D	; 29
    4dbc:	62 2e       	mov	r6, r18
    4dbe:	71 2c       	mov	r7, r1
    4dc0:	6e 0e       	add	r6, r30
    4dc2:	7f 1e       	adc	r7, r31
    4dc4:	d8 01       	movw	r26, r16
    4dc6:	1d 96       	adiw	r26, 0x0d	; 13
    4dc8:	8d 91       	ld	r24, X+
    4dca:	9c 91       	ld	r25, X
    4dcc:	1e 97       	sbiw	r26, 0x0e	; 14
    4dce:	89 30       	cpi	r24, 0x09	; 9
    4dd0:	91 05       	cpc	r25, r1
    4dd2:	08 f0       	brcs	.+2      	; 0x4dd6 <_ZN5Xgrid7processEv+0x20e>
    4dd4:	57 c5       	rjmp	.+2734   	; 0x5884 <_ZN5Xgrid7processEv+0xcbc>
    4dd6:	f3 01       	movw	r30, r6
    4dd8:	80 81       	ld	r24, Z
    4dda:	91 81       	ldd	r25, Z+1	; 0x01
    4ddc:	dc 01       	movw	r26, r24
    4dde:	ed 91       	ld	r30, X+
    4de0:	fc 91       	ld	r31, X
    4de2:	01 90       	ld	r0, Z+
    4de4:	f0 81       	ld	r31, Z
    4de6:	e0 2d       	mov	r30, r0
    4de8:	19 95       	eicall
    4dea:	00 97       	sbiw	r24, 0x00	; 0
    4dec:	09 f4       	brne	.+2      	; 0x4df0 <_ZN5Xgrid7processEv+0x228>
    4dee:	4a c5       	rjmp	.+2708   	; 0x5884 <_ZN5Xgrid7processEv+0xcbc>
                        {
                                ((uint8_t *)&(buffer->hdr))[buffer->ptr++] = nodes[i].stream->get();
    4df0:	f8 01       	movw	r30, r16
    4df2:	e5 84       	ldd	r14, Z+13	; 0x0d
    4df4:	f6 84       	ldd	r15, Z+14	; 0x0e
    4df6:	68 01       	movw	r12, r16
    4df8:	ce 0c       	add	r12, r14
    4dfa:	df 1c       	adc	r13, r15
    4dfc:	d3 01       	movw	r26, r6
    4dfe:	8d 91       	ld	r24, X+
    4e00:	9c 91       	ld	r25, X
    4e02:	dc 01       	movw	r26, r24
    4e04:	ed 91       	ld	r30, X+
    4e06:	fc 91       	ld	r31, X
    4e08:	02 80       	ldd	r0, Z+2	; 0x02
    4e0a:	f3 81       	ldd	r31, Z+3	; 0x03
    4e0c:	e0 2d       	mov	r30, r0
    4e0e:	19 95       	eicall
    4e10:	f6 01       	movw	r30, r12
    4e12:	80 83       	st	Z, r24
    4e14:	c7 01       	movw	r24, r14
    4e16:	01 96       	adiw	r24, 0x01	; 1
    4e18:	d8 01       	movw	r26, r16
    4e1a:	1d 96       	adiw	r26, 0x0d	; 13
    4e1c:	8d 93       	st	X+, r24
    4e1e:	9c 93       	st	X, r25
    4e20:	1e 97       	sbiw	r26, 0x0e	; 14
    4e22:	d0 cf       	rjmp	.-96     	; 0x4dc4 <_ZN5Xgrid7processEv+0x1fc>
                        
                        if (buffer->ptr < sizeof(xgrid_header_t))
                                continue;
                        
                        // grab header
                        pkt.source_id = buffer->hdr.source_id;
    4e24:	f8 01       	movw	r30, r16
    4e26:	83 81       	ldd	r24, Z+3	; 0x03
    4e28:	94 81       	ldd	r25, Z+4	; 0x04
    4e2a:	89 83       	std	Y+1, r24	; 0x01
    4e2c:	9a 83       	std	Y+2, r25	; 0x02
                        pkt.type = buffer->hdr.type;
    4e2e:	45 81       	ldd	r20, Z+5	; 0x05
    4e30:	4b 83       	std	Y+3, r20	; 0x03
                        pkt.seq = buffer->hdr.seq;
    4e32:	86 81       	ldd	r24, Z+6	; 0x06
    4e34:	8c 83       	std	Y+4, r24	; 0x04
                        pkt.flags = buffer->hdr.flags;
    4e36:	87 81       	ldd	r24, Z+7	; 0x07
    4e38:	8d 83       	std	Y+5, r24	; 0x05
                        pkt.radius = buffer->hdr.radius;
    4e3a:	80 85       	ldd	r24, Z+8	; 0x08
    4e3c:	8e 83       	std	Y+6, r24	; 0x06
                        pkt.rx_node = i;
    4e3e:	9b 86       	std	Y+11, r9	; 0x0b
                        
                        // is packet unique?
                        if (!(buffer->flags & XGRID_BUFFER_UNIQUE))
    4e40:	81 89       	ldd	r24, Z+17	; 0x11
    4e42:	82 fd       	sbrc	r24, 2
    4e44:	2d c0       	rjmp	.+90     	; 0x4ea0 <_ZN5Xgrid7processEv+0x2d8>
                        {
                                if (pkt.type == XGRID_PKT_FLUSH_COMPARE_BUFFER ||
    4e46:	4c 3f       	cpi	r20, 0xFC	; 252
    4e48:	21 f1       	breq	.+72     	; 0x4e92 <_ZN5Xgrid7processEv+0x2ca>
    4e4a:	4b 3f       	cpi	r20, 0xFB	; 251
    4e4c:	89 f4       	brne	.+34     	; 0x4e70 <_ZN5Xgrid7processEv+0x2a8>
    4e4e:	d5 01       	movw	r26, r10
    4e50:	1f 96       	adiw	r26, 0x0f	; 15
    4e52:	8c 91       	ld	r24, X
    4e54:	1f 97       	sbiw	r26, 0x0f	; 15
    4e56:	88 32       	cpi	r24, 0x28	; 40
    4e58:	09 f0       	breq	.+2      	; 0x4e5c <_ZN5Xgrid7processEv+0x294>
    4e5a:	1c c5       	rjmp	.+2616   	; 0x5894 <_ZN5Xgrid7processEv+0xccc>
    4e5c:	29 2d       	mov	r18, r9
    4e5e:	30 e0       	ldi	r19, 0x00	; 0
    4e60:	50 96       	adiw	r26, 0x10	; 16
    4e62:	8d 91       	ld	r24, X+
    4e64:	9c 91       	ld	r25, X
    4e66:	51 97       	sbiw	r26, 0x11	; 17
    4e68:	82 17       	cp	r24, r18
    4e6a:	93 07       	cpc	r25, r19
    4e6c:	09 f0       	breq	.+2      	; 0x4e70 <_ZN5Xgrid7processEv+0x2a8>
    4e6e:	12 c5       	rjmp	.+2596   	; 0x5894 <_ZN5Xgrid7processEv+0xccc>
    4e70:	f5 01       	movw	r30, r10
    4e72:	87 85       	ldd	r24, Z+15	; 0x0f
    4e74:	88 32       	cpi	r24, 0x28	; 40
    4e76:	21 f4       	brne	.+8      	; 0x4e80 <_ZN5Xgrid7processEv+0x2b8>
                                        ((pkt.type != XGRID_PKT_FIRMWARE_BLOCK || (state == XGRID_STATE_FW_RX && update_node_mask == pkt.rx_node)) &&
                                        !(state == XGRID_STATE_FW_RX && ((pkt.type & 0xF0) != 0xF0)) &&
    4e78:	40 7f       	andi	r20, 0xF0	; 240
    4e7a:	40 3f       	cpi	r20, 0xF0	; 240
    4e7c:	09 f0       	breq	.+2      	; 0x4e80 <_ZN5Xgrid7processEv+0x2b8>
    4e7e:	0a c5       	rjmp	.+2580   	; 0x5894 <_ZN5Xgrid7processEv+0xccc>
                                        check_unique(&pkt)))
    4e80:	c5 01       	movw	r24, r10
    4e82:	be 01       	movw	r22, r28
    4e84:	6f 5f       	subi	r22, 0xFF	; 255
    4e86:	7f 4f       	sbci	r23, 0xFF	; 255
    4e88:	0e 94 b9 22 	call	0x4572	; 0x4572 <_ZN5Xgrid12check_uniqueEPNS_6PacketE>
                        pkt.rx_node = i;
                        
                        // is packet unique?
                        if (!(buffer->flags & XGRID_BUFFER_UNIQUE))
                        {
                                if (pkt.type == XGRID_PKT_FLUSH_COMPARE_BUFFER ||
    4e8c:	88 23       	and	r24, r24
    4e8e:	09 f4       	brne	.+2      	; 0x4e92 <_ZN5Xgrid7processEv+0x2ca>
    4e90:	01 c5       	rjmp	.+2562   	; 0x5894 <_ZN5Xgrid7processEv+0xccc>
                                        ((pkt.type != XGRID_PKT_FIRMWARE_BLOCK || (state == XGRID_STATE_FW_RX && update_node_mask == pkt.rx_node)) &&
                                        !(state == XGRID_STATE_FW_RX && ((pkt.type & 0xF0) != 0xF0)) &&
                                        check_unique(&pkt)))
                                {
                                        buffer->flags |= XGRID_BUFFER_UNIQUE;
    4e92:	d8 01       	movw	r26, r16
    4e94:	51 96       	adiw	r26, 0x11	; 17
    4e96:	8c 91       	ld	r24, X
    4e98:	51 97       	sbiw	r26, 0x11	; 17
    4e9a:	84 60       	ori	r24, 0x04	; 4
    4e9c:	51 96       	adiw	r26, 0x11	; 17
    4e9e:	8c 93       	st	X, r24
                                        continue;
                                }
                        }
                        
                        // read data
                        while (buffer->ptr < buffer->hdr.size+3 && nodes[i].stream->available())
    4ea0:	72 01       	movw	r14, r4
    4ea2:	ee 0c       	add	r14, r14
    4ea4:	ff 1c       	adc	r15, r15
    4ea6:	e4 0c       	add	r14, r4
    4ea8:	f5 1c       	adc	r15, r5
    4eaa:	ee 0c       	add	r14, r14
    4eac:	ff 1c       	adc	r15, r15
    4eae:	ee 0c       	add	r14, r14
    4eb0:	ff 1c       	adc	r15, r15
    4eb2:	ea 0c       	add	r14, r10
    4eb4:	fb 1c       	adc	r15, r11
    4eb6:	ed e1       	ldi	r30, 0x1D	; 29
    4eb8:	f0 e0       	ldi	r31, 0x00	; 0
    4eba:	ee 0e       	add	r14, r30
    4ebc:	ff 1e       	adc	r15, r31
    4ebe:	d8 01       	movw	r26, r16
    4ec0:	11 96       	adiw	r26, 0x01	; 1
    4ec2:	8d 91       	ld	r24, X+
    4ec4:	9c 91       	ld	r25, X
    4ec6:	12 97       	sbiw	r26, 0x02	; 2
    4ec8:	03 96       	adiw	r24, 0x03	; 3
    4eca:	1d 96       	adiw	r26, 0x0d	; 13
    4ecc:	2d 91       	ld	r18, X+
    4ece:	3c 91       	ld	r19, X
    4ed0:	1e 97       	sbiw	r26, 0x0e	; 14
    4ed2:	28 17       	cp	r18, r24
    4ed4:	39 07       	cpc	r19, r25
    4ed6:	08 f0       	brcs	.+2      	; 0x4eda <_ZN5Xgrid7processEv+0x312>
    4ed8:	fe c4       	rjmp	.+2556   	; 0x58d6 <_ZN5Xgrid7processEv+0xd0e>
    4eda:	f7 01       	movw	r30, r14
    4edc:	80 81       	ld	r24, Z
    4ede:	91 81       	ldd	r25, Z+1	; 0x01
    4ee0:	dc 01       	movw	r26, r24
    4ee2:	ed 91       	ld	r30, X+
    4ee4:	fc 91       	ld	r31, X
    4ee6:	01 90       	ld	r0, Z+
    4ee8:	f0 81       	ld	r31, Z
    4eea:	e0 2d       	mov	r30, r0
    4eec:	19 95       	eicall
    4eee:	00 97       	sbiw	r24, 0x00	; 0
    4ef0:	09 f4       	brne	.+2      	; 0x4ef4 <_ZN5Xgrid7processEv+0x32c>
    4ef2:	f1 c4       	rjmp	.+2530   	; 0x58d6 <_ZN5Xgrid7processEv+0xd0e>
                        {
                                buffer->buffer[buffer->ptr++ - sizeof(xgrid_header_t)] = nodes[i].stream->get();
    4ef4:	f8 01       	movw	r30, r16
    4ef6:	65 84       	ldd	r6, Z+13	; 0x0d
    4ef8:	76 84       	ldd	r7, Z+14	; 0x0e
    4efa:	c3 01       	movw	r24, r6
    4efc:	09 97       	sbiw	r24, 0x09	; 9
    4efe:	c1 84       	ldd	r12, Z+9	; 0x09
    4f00:	d2 84       	ldd	r13, Z+10	; 0x0a
    4f02:	c8 0e       	add	r12, r24
    4f04:	d9 1e       	adc	r13, r25
    4f06:	d7 01       	movw	r26, r14
    4f08:	8d 91       	ld	r24, X+
    4f0a:	9c 91       	ld	r25, X
    4f0c:	dc 01       	movw	r26, r24
    4f0e:	ed 91       	ld	r30, X+
    4f10:	fc 91       	ld	r31, X
    4f12:	02 80       	ldd	r0, Z+2	; 0x02
    4f14:	f3 81       	ldd	r31, Z+3	; 0x03
    4f16:	e0 2d       	mov	r30, r0
    4f18:	19 95       	eicall
    4f1a:	f6 01       	movw	r30, r12
    4f1c:	80 83       	st	Z, r24
    4f1e:	c3 01       	movw	r24, r6
    4f20:	01 96       	adiw	r24, 0x01	; 1
    4f22:	d8 01       	movw	r26, r16
    4f24:	1d 96       	adiw	r26, 0x0d	; 13
    4f26:	8d 93       	st	X+, r24
    4f28:	9c 93       	st	X, r25
    4f2a:	1e 97       	sbiw	r26, 0x0e	; 14
    4f2c:	c8 cf       	rjmp	.-112    	; 0x4ebe <_ZN5Xgrid7processEv+0x2f6>
                        
                        // are we done?
                        if (buffer->ptr >= buffer->hdr.size+3)
                        {
                                // set up data reference
                                pkt.data = buffer->buffer;
    4f2e:	d8 01       	movw	r26, r16
    4f30:	19 96       	adiw	r26, 0x09	; 9
    4f32:	ed 91       	ld	r30, X+
    4f34:	fc 91       	ld	r31, X
    4f36:	1a 97       	sbiw	r26, 0x0a	; 10
    4f38:	ef 83       	std	Y+7, r30	; 0x07
    4f3a:	f8 87       	std	Y+8, r31	; 0x08
                                pkt.data_len = buffer->hdr.size - sizeof(xgrid_header_short_t);
    4f3c:	3a ef       	ldi	r19, 0xFA	; 250
    4f3e:	e3 2e       	mov	r14, r19
    4f40:	3f ef       	ldi	r19, 0xFF	; 255
    4f42:	f3 2e       	mov	r15, r19
    4f44:	e6 0e       	add	r14, r22
    4f46:	f7 1e       	adc	r15, r23
    4f48:	e9 86       	std	Y+9, r14	; 0x09
    4f4a:	fa 86       	std	Y+10, r15	; 0x0a
                                
                                // process packet
                                if (pkt.radius > 1)
    4f4c:	8e 81       	ldd	r24, Y+6	; 0x06
    4f4e:	82 30       	cpi	r24, 0x02	; 2
    4f50:	a0 f1       	brcs	.+104    	; 0x4fba <_ZN5Xgrid7processEv+0x3f2>
                                {
                                        uint8_t use_current = 1;
                                        uint16_t mask = 0xFFFF;
                                        if (pkt.rx_node < 16)
    4f52:	cb 84       	ldd	r12, Y+11	; 0x0b
    4f54:	bf e0       	ldi	r27, 0x0F	; 15
    4f56:	bc 15       	cp	r27, r12
    4f58:	58 f0       	brcs	.+22     	; 0x4f70 <_ZN5Xgrid7processEv+0x3a8>
                                                mask &= ~(1 << pkt.rx_node);
    4f5a:	41 e0       	ldi	r20, 0x01	; 1
    4f5c:	50 e0       	ldi	r21, 0x00	; 0
    4f5e:	0c 2c       	mov	r0, r12
    4f60:	02 c0       	rjmp	.+4      	; 0x4f66 <_ZN5Xgrid7processEv+0x39e>
    4f62:	44 0f       	add	r20, r20
    4f64:	55 1f       	adc	r21, r21
    4f66:	0a 94       	dec	r0
    4f68:	e2 f7       	brpl	.-8      	; 0x4f62 <_ZN5Xgrid7processEv+0x39a>
    4f6a:	40 95       	com	r20
    4f6c:	50 95       	com	r21
    4f6e:	02 c0       	rjmp	.+4      	; 0x4f74 <_ZN5Xgrid7processEv+0x3ac>
                                
                                // process packet
                                if (pkt.radius > 1)
                                {
                                        uint8_t use_current = 1;
                                        uint16_t mask = 0xFFFF;
    4f70:	4f ef       	ldi	r20, 0xFF	; 255
    4f72:	5f ef       	ldi	r21, 0xFF	; 255
                                        if (pkt.rx_node < 16)
                                                mask &= ~(1 << pkt.rx_node);
                                        
                                        if (buffer->hdr.flags & XGRID_PKT_FLAG_TRACE)
    4f74:	d8 01       	movw	r26, r16
    4f76:	17 96       	adiw	r26, 0x07	; 7
    4f78:	8c 91       	ld	r24, X
    4f7a:	17 97       	sbiw	r26, 0x07	; 7
    4f7c:	84 ff       	sbrs	r24, 4
    4f7e:	12 c0       	rjmp	.+36     	; 0x4fa4 <_ZN5Xgrid7processEv+0x3dc>
                                        {
                                                buffer->hdr.size++;
    4f80:	cb 01       	movw	r24, r22
    4f82:	01 96       	adiw	r24, 0x01	; 1
    4f84:	11 96       	adiw	r26, 0x01	; 1
    4f86:	8d 93       	st	X+, r24
    4f88:	9c 93       	st	X, r25
    4f8a:	12 97       	sbiw	r26, 0x02	; 2
                                                if (buffer->hdr.size - sizeof(xgrid_header_short_t) <= buffer->buffer_len)
    4f8c:	cb 01       	movw	r24, r22
    4f8e:	05 97       	sbiw	r24, 0x05	; 5
    4f90:	1b 96       	adiw	r26, 0x0b	; 11
    4f92:	2d 91       	ld	r18, X+
    4f94:	3c 91       	ld	r19, X
    4f96:	1c 97       	sbiw	r26, 0x0c	; 12
    4f98:	28 17       	cp	r18, r24
    4f9a:	39 07       	cpc	r19, r25
    4f9c:	18 f0       	brcs	.+6      	; 0x4fa4 <_ZN5Xgrid7processEv+0x3dc>
                                                {
                                                        buffer->buffer[buffer->hdr.size - sizeof(xgrid_header_short_t) - 1] = pkt.rx_node;
    4f9e:	ee 0d       	add	r30, r14
    4fa0:	ff 1d       	adc	r31, r15
    4fa2:	c0 82       	st	Z, r12
                                                }
                                        }
                                        
                                        if (use_current)
                                        {
                                                buffer->hdr.radius--;
    4fa4:	f8 01       	movw	r30, r16
    4fa6:	80 85       	ldd	r24, Z+8	; 0x08
    4fa8:	81 50       	subi	r24, 0x01	; 1
    4faa:	80 87       	std	Z+8, r24	; 0x08
                                                buffer->mask = mask;
    4fac:	47 87       	std	Z+15, r20	; 0x0f
    4fae:	50 8b       	std	Z+16, r21	; 0x10
                                                buffer->flags |= XGRID_BUFFER_IN_USE_TX;
    4fb0:	81 89       	ldd	r24, Z+17	; 0x11
    4fb2:	81 60       	ori	r24, 0x01	; 1
    4fb4:	81 8b       	std	Z+17, r24	; 0x11
                                                buffer->ptr = 0;
    4fb6:	15 86       	std	Z+13, r1	; 0x0d
    4fb8:	16 86       	std	Z+14, r1	; 0x0e
                                        }
                                }
                                
                                internal_process_packet(&pkt);
    4fba:	c5 01       	movw	r24, r10
    4fbc:	be 01       	movw	r22, r28
    4fbe:	6f 5f       	subi	r22, 0xFF	; 255
    4fc0:	7f 4f       	sbci	r23, 0xFF	; 255
    4fc2:	0e 94 a0 23 	call	0x4740	; 0x4740 <_ZN5Xgrid23internal_process_packetEPNS_6PacketE>
                                
                                // release buffer
                                buffer->flags &= ~ XGRID_BUFFER_IN_USE_RX;
    4fc6:	d8 01       	movw	r26, r16
    4fc8:	51 96       	adiw	r26, 0x11	; 17
    4fca:	8c 91       	ld	r24, X
    4fcc:	51 97       	sbiw	r26, 0x11	; 17
    4fce:	8d 7f       	andi	r24, 0xFD	; 253
    4fd0:	51 96       	adiw	r26, 0x11	; 17
    4fd2:	8c 93       	st	X, r24
    4fd4:	51 97       	sbiw	r26, 0x11	; 17
                                nodes[i].rx_buffer = -1;
    4fd6:	f2 01       	movw	r30, r4
    4fd8:	ee 0f       	add	r30, r30
    4fda:	ff 1f       	adc	r31, r31
    4fdc:	e4 0d       	add	r30, r4
    4fde:	f5 1d       	adc	r31, r5
    4fe0:	ee 0f       	add	r30, r30
    4fe2:	ff 1f       	adc	r31, r31
    4fe4:	ee 0f       	add	r30, r30
    4fe6:	ff 1f       	adc	r31, r31
    4fe8:	ea 0d       	add	r30, r10
    4fea:	fb 1d       	adc	r31, r11
    4fec:	87 8e       	std	Z+31, r8	; 0x1f
void Xgrid::process()
{
        Packet pkt;
        
        // process nodes
        for (uint8_t i = 0; i < node_cnt; i++)
    4fee:	93 94       	inc	r9
    4ff0:	49 2c       	mov	r4, r9
    4ff2:	55 24       	eor	r5, r5
    4ff4:	c1 5f       	subi	r28, 0xF1	; 241
    4ff6:	dd 4f       	sbci	r29, 0xFD	; 253
    4ff8:	e8 81       	ld	r30, Y
    4ffa:	f9 81       	ldd	r31, Y+1	; 0x01
    4ffc:	cf 50       	subi	r28, 0x0F	; 15
    4ffe:	d2 40       	sbci	r29, 0x02	; 2
    5000:	80 81       	ld	r24, Z
    5002:	99 27       	eor	r25, r25
    5004:	87 fd       	sbrc	r24, 7
    5006:	90 95       	com	r25
    5008:	48 16       	cp	r4, r24
    500a:	59 06       	cpc	r5, r25
    500c:	0c f4       	brge	.+2      	; 0x5010 <_ZN5Xgrid7processEv+0x448>
    500e:	02 ce       	rjmp	.-1020   	; 0x4c14 <_ZN5Xgrid7processEv+0x4c>
    5010:	c1 5f       	subi	r28, 0xF1	; 241
    5012:	dd 4f       	sbci	r29, 0xFD	; 253
    5014:	18 82       	st	Y, r1
    5016:	19 82       	std	Y+1, r1	; 0x01
    5018:	cf 50       	subi	r28, 0x0F	; 15
    501a:	d2 40       	sbci	r29, 0x02	; 2
                        // process for transmit buffer
                        
                        // find minimum free
                        uint16_t f = 0xffff;
                        
                        for (uint8_t n = 0; n < node_cnt; n++)
    501c:	95 01       	movw	r18, r10
    501e:	23 58       	subi	r18, 0x83	; 131
    5020:	3f 4f       	sbci	r19, 0xFF	; 255
    5022:	cf 5e       	subi	r28, 0xEF	; 239
    5024:	dd 4f       	sbci	r29, 0xFD	; 253
    5026:	28 83       	st	Y, r18
    5028:	39 83       	std	Y+1, r19	; 0x01
    502a:	c1 51       	subi	r28, 0x11	; 17
    502c:	d2 40       	sbci	r29, 0x02	; 2
                                // remove buffer assigments
                                for (uint8_t n = 0; n < node_cnt; n++)
                                {
                                        if (buffer->mask & (1 << n))
                                        {
                                                nodes[n].tx_buffer = -1;
    502e:	88 24       	eor	r8, r8
    5030:	8a 94       	dec	r8
        }
        
        // process transmit buffers
        for (uint8_t i = 0; i < XGRID_BUFFER_COUNT; i++)
        {
                xgrid_buffer_t *buffer = &(pkt_buffer[i]);
    5032:	c1 5f       	subi	r28, 0xF1	; 241
    5034:	dd 4f       	sbci	r29, 0xFD	; 253
    5036:	88 81       	ld	r24, Y
    5038:	99 81       	ldd	r25, Y+1	; 0x01
    503a:	cf 50       	subi	r28, 0x0F	; 15
    503c:	d2 40       	sbci	r29, 0x02	; 2
    503e:	88 0f       	add	r24, r24
    5040:	99 1f       	adc	r25, r25
    5042:	6c 01       	movw	r12, r24
    5044:	13 e0       	ldi	r17, 0x03	; 3
    5046:	cc 0c       	add	r12, r12
    5048:	dd 1c       	adc	r13, r13
    504a:	1a 95       	dec	r17
    504c:	e1 f7       	brne	.-8      	; 0x5046 <_ZN5Xgrid7processEv+0x47e>
    504e:	c8 0e       	add	r12, r24
    5050:	d9 1e       	adc	r13, r25
    5052:	61 e4       	ldi	r22, 0x41	; 65
    5054:	75 e0       	ldi	r23, 0x05	; 5
    5056:	c6 0e       	add	r12, r22
    5058:	d7 1e       	adc	r13, r23
    505a:	ca 0c       	add	r12, r10
    505c:	db 1c       	adc	r13, r11
                
                if (buffer->flags & XGRID_BUFFER_IN_USE_TX)
    505e:	d6 01       	movw	r26, r12
    5060:	51 96       	adiw	r26, 0x11	; 17
    5062:	8c 91       	ld	r24, X
    5064:	51 97       	sbiw	r26, 0x11	; 17
    5066:	80 fd       	sbrc	r24, 0
    5068:	4f c0       	rjmp	.+158    	; 0x5108 <_ZN5Xgrid7processEv+0x540>
    506a:	21 c1       	rjmp	.+578    	; 0x52ae <_ZN5Xgrid7processEv+0x6e6>
                        // find minimum free
                        uint16_t f = 0xffff;
                        
                        for (uint8_t n = 0; n < node_cnt; n++)
                        {
                                if (buffer->mask & (1 << n))
    506c:	81 e0       	ldi	r24, 0x01	; 1
    506e:	90 e0       	ldi	r25, 0x00	; 0
    5070:	00 2e       	mov	r0, r16
    5072:	02 c0       	rjmp	.+4      	; 0x5078 <_ZN5Xgrid7processEv+0x4b0>
    5074:	88 0f       	add	r24, r24
    5076:	99 1f       	adc	r25, r25
    5078:	0a 94       	dec	r0
    507a:	e2 f7       	brpl	.-8      	; 0x5074 <_ZN5Xgrid7processEv+0x4ac>
    507c:	f6 01       	movw	r30, r12
    507e:	27 85       	ldd	r18, Z+15	; 0x0f
    5080:	30 89       	ldd	r19, Z+16	; 0x10
    5082:	82 23       	and	r24, r18
    5084:	93 23       	and	r25, r19
    5086:	00 97       	sbiw	r24, 0x00	; 0
    5088:	e9 f1       	breq	.+122    	; 0x5104 <_ZN5Xgrid7processEv+0x53c>
                                {
                                        // check node buffer assignment
                                        if (nodes[n].tx_buffer == -1)
    508a:	9a 01       	movw	r18, r20
    508c:	22 0f       	add	r18, r18
    508e:	33 1f       	adc	r19, r19
    5090:	f9 01       	movw	r30, r18
    5092:	e4 0f       	add	r30, r20
    5094:	f5 1f       	adc	r31, r21
    5096:	ee 0f       	add	r30, r30
    5098:	ff 1f       	adc	r31, r31
    509a:	ee 0f       	add	r30, r30
    509c:	ff 1f       	adc	r31, r31
    509e:	ea 0d       	add	r30, r10
    50a0:	fb 1d       	adc	r31, r11
    50a2:	80 a1       	lds	r24, 0x40
    50a4:	8f 3f       	cpi	r24, 0xFF	; 255
    50a6:	39 f4       	brne	.+14     	; 0x50b6 <_ZN5Xgrid7processEv+0x4ee>
                                        {
                                                // if not assigned, set
                                                nodes[n].tx_buffer = i;
    50a8:	c1 5f       	subi	r28, 0xF1	; 241
    50aa:	dd 4f       	sbci	r29, 0xFD	; 253
    50ac:	68 81       	ld	r22, Y
    50ae:	cf 50       	subi	r28, 0x0F	; 15
    50b0:	d2 40       	sbci	r29, 0x02	; 2
    50b2:	60 a3       	lds	r22, 0x50
    50b4:	0e c0       	rjmp	.+28     	; 0x50d2 <_ZN5Xgrid7processEv+0x50a>
                                        }
                                        else if (nodes[n].tx_buffer != i)
    50b6:	99 27       	eor	r25, r25
    50b8:	87 fd       	sbrc	r24, 7
    50ba:	90 95       	com	r25
    50bc:	c1 5f       	subi	r28, 0xF1	; 241
    50be:	dd 4f       	sbci	r29, 0xFD	; 253
    50c0:	a8 81       	ld	r26, Y
    50c2:	b9 81       	ldd	r27, Y+1	; 0x01
    50c4:	cf 50       	subi	r28, 0x0F	; 15
    50c6:	d2 40       	sbci	r29, 0x02	; 2
    50c8:	8a 17       	cp	r24, r26
    50ca:	9b 07       	cpc	r25, r27
    50cc:	11 f0       	breq	.+4      	; 0x50d2 <_ZN5Xgrid7processEv+0x50a>
                                        {
                                                // if assigned to different buffer, hold packet
                                                f = 0;
    50ce:	22 24       	eor	r2, r2
    50d0:	33 24       	eor	r3, r3
                                        }
                                        
                                        uint16_t f2 = nodes[n].stream->free();
    50d2:	f9 01       	movw	r30, r18
    50d4:	e4 0f       	add	r30, r20
    50d6:	f5 1f       	adc	r31, r21
    50d8:	ee 0f       	add	r30, r30
    50da:	ff 1f       	adc	r31, r31
    50dc:	ee 0f       	add	r30, r30
    50de:	ff 1f       	adc	r31, r31
    50e0:	ea 0d       	add	r30, r10
    50e2:	fb 1d       	adc	r31, r11
    50e4:	85 8d       	ldd	r24, Z+29	; 0x1d
    50e6:	96 8d       	ldd	r25, Z+30	; 0x1e
    50e8:	dc 01       	movw	r26, r24
    50ea:	12 96       	adiw	r26, 0x02	; 2
    50ec:	ed 91       	ld	r30, X+
    50ee:	fc 91       	ld	r31, X
    50f0:	13 97       	sbiw	r26, 0x03	; 3
    50f2:	01 90       	ld	r0, Z+
    50f4:	f0 81       	ld	r31, Z
    50f6:	e0 2d       	mov	r30, r0
    50f8:	02 96       	adiw	r24, 0x02	; 2
    50fa:	19 95       	eicall
                                        if (f > f2)
    50fc:	82 15       	cp	r24, r2
    50fe:	93 05       	cpc	r25, r3
    5100:	08 f4       	brcc	.+2      	; 0x5104 <_ZN5Xgrid7processEv+0x53c>
    5102:	1c 01       	movw	r2, r24
                        // process for transmit buffer
                        
                        // find minimum free
                        uint16_t f = 0xffff;
                        
                        for (uint8_t n = 0; n < node_cnt; n++)
    5104:	0f 5f       	subi	r16, 0xFF	; 255
    5106:	04 c0       	rjmp	.+8      	; 0x5110 <_ZN5Xgrid7processEv+0x548>
        // process transmit buffers
        for (uint8_t i = 0; i < XGRID_BUFFER_COUNT; i++)
        {
                xgrid_buffer_t *buffer = &(pkt_buffer[i]);
                
                if (buffer->flags & XGRID_BUFFER_IN_USE_TX)
    5108:	00 e0       	ldi	r16, 0x00	; 0
    510a:	22 24       	eor	r2, r2
    510c:	2a 94       	dec	r2
    510e:	32 2c       	mov	r3, r2
                        // process for transmit buffer
                        
                        // find minimum free
                        uint16_t f = 0xffff;
                        
                        for (uint8_t n = 0; n < node_cnt; n++)
    5110:	40 2f       	mov	r20, r16
    5112:	50 e0       	ldi	r21, 0x00	; 0
    5114:	cf 5e       	subi	r28, 0xEF	; 239
    5116:	dd 4f       	sbci	r29, 0xFD	; 253
    5118:	e8 81       	ld	r30, Y
    511a:	f9 81       	ldd	r31, Y+1	; 0x01
    511c:	c1 51       	subi	r28, 0x11	; 17
    511e:	d2 40       	sbci	r29, 0x02	; 2
    5120:	80 81       	ld	r24, Z
    5122:	99 27       	eor	r25, r25
    5124:	87 fd       	sbrc	r24, 7
    5126:	90 95       	com	r25
    5128:	48 17       	cp	r20, r24
    512a:	59 07       	cpc	r21, r25
    512c:	0c f4       	brge	.+2      	; 0x5130 <_ZN5Xgrid7processEv+0x568>
    512e:	9e cf       	rjmp	.-196    	; 0x506c <_ZN5Xgrid7processEv+0x4a4>
    5130:	99 24       	eor	r9, r9
    5132:	75 c0       	rjmp	.+234    	; 0x521e <_ZN5Xgrid7processEv+0x656>
                        }
                        
                        // send as much of packet as possible
                        for (uint8_t n = 0; n < node_cnt; n++)
                        {
                                if (buffer->mask & (1 << n))
    5134:	81 e0       	ldi	r24, 0x01	; 1
    5136:	90 e0       	ldi	r25, 0x00	; 0
    5138:	09 2c       	mov	r0, r9
    513a:	02 c0       	rjmp	.+4      	; 0x5140 <_ZN5Xgrid7processEv+0x578>
    513c:	88 0f       	add	r24, r24
    513e:	99 1f       	adc	r25, r25
    5140:	0a 94       	dec	r0
    5142:	e2 f7       	brpl	.-8      	; 0x513c <_ZN5Xgrid7processEv+0x574>
    5144:	d6 01       	movw	r26, r12
    5146:	1f 96       	adiw	r26, 0x0f	; 15
    5148:	2d 91       	ld	r18, X+
    514a:	3c 91       	ld	r19, X
    514c:	50 97       	sbiw	r26, 0x10	; 16
    514e:	82 23       	and	r24, r18
    5150:	93 23       	and	r25, r19
    5152:	00 97       	sbiw	r24, 0x00	; 0
    5154:	09 f4       	brne	.+2      	; 0x5158 <_ZN5Xgrid7processEv+0x590>
    5156:	62 c0       	rjmp	.+196    	; 0x521c <_ZN5Xgrid7processEv+0x654>
                                {
                                        uint16_t cnt = f;
                                        uint16_t ptr = buffer->ptr;
    5158:	1d 96       	adiw	r26, 0x0d	; 13
    515a:	ed 90       	ld	r14, X+
    515c:	fc 90       	ld	r15, X
    515e:	1e 97       	sbiw	r26, 0x0e	; 14
                                        
                                        // header
                                        while (cnt > 0 && ptr < sizeof(xgrid_header_t))
    5160:	31 01       	movw	r6, r2
                                        {
                                                nodes[n].stream->put(((uint8_t *)&(buffer->hdr))[ptr]);
    5162:	82 01       	movw	r16, r4
    5164:	00 0f       	add	r16, r16
    5166:	11 1f       	adc	r17, r17
    5168:	04 0d       	add	r16, r4
    516a:	15 1d       	adc	r17, r5
    516c:	00 0f       	add	r16, r16
    516e:	11 1f       	adc	r17, r17
    5170:	00 0f       	add	r16, r16
    5172:	11 1f       	adc	r17, r17
    5174:	0a 0d       	add	r16, r10
    5176:	1b 1d       	adc	r17, r11
    5178:	03 5e       	subi	r16, 0xE3	; 227
    517a:	1f 4f       	sbci	r17, 0xFF	; 255
                                {
                                        uint16_t cnt = f;
                                        uint16_t ptr = buffer->ptr;
                                        
                                        // header
                                        while (cnt > 0 && ptr < sizeof(xgrid_header_t))
    517c:	61 14       	cp	r6, r1
    517e:	71 04       	cpc	r7, r1
    5180:	e1 f0       	breq	.+56     	; 0x51ba <_ZN5Xgrid7processEv+0x5f2>
    5182:	b9 e0       	ldi	r27, 0x09	; 9
    5184:	eb 16       	cp	r14, r27
    5186:	f1 04       	cpc	r15, r1
    5188:	c0 f4       	brcc	.+48     	; 0x51ba <_ZN5Xgrid7processEv+0x5f2>
                                        {
                                                nodes[n].stream->put(((uint8_t *)&(buffer->hdr))[ptr]);
    518a:	f8 01       	movw	r30, r16
    518c:	80 81       	ld	r24, Z
    518e:	91 81       	ldd	r25, Z+1	; 0x01
    5190:	dc 01       	movw	r26, r24
    5192:	12 96       	adiw	r26, 0x02	; 2
    5194:	ed 91       	ld	r30, X+
    5196:	fc 91       	ld	r31, X
    5198:	13 97       	sbiw	r26, 0x03	; 3
    519a:	d6 01       	movw	r26, r12
    519c:	ae 0d       	add	r26, r14
    519e:	bf 1d       	adc	r27, r15
    51a0:	02 80       	ldd	r0, Z+2	; 0x02
    51a2:	f3 81       	ldd	r31, Z+3	; 0x03
    51a4:	e0 2d       	mov	r30, r0
    51a6:	02 96       	adiw	r24, 0x02	; 2
    51a8:	6c 91       	ld	r22, X
    51aa:	19 95       	eicall
                                                ptr++;
    51ac:	08 94       	sec
    51ae:	e1 1c       	adc	r14, r1
    51b0:	f1 1c       	adc	r15, r1
                                                cnt--;
    51b2:	08 94       	sec
    51b4:	61 08       	sbc	r6, r1
    51b6:	71 08       	sbc	r7, r1
    51b8:	e1 cf       	rjmp	.-62     	; 0x517c <_ZN5Xgrid7processEv+0x5b4>
                                        }
                                        
                                        // data
                                        while (cnt > 0 && ptr < buffer->hdr.size+3)
                                        {
                                                nodes[n].stream->put(buffer->buffer[ptr-sizeof(xgrid_header_t)]);
    51ba:	82 01       	movw	r16, r4
    51bc:	00 0f       	add	r16, r16
    51be:	11 1f       	adc	r17, r17
    51c0:	04 0d       	add	r16, r4
    51c2:	15 1d       	adc	r17, r5
    51c4:	00 0f       	add	r16, r16
    51c6:	11 1f       	adc	r17, r17
    51c8:	00 0f       	add	r16, r16
    51ca:	11 1f       	adc	r17, r17
    51cc:	0a 0d       	add	r16, r10
    51ce:	1b 1d       	adc	r17, r11
    51d0:	03 5e       	subi	r16, 0xE3	; 227
    51d2:	1f 4f       	sbci	r17, 0xFF	; 255
                                                ptr++;
                                                cnt--;
                                        }
                                        
                                        // data
                                        while (cnt > 0 && ptr < buffer->hdr.size+3)
    51d4:	61 14       	cp	r6, r1
    51d6:	71 04       	cpc	r7, r1
    51d8:	09 f1       	breq	.+66     	; 0x521c <_ZN5Xgrid7processEv+0x654>
    51da:	f6 01       	movw	r30, r12
    51dc:	81 81       	ldd	r24, Z+1	; 0x01
    51de:	92 81       	ldd	r25, Z+2	; 0x02
    51e0:	03 96       	adiw	r24, 0x03	; 3
    51e2:	e8 16       	cp	r14, r24
    51e4:	f9 06       	cpc	r15, r25
    51e6:	d0 f4       	brcc	.+52     	; 0x521c <_ZN5Xgrid7processEv+0x654>
                                        {
                                                nodes[n].stream->put(buffer->buffer[ptr-sizeof(xgrid_header_t)]);
    51e8:	d8 01       	movw	r26, r16
    51ea:	8d 91       	ld	r24, X+
    51ec:	9c 91       	ld	r25, X
    51ee:	fc 01       	movw	r30, r24
    51f0:	22 81       	ldd	r18, Z+2	; 0x02
    51f2:	33 81       	ldd	r19, Z+3	; 0x03
    51f4:	f6 01       	movw	r30, r12
    51f6:	a1 85       	ldd	r26, Z+9	; 0x09
    51f8:	b2 85       	ldd	r27, Z+10	; 0x0a
    51fa:	ae 0d       	add	r26, r14
    51fc:	bf 1d       	adc	r27, r15
    51fe:	19 97       	sbiw	r26, 0x09	; 9
    5200:	f9 01       	movw	r30, r18
    5202:	22 81       	ldd	r18, Z+2	; 0x02
    5204:	33 81       	ldd	r19, Z+3	; 0x03
    5206:	02 96       	adiw	r24, 0x02	; 2
    5208:	6c 91       	ld	r22, X
    520a:	f9 01       	movw	r30, r18
    520c:	19 95       	eicall
                                                ptr++;
    520e:	08 94       	sec
    5210:	e1 1c       	adc	r14, r1
    5212:	f1 1c       	adc	r15, r1
                                                cnt--;
    5214:	08 94       	sec
    5216:	61 08       	sbc	r6, r1
    5218:	71 08       	sbc	r7, r1
    521a:	dc cf       	rjmp	.-72     	; 0x51d4 <_ZN5Xgrid7processEv+0x60c>
                                                f = f2;
                                }
                        }
                        
                        // send as much of packet as possible
                        for (uint8_t n = 0; n < node_cnt; n++)
    521c:	93 94       	inc	r9
    521e:	49 2c       	mov	r4, r9
    5220:	55 24       	eor	r5, r5
    5222:	cf 5e       	subi	r28, 0xEF	; 239
    5224:	dd 4f       	sbci	r29, 0xFD	; 253
    5226:	a8 81       	ld	r26, Y
    5228:	b9 81       	ldd	r27, Y+1	; 0x01
    522a:	c1 51       	subi	r28, 0x11	; 17
    522c:	d2 40       	sbci	r29, 0x02	; 2
    522e:	8c 91       	ld	r24, X
    5230:	99 27       	eor	r25, r25
    5232:	87 fd       	sbrc	r24, 7
    5234:	90 95       	com	r25
    5236:	48 16       	cp	r4, r24
    5238:	59 06       	cpc	r5, r25
    523a:	0c f4       	brge	.+2      	; 0x523e <_ZN5Xgrid7processEv+0x676>
    523c:	7b cf       	rjmp	.-266    	; 0x5134 <_ZN5Xgrid7processEv+0x56c>
                                        }
                                        
                                }
                        }
                        
                        buffer->ptr += f;
    523e:	f6 01       	movw	r30, r12
    5240:	25 85       	ldd	r18, Z+13	; 0x0d
    5242:	36 85       	ldd	r19, Z+14	; 0x0e
    5244:	22 0d       	add	r18, r2
    5246:	33 1d       	adc	r19, r3
    5248:	25 87       	std	Z+13, r18	; 0x0d
    524a:	36 87       	std	Z+14, r19	; 0x0e
                        
                        // are we done?
                        if (buffer->ptr >= buffer->hdr.size+3)
    524c:	81 81       	ldd	r24, Z+1	; 0x01
    524e:	92 81       	ldd	r25, Z+2	; 0x02
    5250:	03 96       	adiw	r24, 0x03	; 3
    5252:	28 17       	cp	r18, r24
    5254:	39 07       	cpc	r19, r25
    5256:	58 f1       	brcs	.+86     	; 0x52ae <_ZN5Xgrid7processEv+0x6e6>
                        {
                                // turn off flag
                                buffer->flags &= ~XGRID_BUFFER_IN_USE;
    5258:	81 89       	ldd	r24, Z+17	; 0x11
    525a:	8c 7f       	andi	r24, 0xFC	; 252
    525c:	81 8b       	std	Z+17, r24	; 0x11
                                
                                // remove buffer assigments
                                for (uint8_t n = 0; n < node_cnt; n++)
    525e:	fd 01       	movw	r30, r26
    5260:	a0 81       	ld	r26, Z
    5262:	bb 27       	eor	r27, r27
    5264:	a7 fd       	sbrc	r26, 7
    5266:	b0 95       	com	r27
    5268:	40 e0       	ldi	r20, 0x00	; 0
    526a:	1c c0       	rjmp	.+56     	; 0x52a4 <_ZN5Xgrid7processEv+0x6dc>
                                {
                                        if (buffer->mask & (1 << n))
    526c:	81 e0       	ldi	r24, 0x01	; 1
    526e:	90 e0       	ldi	r25, 0x00	; 0
    5270:	04 2e       	mov	r0, r20
    5272:	02 c0       	rjmp	.+4      	; 0x5278 <_ZN5Xgrid7processEv+0x6b0>
    5274:	88 0f       	add	r24, r24
    5276:	99 1f       	adc	r25, r25
    5278:	0a 94       	dec	r0
    527a:	e2 f7       	brpl	.-8      	; 0x5274 <_ZN5Xgrid7processEv+0x6ac>
    527c:	f6 01       	movw	r30, r12
    527e:	27 85       	ldd	r18, Z+15	; 0x0f
    5280:	30 89       	ldd	r19, Z+16	; 0x10
    5282:	82 23       	and	r24, r18
    5284:	93 23       	and	r25, r19
    5286:	00 97       	sbiw	r24, 0x00	; 0
    5288:	61 f0       	breq	.+24     	; 0x52a2 <_ZN5Xgrid7processEv+0x6da>
                                        {
                                                nodes[n].tx_buffer = -1;
    528a:	fb 01       	movw	r30, r22
    528c:	ee 0f       	add	r30, r30
    528e:	ff 1f       	adc	r31, r31
    5290:	e6 0f       	add	r30, r22
    5292:	f7 1f       	adc	r31, r23
    5294:	ee 0f       	add	r30, r30
    5296:	ff 1f       	adc	r31, r31
    5298:	ee 0f       	add	r30, r30
    529a:	ff 1f       	adc	r31, r31
    529c:	ea 0d       	add	r30, r10
    529e:	fb 1d       	adc	r31, r11
    52a0:	80 a2       	lds	r24, 0x90
                        {
                                // turn off flag
                                buffer->flags &= ~XGRID_BUFFER_IN_USE;
                                
                                // remove buffer assigments
                                for (uint8_t n = 0; n < node_cnt; n++)
    52a2:	4f 5f       	subi	r20, 0xFF	; 255
    52a4:	64 2f       	mov	r22, r20
    52a6:	70 e0       	ldi	r23, 0x00	; 0
    52a8:	6a 17       	cp	r22, r26
    52aa:	7b 07       	cpc	r23, r27
    52ac:	fc f2       	brlt	.-66     	; 0x526c <_ZN5Xgrid7processEv+0x6a4>
    52ae:	c1 5f       	subi	r28, 0xF1	; 241
    52b0:	dd 4f       	sbci	r29, 0xFD	; 253
    52b2:	28 81       	ld	r18, Y
    52b4:	39 81       	ldd	r19, Y+1	; 0x01
    52b6:	cf 50       	subi	r28, 0x0F	; 15
    52b8:	d2 40       	sbci	r29, 0x02	; 2
    52ba:	2f 5f       	subi	r18, 0xFF	; 255
    52bc:	3f 4f       	sbci	r19, 0xFF	; 255
    52be:	c1 5f       	subi	r28, 0xF1	; 241
    52c0:	dd 4f       	sbci	r29, 0xFD	; 253
    52c2:	28 83       	st	Y, r18
    52c4:	39 83       	std	Y+1, r19	; 0x01
    52c6:	cf 50       	subi	r28, 0x0F	; 15
    52c8:	d2 40       	sbci	r29, 0x02	; 2
                        }
                }
        }
        
        // process transmit buffers
        for (uint8_t i = 0; i < XGRID_BUFFER_COUNT; i++)
    52ca:	2b 30       	cpi	r18, 0x0B	; 11
    52cc:	31 05       	cpc	r19, r1
    52ce:	09 f0       	breq	.+2      	; 0x52d2 <_ZN5Xgrid7processEv+0x70a>
    52d0:	b0 ce       	rjmp	.-672    	; 0x5032 <_ZN5Xgrid7processEv+0x46a>
                        }
                }
        }
        
        // state machine timeout
        if (timeout > 0)
    52d2:	d5 01       	movw	r26, r10
    52d4:	19 96       	adiw	r26, 0x09	; 9
    52d6:	8d 91       	ld	r24, X+
    52d8:	9c 91       	ld	r25, X
    52da:	1a 97       	sbiw	r26, 0x0a	; 10
    52dc:	00 97       	sbiw	r24, 0x00	; 0
    52de:	e1 f0       	breq	.+56     	; 0x5318 <_ZN5Xgrid7processEv+0x750>
        {
                timeout--;
    52e0:	01 97       	sbiw	r24, 0x01	; 1
    52e2:	19 96       	adiw	r26, 0x09	; 9
    52e4:	8d 93       	st	X+, r24
    52e6:	9c 93       	st	X, r25
    52e8:	1a 97       	sbiw	r26, 0x0a	; 10
                
                if (timeout == 0)
    52ea:	00 97       	sbiw	r24, 0x00	; 0
    52ec:	a9 f4       	brne	.+42     	; 0x5318 <_ZN5Xgrid7processEv+0x750>
                {
#ifdef DEBUG
                        printf_P(PSTR("timeout!\n"));
    52ee:	0f 92       	push	r0
    52f0:	0f 92       	push	r0
    52f2:	83 ea       	ldi	r24, 0xA3	; 163
    52f4:	92 e0       	ldi	r25, 0x02	; 2
    52f6:	ed b7       	in	r30, 0x3d	; 61
    52f8:	fe b7       	in	r31, 0x3e	; 62
    52fa:	81 83       	std	Z+1, r24	; 0x01
    52fc:	92 83       	std	Z+2, r25	; 0x02
    52fe:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <printf_P>
#endif // DEBUG
                        firmware_offset = 0;
    5302:	d5 01       	movw	r26, r10
    5304:	58 96       	adiw	r26, 0x18	; 24
    5306:	1d 92       	st	X+, r1
    5308:	1d 92       	st	X+, r1
    530a:	1d 92       	st	X+, r1
    530c:	1c 92       	st	X, r1
    530e:	5b 97       	sbiw	r26, 0x1b	; 27
                        state = XGRID_STATE_IDLE;
    5310:	1f 96       	adiw	r26, 0x0f	; 15
    5312:	1c 92       	st	X, r1
    5314:	0f 90       	pop	r0
    5316:	0f 90       	pop	r0
                }
        }
        
        // state machine and periodic tasks
        if (delay > 0)
    5318:	f5 01       	movw	r30, r10
    531a:	83 85       	ldd	r24, Z+11	; 0x0b
    531c:	94 85       	ldd	r25, Z+12	; 0x0c
    531e:	a5 85       	ldd	r26, Z+13	; 0x0d
    5320:	b6 85       	ldd	r27, Z+14	; 0x0e
    5322:	00 97       	sbiw	r24, 0x00	; 0
    5324:	a1 05       	cpc	r26, r1
    5326:	b1 05       	cpc	r27, r1
    5328:	21 f0       	breq	.+8      	; 0x5332 <_ZN5Xgrid7processEv+0x76a>
        {
                // delay processing
                delay--;
    532a:	01 97       	sbiw	r24, 0x01	; 1
    532c:	a1 09       	sbc	r26, r1
    532e:	b1 09       	sbc	r27, r1
    5330:	26 c2       	rjmp	.+1100   	; 0x577e <_ZN5Xgrid7processEv+0xbb6>
        }
        else if (state == XGRID_STATE_INIT)
    5332:	07 85       	ldd	r16, Z+15	; 0x0f
    5334:	01 30       	cpi	r16, 0x01	; 1
    5336:	39 f5       	brne	.+78     	; 0x5386 <_ZN5Xgrid7processEv+0x7be>
        {
#ifdef DEBUG
                printf_P(PSTR("init, send flush command\n"));
    5338:	0f 92       	push	r0
    533a:	0f 92       	push	r0
    533c:	8d ea       	ldi	r24, 0xAD	; 173
    533e:	92 e0       	ldi	r25, 0x02	; 2
    5340:	ed b7       	in	r30, 0x3d	; 61
    5342:	fe b7       	in	r31, 0x3e	; 62
    5344:	81 83       	std	Z+1, r24	; 0x01
    5346:	92 83       	std	Z+2, r25	; 0x02
    5348:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <printf_P>
#endif // DEBUG
                pkt.type = XGRID_PKT_FLUSH_COMPARE_BUFFER;
    534c:	8c ef       	ldi	r24, 0xFC	; 252
    534e:	8b 83       	std	Y+3, r24	; 0x03
                pkt.flags = 0;
    5350:	1d 82       	std	Y+5, r1	; 0x05
                pkt.radius = 1;
    5352:	0e 83       	std	Y+6, r16	; 0x06
                pkt.data = 0;
    5354:	1f 82       	std	Y+7, r1	; 0x07
    5356:	18 86       	std	Y+8, r1	; 0x08
                pkt.data_len = 0;
    5358:	19 86       	std	Y+9, r1	; 0x09
    535a:	1a 86       	std	Y+10, r1	; 0x0a
                
                send_packet(&pkt);
    535c:	0f 90       	pop	r0
    535e:	0f 90       	pop	r0
    5360:	c5 01       	movw	r24, r10
    5362:	be 01       	movw	r22, r28
    5364:	6f 5f       	subi	r22, 0xFF	; 255
    5366:	7f 4f       	sbci	r23, 0xFF	; 255
    5368:	4f ef       	ldi	r20, 0xFF	; 255
    536a:	5f ef       	ldi	r21, 0xFF	; 255
    536c:	0e 94 8d 23 	call	0x471a	; 0x471a <_ZN5Xgrid11send_packetEPNS_6PacketEj>
                
                delay = 1000;
    5370:	88 ee       	ldi	r24, 0xE8	; 232
    5372:	93 e0       	ldi	r25, 0x03	; 3
    5374:	a0 e0       	ldi	r26, 0x00	; 0
    5376:	b0 e0       	ldi	r27, 0x00	; 0
    5378:	f5 01       	movw	r30, r10
    537a:	83 87       	std	Z+11, r24	; 0x0b
    537c:	94 87       	std	Z+12, r25	; 0x0c
    537e:	a5 87       	std	Z+13, r26	; 0x0d
    5380:	b6 87       	std	Z+14, r27	; 0x0e
                state = XGRID_STATE_IDLE;
    5382:	17 86       	std	Z+15, r1	; 0x0f
    5384:	2a c0       	rjmp	.+84     	; 0x53da <_ZN5Xgrid7processEv+0x812>
                timeout = 0;
        }
        else if (state == XGRID_STATE_IDLE)
    5386:	00 23       	and	r16, r16
    5388:	59 f5       	brne	.+86     	; 0x53e0 <_ZN5Xgrid7processEv+0x818>
        {
#ifdef DEBUG
                printf_P(PSTR("idle, send version check\n"));
    538a:	0f 92       	push	r0
    538c:	0f 92       	push	r0
    538e:	87 ec       	ldi	r24, 0xC7	; 199
    5390:	92 e0       	ldi	r25, 0x02	; 2
    5392:	ad b7       	in	r26, 0x3d	; 61
    5394:	be b7       	in	r27, 0x3e	; 62
    5396:	11 96       	adiw	r26, 0x01	; 1
    5398:	8d 93       	st	X+, r24
    539a:	9c 93       	st	X, r25
    539c:	12 97       	sbiw	r26, 0x02	; 2
    539e:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <printf_P>
#endif // DEBUG
                // if we're idle, send a ping request
                // to get neighbor firmware information
                pkt.type = XGRID_PKT_PING_REQUEST;
    53a2:	8d ef       	ldi	r24, 0xFD	; 253
    53a4:	8b 83       	std	Y+3, r24	; 0x03
                pkt.flags = 0;
    53a6:	1d 82       	std	Y+5, r1	; 0x05
                pkt.radius = 1;
    53a8:	81 e0       	ldi	r24, 0x01	; 1
    53aa:	8e 83       	std	Y+6, r24	; 0x06
                pkt.data_len = 0;
    53ac:	19 86       	std	Y+9, r1	; 0x09
    53ae:	1a 86       	std	Y+10, r1	; 0x0a
                
                send_packet(&pkt);
    53b0:	0f 90       	pop	r0
    53b2:	0f 90       	pop	r0
    53b4:	c5 01       	movw	r24, r10
    53b6:	be 01       	movw	r22, r28
    53b8:	6f 5f       	subi	r22, 0xFF	; 255
    53ba:	7f 4f       	sbci	r23, 0xFF	; 255
    53bc:	4f ef       	ldi	r20, 0xFF	; 255
    53be:	5f ef       	ldi	r21, 0xFF	; 255
    53c0:	0e 94 8d 23 	call	0x471a	; 0x471a <_ZN5Xgrid11send_packetEPNS_6PacketEj>
                
                // wait 100 cycles
                delay = 100;
    53c4:	84 e6       	ldi	r24, 0x64	; 100
    53c6:	90 e0       	ldi	r25, 0x00	; 0
    53c8:	a0 e0       	ldi	r26, 0x00	; 0
    53ca:	b0 e0       	ldi	r27, 0x00	; 0
    53cc:	f5 01       	movw	r30, r10
    53ce:	83 87       	std	Z+11, r24	; 0x0b
    53d0:	94 87       	std	Z+12, r25	; 0x0c
    53d2:	a5 87       	std	Z+13, r26	; 0x0d
    53d4:	b6 87       	std	Z+14, r27	; 0x0e
                state = XGRID_STATE_CHECK_VER;
    53d6:	80 e1       	ldi	r24, 0x10	; 16
    53d8:	87 87       	std	Z+15, r24	; 0x0f
                timeout = 0;
    53da:	11 86       	std	Z+9, r1	; 0x09
    53dc:	12 86       	std	Z+10, r1	; 0x0a
    53de:	88 c2       	rjmp	.+1296   	; 0x58f0 <_ZN5Xgrid7processEv+0xd28>
        }
        else if (state == XGRID_STATE_CHECK_VER)
    53e0:	00 31       	cpi	r16, 0x10	; 16
    53e2:	09 f0       	breq	.+2      	; 0x53e6 <_ZN5Xgrid7processEv+0x81e>
    53e4:	21 c1       	rjmp	.+578    	; 0x5628 <_ZN5Xgrid7processEv+0xa60>
        {
#ifdef DEBUG
                printf_P(PSTR("check neighbor versions\n"));
    53e6:	0f 92       	push	r0
    53e8:	0f 92       	push	r0
    53ea:	81 ee       	ldi	r24, 0xE1	; 225
    53ec:	92 e0       	ldi	r25, 0x02	; 2
    53ee:	ad b7       	in	r26, 0x3d	; 61
    53f0:	be b7       	in	r27, 0x3e	; 62
    53f2:	11 96       	adiw	r26, 0x01	; 1
    53f4:	8d 93       	st	X+, r24
    53f6:	9c 93       	st	X, r25
    53f8:	12 97       	sbiw	r26, 0x02	; 2
    53fa:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <printf_P>
#endif // DEBUG
                // check versions every 30 seconds
                // at 1 kHz tick rate
                delay = 30*1000;
    53fe:	80 e3       	ldi	r24, 0x30	; 48
    5400:	95 e7       	ldi	r25, 0x75	; 117
    5402:	a0 e0       	ldi	r26, 0x00	; 0
    5404:	b0 e0       	ldi	r27, 0x00	; 0
    5406:	f5 01       	movw	r30, r10
    5408:	83 87       	std	Z+11, r24	; 0x0b
    540a:	94 87       	std	Z+12, r25	; 0x0c
    540c:	a5 87       	std	Z+13, r26	; 0x0d
    540e:	b6 87       	std	Z+14, r27	; 0x0e
                state = XGRID_STATE_IDLE;
    5410:	17 86       	std	Z+15, r1	; 0x0f
                
                update_node_mask = 0;
    5412:	10 8a       	std	Z+16, r1	; 0x10
    5414:	11 8a       	std	Z+17, r1	; 0x11
                
#ifdef DEBUG
                printf_P(PSTR("update check %ld\n"), build_number);
    5416:	00 d0       	rcall	.+0      	; 0x5418 <_ZN5Xgrid7processEv+0x850>
    5418:	0f 92       	push	r0
    541a:	8a ef       	ldi	r24, 0xFA	; 250
    541c:	92 e0       	ldi	r25, 0x02	; 2
    541e:	ad b7       	in	r26, 0x3d	; 61
    5420:	be b7       	in	r27, 0x3e	; 62
    5422:	11 96       	adiw	r26, 0x01	; 1
    5424:	8d 93       	st	X+, r24
    5426:	9c 93       	st	X, r25
    5428:	12 97       	sbiw	r26, 0x02	; 2
    542a:	85 81       	ldd	r24, Z+5	; 0x05
    542c:	96 81       	ldd	r25, Z+6	; 0x06
    542e:	a7 81       	ldd	r26, Z+7	; 0x07
    5430:	b0 85       	ldd	r27, Z+8	; 0x08
    5432:	ed b7       	in	r30, 0x3d	; 61
    5434:	fe b7       	in	r31, 0x3e	; 62
    5436:	83 83       	std	Z+3, r24	; 0x03
    5438:	94 83       	std	Z+4, r25	; 0x04
    543a:	a5 83       	std	Z+5, r26	; 0x05
    543c:	b6 83       	std	Z+6, r27	; 0x06
    543e:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <printf_P>
#endif // DEBUG
                
                // check detected revisions
                for (uint8_t n = 0; n < node_cnt; n++)
    5442:	2d b7       	in	r18, 0x3d	; 61
    5444:	3e b7       	in	r19, 0x3e	; 62
    5446:	2a 5f       	subi	r18, 0xFA	; 250
    5448:	3f 4f       	sbci	r19, 0xFF	; 255
    544a:	2d bf       	out	0x3d, r18	; 61
    544c:	3e bf       	out	0x3e, r19	; 62
    544e:	cc 24       	eor	r12, r12
    5450:	4d e7       	ldi	r20, 0x7D	; 125
    5452:	44 2e       	mov	r4, r20
    5454:	51 2c       	mov	r5, r1
    5456:	4a 0c       	add	r4, r10
    5458:	5b 1c       	adc	r5, r11
                {
#ifdef DEBUG
                        printf_P(PSTR("node %d: %ld (%04x)\n"), n, nodes[n].build, nodes[n].crc);
    545a:	5c e0       	ldi	r21, 0x0C	; 12
    545c:	25 2e       	mov	r2, r21
    545e:	53 e0       	ldi	r21, 0x03	; 3
    5460:	35 2e       	mov	r3, r21
#endif // DEBUG
                        if (nodes[n].build > 0 && nodes[n].build < build_number)
                        {
                                update_node_mask |= (1 << n);
    5462:	61 e0       	ldi	r22, 0x01	; 1
    5464:	66 2e       	mov	r6, r22
    5466:	71 2c       	mov	r7, r1
#ifdef DEBUG
                printf_P(PSTR("update check %ld\n"), build_number);
#endif // DEBUG
                
                // check detected revisions
                for (uint8_t n = 0; n < node_cnt; n++)
    5468:	63 c0       	rjmp	.+198    	; 0x5530 <_ZN5Xgrid7processEv+0x968>
                {
#ifdef DEBUG
                        printf_P(PSTR("node %d: %ld (%04x)\n"), n, nodes[n].build, nodes[n].crc);
    546a:	6d b7       	in	r22, 0x3d	; 61
    546c:	7e b7       	in	r23, 0x3e	; 62
    546e:	6a 50       	subi	r22, 0x0A	; 10
    5470:	70 40       	sbci	r23, 0x00	; 0
    5472:	6d bf       	out	0x3d, r22	; 61
    5474:	7e bf       	out	0x3e, r23	; 62
    5476:	2d b7       	in	r18, 0x3d	; 61
    5478:	3e b7       	in	r19, 0x3e	; 62
    547a:	2f 5f       	subi	r18, 0xFF	; 255
    547c:	3f 4f       	sbci	r19, 0xFF	; 255
    547e:	ad b7       	in	r26, 0x3d	; 61
    5480:	be b7       	in	r27, 0x3e	; 62
    5482:	11 96       	adiw	r26, 0x01	; 1
    5484:	2d 92       	st	X+, r2
    5486:	3c 92       	st	X, r3
    5488:	12 97       	sbiw	r26, 0x02	; 2
    548a:	f9 01       	movw	r30, r18
    548c:	e2 82       	std	Z+2, r14	; 0x02
    548e:	f3 82       	std	Z+3, r15	; 0x03
    5490:	87 01       	movw	r16, r14
    5492:	00 0f       	add	r16, r16
    5494:	11 1f       	adc	r17, r17
    5496:	0e 0d       	add	r16, r14
    5498:	1f 1d       	adc	r17, r15
    549a:	00 0f       	add	r16, r16
    549c:	11 1f       	adc	r17, r17
    549e:	00 0f       	add	r16, r16
    54a0:	11 1f       	adc	r17, r17
    54a2:	0a 0d       	add	r16, r10
    54a4:	1b 1d       	adc	r17, r11
    54a6:	f8 01       	movw	r30, r16
    54a8:	83 a1       	lds	r24, 0x43
    54aa:	94 a1       	lds	r25, 0x44
    54ac:	a5 a1       	lds	r26, 0x45
    54ae:	b6 a1       	lds	r27, 0x46
    54b0:	f9 01       	movw	r30, r18
    54b2:	84 83       	std	Z+4, r24	; 0x04
    54b4:	95 83       	std	Z+5, r25	; 0x05
    54b6:	a6 83       	std	Z+6, r26	; 0x06
    54b8:	b7 83       	std	Z+7, r27	; 0x07
    54ba:	d8 01       	movw	r26, r16
    54bc:	97 96       	adiw	r26, 0x27	; 39
    54be:	8d 91       	ld	r24, X+
    54c0:	9c 91       	ld	r25, X
    54c2:	98 97       	sbiw	r26, 0x28	; 40
    54c4:	80 87       	std	Z+8, r24	; 0x08
    54c6:	91 87       	std	Z+9, r25	; 0x09
    54c8:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <printf_P>
#endif // DEBUG
                        if (nodes[n].build > 0 && nodes[n].build < build_number)
    54cc:	f8 01       	movw	r30, r16
    54ce:	83 a1       	lds	r24, 0x43
    54d0:	94 a1       	lds	r25, 0x44
    54d2:	a5 a1       	lds	r26, 0x45
    54d4:	b6 a1       	lds	r27, 0x46
    54d6:	2d b7       	in	r18, 0x3d	; 61
    54d8:	3e b7       	in	r19, 0x3e	; 62
    54da:	26 5f       	subi	r18, 0xF6	; 246
    54dc:	3f 4f       	sbci	r19, 0xFF	; 255
    54de:	2d bf       	out	0x3d, r18	; 61
    54e0:	3e bf       	out	0x3e, r19	; 62
    54e2:	f5 01       	movw	r30, r10
    54e4:	45 81       	ldd	r20, Z+5	; 0x05
    54e6:	56 81       	ldd	r21, Z+6	; 0x06
    54e8:	67 81       	ldd	r22, Z+7	; 0x07
    54ea:	70 85       	ldd	r23, Z+8	; 0x08
    54ec:	00 97       	sbiw	r24, 0x00	; 0
    54ee:	a1 05       	cpc	r26, r1
    54f0:	b1 05       	cpc	r27, r1
    54f2:	91 f0       	breq	.+36     	; 0x5518 <_ZN5Xgrid7processEv+0x950>
    54f4:	84 17       	cp	r24, r20
    54f6:	95 07       	cpc	r25, r21
    54f8:	a6 07       	cpc	r26, r22
    54fa:	b7 07       	cpc	r27, r23
    54fc:	68 f4       	brcc	.+26     	; 0x5518 <_ZN5Xgrid7processEv+0x950>
                        {
                                update_node_mask |= (1 << n);
    54fe:	93 01       	movw	r18, r6
    5500:	02 c0       	rjmp	.+4      	; 0x5506 <_ZN5Xgrid7processEv+0x93e>
    5502:	22 0f       	add	r18, r18
    5504:	33 1f       	adc	r19, r19
    5506:	ea 94       	dec	r14
    5508:	e2 f7       	brpl	.-8      	; 0x5502 <_ZN5Xgrid7processEv+0x93a>
    550a:	80 89       	ldd	r24, Z+16	; 0x10
    550c:	91 89       	ldd	r25, Z+17	; 0x11
    550e:	82 2b       	or	r24, r18
    5510:	93 2b       	or	r25, r19
    5512:	80 8b       	std	Z+16, r24	; 0x10
    5514:	91 8b       	std	Z+17, r25	; 0x11
    5516:	0b c0       	rjmp	.+22     	; 0x552e <_ZN5Xgrid7processEv+0x966>
                        }
                        else if (nodes[n].build > build_number)
    5518:	48 17       	cp	r20, r24
    551a:	59 07       	cpc	r21, r25
    551c:	6a 07       	cpc	r22, r26
    551e:	7b 07       	cpc	r23, r27
    5520:	30 f4       	brcc	.+12     	; 0x552e <_ZN5Xgrid7processEv+0x966>
                        {
                                // we're old, don't try to update anybody
                                update_node_mask = 0;
    5522:	d5 01       	movw	r26, r10
    5524:	50 96       	adiw	r26, 0x10	; 16
    5526:	1d 92       	st	X+, r1
    5528:	1c 92       	st	X, r1
    552a:	51 97       	sbiw	r26, 0x11	; 17
                                break;
    552c:	0c c0       	rjmp	.+24     	; 0x5546 <_ZN5Xgrid7processEv+0x97e>
#ifdef DEBUG
                printf_P(PSTR("update check %ld\n"), build_number);
#endif // DEBUG
                
                // check detected revisions
                for (uint8_t n = 0; n < node_cnt; n++)
    552e:	c3 94       	inc	r12
    5530:	ec 2c       	mov	r14, r12
    5532:	ff 24       	eor	r15, r15
    5534:	f2 01       	movw	r30, r4
    5536:	80 81       	ld	r24, Z
    5538:	99 27       	eor	r25, r25
    553a:	87 fd       	sbrc	r24, 7
    553c:	90 95       	com	r25
    553e:	e8 16       	cp	r14, r24
    5540:	f9 06       	cpc	r15, r25
    5542:	0c f4       	brge	.+2      	; 0x5546 <_ZN5Xgrid7processEv+0x97e>
    5544:	92 cf       	rjmp	.-220    	; 0x546a <_ZN5Xgrid7processEv+0x8a2>
                                break;
                        }
                }
                
                // need to update somebody?
                if (update_node_mask != 0)
    5546:	d5 01       	movw	r26, r10
    5548:	50 96       	adiw	r26, 0x10	; 16
    554a:	8d 91       	ld	r24, X+
    554c:	9c 91       	ld	r25, X
    554e:	51 97       	sbiw	r26, 0x11	; 17
    5550:	00 97       	sbiw	r24, 0x00	; 0
    5552:	09 f4       	brne	.+2      	; 0x5556 <_ZN5Xgrid7processEv+0x98e>
    5554:	60 c0       	rjmp	.+192    	; 0x5616 <_ZN5Xgrid7processEv+0xa4e>
                {
#ifdef DEBUG
                        printf_P(PSTR("send start update command\n"));
    5556:	0f 92       	push	r0
    5558:	0f 92       	push	r0
    555a:	81 e2       	ldi	r24, 0x21	; 33
    555c:	93 e0       	ldi	r25, 0x03	; 3
    555e:	ed b7       	in	r30, 0x3d	; 61
    5560:	fe b7       	in	r31, 0x3e	; 62
    5562:	81 83       	std	Z+1, r24	; 0x01
    5564:	92 83       	std	Z+2, r25	; 0x02
    5566:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <printf_P>
#endif // DEBUG
                        // send start update command
                        uint8_t buffer[11];
                        //xgrid_pkt_maint_cmd_t *c = (xgrid_pkt_maint_cmd_t *)buffer;
                        xgrid_pkt_maint_cmd_start_update_t *c = (xgrid_pkt_maint_cmd_start_update_t *)buffer;
                        pkt.type = XGRID_PKT_MAINT_CMD;
    556a:	89 ef       	ldi	r24, 0xF9	; 249
    556c:	8b 83       	std	Y+3, r24	; 0x03
                        pkt.flags = 0;
    556e:	1d 82       	std	Y+5, r1	; 0x05
                        pkt.radius = 1;
    5570:	81 e0       	ldi	r24, 0x01	; 1
    5572:	8e 83       	std	Y+6, r24	; 0x06
                        pkt.data = buffer;
    5574:	ce 01       	movw	r24, r28
    5576:	0d 96       	adiw	r24, 0x0d	; 13
    5578:	8f 83       	std	Y+7, r24	; 0x07
    557a:	98 87       	std	Y+8, r25	; 0x08
                        pkt.data_len = sizeof(xgrid_pkt_maint_cmd_start_update_t);
    557c:	8b e0       	ldi	r24, 0x0B	; 11
    557e:	90 e0       	ldi	r25, 0x00	; 0
    5580:	89 87       	std	Y+9, r24	; 0x09
    5582:	9a 87       	std	Y+10, r25	; 0x0a
                        
                        c->cmd = XGRID_CMD_START_UPDATE;
    5584:	81 e8       	ldi	r24, 0x81	; 129
    5586:	8d 87       	std	Y+13, r24	; 0x0d
                        
                        c->magic = XGRID_CMD_UPDATE_MAGIC;
    5588:	8e e7       	ldi	r24, 0x7E	; 126
    558a:	9e e1       	ldi	r25, 0x1E	; 30
    558c:	a0 e5       	ldi	r26, 0x50	; 80
    558e:	bb e0       	ldi	r27, 0x0B	; 11
    5590:	8e 87       	std	Y+14, r24	; 0x0e
    5592:	9f 87       	std	Y+15, r25	; 0x0f
    5594:	a8 8b       	std	Y+16, r26	; 0x10
    5596:	b9 8b       	std	Y+17, r27	; 0x11
                        
                        c->crc = firmware_crc;
    5598:	d5 01       	movw	r26, r10
    559a:	13 96       	adiw	r26, 0x03	; 3
    559c:	8d 91       	ld	r24, X+
    559e:	9c 91       	ld	r25, X
    55a0:	14 97       	sbiw	r26, 0x04	; 4
    55a2:	8a 8b       	std	Y+18, r24	; 0x12
    55a4:	9b 8b       	std	Y+19, r25	; 0x13
                        c->build = build_number;
    55a6:	15 96       	adiw	r26, 0x05	; 5
    55a8:	8d 91       	ld	r24, X+
    55aa:	9d 91       	ld	r25, X+
    55ac:	0d 90       	ld	r0, X+
    55ae:	bc 91       	ld	r27, X
    55b0:	a0 2d       	mov	r26, r0
    55b2:	8c 8b       	std	Y+20, r24	; 0x14
    55b4:	9d 8b       	std	Y+21, r25	; 0x15
    55b6:	ae 8b       	std	Y+22, r26	; 0x16
    55b8:	bf 8b       	std	Y+23, r27	; 0x17
                        
                        send_packet(&pkt, update_node_mask);
    55ba:	0f 90       	pop	r0
    55bc:	0f 90       	pop	r0
    55be:	f5 01       	movw	r30, r10
    55c0:	40 89       	ldd	r20, Z+16	; 0x10
    55c2:	51 89       	ldd	r21, Z+17	; 0x11
    55c4:	c5 01       	movw	r24, r10
    55c6:	be 01       	movw	r22, r28
    55c8:	6f 5f       	subi	r22, 0xFF	; 255
    55ca:	7f 4f       	sbci	r23, 0xFF	; 255
    55cc:	0e 94 8d 23 	call	0x471a	; 0x471a <_ZN5Xgrid11send_packetEPNS_6PacketEj>
                        
                        if (firmware_updated)
    55d0:	d5 01       	movw	r26, r10
    55d2:	5c 96       	adiw	r26, 0x1c	; 28
    55d4:	8c 91       	ld	r24, X
    55d6:	5c 97       	sbiw	r26, 0x1c	; 28
    55d8:	88 23       	and	r24, r24
    55da:	51 f0       	breq	.+20     	; 0x55f0 <_ZN5Xgrid7processEv+0xa28>
                                firmware_offset = XB_APP_TEMP_START;
    55dc:	80 e0       	ldi	r24, 0x00	; 0
    55de:	90 e0       	ldi	r25, 0x00	; 0
    55e0:	a1 e0       	ldi	r26, 0x01	; 1
    55e2:	b0 e0       	ldi	r27, 0x00	; 0
    55e4:	f5 01       	movw	r30, r10
    55e6:	80 8f       	std	Z+24, r24	; 0x18
    55e8:	91 8f       	std	Z+25, r25	; 0x19
    55ea:	a2 8f       	std	Z+26, r26	; 0x1a
    55ec:	b3 8f       	std	Z+27, r27	; 0x1b
    55ee:	07 c0       	rjmp	.+14     	; 0x55fe <_ZN5Xgrid7processEv+0xa36>
                        else
                                firmware_offset = 0;
    55f0:	d5 01       	movw	r26, r10
    55f2:	58 96       	adiw	r26, 0x18	; 24
    55f4:	1d 92       	st	X+, r1
    55f6:	1d 92       	st	X+, r1
    55f8:	1d 92       	st	X+, r1
    55fa:	1c 92       	st	X, r1
    55fc:	5b 97       	sbiw	r26, 0x1b	; 27
                        
                        // start sending new firmware after small delay
                        delay = 100;
    55fe:	84 e6       	ldi	r24, 0x64	; 100
    5600:	90 e0       	ldi	r25, 0x00	; 0
    5602:	a0 e0       	ldi	r26, 0x00	; 0
    5604:	b0 e0       	ldi	r27, 0x00	; 0
    5606:	f5 01       	movw	r30, r10
    5608:	83 87       	std	Z+11, r24	; 0x0b
    560a:	94 87       	std	Z+12, r25	; 0x0c
    560c:	a5 87       	std	Z+13, r26	; 0x0d
    560e:	b6 87       	std	Z+14, r27	; 0x0e
                        state = XGRID_STATE_FW_TX;
    5610:	80 e2       	ldi	r24, 0x20	; 32
    5612:	87 87       	std	Z+15, r24	; 0x0f
    5614:	6d c1       	rjmp	.+730    	; 0x58f0 <_ZN5Xgrid7processEv+0xd28>
                }
                else
                {
                        // if we've been updated and no one else needs an update,
                        // install the firmware and reset
                        if (firmware_updated)
    5616:	d5 01       	movw	r26, r10
    5618:	5c 96       	adiw	r26, 0x1c	; 28
    561a:	8c 91       	ld	r24, X
    561c:	5c 97       	sbiw	r26, 0x1c	; 28
    561e:	88 23       	and	r24, r24
    5620:	09 f4       	brne	.+2      	; 0x5624 <_ZN5Xgrid7processEv+0xa5c>
    5622:	66 c1       	rjmp	.+716    	; 0x58f0 <_ZN5Xgrid7processEv+0xd28>
                        {
                                xboot_reset();
    5624:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <xboot_reset>
                        }
                }
        }
        else if (state == XGRID_STATE_FW_TX)
    5628:	00 32       	cpi	r16, 0x20	; 32
    562a:	09 f0       	breq	.+2      	; 0x562e <_ZN5Xgrid7processEv+0xa66>
    562c:	fd c0       	rjmp	.+506    	; 0x5828 <_ZN5Xgrid7processEv+0xc60>
        {
                if (firmware_offset < XB_APP_SIZE ||
    562e:	f5 01       	movw	r30, r10
    5630:	80 8d       	ldd	r24, Z+24	; 0x18
    5632:	91 8d       	ldd	r25, Z+25	; 0x19
    5634:	a2 8d       	ldd	r26, Z+26	; 0x1a
    5636:	b3 8d       	ldd	r27, Z+27	; 0x1b
    5638:	80 30       	cpi	r24, 0x00	; 0
    563a:	f0 e0       	ldi	r31, 0x00	; 0
    563c:	9f 07       	cpc	r25, r31
    563e:	f1 e0       	ldi	r31, 0x01	; 1
    5640:	af 07       	cpc	r26, r31
    5642:	f0 e0       	ldi	r31, 0x00	; 0
    5644:	bf 07       	cpc	r27, r31
    5646:	70 f0       	brcs	.+28     	; 0x5664 <_ZN5Xgrid7processEv+0xa9c>
    5648:	f5 01       	movw	r30, r10
    564a:	24 8d       	ldd	r18, Z+28	; 0x1c
    564c:	22 23       	and	r18, r18
    564e:	09 f4       	brne	.+2      	; 0x5652 <_ZN5Xgrid7processEv+0xa8a>
    5650:	9b c0       	rjmp	.+310    	; 0x5788 <_ZN5Xgrid7processEv+0xbc0>
    5652:	80 30       	cpi	r24, 0x00	; 0
    5654:	f0 e0       	ldi	r31, 0x00	; 0
    5656:	9f 07       	cpc	r25, r31
    5658:	f2 e0       	ldi	r31, 0x02	; 2
    565a:	af 07       	cpc	r26, r31
    565c:	f0 e0       	ldi	r31, 0x00	; 0
    565e:	bf 07       	cpc	r27, r31
    5660:	08 f0       	brcs	.+2      	; 0x5664 <_ZN5Xgrid7processEv+0xa9c>
    5662:	92 c0       	rjmp	.+292    	; 0x5788 <_ZN5Xgrid7processEv+0xbc0>
                        (firmware_updated && firmware_offset < (XB_APP_TEMP_START + XB_APP_TEMP_SIZE)))
                {
#ifdef DEBUG
                        printf_P(PSTR("send firmware block\n"));
    5664:	0f 92       	push	r0
    5666:	0f 92       	push	r0
    5668:	8c e3       	ldi	r24, 0x3C	; 60
    566a:	93 e0       	ldi	r25, 0x03	; 3
    566c:	ad b7       	in	r26, 0x3d	; 61
    566e:	be b7       	in	r27, 0x3e	; 62
    5670:	11 96       	adiw	r26, 0x01	; 1
    5672:	8d 93       	st	X+, r24
    5674:	9c 93       	st	X, r25
    5676:	12 97       	sbiw	r26, 0x02	; 2
    5678:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <printf_P>
#endif // DEBUG
                        // send flash block
                        
                        uint8_t buffer[SPM_PAGESIZE+2];
                        xgrid_pkt_firmware_block_t *b = (xgrid_pkt_firmware_block_t *)buffer;
                        pkt.type = XGRID_PKT_FIRMWARE_BLOCK;
    567c:	8b ef       	ldi	r24, 0xFB	; 251
    567e:	8b 83       	std	Y+3, r24	; 0x03
                        pkt.flags = 0;
    5680:	1d 82       	std	Y+5, r1	; 0x05
                        pkt.radius = 1;
    5682:	81 e0       	ldi	r24, 0x01	; 1
    5684:	8e 83       	std	Y+6, r24	; 0x06
                        pkt.data = buffer;
    5686:	ce 01       	movw	r24, r28
    5688:	0d 96       	adiw	r24, 0x0d	; 13
    568a:	8f 83       	std	Y+7, r24	; 0x07
    568c:	98 87       	std	Y+8, r25	; 0x08
                        pkt.data_len = SPM_PAGESIZE+2;
    568e:	82 e0       	ldi	r24, 0x02	; 2
    5690:	92 e0       	ldi	r25, 0x02	; 2
    5692:	89 87       	std	Y+9, r24	; 0x09
    5694:	9a 87       	std	Y+10, r25	; 0x0a
                        
                        if (firmware_updated)
    5696:	0f 90       	pop	r0
    5698:	0f 90       	pop	r0
    569a:	f5 01       	movw	r30, r10
    569c:	84 8d       	ldd	r24, Z+28	; 0x1c
    569e:	40 8d       	ldd	r20, Z+24	; 0x18
    56a0:	51 8d       	ldd	r21, Z+25	; 0x19
    56a2:	62 8d       	ldd	r22, Z+26	; 0x1a
    56a4:	73 8d       	ldd	r23, Z+27	; 0x1b
    56a6:	88 23       	and	r24, r24
    56a8:	39 f0       	breq	.+14     	; 0x56b8 <_ZN5Xgrid7processEv+0xaf0>
                                b->offset = (firmware_offset - XB_APP_TEMP_START)/SPM_PAGESIZE;
    56aa:	db 01       	movw	r26, r22
    56ac:	ca 01       	movw	r24, r20
    56ae:	80 50       	subi	r24, 0x00	; 0
    56b0:	90 40       	sbci	r25, 0x00	; 0
    56b2:	a1 40       	sbci	r26, 0x01	; 1
    56b4:	b0 40       	sbci	r27, 0x00	; 0
    56b6:	02 c0       	rjmp	.+4      	; 0x56bc <_ZN5Xgrid7processEv+0xaf4>
                        else
                                b->offset = firmware_offset/SPM_PAGESIZE;
    56b8:	db 01       	movw	r26, r22
    56ba:	ca 01       	movw	r24, r20
    56bc:	e9 e0       	ldi	r30, 0x09	; 9
    56be:	b6 95       	lsr	r27
    56c0:	a7 95       	ror	r26
    56c2:	97 95       	ror	r25
    56c4:	87 95       	ror	r24
    56c6:	ea 95       	dec	r30
    56c8:	d1 f7       	brne	.-12     	; 0x56be <_ZN5Xgrid7processEv+0xaf6>
    56ca:	8d 87       	std	Y+13, r24	; 0x0d
    56cc:	9e 87       	std	Y+14, r25	; 0x0e
    56ce:	de 01       	movw	r26, r28
    56d0:	1f 96       	adiw	r26, 0x0f	; 15
#ifdef DEBUG
                printf_P(PSTR("update check %ld\n"), build_number);
#endif // DEBUG
                
                // check detected revisions
                for (uint8_t n = 0; n < node_cnt; n++)
    56d2:	8a 01       	movw	r16, r20
    56d4:	9b 01       	movw	r18, r22
    56d6:	80 e0       	ldi	r24, 0x00	; 0
    56d8:	90 e0       	ldi	r25, 0x00	; 0
                        else
                                b->offset = firmware_offset/SPM_PAGESIZE;
                        
                        for (uint16_t i = 0; i < SPM_PAGESIZE; i++)
                        {
                                b->data[i] = PGM_READ_BYTE(firmware_offset++);
    56da:	2b bf       	out	0x3b, r18	; 59
    56dc:	f8 01       	movw	r30, r16
    56de:	e7 90       	elpm	r14, Z+
    56e0:	ed 92       	st	X+, r14
                        if (firmware_updated)
                                b->offset = (firmware_offset - XB_APP_TEMP_START)/SPM_PAGESIZE;
                        else
                                b->offset = firmware_offset/SPM_PAGESIZE;
                        
                        for (uint16_t i = 0; i < SPM_PAGESIZE; i++)
    56e2:	01 96       	adiw	r24, 0x01	; 1
    56e4:	0f 5f       	subi	r16, 0xFF	; 255
    56e6:	1f 4f       	sbci	r17, 0xFF	; 255
    56e8:	2f 4f       	sbci	r18, 0xFF	; 255
    56ea:	3f 4f       	sbci	r19, 0xFF	; 255
    56ec:	f2 e0       	ldi	r31, 0x02	; 2
    56ee:	80 30       	cpi	r24, 0x00	; 0
    56f0:	9f 07       	cpc	r25, r31
    56f2:	99 f7       	brne	.-26     	; 0x56da <_ZN5Xgrid7processEv+0xb12>
    56f4:	40 50       	subi	r20, 0x00	; 0
    56f6:	5e 4f       	sbci	r21, 0xFE	; 254
    56f8:	6f 4f       	sbci	r22, 0xFF	; 255
    56fa:	7f 4f       	sbci	r23, 0xFF	; 255
    56fc:	d5 01       	movw	r26, r10
    56fe:	58 96       	adiw	r26, 0x18	; 24
    5700:	4d 93       	st	X+, r20
    5702:	5d 93       	st	X+, r21
    5704:	6d 93       	st	X+, r22
    5706:	7c 93       	st	X, r23
    5708:	5b 97       	sbiw	r26, 0x1b	; 27
                        {
                                b->data[i] = PGM_READ_BYTE(firmware_offset++);
                        }
                        
                        if (firmware_offset == XB_APP_TEMP_END)
    570a:	4f 3f       	cpi	r20, 0xFF	; 255
    570c:	bf ef       	ldi	r27, 0xFF	; 255
    570e:	5b 07       	cpc	r21, r27
    5710:	b1 e0       	ldi	r27, 0x01	; 1
    5712:	6b 07       	cpc	r22, r27
    5714:	b0 e0       	ldi	r27, 0x00	; 0
    5716:	7b 07       	cpc	r23, r27
    5718:	21 f5       	brne	.+72     	; 0x5762 <_ZN5Xgrid7processEv+0xb9a>
                        {
                                for (uint16_t i = SPM_PAGESIZE - 7; i < SPM_PAGESIZE; i++)
                                        b->data[i] = 0xff;
    571a:	8f ef       	ldi	r24, 0xFF	; 255
    571c:	c8 5f       	subi	r28, 0xF8	; 248
    571e:	dd 4f       	sbci	r29, 0xFD	; 253
    5720:	88 83       	st	Y, r24
    5722:	c8 50       	subi	r28, 0x08	; 8
    5724:	d2 40       	sbci	r29, 0x02	; 2
    5726:	c7 5f       	subi	r28, 0xF7	; 247
    5728:	dd 4f       	sbci	r29, 0xFD	; 253
    572a:	88 83       	st	Y, r24
    572c:	c9 50       	subi	r28, 0x09	; 9
    572e:	d2 40       	sbci	r29, 0x02	; 2
    5730:	c6 5f       	subi	r28, 0xF6	; 246
    5732:	dd 4f       	sbci	r29, 0xFD	; 253
    5734:	88 83       	st	Y, r24
    5736:	ca 50       	subi	r28, 0x0A	; 10
    5738:	d2 40       	sbci	r29, 0x02	; 2
    573a:	c5 5f       	subi	r28, 0xF5	; 245
    573c:	dd 4f       	sbci	r29, 0xFD	; 253
    573e:	88 83       	st	Y, r24
    5740:	cb 50       	subi	r28, 0x0B	; 11
    5742:	d2 40       	sbci	r29, 0x02	; 2
    5744:	c4 5f       	subi	r28, 0xF4	; 244
    5746:	dd 4f       	sbci	r29, 0xFD	; 253
    5748:	88 83       	st	Y, r24
    574a:	cc 50       	subi	r28, 0x0C	; 12
    574c:	d2 40       	sbci	r29, 0x02	; 2
    574e:	c3 5f       	subi	r28, 0xF3	; 243
    5750:	dd 4f       	sbci	r29, 0xFD	; 253
    5752:	88 83       	st	Y, r24
    5754:	cd 50       	subi	r28, 0x0D	; 13
    5756:	d2 40       	sbci	r29, 0x02	; 2
    5758:	c2 5f       	subi	r28, 0xF2	; 242
    575a:	dd 4f       	sbci	r29, 0xFD	; 253
    575c:	88 83       	st	Y, r24
    575e:	ce 50       	subi	r28, 0x0E	; 14
    5760:	d2 40       	sbci	r29, 0x02	; 2
                        }
                        
                        send_packet(&pkt, update_node_mask);
    5762:	f5 01       	movw	r30, r10
    5764:	40 89       	ldd	r20, Z+16	; 0x10
    5766:	51 89       	ldd	r21, Z+17	; 0x11
    5768:	c5 01       	movw	r24, r10
    576a:	be 01       	movw	r22, r28
    576c:	6f 5f       	subi	r22, 0xFF	; 255
    576e:	7f 4f       	sbci	r23, 0xFF	; 255
    5770:	0e 94 8d 23 	call	0x471a	; 0x471a <_ZN5Xgrid11send_packetEPNS_6PacketEj>
                        
                        // small delay before next packet
                        // long enough to clear data through serial
                        // port buffer and write the block at the other end
                        delay = 100;
    5774:	84 e6       	ldi	r24, 0x64	; 100
    5776:	90 e0       	ldi	r25, 0x00	; 0
    5778:	a0 e0       	ldi	r26, 0x00	; 0
    577a:	b0 e0       	ldi	r27, 0x00	; 0
    577c:	f5 01       	movw	r30, r10
    577e:	83 87       	std	Z+11, r24	; 0x0b
    5780:	94 87       	std	Z+12, r25	; 0x0c
    5782:	a5 87       	std	Z+13, r26	; 0x0d
    5784:	b6 87       	std	Z+14, r27	; 0x0e
    5786:	b4 c0       	rjmp	.+360    	; 0x58f0 <_ZN5Xgrid7processEv+0xd28>
                }
                else
                {
#ifdef DEBUG
                        printf_P(PSTR("finished sending firmware\n"));
    5788:	0f 92       	push	r0
    578a:	0f 92       	push	r0
    578c:	81 e5       	ldi	r24, 0x51	; 81
    578e:	93 e0       	ldi	r25, 0x03	; 3
    5790:	ad b7       	in	r26, 0x3d	; 61
    5792:	be b7       	in	r27, 0x3e	; 62
    5794:	11 96       	adiw	r26, 0x01	; 1
    5796:	8d 93       	st	X+, r24
    5798:	9c 93       	st	X, r25
    579a:	12 97       	sbiw	r26, 0x02	; 2
    579c:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <printf_P>
#endif // DEBUG
                        // send finish update command
                        uint8_t buffer[5];
                        xgrid_pkt_maint_cmd_t *c = (xgrid_pkt_maint_cmd_t *)buffer;
                        pkt.type = XGRID_PKT_MAINT_CMD;
    57a0:	89 ef       	ldi	r24, 0xF9	; 249
    57a2:	8b 83       	std	Y+3, r24	; 0x03
                        pkt.flags = 0;
    57a4:	1d 82       	std	Y+5, r1	; 0x05
                        pkt.radius = 1;
    57a6:	81 e0       	ldi	r24, 0x01	; 1
    57a8:	8e 83       	std	Y+6, r24	; 0x06
                        pkt.data = buffer;
    57aa:	ce 01       	movw	r24, r28
    57ac:	0d 96       	adiw	r24, 0x0d	; 13
    57ae:	8f 83       	std	Y+7, r24	; 0x07
    57b0:	98 87       	std	Y+8, r25	; 0x08
                        pkt.data_len = 5;
    57b2:	85 e0       	ldi	r24, 0x05	; 5
    57b4:	90 e0       	ldi	r25, 0x00	; 0
    57b6:	89 87       	std	Y+9, r24	; 0x09
    57b8:	9a 87       	std	Y+10, r25	; 0x0a
                        
                        c->cmd = XGRID_CMD_FINISH_UPDATE;
    57ba:	82 e8       	ldi	r24, 0x82	; 130
    57bc:	8d 87       	std	Y+13, r24	; 0x0d
                        
                        c->magic = XGRID_CMD_UPDATE_MAGIC;
    57be:	8e e7       	ldi	r24, 0x7E	; 126
    57c0:	9e e1       	ldi	r25, 0x1E	; 30
    57c2:	a0 e5       	ldi	r26, 0x50	; 80
    57c4:	bb e0       	ldi	r27, 0x0B	; 11
    57c6:	8e 87       	std	Y+14, r24	; 0x0e
    57c8:	9f 87       	std	Y+15, r25	; 0x0f
    57ca:	a8 8b       	std	Y+16, r26	; 0x10
    57cc:	b9 8b       	std	Y+17, r27	; 0x11
                        
                        send_packet(&pkt, update_node_mask);
    57ce:	0f 90       	pop	r0
    57d0:	0f 90       	pop	r0
    57d2:	f5 01       	movw	r30, r10
    57d4:	40 89       	ldd	r20, Z+16	; 0x10
    57d6:	51 89       	ldd	r21, Z+17	; 0x11
    57d8:	c5 01       	movw	r24, r10
    57da:	be 01       	movw	r22, r28
    57dc:	6f 5f       	subi	r22, 0xFF	; 255
    57de:	7f 4f       	sbci	r23, 0xFF	; 255
    57e0:	0e 94 8d 23 	call	0x471a	; 0x471a <_ZN5Xgrid11send_packetEPNS_6PacketEj>
                        
                        // flush old build information
                        for (int i = 0; i < node_cnt; i++)
    57e4:	f5 01       	movw	r30, r10
    57e6:	e3 58       	subi	r30, 0x83	; 131
    57e8:	ff 4f       	sbci	r31, 0xFF	; 255
    57ea:	80 81       	ld	r24, Z
    57ec:	99 27       	eor	r25, r25
    57ee:	87 fd       	sbrc	r24, 7
    57f0:	90 95       	com	r25
    57f2:	f5 01       	movw	r30, r10
    57f4:	20 e0       	ldi	r18, 0x00	; 0
    57f6:	30 e0       	ldi	r19, 0x00	; 0
    57f8:	08 c0       	rjmp	.+16     	; 0x580a <_ZN5Xgrid7processEv+0xc42>
                        {
                                nodes[i].build = 0;
    57fa:	17 8a       	std	Z+23, r1	; 0x17
    57fc:	10 8e       	std	Z+24, r1	; 0x18
    57fe:	11 8e       	std	Z+25, r1	; 0x19
    5800:	12 8e       	std	Z+26, r1	; 0x1a
                                nodes[i].crc = 0;
    5802:	13 8e       	std	Z+27, r1	; 0x1b
    5804:	14 8e       	std	Z+28, r1	; 0x1c
                        c->magic = XGRID_CMD_UPDATE_MAGIC;
                        
                        send_packet(&pkt, update_node_mask);
                        
                        // flush old build information
                        for (int i = 0; i < node_cnt; i++)
    5806:	2f 5f       	subi	r18, 0xFF	; 255
    5808:	3f 4f       	sbci	r19, 0xFF	; 255
    580a:	3c 96       	adiw	r30, 0x0c	; 12
    580c:	28 17       	cp	r18, r24
    580e:	39 07       	cpc	r19, r25
    5810:	a4 f3       	brlt	.-24     	; 0x57fa <_ZN5Xgrid7processEv+0xc32>
                                nodes[i].build = 0;
                                nodes[i].crc = 0;
                        }
                        
                        // check again after short delay
                        delay = 1000;
    5812:	88 ee       	ldi	r24, 0xE8	; 232
    5814:	93 e0       	ldi	r25, 0x03	; 3
    5816:	a0 e0       	ldi	r26, 0x00	; 0
    5818:	b0 e0       	ldi	r27, 0x00	; 0
    581a:	f5 01       	movw	r30, r10
    581c:	83 87       	std	Z+11, r24	; 0x0b
    581e:	94 87       	std	Z+12, r25	; 0x0c
    5820:	a5 87       	std	Z+13, r26	; 0x0d
    5822:	b6 87       	std	Z+14, r27	; 0x0e
                        state = XGRID_STATE_IDLE;
    5824:	17 86       	std	Z+15, r1	; 0x0f
    5826:	64 c0       	rjmp	.+200    	; 0x58f0 <_ZN5Xgrid7processEv+0xd28>
                }
        }
        else if (state == XGRID_STATE_FW_RX)
    5828:	08 32       	cpi	r16, 0x28	; 40
    582a:	09 f4       	brne	.+2      	; 0x582e <_ZN5Xgrid7processEv+0xc66>
    582c:	61 c0       	rjmp	.+194    	; 0x58f0 <_ZN5Xgrid7processEv+0xd28>
                // nothing special
        }
        else
        {
                // invalid state, go back to idle, do not collect $200
                state = XGRID_STATE_IDLE;
    582e:	17 86       	std	Z+15, r1	; 0x0f
    5830:	5f c0       	rjmp	.+190    	; 0x58f0 <_ZN5Xgrid7processEv+0xd28>
                {
                        stream->get();
                        nodes[i].drop_chars--;
                }
                
                if (nodes[i].stream->available())
    5832:	82 01       	movw	r16, r4
    5834:	00 0f       	add	r16, r16
    5836:	11 1f       	adc	r17, r17
    5838:	04 0d       	add	r16, r4
    583a:	15 1d       	adc	r17, r5
    583c:	00 0f       	add	r16, r16
    583e:	11 1f       	adc	r17, r17
    5840:	00 0f       	add	r16, r16
    5842:	11 1f       	adc	r17, r17
    5844:	0a 0d       	add	r16, r10
    5846:	1b 1d       	adc	r17, r11
    5848:	f8 01       	movw	r30, r16
    584a:	85 8d       	ldd	r24, Z+29	; 0x1d
    584c:	96 8d       	ldd	r25, Z+30	; 0x1e
    584e:	dc 01       	movw	r26, r24
    5850:	ed 91       	ld	r30, X+
    5852:	fc 91       	ld	r31, X
    5854:	01 90       	ld	r0, Z+
    5856:	f0 81       	ld	r31, Z
    5858:	e0 2d       	mov	r30, r0
    585a:	19 95       	eicall
    585c:	00 97       	sbiw	r24, 0x00	; 0
    585e:	09 f0       	breq	.+2      	; 0x5862 <_ZN5Xgrid7processEv+0xc9a>
    5860:	0a ca       	rjmp	.-3052   	; 0x4c76 <_ZN5Xgrid7processEv+0xae>
    5862:	c5 cb       	rjmp	.-2166   	; 0x4fee <_ZN5Xgrid7processEv+0x426>
                                // drop chars to get to identifier
                                while (stream->available() > 0 && stream->peek() != XGRID_IDENTIFIER)
                                        stream->get();
                                
                                // continue if we're not looking at a packet
                                if (stream->peek() != XGRID_IDENTIFIER)
    5864:	d6 01       	movw	r26, r12
    5866:	ed 91       	ld	r30, X+
    5868:	fc 91       	ld	r31, X
    586a:	04 80       	ldd	r0, Z+4	; 0x04
    586c:	f5 81       	ldd	r31, Z+5	; 0x05
    586e:	e0 2d       	mov	r30, r0
    5870:	8e 2d       	mov	r24, r14
    5872:	90 2f       	mov	r25, r16
    5874:	60 e0       	ldi	r22, 0x00	; 0
    5876:	70 e0       	ldi	r23, 0x00	; 0
    5878:	19 95       	eicall
    587a:	8a 35       	cpi	r24, 0x5A	; 90
    587c:	91 05       	cpc	r25, r1
    587e:	09 f0       	breq	.+2      	; 0x5882 <_ZN5Xgrid7processEv+0xcba>
    5880:	b6 cb       	rjmp	.-2196   	; 0x4fee <_ZN5Xgrid7processEv+0x426>
    5882:	27 ca       	rjmp	.-2994   	; 0x4cd2 <_ZN5Xgrid7processEv+0x10a>
                        while (buffer->ptr < sizeof(xgrid_header_t) && nodes[i].stream->available())
                        {
                                ((uint8_t *)&(buffer->hdr))[buffer->ptr++] = nodes[i].stream->get();
                        }
                        
                        if (buffer->ptr < sizeof(xgrid_header_t))
    5884:	f8 01       	movw	r30, r16
    5886:	85 85       	ldd	r24, Z+13	; 0x0d
    5888:	96 85       	ldd	r25, Z+14	; 0x0e
    588a:	89 30       	cpi	r24, 0x09	; 9
    588c:	91 05       	cpc	r25, r1
    588e:	08 f4       	brcc	.+2      	; 0x5892 <_ZN5Xgrid7processEv+0xcca>
    5890:	ae cb       	rjmp	.-2212   	; 0x4fee <_ZN5Xgrid7processEv+0x426>
    5892:	c8 ca       	rjmp	.-2672   	; 0x4e24 <_ZN5Xgrid7processEv+0x25c>
                                        buffer->flags |= XGRID_BUFFER_UNIQUE;
                                }
                                else
                                {
                                        // drop remainder
                                        nodes[i].drop_chars = (buffer->hdr.size+3) - buffer->ptr;
    5894:	f2 01       	movw	r30, r4
    5896:	ee 0f       	add	r30, r30
    5898:	ff 1f       	adc	r31, r31
    589a:	e4 0d       	add	r30, r4
    589c:	f5 1d       	adc	r31, r5
    589e:	ee 0f       	add	r30, r30
    58a0:	ff 1f       	adc	r31, r31
    58a2:	ee 0f       	add	r30, r30
    58a4:	ff 1f       	adc	r31, r31
    58a6:	ea 0d       	add	r30, r10
    58a8:	fb 1d       	adc	r31, r11
    58aa:	d8 01       	movw	r26, r16
    58ac:	11 96       	adiw	r26, 0x01	; 1
    58ae:	8d 91       	ld	r24, X+
    58b0:	9c 91       	ld	r25, X
    58b2:	12 97       	sbiw	r26, 0x02	; 2
    58b4:	03 96       	adiw	r24, 0x03	; 3
    58b6:	1d 96       	adiw	r26, 0x0d	; 13
    58b8:	2d 91       	ld	r18, X+
    58ba:	3c 91       	ld	r19, X
    58bc:	1e 97       	sbiw	r26, 0x0e	; 14
    58be:	82 1b       	sub	r24, r18
    58c0:	93 0b       	sbc	r25, r19
    58c2:	81 a3       	lds	r24, 0x51
    58c4:	92 a3       	lds	r25, 0x52
                                        
                                        // release buffer
                                        buffer->flags &= ~ XGRID_BUFFER_IN_USE;
    58c6:	51 96       	adiw	r26, 0x11	; 17
    58c8:	8c 91       	ld	r24, X
    58ca:	51 97       	sbiw	r26, 0x11	; 17
    58cc:	8c 7f       	andi	r24, 0xFC	; 252
    58ce:	51 96       	adiw	r26, 0x11	; 17
    58d0:	8c 93       	st	X, r24
    58d2:	51 97       	sbiw	r26, 0x11	; 17
    58d4:	8b cb       	rjmp	.-2282   	; 0x4fec <_ZN5Xgrid7processEv+0x424>
                        {
                                buffer->buffer[buffer->ptr++ - sizeof(xgrid_header_t)] = nodes[i].stream->get();
                        }
                        
                        // are we done?
                        if (buffer->ptr >= buffer->hdr.size+3)
    58d6:	f8 01       	movw	r30, r16
    58d8:	61 81       	ldd	r22, Z+1	; 0x01
    58da:	72 81       	ldd	r23, Z+2	; 0x02
    58dc:	9b 01       	movw	r18, r22
    58de:	2d 5f       	subi	r18, 0xFD	; 253
    58e0:	3f 4f       	sbci	r19, 0xFF	; 255
    58e2:	85 85       	ldd	r24, Z+13	; 0x0d
    58e4:	96 85       	ldd	r25, Z+14	; 0x0e
    58e6:	82 17       	cp	r24, r18
    58e8:	93 07       	cpc	r25, r19
    58ea:	08 f0       	brcs	.+2      	; 0x58ee <_ZN5Xgrid7processEv+0xd26>
    58ec:	20 cb       	rjmp	.-2496   	; 0x4f2e <_ZN5Xgrid7processEv+0x366>
    58ee:	7f cb       	rjmp	.-2306   	; 0x4fee <_ZN5Xgrid7processEv+0x426>
        else
        {
                // invalid state, go back to idle, do not collect $200
                state = XGRID_STATE_IDLE;
        }
}
    58f0:	ce 5e       	subi	r28, 0xEE	; 238
    58f2:	dd 4f       	sbci	r29, 0xFD	; 253
    58f4:	cd bf       	out	0x3d, r28	; 61
    58f6:	de bf       	out	0x3e, r29	; 62
    58f8:	df 91       	pop	r29
    58fa:	cf 91       	pop	r28
    58fc:	1f 91       	pop	r17
    58fe:	0f 91       	pop	r16
    5900:	ff 90       	pop	r15
    5902:	ef 90       	pop	r14
    5904:	df 90       	pop	r13
    5906:	cf 90       	pop	r12
    5908:	bf 90       	pop	r11
    590a:	af 90       	pop	r10
    590c:	9f 90       	pop	r9
    590e:	8f 90       	pop	r8
    5910:	7f 90       	pop	r7
    5912:	6f 90       	pop	r6
    5914:	5f 90       	pop	r5
    5916:	4f 90       	pop	r4
    5918:	3f 90       	pop	r3
    591a:	2f 90       	pop	r2
    591c:	08 95       	ret

0000591e <init_servo>:
		2. supply a scaled clock source that will drive this counter (hopefully 32MHz/64 = 500 kHz)
		3. initialize single-slope PWM and output it to pin 40 (OC1A, portEpin4) and/or pin 41 (OC1B, portEpin5)
	*/
	
	// initialize the two servo data-pins as output pins
	PORTE.DIRSET = PIN4_bm; // (PWM_1) make pin E4 writeable, by default all initialize as readable
    591e:	e0 e8       	ldi	r30, 0x80	; 128
    5920:	f6 e0       	ldi	r31, 0x06	; 6
    5922:	80 e1       	ldi	r24, 0x10	; 16
    5924:	81 83       	std	Z+1, r24	; 0x01
	PORTE.DIRSET = PIN5_bm; // (PWM_2) make pin E5 writeable, by default all initialize as readable
    5926:	80 e2       	ldi	r24, 0x20	; 32
    5928:	81 83       	std	Z+1, r24	; 0x01
	
	if(SERVO_MODE == QUICK_SERVO)
    592a:	80 91 9f 2b 	lds	r24, 0x2B9F
    592e:	88 23       	and	r24, r24
    5930:	f1 f4       	brne	.+60     	; 0x596e <init_servo+0x50>
	{
		// Begin a timer-counter that will reach TOP (overflow) every 20ms (servo signal is 50 Hz)
		TCE1.PER = 10126; // Set period (10126 ticks@~500KHz -> ~20.0ms) ** CALIBRATED (w/ opt.lvl -O1), meas abt. 506.27 ticks/ms **
    5932:	e0 e4       	ldi	r30, 0x40	; 64
    5934:	fa e0       	ldi	r31, 0x0A	; 10
    5936:	8e e8       	ldi	r24, 0x8E	; 142
    5938:	97 e2       	ldi	r25, 0x27	; 39
    593a:	86 a3       	lds	r24, 0x56
    593c:	97 a3       	lds	r25, 0x57
		//TC_SetPeriod( &TCE1, 9999 );  // Set period (10000 ticks@500KHz = 20ms)  ** CORRECT, but NOT CALIBRATED **
		
		TCE1.CCA = 785;	//initially fill the CCA register with a value that is calibrated to zero the servo (~1.5 ms on time)	[PWM1]
    593e:	81 e1       	ldi	r24, 0x11	; 17
    5940:	93 e0       	ldi	r25, 0x03	; 3
    5942:	80 a7       	lds	r24, 0x70
    5944:	91 a7       	lds	r25, 0x71
		TCE1.CCB = 785;	//initially fill the CCB register with a value that is calibrated to zero the servo (~1.5 ms on time)	[PWM2]
    5946:	82 a7       	lds	r24, 0x72
    5948:	93 a7       	lds	r25, 0x73
		TCE1.CTRLA |= 0b00000101;		// Set clock and prescaler, 32MHz/64 = 500KHz
    594a:	80 91 40 0a 	lds	r24, 0x0A40
    594e:	85 60       	ori	r24, 0x05	; 5
    5950:	80 93 40 0a 	sts	0x0A40, r24
		TCE1.CTRLB |= 0b00000011;		// enable Single Slope PWM (Waveform Generation Mode)
    5954:	80 91 41 0a 	lds	r24, 0x0A41
    5958:	83 60       	ori	r24, 0x03	; 3
    595a:	81 83       	std	Z+1, r24	; 0x01
		TCE1.CTRLB |= 0b00010000;		// enable waveform output on OC1A (setting this in WGM of operation overrides the port output register for this output pin: portEpin4)
    595c:	80 91 41 0a 	lds	r24, 0x0A41
    5960:	80 61       	ori	r24, 0x10	; 16
    5962:	81 83       	std	Z+1, r24	; 0x01
		TCE1.CTRLB |= 0b00100000;		// enable waveform output on OC1B (setting this in WGM of operation overrides the port output register for this output pin: portEpin5)
    5964:	80 91 41 0a 	lds	r24, 0x0A41
    5968:	80 62       	ori	r24, 0x20	; 32
    596a:	81 83       	std	Z+1, r24	; 0x01
    596c:	08 95       	ret
	}	
	
	else if(SERVO_MODE == SMART_SERVO)
    596e:	81 30       	cpi	r24, 0x01	; 1
    5970:	a9 f4       	brne	.+42     	; 0x599c <init_servo+0x7e>
	{
		// Begin a clock counter that will trigger an overflow-interrupt (TCE1) every 20ms -> (50 Hz)
		TCE1.PER = 10126;  // Set period (10126 ticks@~500KHz -> ~20.0ms) ** CALIBRATED (w/ opt.lvl -O1), meas abt. 506.27 ticks/ms **	
    5972:	e0 e4       	ldi	r30, 0x40	; 64
    5974:	fa e0       	ldi	r31, 0x0A	; 10
    5976:	8e e8       	ldi	r24, 0x8E	; 142
    5978:	97 e2       	ldi	r25, 0x27	; 39
    597a:	86 a3       	lds	r24, 0x56
    597c:	97 a3       	lds	r25, 0x57
		TCE1.INTCTRLA |= 0b00000010;	// set a medium-level interrupt on overflow
    597e:	20 91 46 0a 	lds	r18, 0x0A46
    5982:	22 60       	ori	r18, 0x02	; 2
    5984:	26 83       	std	Z+6, r18	; 0x06
		TCE1.CTRLA |= 0b00000101;		// Set clock and prescaler, 32MHz/64 = 500KHz
    5986:	20 91 40 0a 	lds	r18, 0x0A40
    598a:	25 60       	ori	r18, 0x05	; 5
    598c:	20 93 40 0a 	sts	0x0A40, r18
		TCE1.PER = 10126;  // Set period (10126 ticks@~500KHz -> ~20.0ms) ** CALIBRATED (w/ opt.lvl -O1), meas abt. 506.27 ticks/ms **
    5990:	86 a3       	lds	r24, 0x56
    5992:	97 a3       	lds	r25, 0x57
		TCE1.INTCTRLB |= 0b00000010;  // set a medium-level interrupt on CCA compare
    5994:	80 91 47 0a 	lds	r24, 0x0A47
    5998:	82 60       	ori	r24, 0x02	; 2
    599a:	87 83       	std	Z+7, r24	; 0x07
    599c:	08 95       	ret

0000599e <disable_servo>:
	}	
}	

void disable_servo()
{
	if(SERVO_MODE == QUICK_SERVO)
    599e:	80 91 9f 2b 	lds	r24, 0x2B9F
    59a2:	88 23       	and	r24, r24
    59a4:	51 f4       	brne	.+20     	; 0x59ba <disable_servo+0x1c>
	{
		TCE1.CTRLB &= ~0b00010000;		// disable waveform output on OC1A (setting this in WGM of operation overrides the port output register for this output pin: portEpin4)
    59a6:	e0 e4       	ldi	r30, 0x40	; 64
    59a8:	fa e0       	ldi	r31, 0x0A	; 10
    59aa:	80 91 41 0a 	lds	r24, 0x0A41
    59ae:	8f 7e       	andi	r24, 0xEF	; 239
    59b0:	81 83       	std	Z+1, r24	; 0x01
		TCE1.CTRLB &= ~0b00100000;		// disable waveform output on OC1B (setting this in WGM of operation overrides the port output register for this output pin: portEpin5)
    59b2:	80 91 41 0a 	lds	r24, 0x0A41
    59b6:	8f 7d       	andi	r24, 0xDF	; 223
    59b8:	81 83       	std	Z+1, r24	; 0x01
    59ba:	08 95       	ret

000059bc <enable_servo>:
	}
}

void enable_servo()
{
	if(SERVO_MODE == QUICK_SERVO)
    59bc:	80 91 9f 2b 	lds	r24, 0x2B9F
    59c0:	88 23       	and	r24, r24
    59c2:	51 f4       	brne	.+20     	; 0x59d8 <enable_servo+0x1c>
	{
		TCE1.CTRLB |= 0b00010000;		// enable waveform output on OC1A (setting this in WGM of operation overrides the port output register for this output pin: portEpin4)
    59c4:	e0 e4       	ldi	r30, 0x40	; 64
    59c6:	fa e0       	ldi	r31, 0x0A	; 10
    59c8:	80 91 41 0a 	lds	r24, 0x0A41
    59cc:	80 61       	ori	r24, 0x10	; 16
    59ce:	81 83       	std	Z+1, r24	; 0x01
		TCE1.CTRLB |= 0b00100000;		// enable waveform output on OC1B (setting this in WGM of operation overrides the port output register for this output pin: portEpin5)
    59d0:	80 91 41 0a 	lds	r24, 0x0A41
    59d4:	80 62       	ori	r24, 0x20	; 32
    59d6:	81 83       	std	Z+1, r24	; 0x01
    59d8:	08 95       	ret

000059da <set_servo_position>:

	return compare_value;
}

void set_servo_position(float degrees)
{
    59da:	cf 92       	push	r12
    59dc:	df 92       	push	r13
    59de:	ef 92       	push	r14
    59e0:	ff 92       	push	r15
    59e2:	6b 01       	movw	r12, r22
    59e4:	7c 01       	movw	r14, r24
	if(SERVO_MODE == QUICK_SERVO)
    59e6:	80 91 9f 2b 	lds	r24, 0x2B9F
    59ea:	88 23       	and	r24, r24
    59ec:	91 f5       	brne	.+100    	; 0x5a52 <set_servo_position+0x78>
	{
		if(servo_current_pos_deg == degrees)
    59ee:	60 91 a1 2b 	lds	r22, 0x2BA1
    59f2:	70 91 a2 2b 	lds	r23, 0x2BA2
    59f6:	88 27       	eor	r24, r24
    59f8:	77 fd       	sbrc	r23, 7
    59fa:	80 95       	com	r24
    59fc:	98 2f       	mov	r25, r24
    59fe:	0e 94 40 30 	call	0x6080	; 0x6080 <__floatsisf>
    5a02:	a7 01       	movw	r20, r14
    5a04:	96 01       	movw	r18, r12
    5a06:	0e 94 6d 2f 	call	0x5eda	; 0x5eda <__cmpsf2>
    5a0a:	88 23       	and	r24, r24
    5a0c:	11 f1       	breq	.+68     	; 0x5a52 <set_servo_position+0x78>

uint16_t servo_CNT_compare_from_postion(float degrees)
{
	uint16_t compare_value;		// this value will ultimately fill the PER register of the timer/counter

	compare_value = 785 + degrees*5; // ** CALIBRATED (w/ opt.lvl -O1) for +/- 90 degrees and ZEROED when servo_position_deg==0 **
    5a0e:	c7 01       	movw	r24, r14
    5a10:	b6 01       	movw	r22, r12
    5a12:	20 e0       	ldi	r18, 0x00	; 0
    5a14:	30 e0       	ldi	r19, 0x00	; 0
    5a16:	40 ea       	ldi	r20, 0xA0	; 160
    5a18:	50 e4       	ldi	r21, 0x40	; 64
    5a1a:	0e 94 c2 31 	call	0x6384	; 0x6384 <__mulsf3>
    5a1e:	20 e0       	ldi	r18, 0x00	; 0
    5a20:	30 e4       	ldi	r19, 0x40	; 64
    5a22:	44 e4       	ldi	r20, 0x44	; 68
    5a24:	54 e4       	ldi	r21, 0x44	; 68
    5a26:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__addsf3>
    5a2a:	0e 94 12 30 	call	0x6024	; 0x6024 <__fixunssfsi>
    5a2e:	dc 01       	movw	r26, r24
    5a30:	cb 01       	movw	r24, r22
			return;
		else
		{ 
			uint16_t compare_value = servo_CNT_compare_from_postion(degrees);		

			TCE1.CCABUF = compare_value;	// fill the clock-compare A-buffer with the servo position val (for pin OC1A)
    5a32:	e0 e4       	ldi	r30, 0x40	; 64
    5a34:	fa e0       	ldi	r31, 0x0A	; 10
    5a36:	80 af       	sts	0x70, r24
    5a38:	91 af       	sts	0x71, r25
											// CCABUF will be loaded into CCA on the next UPDATE event (counter value = BOTTOM)
	
			TCE1.CCBBUF = compare_value;	// fill the clock-compare B-buffer with the servo position val (for pin OC1B)
    5a3a:	82 af       	sts	0x72, r24
    5a3c:	93 af       	sts	0x73, r25
											// CCBBUF will be loaded into CCB on the next UPDATE event (counter value = BOTTOM)								
		
			servo_current_pos_deg = degrees;
    5a3e:	c7 01       	movw	r24, r14
    5a40:	b6 01       	movw	r22, r12
    5a42:	0e 94 0d 30 	call	0x601a	; 0x601a <__fixsfsi>
    5a46:	dc 01       	movw	r26, r24
    5a48:	cb 01       	movw	r24, r22
    5a4a:	80 93 a1 2b 	sts	0x2BA1, r24
    5a4e:	90 93 a2 2b 	sts	0x2BA2, r25
	}
	
	else
		/* not yet configured for SMART_SERVO */
		return;
}	
    5a52:	ff 90       	pop	r15
    5a54:	ef 90       	pop	r14
    5a56:	df 90       	pop	r13
    5a58:	cf 90       	pop	r12
    5a5a:	08 95       	ret

00005a5c <__vector_53>:

ISR(TCE1_OVF_vect)	// this interrupt is only executed in SMART_SERVO mode
{
    5a5c:	1f 92       	push	r1
    5a5e:	0f 92       	push	r0
    5a60:	0f b6       	in	r0, 0x3f	; 63
    5a62:	0f 92       	push	r0
    5a64:	0b b6       	in	r0, 0x3b	; 59
    5a66:	0f 92       	push	r0
    5a68:	11 24       	eor	r1, r1
    5a6a:	2f 93       	push	r18
    5a6c:	3f 93       	push	r19
    5a6e:	4f 93       	push	r20
    5a70:	5f 93       	push	r21
    5a72:	6f 93       	push	r22
    5a74:	7f 93       	push	r23
    5a76:	8f 93       	push	r24
    5a78:	9f 93       	push	r25
    5a7a:	af 93       	push	r26
    5a7c:	bf 93       	push	r27
    5a7e:	ef 93       	push	r30
    5a80:	ff 93       	push	r31
	PORTB.OUT |= PIN1_bm; //(YELLOW LED) turn the bit on (for debugging, remove this line when complete)
    5a82:	e0 e2       	ldi	r30, 0x20	; 32
    5a84:	f6 e0       	ldi	r31, 0x06	; 6
    5a86:	84 81       	ldd	r24, Z+4	; 0x04
    5a88:	82 60       	ori	r24, 0x02	; 2
    5a8a:	84 83       	std	Z+4, r24	; 0x04
	
	// begin the HIGH-pulse to the servo(s):
	PORTE.OUT |= PIN4_bm; // (PWM_1) set pin on
    5a8c:	e0 e8       	ldi	r30, 0x80	; 128
    5a8e:	f6 e0       	ldi	r31, 0x06	; 6
    5a90:	84 81       	ldd	r24, Z+4	; 0x04
    5a92:	80 61       	ori	r24, 0x10	; 16
    5a94:	84 83       	std	Z+4, r24	; 0x04
	PORTE.OUT |= PIN5_bm; // (PWM_2) set pin on
    5a96:	84 81       	ldd	r24, Z+4	; 0x04
    5a98:	80 62       	ori	r24, 0x20	; 32
    5a9a:	84 83       	std	Z+4, r24	; 0x04
	
	// calculate how long the HIGH-pulse to the servo should last:
	set_servo_position(smart_servo_pos_deg);
    5a9c:	60 91 60 20 	lds	r22, 0x2060
    5aa0:	70 91 61 20 	lds	r23, 0x2061
    5aa4:	88 27       	eor	r24, r24
    5aa6:	77 fd       	sbrc	r23, 7
    5aa8:	80 95       	com	r24
    5aaa:	98 2f       	mov	r25, r24
    5aac:	0e 94 40 30 	call	0x6080	; 0x6080 <__floatsisf>
    5ab0:	0e 94 ed 2c 	call	0x59da	; 0x59da <set_servo_position>
	
}
    5ab4:	ff 91       	pop	r31
    5ab6:	ef 91       	pop	r30
    5ab8:	bf 91       	pop	r27
    5aba:	af 91       	pop	r26
    5abc:	9f 91       	pop	r25
    5abe:	8f 91       	pop	r24
    5ac0:	7f 91       	pop	r23
    5ac2:	6f 91       	pop	r22
    5ac4:	5f 91       	pop	r21
    5ac6:	4f 91       	pop	r20
    5ac8:	3f 91       	pop	r19
    5aca:	2f 91       	pop	r18
    5acc:	0f 90       	pop	r0
    5ace:	0b be       	out	0x3b, r0	; 59
    5ad0:	0f 90       	pop	r0
    5ad2:	0f be       	out	0x3f, r0	; 63
    5ad4:	0f 90       	pop	r0
    5ad6:	1f 90       	pop	r1
    5ad8:	18 95       	reti

00005ada <__vector_55>:

ISR(TCE1_CCA_vect)	// this interrupt is only executed in SMART_SERVO mode
{
    5ada:	1f 92       	push	r1
    5adc:	0f 92       	push	r0
    5ade:	0f b6       	in	r0, 0x3f	; 63
    5ae0:	0f 92       	push	r0
    5ae2:	0b b6       	in	r0, 0x3b	; 59
    5ae4:	0f 92       	push	r0
    5ae6:	11 24       	eor	r1, r1
    5ae8:	8f 93       	push	r24
    5aea:	ef 93       	push	r30
    5aec:	ff 93       	push	r31
    PORTB.OUT &= ~PIN1_bm; //(YELLOW LED) turn the bit off (for debugging, remove this line when complete)
    5aee:	e0 e2       	ldi	r30, 0x20	; 32
    5af0:	f6 e0       	ldi	r31, 0x06	; 6
    5af2:	84 81       	ldd	r24, Z+4	; 0x04
    5af4:	8d 7f       	andi	r24, 0xFD	; 253
    5af6:	84 83       	std	Z+4, r24	; 0x04
	
	// end the HIGH-pulse to the servo(s):
	PORTE.OUT &= ~PIN4_bm; // (PWM_1) set pin off
    5af8:	e0 e8       	ldi	r30, 0x80	; 128
    5afa:	f6 e0       	ldi	r31, 0x06	; 6
    5afc:	84 81       	ldd	r24, Z+4	; 0x04
    5afe:	8f 7e       	andi	r24, 0xEF	; 239
    5b00:	84 83       	std	Z+4, r24	; 0x04
	PORTE.OUT &= ~PIN5_bm; // (PWM_2) set pin off
    5b02:	84 81       	ldd	r24, Z+4	; 0x04
    5b04:	8f 7d       	andi	r24, 0xDF	; 223
    5b06:	84 83       	std	Z+4, r24	; 0x04
	
	// clear the interrupt:
	//TC1_SetOverflowIntLevel( &TCE1, TC_OVFINTLVL_OFF_gc ); // Clear Interrupt on Overflow (is this necessary??)
	// stop counting on TCE1:
	//TC1_ConfigClockSource( &TCE1, TC_CLKSEL_OFF_gc );      // Stop clock
}
    5b08:	ff 91       	pop	r31
    5b0a:	ef 91       	pop	r30
    5b0c:	8f 91       	pop	r24
    5b0e:	0f 90       	pop	r0
    5b10:	0b be       	out	0x3b, r0	; 59
    5b12:	0f 90       	pop	r0
    5b14:	0f be       	out	0x3f, r0	; 63
    5b16:	0f 90       	pop	r0
    5b18:	1f 90       	pop	r1
    5b1a:	18 95       	reti

00005b1c <init_api>:

// globals
uint8_t api_version = 0;

uint8_t init_api(void)
{
    5b1c:	cf 93       	push	r28
    5b1e:	df 93       	push	r29
    5b20:	00 d0       	rcall	.+0      	; 0x5b22 <init_api+0x6>
    5b22:	0f 92       	push	r0
    5b24:	cd b7       	in	r28, 0x3d	; 61
    5b26:	de b7       	in	r29, 0x3e	; 62
        if (api_version > 0)
    5b28:	80 91 a0 2b 	lds	r24, 0x2BA0
    5b2c:	88 23       	and	r24, r24
    5b2e:	a9 f4       	brne	.+42     	; 0x5b5a <init_api+0x3e>
                return XB_SUCCESS;
        
        struct xboot_jump_table_s jp;
        
        *((uint32_t *)(&jp)) = PGM_READ_DWORD(JUMP_TABLE_LOCATION);
    5b30:	88 ee       	ldi	r24, 0xE8	; 232
    5b32:	91 e0       	ldi	r25, 0x01	; 1
    5b34:	a2 e0       	ldi	r26, 0x02	; 2
    5b36:	b0 e0       	ldi	r27, 0x00	; 0
    5b38:	ab bf       	out	0x3b, r26	; 59
    5b3a:	fc 01       	movw	r30, r24
    5b3c:	87 91       	elpm	r24, Z+
    5b3e:	97 91       	elpm	r25, Z+
    5b40:	a7 91       	elpm	r26, Z+
    5b42:	b6 91       	elpm	r27, Z
        
        if ((jp.id[0] == 'X') && (jp.id[1] == 'B') && (jp.id[2] == 'j'))
    5b44:	88 35       	cpi	r24, 0x58	; 88
    5b46:	39 f4       	brne	.+14     	; 0x5b56 <init_api+0x3a>
    5b48:	92 34       	cpi	r25, 0x42	; 66
    5b4a:	29 f4       	brne	.+10     	; 0x5b56 <init_api+0x3a>
    5b4c:	aa 36       	cpi	r26, 0x6A	; 106
    5b4e:	19 f4       	brne	.+6      	; 0x5b56 <init_api+0x3a>
        {
                api_version = jp.ver;
    5b50:	b0 93 a0 2b 	sts	0x2BA0, r27
    5b54:	02 c0       	rjmp	.+4      	; 0x5b5a <init_api+0x3e>
                return XB_SUCCESS;
        }
        
        return XB_ERR_NO_API;
    5b56:	81 e0       	ldi	r24, 0x01	; 1
    5b58:	01 c0       	rjmp	.+2      	; 0x5b5c <init_api+0x40>
uint8_t api_version = 0;

uint8_t init_api(void)
{
        if (api_version > 0)
                return XB_SUCCESS;
    5b5a:	80 e0       	ldi	r24, 0x00	; 0
                api_version = jp.ver;
                return XB_SUCCESS;
        }
        
        return XB_ERR_NO_API;
}
    5b5c:	24 96       	adiw	r28, 0x04	; 4
    5b5e:	cd bf       	out	0x3d, r28	; 61
    5b60:	de bf       	out	0x3e, r29	; 62
    5b62:	df 91       	pop	r29
    5b64:	cf 91       	pop	r28
    5b66:	08 95       	ret

00005b68 <xboot_write_application_page>:
        
        return XB_ERR_NOT_FOUND;
}

uint8_t xboot_write_application_page(uint32_t address, uint8_t *data, uint8_t erase)
{
    5b68:	bf 92       	push	r11
    5b6a:	cf 92       	push	r12
    5b6c:	df 92       	push	r13
    5b6e:	ef 92       	push	r14
    5b70:	ff 92       	push	r15
    5b72:	0f 93       	push	r16
    5b74:	1f 93       	push	r17
    5b76:	cf 93       	push	r28
    5b78:	df 93       	push	r29
    5b7a:	0f 92       	push	r0
    5b7c:	cd b7       	in	r28, 0x3d	; 61
    5b7e:	de b7       	in	r29, 0x3e	; 62
    5b80:	6b 01       	movw	r12, r22
    5b82:	7c 01       	movw	r14, r24
    5b84:	8a 01       	movw	r16, r20
        uint8_t ret = init_api();
    5b86:	29 83       	std	Y+1, r18	; 0x01
    5b88:	0e 94 8e 2d 	call	0x5b1c	; 0x5b1c <init_api>
        
        #ifdef NEED_EIND
        uint8_t saved_eind;
        #endif // NEED_EIND
        
        if (ret != XB_SUCCESS)
    5b8c:	29 81       	ldd	r18, Y+1	; 0x01
    5b8e:	88 23       	and	r24, r24
    5b90:	e1 f4       	brne	.+56     	; 0x5bca <xboot_write_application_page+0x62>
                return ret;
        
        if (api_version == 1)
    5b92:	30 91 a0 2b 	lds	r19, 0x2BA0
    5b96:	31 30       	cpi	r19, 0x01	; 1
    5b98:	b9 f4       	brne	.+46     	; 0x5bc8 <xboot_write_application_page+0x60>
        {
                ptr = PGM_READ_WORD(JUMP_TABLE_INDEX(3));
    5b9a:	82 ef       	ldi	r24, 0xF2	; 242
    5b9c:	91 e0       	ldi	r25, 0x01	; 1
    5b9e:	a2 e0       	ldi	r26, 0x02	; 2
    5ba0:	b0 e0       	ldi	r27, 0x00	; 0
    5ba2:	ab bf       	out	0x3b, r26	; 59
    5ba4:	fc 01       	movw	r30, r24
    5ba6:	a7 91       	elpm	r26, Z+
    5ba8:	b6 91       	elpm	r27, Z
                if (ptr == 0 || ptr == 0xffff)
    5baa:	cd 01       	movw	r24, r26
    5bac:	01 97       	sbiw	r24, 0x01	; 1
    5bae:	4f ef       	ldi	r20, 0xFF	; 255
    5bb0:	8e 3f       	cpi	r24, 0xFE	; 254
    5bb2:	94 07       	cpc	r25, r20
    5bb4:	48 f4       	brcc	.+18     	; 0x5bc8 <xboot_write_application_page+0x60>
                        return XB_ERR_NOT_FOUND;
                
                #ifdef NEED_EIND
                saved_eind = EIND;
    5bb6:	bc b6       	in	r11, 0x3c	; 60
                EIND = PROGMEM_SIZE >> 17;
    5bb8:	3c bf       	out	0x3c, r19	; 60
                #endif // NEED_EIND
                
                ret = ( (uint8_t(*)(uint32_t, uint8_t *, uint8_t)) ptr )(address, data, erase);
    5bba:	c7 01       	movw	r24, r14
    5bbc:	b6 01       	movw	r22, r12
    5bbe:	a8 01       	movw	r20, r16
    5bc0:	fd 01       	movw	r30, r26
    5bc2:	19 95       	eicall
                
                #ifdef NEED_EIND
                EIND = saved_eind;
    5bc4:	bc be       	out	0x3c, r11	; 60
                #endif // NEED_EIND
                
                return ret;
    5bc6:	01 c0       	rjmp	.+2      	; 0x5bca <xboot_write_application_page+0x62>
        
        if (api_version == 1)
        {
                ptr = PGM_READ_WORD(JUMP_TABLE_INDEX(3));
                if (ptr == 0 || ptr == 0xffff)
                        return XB_ERR_NOT_FOUND;
    5bc8:	82 e0       	ldi	r24, 0x02	; 2
                
                return ret;
        }
        
        return XB_ERR_NOT_FOUND;
}
    5bca:	0f 90       	pop	r0
    5bcc:	df 91       	pop	r29
    5bce:	cf 91       	pop	r28
    5bd0:	1f 91       	pop	r17
    5bd2:	0f 91       	pop	r16
    5bd4:	ff 90       	pop	r15
    5bd6:	ef 90       	pop	r14
    5bd8:	df 90       	pop	r13
    5bda:	cf 90       	pop	r12
    5bdc:	bf 90       	pop	r11
    5bde:	08 95       	ret

00005be0 <xboot_app_temp_write_page>:
        
        return XB_ERR_NOT_FOUND;
}

uint8_t xboot_app_temp_write_page(uint32_t addr, uint8_t *data, uint8_t erase)
{
    5be0:	cf 92       	push	r12
    5be2:	df 92       	push	r13
    5be4:	ef 92       	push	r14
    5be6:	ff 92       	push	r15
    5be8:	1f 93       	push	r17
    5bea:	cf 93       	push	r28
    5bec:	df 93       	push	r29
    5bee:	00 d0       	rcall	.+0      	; 0x5bf0 <xboot_app_temp_write_page+0x10>
    5bf0:	cd b7       	in	r28, 0x3d	; 61
    5bf2:	de b7       	in	r29, 0x3e	; 62
    5bf4:	6b 01       	movw	r12, r22
    5bf6:	7c 01       	movw	r14, r24
        uint8_t ret = init_api();
    5bf8:	2b 83       	std	Y+3, r18	; 0x03
    5bfa:	49 83       	std	Y+1, r20	; 0x01
    5bfc:	5a 83       	std	Y+2, r21	; 0x02
    5bfe:	0e 94 8e 2d 	call	0x5b1c	; 0x5b1c <init_api>
        
        #ifdef NEED_EIND
        uint8_t saved_eind;
        #endif // NEED_EIND
        
        if (ret != XB_SUCCESS)
    5c02:	2b 81       	ldd	r18, Y+3	; 0x03
    5c04:	49 81       	ldd	r20, Y+1	; 0x01
    5c06:	5a 81       	ldd	r21, Y+2	; 0x02
    5c08:	88 23       	and	r24, r24
    5c0a:	21 f5       	brne	.+72     	; 0x5c54 <xboot_app_temp_write_page+0x74>
                return ret;
        
        if (api_version == 1)
    5c0c:	30 91 a0 2b 	lds	r19, 0x2BA0
    5c10:	31 30       	cpi	r19, 0x01	; 1
    5c12:	f9 f4       	brne	.+62     	; 0x5c52 <xboot_app_temp_write_page+0x72>
        {
                ptr = PGM_READ_WORD(JUMP_TABLE_INDEX(6));
    5c14:	88 ef       	ldi	r24, 0xF8	; 248
    5c16:	91 e0       	ldi	r25, 0x01	; 1
    5c18:	a2 e0       	ldi	r26, 0x02	; 2
    5c1a:	b0 e0       	ldi	r27, 0x00	; 0
    5c1c:	ab bf       	out	0x3b, r26	; 59
    5c1e:	fc 01       	movw	r30, r24
    5c20:	a7 91       	elpm	r26, Z+
    5c22:	b6 91       	elpm	r27, Z
                if (ptr == 0 || ptr == 0xffff)
    5c24:	cd 01       	movw	r24, r26
    5c26:	01 97       	sbiw	r24, 0x01	; 1
    5c28:	6f ef       	ldi	r22, 0xFF	; 255
    5c2a:	8e 3f       	cpi	r24, 0xFE	; 254
    5c2c:	96 07       	cpc	r25, r22
    5c2e:	48 f0       	brcs	.+18     	; 0x5c42 <xboot_app_temp_write_page+0x62>
                {
                        ret = xboot_write_application_page(addr + XB_APP_TEMP_START, data, erase);
    5c30:	c7 01       	movw	r24, r14
    5c32:	b6 01       	movw	r22, r12
    5c34:	60 50       	subi	r22, 0x00	; 0
    5c36:	70 40       	sbci	r23, 0x00	; 0
    5c38:	8f 4f       	sbci	r24, 0xFF	; 255
    5c3a:	9f 4f       	sbci	r25, 0xFF	; 255
    5c3c:	0e 94 b4 2d 	call	0x5b68	; 0x5b68 <xboot_write_application_page>
                        return ret;
    5c40:	09 c0       	rjmp	.+18     	; 0x5c54 <xboot_app_temp_write_page+0x74>
                }
                
                #ifdef NEED_EIND
                saved_eind = EIND;
    5c42:	1c b7       	in	r17, 0x3c	; 60
                EIND = PROGMEM_SIZE >> 17;
    5c44:	3c bf       	out	0x3c, r19	; 60
                #endif // NEED_EIND
                
                ret = ( (uint8_t(*)(uint32_t, uint8_t *, uint8_t)) ptr )(addr, data, erase);
    5c46:	c7 01       	movw	r24, r14
    5c48:	b6 01       	movw	r22, r12
    5c4a:	fd 01       	movw	r30, r26
    5c4c:	19 95       	eicall
                
                #ifdef NEED_EIND
                EIND = saved_eind;
    5c4e:	1c bf       	out	0x3c, r17	; 60
                #endif // NEED_EIND
                
                return ret;
    5c50:	01 c0       	rjmp	.+2      	; 0x5c54 <xboot_app_temp_write_page+0x74>
        }
        
        return XB_ERR_NOT_FOUND;
    5c52:	82 e0       	ldi	r24, 0x02	; 2
}
    5c54:	23 96       	adiw	r28, 0x03	; 3
    5c56:	cd bf       	out	0x3d, r28	; 61
    5c58:	de bf       	out	0x3e, r29	; 62
    5c5a:	df 91       	pop	r29
    5c5c:	cf 91       	pop	r28
    5c5e:	1f 91       	pop	r17
    5c60:	ff 90       	pop	r15
    5c62:	ef 90       	pop	r14
    5c64:	df 90       	pop	r13
    5c66:	cf 90       	pop	r12
    5c68:	08 95       	ret

00005c6a <xboot_app_crc16_block>:
{
        return xboot_app_temp_crc16_block(0, XB_APP_TEMP_SIZE, crc);
}

uint8_t xboot_app_crc16_block(uint32_t start, uint32_t length, uint16_t *crc)
{
    5c6a:	8f 92       	push	r8
    5c6c:	9f 92       	push	r9
    5c6e:	af 92       	push	r10
    5c70:	bf 92       	push	r11
    5c72:	cf 92       	push	r12
    5c74:	df 92       	push	r13
    5c76:	ef 92       	push	r14
    5c78:	ff 92       	push	r15
    5c7a:	0f 93       	push	r16
    5c7c:	1f 93       	push	r17
    5c7e:	cf 93       	push	r28
    5c80:	df 93       	push	r29
    5c82:	4b 01       	movw	r8, r22
    5c84:	5c 01       	movw	r10, r24
    5c86:	69 01       	movw	r12, r18
    5c88:	7a 01       	movw	r14, r20
    5c8a:	e8 01       	movw	r28, r16
        uint16_t _crc = 0;
        uint8_t b;
        
        for (uint32_t i = 0; i < length; i++)
    5c8c:	40 e0       	ldi	r20, 0x00	; 0
    5c8e:	50 e0       	ldi	r21, 0x00	; 0
    5c90:	ba 01       	movw	r22, r20
        return xboot_app_temp_crc16_block(0, XB_APP_TEMP_SIZE, crc);
}

uint8_t xboot_app_crc16_block(uint32_t start, uint32_t length, uint16_t *crc)
{
        uint16_t _crc = 0;
    5c92:	20 e0       	ldi	r18, 0x00	; 0
    5c94:	30 e0       	ldi	r19, 0x00	; 0
        uint8_t b;
        
        for (uint32_t i = 0; i < length; i++)
    5c96:	1e c0       	rjmp	.+60     	; 0x5cd4 <xboot_app_crc16_block+0x6a>
        {
                b = PGM_READ_BYTE(start++);
    5c98:	ab bf       	out	0x3b, r26	; 59
    5c9a:	fc 01       	movw	r30, r24
    5c9c:	87 91       	elpm	r24, Z+
_crc16_update(uint16_t __crc, uint8_t __data)
{
	uint8_t __tmp;
	uint16_t __ret;

	__asm__ __volatile__ (
    5c9e:	28 27       	eor	r18, r24
    5ca0:	82 2f       	mov	r24, r18
    5ca2:	82 95       	swap	r24
    5ca4:	82 27       	eor	r24, r18
    5ca6:	08 2e       	mov	r0, r24
    5ca8:	86 95       	lsr	r24
    5caa:	86 95       	lsr	r24
    5cac:	80 25       	eor	r24, r0
    5cae:	08 2e       	mov	r0, r24
    5cb0:	86 95       	lsr	r24
    5cb2:	80 25       	eor	r24, r0
    5cb4:	87 70       	andi	r24, 0x07	; 7
    5cb6:	02 2e       	mov	r0, r18
    5cb8:	23 2f       	mov	r18, r19
    5cba:	86 95       	lsr	r24
    5cbc:	07 94       	ror	r0
    5cbe:	87 95       	ror	r24
    5cc0:	30 2d       	mov	r19, r0
    5cc2:	28 27       	eor	r18, r24
    5cc4:	06 94       	lsr	r0
    5cc6:	87 95       	ror	r24
    5cc8:	30 25       	eor	r19, r0
    5cca:	28 27       	eor	r18, r24
uint8_t xboot_app_crc16_block(uint32_t start, uint32_t length, uint16_t *crc)
{
        uint16_t _crc = 0;
        uint8_t b;
        
        for (uint32_t i = 0; i < length; i++)
    5ccc:	4f 5f       	subi	r20, 0xFF	; 255
    5cce:	5f 4f       	sbci	r21, 0xFF	; 255
    5cd0:	6f 4f       	sbci	r22, 0xFF	; 255
    5cd2:	7f 4f       	sbci	r23, 0xFF	; 255
    5cd4:	db 01       	movw	r26, r22
    5cd6:	ca 01       	movw	r24, r20
    5cd8:	88 0d       	add	r24, r8
    5cda:	99 1d       	adc	r25, r9
    5cdc:	aa 1d       	adc	r26, r10
    5cde:	bb 1d       	adc	r27, r11
    5ce0:	4c 15       	cp	r20, r12
    5ce2:	5d 05       	cpc	r21, r13
    5ce4:	6e 05       	cpc	r22, r14
    5ce6:	7f 05       	cpc	r23, r15
    5ce8:	09 f0       	breq	.+2      	; 0x5cec <xboot_app_crc16_block+0x82>
    5cea:	d6 cf       	rjmp	.-84     	; 0x5c98 <xboot_app_crc16_block+0x2e>
        {
                b = PGM_READ_BYTE(start++);
                _crc = _crc16_update(_crc, b);
        }
        
        *crc = _crc;
    5cec:	28 83       	st	Y, r18
    5cee:	39 83       	std	Y+1, r19	; 0x01
        
        return XB_SUCCESS;
}
    5cf0:	80 e0       	ldi	r24, 0x00	; 0
    5cf2:	df 91       	pop	r29
    5cf4:	cf 91       	pop	r28
    5cf6:	1f 91       	pop	r17
    5cf8:	0f 91       	pop	r16
    5cfa:	ff 90       	pop	r15
    5cfc:	ef 90       	pop	r14
    5cfe:	df 90       	pop	r13
    5d00:	cf 90       	pop	r12
    5d02:	bf 90       	pop	r11
    5d04:	af 90       	pop	r10
    5d06:	9f 90       	pop	r9
    5d08:	8f 90       	pop	r8
    5d0a:	08 95       	ret

00005d0c <xboot_app_temp_crc16_block>:
        
        return XB_ERR_NOT_FOUND;
}

uint8_t xboot_app_temp_crc16_block(uint32_t start, uint32_t length, uint16_t *crc)
{
    5d0c:	0f 93       	push	r16
    5d0e:	1f 93       	push	r17
        return xboot_app_crc16_block(XB_APP_TEMP_START + start, length, crc);
    5d10:	60 50       	subi	r22, 0x00	; 0
    5d12:	70 40       	sbci	r23, 0x00	; 0
    5d14:	8f 4f       	sbci	r24, 0xFF	; 255
    5d16:	9f 4f       	sbci	r25, 0xFF	; 255
    5d18:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <xboot_app_crc16_block>
}
    5d1c:	1f 91       	pop	r17
    5d1e:	0f 91       	pop	r16
    5d20:	08 95       	ret

00005d22 <xboot_app_temp_crc16>:

uint8_t xboot_app_temp_crc16(uint16_t *crc)
{
    5d22:	0f 93       	push	r16
    5d24:	1f 93       	push	r17
    5d26:	8c 01       	movw	r16, r24
        return xboot_app_temp_crc16_block(0, XB_APP_TEMP_SIZE, crc);
    5d28:	60 e0       	ldi	r22, 0x00	; 0
    5d2a:	70 e0       	ldi	r23, 0x00	; 0
    5d2c:	cb 01       	movw	r24, r22
    5d2e:	20 e0       	ldi	r18, 0x00	; 0
    5d30:	30 e0       	ldi	r19, 0x00	; 0
    5d32:	41 e0       	ldi	r20, 0x01	; 1
    5d34:	50 e0       	ldi	r21, 0x00	; 0
    5d36:	0e 94 86 2e 	call	0x5d0c	; 0x5d0c <xboot_app_temp_crc16_block>
}
    5d3a:	1f 91       	pop	r17
    5d3c:	0f 91       	pop	r16
    5d3e:	08 95       	ret

00005d40 <xboot_app_crc16>:
        
        return XB_SUCCESS;
}

uint8_t xboot_app_crc16(uint16_t *crc)
{
    5d40:	0f 93       	push	r16
    5d42:	1f 93       	push	r17
    5d44:	8c 01       	movw	r16, r24
        return xboot_app_crc16_block(0, XB_APP_SIZE, crc);
    5d46:	60 e0       	ldi	r22, 0x00	; 0
    5d48:	70 e0       	ldi	r23, 0x00	; 0
    5d4a:	cb 01       	movw	r24, r22
    5d4c:	20 e0       	ldi	r18, 0x00	; 0
    5d4e:	30 e0       	ldi	r19, 0x00	; 0
    5d50:	41 e0       	ldi	r20, 0x01	; 1
    5d52:	50 e0       	ldi	r21, 0x00	; 0
    5d54:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <xboot_app_crc16_block>
}
    5d58:	1f 91       	pop	r17
    5d5a:	0f 91       	pop	r16
    5d5c:	08 95       	ret

00005d5e <xboot_install_firmware>:

uint8_t xboot_install_firmware(uint16_t crc)
{
    5d5e:	cf 93       	push	r28
    5d60:	df 93       	push	r29
    5d62:	cd b7       	in	r28, 0x3d	; 61
    5d64:	de b7       	in	r29, 0x3e	; 62
    5d66:	c0 50       	subi	r28, 0x00	; 0
    5d68:	d2 40       	sbci	r29, 0x02	; 2
    5d6a:	cd bf       	out	0x3d, r28	; 61
    5d6c:	de bf       	out	0x3e, r29	; 62
    5d6e:	de 01       	movw	r26, r28
    5d70:	11 96       	adiw	r26, 0x01	; 1
    5d72:	40 e0       	ldi	r20, 0x00	; 0
    5d74:	5e ef       	ldi	r21, 0xFE	; 254
    5d76:	61 e0       	ldi	r22, 0x01	; 1
    5d78:	70 e0       	ldi	r23, 0x00	; 0
        uint8_t buffer[SPM_PAGESIZE];
        
        for (uint16_t i = 0; i < SPM_PAGESIZE; i++)
        {
                buffer[i] = PGM_READ_BYTE(XB_APP_TEMP_START + XB_APP_TEMP_SIZE - SPM_PAGESIZE + i);
    5d7a:	6b bf       	out	0x3b, r22	; 59
    5d7c:	fa 01       	movw	r30, r20
    5d7e:	27 91       	elpm	r18, Z+
    5d80:	2d 93       	st	X+, r18
    5d82:	4f 5f       	subi	r20, 0xFF	; 255
    5d84:	5f 4f       	sbci	r21, 0xFF	; 255
    5d86:	6f 4f       	sbci	r22, 0xFF	; 255
    5d88:	7f 4f       	sbci	r23, 0xFF	; 255

uint8_t xboot_install_firmware(uint16_t crc)
{
        uint8_t buffer[SPM_PAGESIZE];
        
        for (uint16_t i = 0; i < SPM_PAGESIZE; i++)
    5d8a:	40 30       	cpi	r20, 0x00	; 0
    5d8c:	20 e0       	ldi	r18, 0x00	; 0
    5d8e:	52 07       	cpc	r21, r18
    5d90:	22 e0       	ldi	r18, 0x02	; 2
    5d92:	62 07       	cpc	r22, r18
    5d94:	20 e0       	ldi	r18, 0x00	; 0
    5d96:	72 07       	cpc	r23, r18
    5d98:	81 f7       	brne	.-32     	; 0x5d7a <xboot_install_firmware+0x1c>
        {
                buffer[i] = PGM_READ_BYTE(XB_APP_TEMP_START + XB_APP_TEMP_SIZE - SPM_PAGESIZE + i);
        }
        
        buffer[SPM_PAGESIZE-6] = 'X';
    5d9a:	28 e5       	ldi	r18, 0x58	; 88
    5d9c:	c5 50       	subi	r28, 0x05	; 5
    5d9e:	de 4f       	sbci	r29, 0xFE	; 254
    5da0:	28 83       	st	Y, r18
    5da2:	cb 5f       	subi	r28, 0xFB	; 251
    5da4:	d1 40       	sbci	r29, 0x01	; 1
        buffer[SPM_PAGESIZE-5] = 'B';
    5da6:	22 e4       	ldi	r18, 0x42	; 66
    5da8:	c4 50       	subi	r28, 0x04	; 4
    5daa:	de 4f       	sbci	r29, 0xFE	; 254
    5dac:	28 83       	st	Y, r18
    5dae:	cc 5f       	subi	r28, 0xFC	; 252
    5db0:	d1 40       	sbci	r29, 0x01	; 1
        buffer[SPM_PAGESIZE-4] = 'I';
    5db2:	29 e4       	ldi	r18, 0x49	; 73
    5db4:	c3 50       	subi	r28, 0x03	; 3
    5db6:	de 4f       	sbci	r29, 0xFE	; 254
    5db8:	28 83       	st	Y, r18
    5dba:	cd 5f       	subi	r28, 0xFD	; 253
    5dbc:	d1 40       	sbci	r29, 0x01	; 1
        buffer[SPM_PAGESIZE-3] = 'F';
    5dbe:	26 e4       	ldi	r18, 0x46	; 70
    5dc0:	c2 50       	subi	r28, 0x02	; 2
    5dc2:	de 4f       	sbci	r29, 0xFE	; 254
    5dc4:	28 83       	st	Y, r18
    5dc6:	ce 5f       	subi	r28, 0xFE	; 254
    5dc8:	d1 40       	sbci	r29, 0x01	; 1
        buffer[SPM_PAGESIZE-2] = (crc >> 8) & 0xff;
    5dca:	c1 50       	subi	r28, 0x01	; 1
    5dcc:	de 4f       	sbci	r29, 0xFE	; 254
    5dce:	98 83       	st	Y, r25
    5dd0:	cf 5f       	subi	r28, 0xFF	; 255
    5dd2:	d1 40       	sbci	r29, 0x01	; 1
        buffer[SPM_PAGESIZE-1] = crc & 0xff;
    5dd4:	c0 50       	subi	r28, 0x00	; 0
    5dd6:	de 4f       	sbci	r29, 0xFE	; 254
    5dd8:	88 83       	st	Y, r24
    5dda:	c0 50       	subi	r28, 0x00	; 0
    5ddc:	d2 40       	sbci	r29, 0x02	; 2
        
        return xboot_app_temp_write_page(XB_APP_TEMP_SIZE - SPM_PAGESIZE, buffer, 1);
    5dde:	60 e0       	ldi	r22, 0x00	; 0
    5de0:	7e ef       	ldi	r23, 0xFE	; 254
    5de2:	80 e0       	ldi	r24, 0x00	; 0
    5de4:	90 e0       	ldi	r25, 0x00	; 0
    5de6:	ae 01       	movw	r20, r28
    5de8:	4f 5f       	subi	r20, 0xFF	; 255
    5dea:	5f 4f       	sbci	r21, 0xFF	; 255
    5dec:	21 e0       	ldi	r18, 0x01	; 1
    5dee:	0e 94 f0 2d 	call	0x5be0	; 0x5be0 <xboot_app_temp_write_page>
}
    5df2:	c0 50       	subi	r28, 0x00	; 0
    5df4:	de 4f       	sbci	r29, 0xFE	; 254
    5df6:	cd bf       	out	0x3d, r28	; 61
    5df8:	de bf       	out	0x3e, r29	; 62
    5dfa:	df 91       	pop	r29
    5dfc:	cf 91       	pop	r28
    5dfe:	08 95       	ret

00005e00 <xboot_reset>:

void __attribute__ ((noreturn)) xboot_reset(void)
{
        // disable interrupts
        cli();
    5e00:	f8 94       	cli
        
        // reset chip
        #ifdef __AVR_XMEGA__
        // can do this directly on xmega
        CCP = CCP_IOREG_gc;
    5e02:	88 ed       	ldi	r24, 0xD8	; 216
    5e04:	84 bf       	out	0x34, r24	; 52
        RST.CTRL = RST_SWRST_bm;
    5e06:	81 e0       	ldi	r24, 0x01	; 1
    5e08:	e8 e7       	ldi	r30, 0x78	; 120
    5e0a:	f0 e0       	ldi	r31, 0x00	; 0
    5e0c:	81 83       	std	Z+1, r24	; 0x01
    5e0e:	ff cf       	rjmp	.-2      	; 0x5e0e <xboot_reset+0xe>

00005e10 <__subsf3>:
    5e10:	50 58       	subi	r21, 0x80	; 128

00005e12 <__addsf3>:
    5e12:	bb 27       	eor	r27, r27
    5e14:	aa 27       	eor	r26, r26
    5e16:	0e d0       	rcall	.+28     	; 0x5e34 <__addsf3x>
    5e18:	f6 c1       	rjmp	.+1004   	; 0x6206 <__fp_round>
    5e1a:	bf d1       	rcall	.+894    	; 0x619a <__fp_pscA>
    5e1c:	30 f0       	brcs	.+12     	; 0x5e2a <__addsf3+0x18>
    5e1e:	c4 d1       	rcall	.+904    	; 0x61a8 <__fp_pscB>
    5e20:	20 f0       	brcs	.+8      	; 0x5e2a <__addsf3+0x18>
    5e22:	31 f4       	brne	.+12     	; 0x5e30 <__addsf3+0x1e>
    5e24:	9f 3f       	cpi	r25, 0xFF	; 255
    5e26:	11 f4       	brne	.+4      	; 0x5e2c <__addsf3+0x1a>
    5e28:	1e f4       	brtc	.+6      	; 0x5e30 <__addsf3+0x1e>
    5e2a:	8f c1       	rjmp	.+798    	; 0x614a <__fp_nan>
    5e2c:	0e f4       	brtc	.+2      	; 0x5e30 <__addsf3+0x1e>
    5e2e:	e0 95       	com	r30
    5e30:	e7 fb       	bst	r30, 7
    5e32:	85 c1       	rjmp	.+778    	; 0x613e <__fp_inf>

00005e34 <__addsf3x>:
    5e34:	e9 2f       	mov	r30, r25
    5e36:	09 d2       	rcall	.+1042   	; 0x624a <__fp_split3>
    5e38:	80 f3       	brcs	.-32     	; 0x5e1a <__addsf3+0x8>
    5e3a:	ba 17       	cp	r27, r26
    5e3c:	62 07       	cpc	r22, r18
    5e3e:	73 07       	cpc	r23, r19
    5e40:	84 07       	cpc	r24, r20
    5e42:	95 07       	cpc	r25, r21
    5e44:	18 f0       	brcs	.+6      	; 0x5e4c <__addsf3x+0x18>
    5e46:	71 f4       	brne	.+28     	; 0x5e64 <__addsf3x+0x30>
    5e48:	9e f5       	brtc	.+102    	; 0x5eb0 <__addsf3x+0x7c>
    5e4a:	21 c2       	rjmp	.+1090   	; 0x628e <__fp_zero>
    5e4c:	0e f4       	brtc	.+2      	; 0x5e50 <__addsf3x+0x1c>
    5e4e:	e0 95       	com	r30
    5e50:	0b 2e       	mov	r0, r27
    5e52:	ba 2f       	mov	r27, r26
    5e54:	a0 2d       	mov	r26, r0
    5e56:	0b 01       	movw	r0, r22
    5e58:	b9 01       	movw	r22, r18
    5e5a:	90 01       	movw	r18, r0
    5e5c:	0c 01       	movw	r0, r24
    5e5e:	ca 01       	movw	r24, r20
    5e60:	a0 01       	movw	r20, r0
    5e62:	11 24       	eor	r1, r1
    5e64:	ff 27       	eor	r31, r31
    5e66:	59 1b       	sub	r21, r25
    5e68:	99 f0       	breq	.+38     	; 0x5e90 <__addsf3x+0x5c>
    5e6a:	59 3f       	cpi	r21, 0xF9	; 249
    5e6c:	50 f4       	brcc	.+20     	; 0x5e82 <__addsf3x+0x4e>
    5e6e:	50 3e       	cpi	r21, 0xE0	; 224
    5e70:	68 f1       	brcs	.+90     	; 0x5ecc <__addsf3x+0x98>
    5e72:	1a 16       	cp	r1, r26
    5e74:	f0 40       	sbci	r31, 0x00	; 0
    5e76:	a2 2f       	mov	r26, r18
    5e78:	23 2f       	mov	r18, r19
    5e7a:	34 2f       	mov	r19, r20
    5e7c:	44 27       	eor	r20, r20
    5e7e:	58 5f       	subi	r21, 0xF8	; 248
    5e80:	f3 cf       	rjmp	.-26     	; 0x5e68 <__addsf3x+0x34>
    5e82:	46 95       	lsr	r20
    5e84:	37 95       	ror	r19
    5e86:	27 95       	ror	r18
    5e88:	a7 95       	ror	r26
    5e8a:	f0 40       	sbci	r31, 0x00	; 0
    5e8c:	53 95       	inc	r21
    5e8e:	c9 f7       	brne	.-14     	; 0x5e82 <__addsf3x+0x4e>
    5e90:	7e f4       	brtc	.+30     	; 0x5eb0 <__addsf3x+0x7c>
    5e92:	1f 16       	cp	r1, r31
    5e94:	ba 0b       	sbc	r27, r26
    5e96:	62 0b       	sbc	r22, r18
    5e98:	73 0b       	sbc	r23, r19
    5e9a:	84 0b       	sbc	r24, r20
    5e9c:	ba f0       	brmi	.+46     	; 0x5ecc <__addsf3x+0x98>
    5e9e:	91 50       	subi	r25, 0x01	; 1
    5ea0:	a1 f0       	breq	.+40     	; 0x5eca <__addsf3x+0x96>
    5ea2:	ff 0f       	add	r31, r31
    5ea4:	bb 1f       	adc	r27, r27
    5ea6:	66 1f       	adc	r22, r22
    5ea8:	77 1f       	adc	r23, r23
    5eaa:	88 1f       	adc	r24, r24
    5eac:	c2 f7       	brpl	.-16     	; 0x5e9e <__addsf3x+0x6a>
    5eae:	0e c0       	rjmp	.+28     	; 0x5ecc <__addsf3x+0x98>
    5eb0:	ba 0f       	add	r27, r26
    5eb2:	62 1f       	adc	r22, r18
    5eb4:	73 1f       	adc	r23, r19
    5eb6:	84 1f       	adc	r24, r20
    5eb8:	48 f4       	brcc	.+18     	; 0x5ecc <__addsf3x+0x98>
    5eba:	87 95       	ror	r24
    5ebc:	77 95       	ror	r23
    5ebe:	67 95       	ror	r22
    5ec0:	b7 95       	ror	r27
    5ec2:	f7 95       	ror	r31
    5ec4:	9e 3f       	cpi	r25, 0xFE	; 254
    5ec6:	08 f0       	brcs	.+2      	; 0x5eca <__addsf3x+0x96>
    5ec8:	b3 cf       	rjmp	.-154    	; 0x5e30 <__addsf3+0x1e>
    5eca:	93 95       	inc	r25
    5ecc:	88 0f       	add	r24, r24
    5ece:	08 f0       	brcs	.+2      	; 0x5ed2 <__addsf3x+0x9e>
    5ed0:	99 27       	eor	r25, r25
    5ed2:	ee 0f       	add	r30, r30
    5ed4:	97 95       	ror	r25
    5ed6:	87 95       	ror	r24
    5ed8:	08 95       	ret

00005eda <__cmpsf2>:
    5eda:	0d d1       	rcall	.+538    	; 0x60f6 <__fp_cmp>
    5edc:	08 f4       	brcc	.+2      	; 0x5ee0 <__cmpsf2+0x6>
    5ede:	81 e0       	ldi	r24, 0x01	; 1
    5ee0:	08 95       	ret

00005ee2 <cos>:
    5ee2:	6a d1       	rcall	.+724    	; 0x61b8 <__fp_rempio2>
    5ee4:	e3 95       	inc	r30
    5ee6:	a0 c1       	rjmp	.+832    	; 0x6228 <__fp_sinus>

00005ee8 <__divsf3>:
    5ee8:	0c d0       	rcall	.+24     	; 0x5f02 <__divsf3x>
    5eea:	8d c1       	rjmp	.+794    	; 0x6206 <__fp_round>
    5eec:	5d d1       	rcall	.+698    	; 0x61a8 <__fp_pscB>
    5eee:	40 f0       	brcs	.+16     	; 0x5f00 <__divsf3+0x18>
    5ef0:	54 d1       	rcall	.+680    	; 0x619a <__fp_pscA>
    5ef2:	30 f0       	brcs	.+12     	; 0x5f00 <__divsf3+0x18>
    5ef4:	21 f4       	brne	.+8      	; 0x5efe <__divsf3+0x16>
    5ef6:	5f 3f       	cpi	r21, 0xFF	; 255
    5ef8:	19 f0       	breq	.+6      	; 0x5f00 <__divsf3+0x18>
    5efa:	21 c1       	rjmp	.+578    	; 0x613e <__fp_inf>
    5efc:	51 11       	cpse	r21, r1
    5efe:	c8 c1       	rjmp	.+912    	; 0x6290 <__fp_szero>
    5f00:	24 c1       	rjmp	.+584    	; 0x614a <__fp_nan>

00005f02 <__divsf3x>:
    5f02:	a3 d1       	rcall	.+838    	; 0x624a <__fp_split3>
    5f04:	98 f3       	brcs	.-26     	; 0x5eec <__divsf3+0x4>

00005f06 <__divsf3_pse>:
    5f06:	99 23       	and	r25, r25
    5f08:	c9 f3       	breq	.-14     	; 0x5efc <__divsf3+0x14>
    5f0a:	55 23       	and	r21, r21
    5f0c:	b1 f3       	breq	.-20     	; 0x5efa <__divsf3+0x12>
    5f0e:	95 1b       	sub	r25, r21
    5f10:	55 0b       	sbc	r21, r21
    5f12:	bb 27       	eor	r27, r27
    5f14:	aa 27       	eor	r26, r26
    5f16:	62 17       	cp	r22, r18
    5f18:	73 07       	cpc	r23, r19
    5f1a:	84 07       	cpc	r24, r20
    5f1c:	38 f0       	brcs	.+14     	; 0x5f2c <__divsf3_pse+0x26>
    5f1e:	9f 5f       	subi	r25, 0xFF	; 255
    5f20:	5f 4f       	sbci	r21, 0xFF	; 255
    5f22:	22 0f       	add	r18, r18
    5f24:	33 1f       	adc	r19, r19
    5f26:	44 1f       	adc	r20, r20
    5f28:	aa 1f       	adc	r26, r26
    5f2a:	a9 f3       	breq	.-22     	; 0x5f16 <__divsf3_pse+0x10>
    5f2c:	33 d0       	rcall	.+102    	; 0x5f94 <__divsf3_pse+0x8e>
    5f2e:	0e 2e       	mov	r0, r30
    5f30:	3a f0       	brmi	.+14     	; 0x5f40 <__divsf3_pse+0x3a>
    5f32:	e0 e8       	ldi	r30, 0x80	; 128
    5f34:	30 d0       	rcall	.+96     	; 0x5f96 <__divsf3_pse+0x90>
    5f36:	91 50       	subi	r25, 0x01	; 1
    5f38:	50 40       	sbci	r21, 0x00	; 0
    5f3a:	e6 95       	lsr	r30
    5f3c:	00 1c       	adc	r0, r0
    5f3e:	ca f7       	brpl	.-14     	; 0x5f32 <__divsf3_pse+0x2c>
    5f40:	29 d0       	rcall	.+82     	; 0x5f94 <__divsf3_pse+0x8e>
    5f42:	fe 2f       	mov	r31, r30
    5f44:	27 d0       	rcall	.+78     	; 0x5f94 <__divsf3_pse+0x8e>
    5f46:	66 0f       	add	r22, r22
    5f48:	77 1f       	adc	r23, r23
    5f4a:	88 1f       	adc	r24, r24
    5f4c:	bb 1f       	adc	r27, r27
    5f4e:	26 17       	cp	r18, r22
    5f50:	37 07       	cpc	r19, r23
    5f52:	48 07       	cpc	r20, r24
    5f54:	ab 07       	cpc	r26, r27
    5f56:	b0 e8       	ldi	r27, 0x80	; 128
    5f58:	09 f0       	breq	.+2      	; 0x5f5c <__divsf3_pse+0x56>
    5f5a:	bb 0b       	sbc	r27, r27
    5f5c:	80 2d       	mov	r24, r0
    5f5e:	bf 01       	movw	r22, r30
    5f60:	ff 27       	eor	r31, r31
    5f62:	93 58       	subi	r25, 0x83	; 131
    5f64:	5f 4f       	sbci	r21, 0xFF	; 255
    5f66:	2a f0       	brmi	.+10     	; 0x5f72 <__divsf3_pse+0x6c>
    5f68:	9e 3f       	cpi	r25, 0xFE	; 254
    5f6a:	51 05       	cpc	r21, r1
    5f6c:	68 f0       	brcs	.+26     	; 0x5f88 <__divsf3_pse+0x82>
    5f6e:	e7 c0       	rjmp	.+462    	; 0x613e <__fp_inf>
    5f70:	8f c1       	rjmp	.+798    	; 0x6290 <__fp_szero>
    5f72:	5f 3f       	cpi	r21, 0xFF	; 255
    5f74:	ec f3       	brlt	.-6      	; 0x5f70 <__divsf3_pse+0x6a>
    5f76:	98 3e       	cpi	r25, 0xE8	; 232
    5f78:	dc f3       	brlt	.-10     	; 0x5f70 <__divsf3_pse+0x6a>
    5f7a:	86 95       	lsr	r24
    5f7c:	77 95       	ror	r23
    5f7e:	67 95       	ror	r22
    5f80:	b7 95       	ror	r27
    5f82:	f7 95       	ror	r31
    5f84:	9f 5f       	subi	r25, 0xFF	; 255
    5f86:	c9 f7       	brne	.-14     	; 0x5f7a <__divsf3_pse+0x74>
    5f88:	88 0f       	add	r24, r24
    5f8a:	91 1d       	adc	r25, r1
    5f8c:	96 95       	lsr	r25
    5f8e:	87 95       	ror	r24
    5f90:	97 f9       	bld	r25, 7
    5f92:	08 95       	ret
    5f94:	e1 e0       	ldi	r30, 0x01	; 1
    5f96:	66 0f       	add	r22, r22
    5f98:	77 1f       	adc	r23, r23
    5f9a:	88 1f       	adc	r24, r24
    5f9c:	bb 1f       	adc	r27, r27
    5f9e:	62 17       	cp	r22, r18
    5fa0:	73 07       	cpc	r23, r19
    5fa2:	84 07       	cpc	r24, r20
    5fa4:	ba 07       	cpc	r27, r26
    5fa6:	20 f0       	brcs	.+8      	; 0x5fb0 <__divsf3_pse+0xaa>
    5fa8:	62 1b       	sub	r22, r18
    5faa:	73 0b       	sbc	r23, r19
    5fac:	84 0b       	sbc	r24, r20
    5fae:	ba 0b       	sbc	r27, r26
    5fb0:	ee 1f       	adc	r30, r30
    5fb2:	88 f7       	brcc	.-30     	; 0x5f96 <__divsf3_pse+0x90>
    5fb4:	e0 95       	com	r30
    5fb6:	08 95       	ret
    5fb8:	19 f4       	brne	.+6      	; 0x5fc0 <__divsf3_pse+0xba>
    5fba:	0e f0       	brts	.+2      	; 0x5fbe <__divsf3_pse+0xb8>
    5fbc:	c0 c0       	rjmp	.+384    	; 0x613e <__fp_inf>
    5fbe:	67 c1       	rjmp	.+718    	; 0x628e <__fp_zero>
    5fc0:	c4 c0       	rjmp	.+392    	; 0x614a <__fp_nan>

00005fc2 <exp>:
    5fc2:	4b d1       	rcall	.+662    	; 0x625a <__fp_splitA>
    5fc4:	c8 f3       	brcs	.-14     	; 0x5fb8 <__divsf3_pse+0xb2>
    5fc6:	96 38       	cpi	r25, 0x86	; 134
    5fc8:	c0 f7       	brcc	.-16     	; 0x5fba <__divsf3_pse+0xb4>
    5fca:	07 f8       	bld	r0, 7
    5fcc:	0f 92       	push	r0
    5fce:	e8 94       	clt
    5fd0:	2b e3       	ldi	r18, 0x3B	; 59
    5fd2:	3a ea       	ldi	r19, 0xAA	; 170
    5fd4:	48 eb       	ldi	r20, 0xB8	; 184
    5fd6:	5f e7       	ldi	r21, 0x7F	; 127
    5fd8:	e3 d1       	rcall	.+966    	; 0x63a0 <__mulsf3_pse>
    5fda:	0f 92       	push	r0
    5fdc:	0f 92       	push	r0
    5fde:	0f 92       	push	r0
    5fe0:	4d b7       	in	r20, 0x3d	; 61
    5fe2:	5e b7       	in	r21, 0x3e	; 62
    5fe4:	0f 92       	push	r0
    5fe6:	9b d1       	rcall	.+822    	; 0x631e <modf>
    5fe8:	e8 ee       	ldi	r30, 0xE8	; 232
    5fea:	f1 e0       	ldi	r31, 0x01	; 1
    5fec:	b1 d0       	rcall	.+354    	; 0x6150 <__fp_powser>
    5fee:	4f 91       	pop	r20
    5ff0:	5f 91       	pop	r21
    5ff2:	ef 91       	pop	r30
    5ff4:	ff 91       	pop	r31
    5ff6:	e5 95       	asr	r30
    5ff8:	ee 1f       	adc	r30, r30
    5ffa:	ff 1f       	adc	r31, r31
    5ffc:	49 f0       	breq	.+18     	; 0x6010 <exp+0x4e>
    5ffe:	fe 57       	subi	r31, 0x7E	; 126
    6000:	e0 68       	ori	r30, 0x80	; 128
    6002:	44 27       	eor	r20, r20
    6004:	ee 0f       	add	r30, r30
    6006:	44 1f       	adc	r20, r20
    6008:	fa 95       	dec	r31
    600a:	e1 f7       	brne	.-8      	; 0x6004 <exp+0x42>
    600c:	41 95       	neg	r20
    600e:	55 0b       	sbc	r21, r21
    6010:	52 d1       	rcall	.+676    	; 0x62b6 <ldexp>
    6012:	0f 90       	pop	r0
    6014:	07 fe       	sbrs	r0, 7
    6016:	46 c1       	rjmp	.+652    	; 0x62a4 <inverse>
    6018:	08 95       	ret

0000601a <__fixsfsi>:
    601a:	04 d0       	rcall	.+8      	; 0x6024 <__fixunssfsi>
    601c:	68 94       	set
    601e:	b1 11       	cpse	r27, r1
    6020:	37 c1       	rjmp	.+622    	; 0x6290 <__fp_szero>
    6022:	08 95       	ret

00006024 <__fixunssfsi>:
    6024:	1a d1       	rcall	.+564    	; 0x625a <__fp_splitA>
    6026:	88 f0       	brcs	.+34     	; 0x604a <__fixunssfsi+0x26>
    6028:	9f 57       	subi	r25, 0x7F	; 127
    602a:	90 f0       	brcs	.+36     	; 0x6050 <__fixunssfsi+0x2c>
    602c:	b9 2f       	mov	r27, r25
    602e:	99 27       	eor	r25, r25
    6030:	b7 51       	subi	r27, 0x17	; 23
    6032:	a0 f0       	brcs	.+40     	; 0x605c <__fixunssfsi+0x38>
    6034:	d1 f0       	breq	.+52     	; 0x606a <__fixunssfsi+0x46>
    6036:	66 0f       	add	r22, r22
    6038:	77 1f       	adc	r23, r23
    603a:	88 1f       	adc	r24, r24
    603c:	99 1f       	adc	r25, r25
    603e:	1a f0       	brmi	.+6      	; 0x6046 <__fixunssfsi+0x22>
    6040:	ba 95       	dec	r27
    6042:	c9 f7       	brne	.-14     	; 0x6036 <__fixunssfsi+0x12>
    6044:	12 c0       	rjmp	.+36     	; 0x606a <__fixunssfsi+0x46>
    6046:	b1 30       	cpi	r27, 0x01	; 1
    6048:	81 f0       	breq	.+32     	; 0x606a <__fixunssfsi+0x46>
    604a:	21 d1       	rcall	.+578    	; 0x628e <__fp_zero>
    604c:	b1 e0       	ldi	r27, 0x01	; 1
    604e:	08 95       	ret
    6050:	1e c1       	rjmp	.+572    	; 0x628e <__fp_zero>
    6052:	67 2f       	mov	r22, r23
    6054:	78 2f       	mov	r23, r24
    6056:	88 27       	eor	r24, r24
    6058:	b8 5f       	subi	r27, 0xF8	; 248
    605a:	39 f0       	breq	.+14     	; 0x606a <__fixunssfsi+0x46>
    605c:	b9 3f       	cpi	r27, 0xF9	; 249
    605e:	cc f3       	brlt	.-14     	; 0x6052 <__fixunssfsi+0x2e>
    6060:	86 95       	lsr	r24
    6062:	77 95       	ror	r23
    6064:	67 95       	ror	r22
    6066:	b3 95       	inc	r27
    6068:	d9 f7       	brne	.-10     	; 0x6060 <__fixunssfsi+0x3c>
    606a:	3e f4       	brtc	.+14     	; 0x607a <__fixunssfsi+0x56>
    606c:	90 95       	com	r25
    606e:	80 95       	com	r24
    6070:	70 95       	com	r23
    6072:	61 95       	neg	r22
    6074:	7f 4f       	sbci	r23, 0xFF	; 255
    6076:	8f 4f       	sbci	r24, 0xFF	; 255
    6078:	9f 4f       	sbci	r25, 0xFF	; 255
    607a:	08 95       	ret

0000607c <__floatunsisf>:
    607c:	e8 94       	clt
    607e:	09 c0       	rjmp	.+18     	; 0x6092 <__floatsisf+0x12>

00006080 <__floatsisf>:
    6080:	97 fb       	bst	r25, 7
    6082:	3e f4       	brtc	.+14     	; 0x6092 <__floatsisf+0x12>
    6084:	90 95       	com	r25
    6086:	80 95       	com	r24
    6088:	70 95       	com	r23
    608a:	61 95       	neg	r22
    608c:	7f 4f       	sbci	r23, 0xFF	; 255
    608e:	8f 4f       	sbci	r24, 0xFF	; 255
    6090:	9f 4f       	sbci	r25, 0xFF	; 255
    6092:	99 23       	and	r25, r25
    6094:	a9 f0       	breq	.+42     	; 0x60c0 <__floatsisf+0x40>
    6096:	f9 2f       	mov	r31, r25
    6098:	96 e9       	ldi	r25, 0x96	; 150
    609a:	bb 27       	eor	r27, r27
    609c:	93 95       	inc	r25
    609e:	f6 95       	lsr	r31
    60a0:	87 95       	ror	r24
    60a2:	77 95       	ror	r23
    60a4:	67 95       	ror	r22
    60a6:	b7 95       	ror	r27
    60a8:	f1 11       	cpse	r31, r1
    60aa:	f8 cf       	rjmp	.-16     	; 0x609c <__floatsisf+0x1c>
    60ac:	fa f4       	brpl	.+62     	; 0x60ec <__floatsisf+0x6c>
    60ae:	bb 0f       	add	r27, r27
    60b0:	11 f4       	brne	.+4      	; 0x60b6 <__floatsisf+0x36>
    60b2:	60 ff       	sbrs	r22, 0
    60b4:	1b c0       	rjmp	.+54     	; 0x60ec <__floatsisf+0x6c>
    60b6:	6f 5f       	subi	r22, 0xFF	; 255
    60b8:	7f 4f       	sbci	r23, 0xFF	; 255
    60ba:	8f 4f       	sbci	r24, 0xFF	; 255
    60bc:	9f 4f       	sbci	r25, 0xFF	; 255
    60be:	16 c0       	rjmp	.+44     	; 0x60ec <__floatsisf+0x6c>
    60c0:	88 23       	and	r24, r24
    60c2:	11 f0       	breq	.+4      	; 0x60c8 <__floatsisf+0x48>
    60c4:	96 e9       	ldi	r25, 0x96	; 150
    60c6:	11 c0       	rjmp	.+34     	; 0x60ea <__floatsisf+0x6a>
    60c8:	77 23       	and	r23, r23
    60ca:	21 f0       	breq	.+8      	; 0x60d4 <__floatsisf+0x54>
    60cc:	9e e8       	ldi	r25, 0x8E	; 142
    60ce:	87 2f       	mov	r24, r23
    60d0:	76 2f       	mov	r23, r22
    60d2:	05 c0       	rjmp	.+10     	; 0x60de <__floatsisf+0x5e>
    60d4:	66 23       	and	r22, r22
    60d6:	71 f0       	breq	.+28     	; 0x60f4 <__floatsisf+0x74>
    60d8:	96 e8       	ldi	r25, 0x86	; 134
    60da:	86 2f       	mov	r24, r22
    60dc:	70 e0       	ldi	r23, 0x00	; 0
    60de:	60 e0       	ldi	r22, 0x00	; 0
    60e0:	2a f0       	brmi	.+10     	; 0x60ec <__floatsisf+0x6c>
    60e2:	9a 95       	dec	r25
    60e4:	66 0f       	add	r22, r22
    60e6:	77 1f       	adc	r23, r23
    60e8:	88 1f       	adc	r24, r24
    60ea:	da f7       	brpl	.-10     	; 0x60e2 <__floatsisf+0x62>
    60ec:	88 0f       	add	r24, r24
    60ee:	96 95       	lsr	r25
    60f0:	87 95       	ror	r24
    60f2:	97 f9       	bld	r25, 7
    60f4:	08 95       	ret

000060f6 <__fp_cmp>:
    60f6:	99 0f       	add	r25, r25
    60f8:	00 08       	sbc	r0, r0
    60fa:	55 0f       	add	r21, r21
    60fc:	aa 0b       	sbc	r26, r26
    60fe:	e0 e8       	ldi	r30, 0x80	; 128
    6100:	fe ef       	ldi	r31, 0xFE	; 254
    6102:	16 16       	cp	r1, r22
    6104:	17 06       	cpc	r1, r23
    6106:	e8 07       	cpc	r30, r24
    6108:	f9 07       	cpc	r31, r25
    610a:	c0 f0       	brcs	.+48     	; 0x613c <__fp_cmp+0x46>
    610c:	12 16       	cp	r1, r18
    610e:	13 06       	cpc	r1, r19
    6110:	e4 07       	cpc	r30, r20
    6112:	f5 07       	cpc	r31, r21
    6114:	98 f0       	brcs	.+38     	; 0x613c <__fp_cmp+0x46>
    6116:	62 1b       	sub	r22, r18
    6118:	73 0b       	sbc	r23, r19
    611a:	84 0b       	sbc	r24, r20
    611c:	95 0b       	sbc	r25, r21
    611e:	39 f4       	brne	.+14     	; 0x612e <__fp_cmp+0x38>
    6120:	0a 26       	eor	r0, r26
    6122:	61 f0       	breq	.+24     	; 0x613c <__fp_cmp+0x46>
    6124:	23 2b       	or	r18, r19
    6126:	24 2b       	or	r18, r20
    6128:	25 2b       	or	r18, r21
    612a:	21 f4       	brne	.+8      	; 0x6134 <__fp_cmp+0x3e>
    612c:	08 95       	ret
    612e:	0a 26       	eor	r0, r26
    6130:	09 f4       	brne	.+2      	; 0x6134 <__fp_cmp+0x3e>
    6132:	a1 40       	sbci	r26, 0x01	; 1
    6134:	a6 95       	lsr	r26
    6136:	8f ef       	ldi	r24, 0xFF	; 255
    6138:	81 1d       	adc	r24, r1
    613a:	81 1d       	adc	r24, r1
    613c:	08 95       	ret

0000613e <__fp_inf>:
    613e:	97 f9       	bld	r25, 7
    6140:	9f 67       	ori	r25, 0x7F	; 127
    6142:	80 e8       	ldi	r24, 0x80	; 128
    6144:	70 e0       	ldi	r23, 0x00	; 0
    6146:	60 e0       	ldi	r22, 0x00	; 0
    6148:	08 95       	ret

0000614a <__fp_nan>:
    614a:	9f ef       	ldi	r25, 0xFF	; 255
    614c:	80 ec       	ldi	r24, 0xC0	; 192
    614e:	08 95       	ret

00006150 <__fp_powser>:
    6150:	df 93       	push	r29
    6152:	cf 93       	push	r28
    6154:	1f 93       	push	r17
    6156:	0f 93       	push	r16
    6158:	ff 92       	push	r15
    615a:	ef 92       	push	r14
    615c:	df 92       	push	r13
    615e:	7b 01       	movw	r14, r22
    6160:	8c 01       	movw	r16, r24
    6162:	68 94       	set
    6164:	05 c0       	rjmp	.+10     	; 0x6170 <__fp_powser+0x20>
    6166:	da 2e       	mov	r13, r26
    6168:	ef 01       	movw	r28, r30
    616a:	18 d1       	rcall	.+560    	; 0x639c <__mulsf3x>
    616c:	fe 01       	movw	r30, r28
    616e:	e8 94       	clt
    6170:	a5 91       	lpm	r26, Z+
    6172:	25 91       	lpm	r18, Z+
    6174:	35 91       	lpm	r19, Z+
    6176:	45 91       	lpm	r20, Z+
    6178:	55 91       	lpm	r21, Z+
    617a:	ae f3       	brts	.-22     	; 0x6166 <__fp_powser+0x16>
    617c:	ef 01       	movw	r28, r30
    617e:	5a de       	rcall	.-844    	; 0x5e34 <__addsf3x>
    6180:	fe 01       	movw	r30, r28
    6182:	97 01       	movw	r18, r14
    6184:	a8 01       	movw	r20, r16
    6186:	da 94       	dec	r13
    6188:	79 f7       	brne	.-34     	; 0x6168 <__fp_powser+0x18>
    618a:	df 90       	pop	r13
    618c:	ef 90       	pop	r14
    618e:	ff 90       	pop	r15
    6190:	0f 91       	pop	r16
    6192:	1f 91       	pop	r17
    6194:	cf 91       	pop	r28
    6196:	df 91       	pop	r29
    6198:	08 95       	ret

0000619a <__fp_pscA>:
    619a:	00 24       	eor	r0, r0
    619c:	0a 94       	dec	r0
    619e:	16 16       	cp	r1, r22
    61a0:	17 06       	cpc	r1, r23
    61a2:	18 06       	cpc	r1, r24
    61a4:	09 06       	cpc	r0, r25
    61a6:	08 95       	ret

000061a8 <__fp_pscB>:
    61a8:	00 24       	eor	r0, r0
    61aa:	0a 94       	dec	r0
    61ac:	12 16       	cp	r1, r18
    61ae:	13 06       	cpc	r1, r19
    61b0:	14 06       	cpc	r1, r20
    61b2:	05 06       	cpc	r0, r21
    61b4:	08 95       	ret
    61b6:	c9 cf       	rjmp	.-110    	; 0x614a <__fp_nan>

000061b8 <__fp_rempio2>:
    61b8:	50 d0       	rcall	.+160    	; 0x625a <__fp_splitA>
    61ba:	e8 f3       	brcs	.-6      	; 0x61b6 <__fp_pscB+0xe>
    61bc:	e8 94       	clt
    61be:	e0 e0       	ldi	r30, 0x00	; 0
    61c0:	bb 27       	eor	r27, r27
    61c2:	9f 57       	subi	r25, 0x7F	; 127
    61c4:	f0 f0       	brcs	.+60     	; 0x6202 <__fp_rempio2+0x4a>
    61c6:	2a ed       	ldi	r18, 0xDA	; 218
    61c8:	3f e0       	ldi	r19, 0x0F	; 15
    61ca:	49 ec       	ldi	r20, 0xC9	; 201
    61cc:	06 c0       	rjmp	.+12     	; 0x61da <__fp_rempio2+0x22>
    61ce:	ee 0f       	add	r30, r30
    61d0:	bb 0f       	add	r27, r27
    61d2:	66 1f       	adc	r22, r22
    61d4:	77 1f       	adc	r23, r23
    61d6:	88 1f       	adc	r24, r24
    61d8:	28 f0       	brcs	.+10     	; 0x61e4 <__fp_rempio2+0x2c>
    61da:	b2 3a       	cpi	r27, 0xA2	; 162
    61dc:	62 07       	cpc	r22, r18
    61de:	73 07       	cpc	r23, r19
    61e0:	84 07       	cpc	r24, r20
    61e2:	28 f0       	brcs	.+10     	; 0x61ee <__fp_rempio2+0x36>
    61e4:	b2 5a       	subi	r27, 0xA2	; 162
    61e6:	62 0b       	sbc	r22, r18
    61e8:	73 0b       	sbc	r23, r19
    61ea:	84 0b       	sbc	r24, r20
    61ec:	e3 95       	inc	r30
    61ee:	9a 95       	dec	r25
    61f0:	72 f7       	brpl	.-36     	; 0x61ce <__fp_rempio2+0x16>
    61f2:	80 38       	cpi	r24, 0x80	; 128
    61f4:	30 f4       	brcc	.+12     	; 0x6202 <__fp_rempio2+0x4a>
    61f6:	9a 95       	dec	r25
    61f8:	bb 0f       	add	r27, r27
    61fa:	66 1f       	adc	r22, r22
    61fc:	77 1f       	adc	r23, r23
    61fe:	88 1f       	adc	r24, r24
    6200:	d2 f7       	brpl	.-12     	; 0x61f6 <__fp_rempio2+0x3e>
    6202:	90 48       	sbci	r25, 0x80	; 128
    6204:	6c c1       	rjmp	.+728    	; 0x64de <__fp_mpack_finite>

00006206 <__fp_round>:
    6206:	09 2e       	mov	r0, r25
    6208:	03 94       	inc	r0
    620a:	00 0c       	add	r0, r0
    620c:	11 f4       	brne	.+4      	; 0x6212 <__fp_round+0xc>
    620e:	88 23       	and	r24, r24
    6210:	52 f0       	brmi	.+20     	; 0x6226 <__fp_round+0x20>
    6212:	bb 0f       	add	r27, r27
    6214:	40 f4       	brcc	.+16     	; 0x6226 <__fp_round+0x20>
    6216:	bf 2b       	or	r27, r31
    6218:	11 f4       	brne	.+4      	; 0x621e <__fp_round+0x18>
    621a:	60 ff       	sbrs	r22, 0
    621c:	04 c0       	rjmp	.+8      	; 0x6226 <__fp_round+0x20>
    621e:	6f 5f       	subi	r22, 0xFF	; 255
    6220:	7f 4f       	sbci	r23, 0xFF	; 255
    6222:	8f 4f       	sbci	r24, 0xFF	; 255
    6224:	9f 4f       	sbci	r25, 0xFF	; 255
    6226:	08 95       	ret

00006228 <__fp_sinus>:
    6228:	ef 93       	push	r30
    622a:	e0 ff       	sbrs	r30, 0
    622c:	06 c0       	rjmp	.+12     	; 0x623a <__fp_sinus+0x12>
    622e:	a2 ea       	ldi	r26, 0xA2	; 162
    6230:	2a ed       	ldi	r18, 0xDA	; 218
    6232:	3f e0       	ldi	r19, 0x0F	; 15
    6234:	49 ec       	ldi	r20, 0xC9	; 201
    6236:	5f eb       	ldi	r21, 0xBF	; 191
    6238:	fd dd       	rcall	.-1030   	; 0x5e34 <__addsf3x>
    623a:	e5 df       	rcall	.-54     	; 0x6206 <__fp_round>
    623c:	0f 90       	pop	r0
    623e:	03 94       	inc	r0
    6240:	01 fc       	sbrc	r0, 1
    6242:	90 58       	subi	r25, 0x80	; 128
    6244:	e0 e1       	ldi	r30, 0x10	; 16
    6246:	f2 e0       	ldi	r31, 0x02	; 2
    6248:	5d c1       	rjmp	.+698    	; 0x6504 <__fp_powsodd>

0000624a <__fp_split3>:
    624a:	57 fd       	sbrc	r21, 7
    624c:	90 58       	subi	r25, 0x80	; 128
    624e:	44 0f       	add	r20, r20
    6250:	55 1f       	adc	r21, r21
    6252:	59 f0       	breq	.+22     	; 0x626a <__fp_splitA+0x10>
    6254:	5f 3f       	cpi	r21, 0xFF	; 255
    6256:	71 f0       	breq	.+28     	; 0x6274 <__fp_splitA+0x1a>
    6258:	47 95       	ror	r20

0000625a <__fp_splitA>:
    625a:	88 0f       	add	r24, r24
    625c:	97 fb       	bst	r25, 7
    625e:	99 1f       	adc	r25, r25
    6260:	61 f0       	breq	.+24     	; 0x627a <__fp_splitA+0x20>
    6262:	9f 3f       	cpi	r25, 0xFF	; 255
    6264:	79 f0       	breq	.+30     	; 0x6284 <__fp_splitA+0x2a>
    6266:	87 95       	ror	r24
    6268:	08 95       	ret
    626a:	12 16       	cp	r1, r18
    626c:	13 06       	cpc	r1, r19
    626e:	14 06       	cpc	r1, r20
    6270:	55 1f       	adc	r21, r21
    6272:	f2 cf       	rjmp	.-28     	; 0x6258 <__fp_split3+0xe>
    6274:	46 95       	lsr	r20
    6276:	f1 df       	rcall	.-30     	; 0x625a <__fp_splitA>
    6278:	08 c0       	rjmp	.+16     	; 0x628a <__fp_splitA+0x30>
    627a:	16 16       	cp	r1, r22
    627c:	17 06       	cpc	r1, r23
    627e:	18 06       	cpc	r1, r24
    6280:	99 1f       	adc	r25, r25
    6282:	f1 cf       	rjmp	.-30     	; 0x6266 <__fp_splitA+0xc>
    6284:	86 95       	lsr	r24
    6286:	71 05       	cpc	r23, r1
    6288:	61 05       	cpc	r22, r1
    628a:	08 94       	sec
    628c:	08 95       	ret

0000628e <__fp_zero>:
    628e:	e8 94       	clt

00006290 <__fp_szero>:
    6290:	bb 27       	eor	r27, r27
    6292:	66 27       	eor	r22, r22
    6294:	77 27       	eor	r23, r23
    6296:	cb 01       	movw	r24, r22
    6298:	97 f9       	bld	r25, 7
    629a:	08 95       	ret

0000629c <__gesf2>:
    629c:	2c df       	rcall	.-424    	; 0x60f6 <__fp_cmp>
    629e:	08 f4       	brcc	.+2      	; 0x62a2 <__gesf2+0x6>
    62a0:	8f ef       	ldi	r24, 0xFF	; 255
    62a2:	08 95       	ret

000062a4 <inverse>:
    62a4:	9b 01       	movw	r18, r22
    62a6:	ac 01       	movw	r20, r24
    62a8:	60 e0       	ldi	r22, 0x00	; 0
    62aa:	70 e0       	ldi	r23, 0x00	; 0
    62ac:	80 e8       	ldi	r24, 0x80	; 128
    62ae:	9f e3       	ldi	r25, 0x3F	; 63
    62b0:	1b ce       	rjmp	.-970    	; 0x5ee8 <__divsf3>
    62b2:	45 cf       	rjmp	.-374    	; 0x613e <__fp_inf>
    62b4:	12 c1       	rjmp	.+548    	; 0x64da <__fp_mpack>

000062b6 <ldexp>:
    62b6:	d1 df       	rcall	.-94     	; 0x625a <__fp_splitA>
    62b8:	e8 f3       	brcs	.-6      	; 0x62b4 <inverse+0x10>
    62ba:	99 23       	and	r25, r25
    62bc:	d9 f3       	breq	.-10     	; 0x62b4 <inverse+0x10>
    62be:	94 0f       	add	r25, r20
    62c0:	51 1d       	adc	r21, r1
    62c2:	bb f3       	brvs	.-18     	; 0x62b2 <inverse+0xe>
    62c4:	91 50       	subi	r25, 0x01	; 1
    62c6:	50 40       	sbci	r21, 0x00	; 0
    62c8:	94 f0       	brlt	.+36     	; 0x62ee <ldexp+0x38>
    62ca:	59 f0       	breq	.+22     	; 0x62e2 <ldexp+0x2c>
    62cc:	88 23       	and	r24, r24
    62ce:	32 f0       	brmi	.+12     	; 0x62dc <ldexp+0x26>
    62d0:	66 0f       	add	r22, r22
    62d2:	77 1f       	adc	r23, r23
    62d4:	88 1f       	adc	r24, r24
    62d6:	91 50       	subi	r25, 0x01	; 1
    62d8:	50 40       	sbci	r21, 0x00	; 0
    62da:	c1 f7       	brne	.-16     	; 0x62cc <ldexp+0x16>
    62dc:	9e 3f       	cpi	r25, 0xFE	; 254
    62de:	51 05       	cpc	r21, r1
    62e0:	44 f7       	brge	.-48     	; 0x62b2 <inverse+0xe>
    62e2:	88 0f       	add	r24, r24
    62e4:	91 1d       	adc	r25, r1
    62e6:	96 95       	lsr	r25
    62e8:	87 95       	ror	r24
    62ea:	97 f9       	bld	r25, 7
    62ec:	08 95       	ret
    62ee:	5f 3f       	cpi	r21, 0xFF	; 255
    62f0:	ac f0       	brlt	.+42     	; 0x631c <ldexp+0x66>
    62f2:	98 3e       	cpi	r25, 0xE8	; 232
    62f4:	9c f0       	brlt	.+38     	; 0x631c <ldexp+0x66>
    62f6:	bb 27       	eor	r27, r27
    62f8:	86 95       	lsr	r24
    62fa:	77 95       	ror	r23
    62fc:	67 95       	ror	r22
    62fe:	b7 95       	ror	r27
    6300:	08 f4       	brcc	.+2      	; 0x6304 <ldexp+0x4e>
    6302:	b1 60       	ori	r27, 0x01	; 1
    6304:	93 95       	inc	r25
    6306:	c1 f7       	brne	.-16     	; 0x62f8 <ldexp+0x42>
    6308:	bb 0f       	add	r27, r27
    630a:	58 f7       	brcc	.-42     	; 0x62e2 <ldexp+0x2c>
    630c:	11 f4       	brne	.+4      	; 0x6312 <ldexp+0x5c>
    630e:	60 ff       	sbrs	r22, 0
    6310:	e8 cf       	rjmp	.-48     	; 0x62e2 <ldexp+0x2c>
    6312:	6f 5f       	subi	r22, 0xFF	; 255
    6314:	7f 4f       	sbci	r23, 0xFF	; 255
    6316:	8f 4f       	sbci	r24, 0xFF	; 255
    6318:	9f 4f       	sbci	r25, 0xFF	; 255
    631a:	e3 cf       	rjmp	.-58     	; 0x62e2 <ldexp+0x2c>
    631c:	b9 cf       	rjmp	.-142    	; 0x6290 <__fp_szero>

0000631e <modf>:
    631e:	fa 01       	movw	r30, r20
    6320:	dc 01       	movw	r26, r24
    6322:	aa 0f       	add	r26, r26
    6324:	bb 1f       	adc	r27, r27
    6326:	9b 01       	movw	r18, r22
    6328:	ac 01       	movw	r20, r24
    632a:	bf 57       	subi	r27, 0x7F	; 127
    632c:	28 f4       	brcc	.+10     	; 0x6338 <modf+0x1a>
    632e:	22 27       	eor	r18, r18
    6330:	33 27       	eor	r19, r19
    6332:	44 27       	eor	r20, r20
    6334:	50 78       	andi	r21, 0x80	; 128
    6336:	1f c0       	rjmp	.+62     	; 0x6376 <modf+0x58>
    6338:	b7 51       	subi	r27, 0x17	; 23
    633a:	88 f4       	brcc	.+34     	; 0x635e <modf+0x40>
    633c:	ab 2f       	mov	r26, r27
    633e:	00 24       	eor	r0, r0
    6340:	46 95       	lsr	r20
    6342:	37 95       	ror	r19
    6344:	27 95       	ror	r18
    6346:	01 1c       	adc	r0, r1
    6348:	a3 95       	inc	r26
    634a:	d2 f3       	brmi	.-12     	; 0x6340 <modf+0x22>
    634c:	00 20       	and	r0, r0
    634e:	69 f0       	breq	.+26     	; 0x636a <modf+0x4c>
    6350:	22 0f       	add	r18, r18
    6352:	33 1f       	adc	r19, r19
    6354:	44 1f       	adc	r20, r20
    6356:	b3 95       	inc	r27
    6358:	da f3       	brmi	.-10     	; 0x6350 <modf+0x32>
    635a:	0d d0       	rcall	.+26     	; 0x6376 <modf+0x58>
    635c:	59 cd       	rjmp	.-1358   	; 0x5e10 <__subsf3>
    635e:	61 30       	cpi	r22, 0x01	; 1
    6360:	71 05       	cpc	r23, r1
    6362:	a0 e8       	ldi	r26, 0x80	; 128
    6364:	8a 07       	cpc	r24, r26
    6366:	b9 46       	sbci	r27, 0x69	; 105
    6368:	30 f4       	brcc	.+12     	; 0x6376 <modf+0x58>
    636a:	9b 01       	movw	r18, r22
    636c:	ac 01       	movw	r20, r24
    636e:	66 27       	eor	r22, r22
    6370:	77 27       	eor	r23, r23
    6372:	88 27       	eor	r24, r24
    6374:	90 78       	andi	r25, 0x80	; 128
    6376:	30 96       	adiw	r30, 0x00	; 0
    6378:	21 f0       	breq	.+8      	; 0x6382 <modf+0x64>
    637a:	20 83       	st	Z, r18
    637c:	31 83       	std	Z+1, r19	; 0x01
    637e:	42 83       	std	Z+2, r20	; 0x02
    6380:	53 83       	std	Z+3, r21	; 0x03
    6382:	08 95       	ret

00006384 <__mulsf3>:
    6384:	0b d0       	rcall	.+22     	; 0x639c <__mulsf3x>
    6386:	3f cf       	rjmp	.-386    	; 0x6206 <__fp_round>
    6388:	08 df       	rcall	.-496    	; 0x619a <__fp_pscA>
    638a:	28 f0       	brcs	.+10     	; 0x6396 <__mulsf3+0x12>
    638c:	0d df       	rcall	.-486    	; 0x61a8 <__fp_pscB>
    638e:	18 f0       	brcs	.+6      	; 0x6396 <__mulsf3+0x12>
    6390:	95 23       	and	r25, r21
    6392:	09 f0       	breq	.+2      	; 0x6396 <__mulsf3+0x12>
    6394:	d4 ce       	rjmp	.-600    	; 0x613e <__fp_inf>
    6396:	d9 ce       	rjmp	.-590    	; 0x614a <__fp_nan>
    6398:	11 24       	eor	r1, r1
    639a:	7a cf       	rjmp	.-268    	; 0x6290 <__fp_szero>

0000639c <__mulsf3x>:
    639c:	56 df       	rcall	.-340    	; 0x624a <__fp_split3>
    639e:	a0 f3       	brcs	.-24     	; 0x6388 <__mulsf3+0x4>

000063a0 <__mulsf3_pse>:
    63a0:	95 9f       	mul	r25, r21
    63a2:	d1 f3       	breq	.-12     	; 0x6398 <__mulsf3+0x14>
    63a4:	95 0f       	add	r25, r21
    63a6:	50 e0       	ldi	r21, 0x00	; 0
    63a8:	55 1f       	adc	r21, r21
    63aa:	62 9f       	mul	r22, r18
    63ac:	f0 01       	movw	r30, r0
    63ae:	72 9f       	mul	r23, r18
    63b0:	bb 27       	eor	r27, r27
    63b2:	f0 0d       	add	r31, r0
    63b4:	b1 1d       	adc	r27, r1
    63b6:	63 9f       	mul	r22, r19
    63b8:	aa 27       	eor	r26, r26
    63ba:	f0 0d       	add	r31, r0
    63bc:	b1 1d       	adc	r27, r1
    63be:	aa 1f       	adc	r26, r26
    63c0:	64 9f       	mul	r22, r20
    63c2:	66 27       	eor	r22, r22
    63c4:	b0 0d       	add	r27, r0
    63c6:	a1 1d       	adc	r26, r1
    63c8:	66 1f       	adc	r22, r22
    63ca:	82 9f       	mul	r24, r18
    63cc:	22 27       	eor	r18, r18
    63ce:	b0 0d       	add	r27, r0
    63d0:	a1 1d       	adc	r26, r1
    63d2:	62 1f       	adc	r22, r18
    63d4:	73 9f       	mul	r23, r19
    63d6:	b0 0d       	add	r27, r0
    63d8:	a1 1d       	adc	r26, r1
    63da:	62 1f       	adc	r22, r18
    63dc:	83 9f       	mul	r24, r19
    63de:	a0 0d       	add	r26, r0
    63e0:	61 1d       	adc	r22, r1
    63e2:	22 1f       	adc	r18, r18
    63e4:	74 9f       	mul	r23, r20
    63e6:	33 27       	eor	r19, r19
    63e8:	a0 0d       	add	r26, r0
    63ea:	61 1d       	adc	r22, r1
    63ec:	23 1f       	adc	r18, r19
    63ee:	84 9f       	mul	r24, r20
    63f0:	60 0d       	add	r22, r0
    63f2:	21 1d       	adc	r18, r1
    63f4:	82 2f       	mov	r24, r18
    63f6:	76 2f       	mov	r23, r22
    63f8:	6a 2f       	mov	r22, r26
    63fa:	11 24       	eor	r1, r1
    63fc:	9f 57       	subi	r25, 0x7F	; 127
    63fe:	50 40       	sbci	r21, 0x00	; 0
    6400:	8a f0       	brmi	.+34     	; 0x6424 <__mulsf3_pse+0x84>
    6402:	e1 f0       	breq	.+56     	; 0x643c <__mulsf3_pse+0x9c>
    6404:	88 23       	and	r24, r24
    6406:	4a f0       	brmi	.+18     	; 0x641a <__mulsf3_pse+0x7a>
    6408:	ee 0f       	add	r30, r30
    640a:	ff 1f       	adc	r31, r31
    640c:	bb 1f       	adc	r27, r27
    640e:	66 1f       	adc	r22, r22
    6410:	77 1f       	adc	r23, r23
    6412:	88 1f       	adc	r24, r24
    6414:	91 50       	subi	r25, 0x01	; 1
    6416:	50 40       	sbci	r21, 0x00	; 0
    6418:	a9 f7       	brne	.-22     	; 0x6404 <__mulsf3_pse+0x64>
    641a:	9e 3f       	cpi	r25, 0xFE	; 254
    641c:	51 05       	cpc	r21, r1
    641e:	70 f0       	brcs	.+28     	; 0x643c <__mulsf3_pse+0x9c>
    6420:	8e ce       	rjmp	.-740    	; 0x613e <__fp_inf>
    6422:	36 cf       	rjmp	.-404    	; 0x6290 <__fp_szero>
    6424:	5f 3f       	cpi	r21, 0xFF	; 255
    6426:	ec f3       	brlt	.-6      	; 0x6422 <__mulsf3_pse+0x82>
    6428:	98 3e       	cpi	r25, 0xE8	; 232
    642a:	dc f3       	brlt	.-10     	; 0x6422 <__mulsf3_pse+0x82>
    642c:	86 95       	lsr	r24
    642e:	77 95       	ror	r23
    6430:	67 95       	ror	r22
    6432:	b7 95       	ror	r27
    6434:	f7 95       	ror	r31
    6436:	e7 95       	ror	r30
    6438:	9f 5f       	subi	r25, 0xFF	; 255
    643a:	c1 f7       	brne	.-16     	; 0x642c <__mulsf3_pse+0x8c>
    643c:	fe 2b       	or	r31, r30
    643e:	88 0f       	add	r24, r24
    6440:	91 1d       	adc	r25, r1
    6442:	96 95       	lsr	r25
    6444:	87 95       	ror	r24
    6446:	97 f9       	bld	r25, 7
    6448:	08 95       	ret

0000644a <sin>:
    644a:	9f 93       	push	r25
    644c:	b5 de       	rcall	.-662    	; 0x61b8 <__fp_rempio2>
    644e:	0f 90       	pop	r0
    6450:	07 fc       	sbrc	r0, 7
    6452:	ee 5f       	subi	r30, 0xFE	; 254
    6454:	e9 ce       	rjmp	.-558    	; 0x6228 <__fp_sinus>
    6456:	11 f4       	brne	.+4      	; 0x645c <sin+0x12>
    6458:	0e f4       	brtc	.+2      	; 0x645c <sin+0x12>
    645a:	77 ce       	rjmp	.-786    	; 0x614a <__fp_nan>
    645c:	3e c0       	rjmp	.+124    	; 0x64da <__fp_mpack>

0000645e <sqrt>:
    645e:	fd de       	rcall	.-518    	; 0x625a <__fp_splitA>
    6460:	d0 f3       	brcs	.-12     	; 0x6456 <sin+0xc>
    6462:	99 23       	and	r25, r25
    6464:	d9 f3       	breq	.-10     	; 0x645c <sin+0x12>
    6466:	ce f3       	brts	.-14     	; 0x645a <sin+0x10>
    6468:	9f 57       	subi	r25, 0x7F	; 127
    646a:	55 0b       	sbc	r21, r21
    646c:	87 ff       	sbrs	r24, 7
    646e:	43 d0       	rcall	.+134    	; 0x64f6 <__fp_norm2>
    6470:	00 24       	eor	r0, r0
    6472:	a0 e6       	ldi	r26, 0x60	; 96
    6474:	40 ea       	ldi	r20, 0xA0	; 160
    6476:	90 01       	movw	r18, r0
    6478:	80 58       	subi	r24, 0x80	; 128
    647a:	56 95       	lsr	r21
    647c:	97 95       	ror	r25
    647e:	28 f4       	brcc	.+10     	; 0x648a <sqrt+0x2c>
    6480:	80 5c       	subi	r24, 0xC0	; 192
    6482:	66 0f       	add	r22, r22
    6484:	77 1f       	adc	r23, r23
    6486:	88 1f       	adc	r24, r24
    6488:	20 f0       	brcs	.+8      	; 0x6492 <sqrt+0x34>
    648a:	26 17       	cp	r18, r22
    648c:	37 07       	cpc	r19, r23
    648e:	48 07       	cpc	r20, r24
    6490:	30 f4       	brcc	.+12     	; 0x649e <sqrt+0x40>
    6492:	62 1b       	sub	r22, r18
    6494:	73 0b       	sbc	r23, r19
    6496:	84 0b       	sbc	r24, r20
    6498:	20 29       	or	r18, r0
    649a:	31 29       	or	r19, r1
    649c:	4a 2b       	or	r20, r26
    649e:	a6 95       	lsr	r26
    64a0:	17 94       	ror	r1
    64a2:	07 94       	ror	r0
    64a4:	20 25       	eor	r18, r0
    64a6:	31 25       	eor	r19, r1
    64a8:	4a 27       	eor	r20, r26
    64aa:	58 f7       	brcc	.-42     	; 0x6482 <sqrt+0x24>
    64ac:	66 0f       	add	r22, r22
    64ae:	77 1f       	adc	r23, r23
    64b0:	88 1f       	adc	r24, r24
    64b2:	20 f0       	brcs	.+8      	; 0x64bc <sqrt+0x5e>
    64b4:	26 17       	cp	r18, r22
    64b6:	37 07       	cpc	r19, r23
    64b8:	48 07       	cpc	r20, r24
    64ba:	30 f4       	brcc	.+12     	; 0x64c8 <sqrt+0x6a>
    64bc:	62 0b       	sbc	r22, r18
    64be:	73 0b       	sbc	r23, r19
    64c0:	84 0b       	sbc	r24, r20
    64c2:	20 0d       	add	r18, r0
    64c4:	31 1d       	adc	r19, r1
    64c6:	41 1d       	adc	r20, r1
    64c8:	a0 95       	com	r26
    64ca:	81 f7       	brne	.-32     	; 0x64ac <sqrt+0x4e>
    64cc:	b9 01       	movw	r22, r18
    64ce:	84 2f       	mov	r24, r20
    64d0:	91 58       	subi	r25, 0x81	; 129
    64d2:	88 0f       	add	r24, r24
    64d4:	96 95       	lsr	r25
    64d6:	87 95       	ror	r24
    64d8:	08 95       	ret

000064da <__fp_mpack>:
    64da:	9f 3f       	cpi	r25, 0xFF	; 255
    64dc:	31 f0       	breq	.+12     	; 0x64ea <__fp_mpack_finite+0xc>

000064de <__fp_mpack_finite>:
    64de:	91 50       	subi	r25, 0x01	; 1
    64e0:	20 f4       	brcc	.+8      	; 0x64ea <__fp_mpack_finite+0xc>
    64e2:	87 95       	ror	r24
    64e4:	77 95       	ror	r23
    64e6:	67 95       	ror	r22
    64e8:	b7 95       	ror	r27
    64ea:	88 0f       	add	r24, r24
    64ec:	91 1d       	adc	r25, r1
    64ee:	96 95       	lsr	r25
    64f0:	87 95       	ror	r24
    64f2:	97 f9       	bld	r25, 7
    64f4:	08 95       	ret

000064f6 <__fp_norm2>:
    64f6:	91 50       	subi	r25, 0x01	; 1
    64f8:	50 40       	sbci	r21, 0x00	; 0
    64fa:	66 0f       	add	r22, r22
    64fc:	77 1f       	adc	r23, r23
    64fe:	88 1f       	adc	r24, r24
    6500:	d2 f7       	brpl	.-12     	; 0x64f6 <__fp_norm2>
    6502:	08 95       	ret

00006504 <__fp_powsodd>:
    6504:	9f 93       	push	r25
    6506:	8f 93       	push	r24
    6508:	7f 93       	push	r23
    650a:	6f 93       	push	r22
    650c:	ff 93       	push	r31
    650e:	ef 93       	push	r30
    6510:	9b 01       	movw	r18, r22
    6512:	ac 01       	movw	r20, r24
    6514:	37 df       	rcall	.-402    	; 0x6384 <__mulsf3>
    6516:	ef 91       	pop	r30
    6518:	ff 91       	pop	r31
    651a:	1a de       	rcall	.-972    	; 0x6150 <__fp_powser>
    651c:	2f 91       	pop	r18
    651e:	3f 91       	pop	r19
    6520:	4f 91       	pop	r20
    6522:	5f 91       	pop	r21
    6524:	2f cf       	rjmp	.-418    	; 0x6384 <__mulsf3>

00006526 <__udivmodhi4>:
    6526:	aa 1b       	sub	r26, r26
    6528:	bb 1b       	sub	r27, r27
    652a:	51 e1       	ldi	r21, 0x11	; 17
    652c:	07 c0       	rjmp	.+14     	; 0x653c <__udivmodhi4_ep>

0000652e <__udivmodhi4_loop>:
    652e:	aa 1f       	adc	r26, r26
    6530:	bb 1f       	adc	r27, r27
    6532:	a6 17       	cp	r26, r22
    6534:	b7 07       	cpc	r27, r23
    6536:	10 f0       	brcs	.+4      	; 0x653c <__udivmodhi4_ep>
    6538:	a6 1b       	sub	r26, r22
    653a:	b7 0b       	sbc	r27, r23

0000653c <__udivmodhi4_ep>:
    653c:	88 1f       	adc	r24, r24
    653e:	99 1f       	adc	r25, r25
    6540:	5a 95       	dec	r21
    6542:	a9 f7       	brne	.-22     	; 0x652e <__udivmodhi4_loop>
    6544:	80 95       	com	r24
    6546:	90 95       	com	r25
    6548:	bc 01       	movw	r22, r24
    654a:	cd 01       	movw	r24, r26
    654c:	08 95       	ret

0000654e <__udivmodsi4>:
    654e:	a1 e2       	ldi	r26, 0x21	; 33
    6550:	1a 2e       	mov	r1, r26
    6552:	aa 1b       	sub	r26, r26
    6554:	bb 1b       	sub	r27, r27
    6556:	fd 01       	movw	r30, r26
    6558:	0d c0       	rjmp	.+26     	; 0x6574 <__udivmodsi4_ep>

0000655a <__udivmodsi4_loop>:
    655a:	aa 1f       	adc	r26, r26
    655c:	bb 1f       	adc	r27, r27
    655e:	ee 1f       	adc	r30, r30
    6560:	ff 1f       	adc	r31, r31
    6562:	a2 17       	cp	r26, r18
    6564:	b3 07       	cpc	r27, r19
    6566:	e4 07       	cpc	r30, r20
    6568:	f5 07       	cpc	r31, r21
    656a:	20 f0       	brcs	.+8      	; 0x6574 <__udivmodsi4_ep>
    656c:	a2 1b       	sub	r26, r18
    656e:	b3 0b       	sbc	r27, r19
    6570:	e4 0b       	sbc	r30, r20
    6572:	f5 0b       	sbc	r31, r21

00006574 <__udivmodsi4_ep>:
    6574:	66 1f       	adc	r22, r22
    6576:	77 1f       	adc	r23, r23
    6578:	88 1f       	adc	r24, r24
    657a:	99 1f       	adc	r25, r25
    657c:	1a 94       	dec	r1
    657e:	69 f7       	brne	.-38     	; 0x655a <__udivmodsi4_loop>
    6580:	60 95       	com	r22
    6582:	70 95       	com	r23
    6584:	80 95       	com	r24
    6586:	90 95       	com	r25
    6588:	9b 01       	movw	r18, r22
    658a:	ac 01       	movw	r20, r24
    658c:	bd 01       	movw	r22, r26
    658e:	cf 01       	movw	r24, r30
    6590:	08 95       	ret

00006592 <__tablejump_elpm__>:
    6592:	07 90       	elpm	r0, Z+
    6594:	f6 91       	elpm	r31, Z
    6596:	e0 2d       	mov	r30, r0
    6598:	19 94       	eijmp

0000659a <fprintf_P>:
    659a:	0f 93       	push	r16
    659c:	1f 93       	push	r17
    659e:	cf 93       	push	r28
    65a0:	df 93       	push	r29
    65a2:	cd b7       	in	r28, 0x3d	; 61
    65a4:	de b7       	in	r29, 0x3e	; 62
    65a6:	08 85       	ldd	r16, Y+8	; 0x08
    65a8:	19 85       	ldd	r17, Y+9	; 0x09
    65aa:	ae 01       	movw	r20, r28
    65ac:	44 5f       	subi	r20, 0xF4	; 244
    65ae:	5f 4f       	sbci	r21, 0xFF	; 255
    65b0:	f8 01       	movw	r30, r16
    65b2:	83 81       	ldd	r24, Z+3	; 0x03
    65b4:	88 60       	ori	r24, 0x08	; 8
    65b6:	83 83       	std	Z+3, r24	; 0x03
    65b8:	c8 01       	movw	r24, r16
    65ba:	6a 85       	ldd	r22, Y+10	; 0x0a
    65bc:	7b 85       	ldd	r23, Y+11	; 0x0b
    65be:	0e 94 0a 33 	call	0x6614	; 0x6614 <vfprintf>
    65c2:	f8 01       	movw	r30, r16
    65c4:	23 81       	ldd	r18, Z+3	; 0x03
    65c6:	27 7f       	andi	r18, 0xF7	; 247
    65c8:	23 83       	std	Z+3, r18	; 0x03
    65ca:	df 91       	pop	r29
    65cc:	cf 91       	pop	r28
    65ce:	1f 91       	pop	r17
    65d0:	0f 91       	pop	r16
    65d2:	08 95       	ret

000065d4 <printf_P>:
    65d4:	cf 93       	push	r28
    65d6:	df 93       	push	r29
    65d8:	cd b7       	in	r28, 0x3d	; 61
    65da:	de b7       	in	r29, 0x3e	; 62
    65dc:	fe 01       	movw	r30, r28
    65de:	36 96       	adiw	r30, 0x06	; 6
    65e0:	61 91       	ld	r22, Z+
    65e2:	71 91       	ld	r23, Z+
    65e4:	80 91 a5 2b 	lds	r24, 0x2BA5
    65e8:	90 91 a6 2b 	lds	r25, 0x2BA6
    65ec:	dc 01       	movw	r26, r24
    65ee:	13 96       	adiw	r26, 0x03	; 3
    65f0:	2c 91       	ld	r18, X
    65f2:	13 97       	sbiw	r26, 0x03	; 3
    65f4:	28 60       	ori	r18, 0x08	; 8
    65f6:	13 96       	adiw	r26, 0x03	; 3
    65f8:	2c 93       	st	X, r18
    65fa:	af 01       	movw	r20, r30
    65fc:	0e 94 0a 33 	call	0x6614	; 0x6614 <vfprintf>
    6600:	e0 91 a5 2b 	lds	r30, 0x2BA5
    6604:	f0 91 a6 2b 	lds	r31, 0x2BA6
    6608:	23 81       	ldd	r18, Z+3	; 0x03
    660a:	27 7f       	andi	r18, 0xF7	; 247
    660c:	23 83       	std	Z+3, r18	; 0x03
    660e:	df 91       	pop	r29
    6610:	cf 91       	pop	r28
    6612:	08 95       	ret

00006614 <vfprintf>:
    6614:	2f 92       	push	r2
    6616:	3f 92       	push	r3
    6618:	4f 92       	push	r4
    661a:	5f 92       	push	r5
    661c:	6f 92       	push	r6
    661e:	7f 92       	push	r7
    6620:	8f 92       	push	r8
    6622:	9f 92       	push	r9
    6624:	af 92       	push	r10
    6626:	bf 92       	push	r11
    6628:	cf 92       	push	r12
    662a:	df 92       	push	r13
    662c:	ef 92       	push	r14
    662e:	ff 92       	push	r15
    6630:	0f 93       	push	r16
    6632:	1f 93       	push	r17
    6634:	cf 93       	push	r28
    6636:	df 93       	push	r29
    6638:	cd b7       	in	r28, 0x3d	; 61
    663a:	de b7       	in	r29, 0x3e	; 62
    663c:	2d 97       	sbiw	r28, 0x0d	; 13
    663e:	cd bf       	out	0x3d, r28	; 61
    6640:	de bf       	out	0x3e, r29	; 62
    6642:	3c 01       	movw	r6, r24
    6644:	6c 87       	std	Y+12, r22	; 0x0c
    6646:	7d 87       	std	Y+13, r23	; 0x0d
    6648:	5a 01       	movw	r10, r20
    664a:	fc 01       	movw	r30, r24
    664c:	16 82       	std	Z+6, r1	; 0x06
    664e:	17 82       	std	Z+7, r1	; 0x07
    6650:	83 81       	ldd	r24, Z+3	; 0x03
    6652:	81 ff       	sbrs	r24, 1
    6654:	c8 c1       	rjmp	.+912    	; 0x69e6 <vfprintf+0x3d2>
    6656:	2e 01       	movw	r4, r28
    6658:	08 94       	sec
    665a:	41 1c       	adc	r4, r1
    665c:	51 1c       	adc	r5, r1
    665e:	f3 01       	movw	r30, r6
    6660:	93 81       	ldd	r25, Z+3	; 0x03
    6662:	ec 85       	ldd	r30, Y+12	; 0x0c
    6664:	fd 85       	ldd	r31, Y+13	; 0x0d
    6666:	93 fd       	sbrc	r25, 3
    6668:	85 91       	lpm	r24, Z+
    666a:	93 ff       	sbrs	r25, 3
    666c:	81 91       	ld	r24, Z+
    666e:	ec 87       	std	Y+12, r30	; 0x0c
    6670:	fd 87       	std	Y+13, r31	; 0x0d
    6672:	88 23       	and	r24, r24
    6674:	09 f4       	brne	.+2      	; 0x6678 <vfprintf+0x64>
    6676:	b3 c1       	rjmp	.+870    	; 0x69de <vfprintf+0x3ca>
    6678:	85 32       	cpi	r24, 0x25	; 37
    667a:	41 f4       	brne	.+16     	; 0x668c <vfprintf+0x78>
    667c:	93 fd       	sbrc	r25, 3
    667e:	85 91       	lpm	r24, Z+
    6680:	93 ff       	sbrs	r25, 3
    6682:	81 91       	ld	r24, Z+
    6684:	ec 87       	std	Y+12, r30	; 0x0c
    6686:	fd 87       	std	Y+13, r31	; 0x0d
    6688:	85 32       	cpi	r24, 0x25	; 37
    668a:	29 f4       	brne	.+10     	; 0x6696 <vfprintf+0x82>
    668c:	90 e0       	ldi	r25, 0x00	; 0
    668e:	b3 01       	movw	r22, r6
    6690:	0e 94 21 35 	call	0x6a42	; 0x6a42 <fputc>
    6694:	e4 cf       	rjmp	.-56     	; 0x665e <vfprintf+0x4a>
    6696:	ff 24       	eor	r15, r15
    6698:	ee 24       	eor	r14, r14
    669a:	10 e0       	ldi	r17, 0x00	; 0
    669c:	10 32       	cpi	r17, 0x20	; 32
    669e:	b0 f4       	brcc	.+44     	; 0x66cc <vfprintf+0xb8>
    66a0:	8b 32       	cpi	r24, 0x2B	; 43
    66a2:	69 f0       	breq	.+26     	; 0x66be <vfprintf+0xaa>
    66a4:	8c 32       	cpi	r24, 0x2C	; 44
    66a6:	28 f4       	brcc	.+10     	; 0x66b2 <vfprintf+0x9e>
    66a8:	80 32       	cpi	r24, 0x20	; 32
    66aa:	51 f0       	breq	.+20     	; 0x66c0 <vfprintf+0xac>
    66ac:	83 32       	cpi	r24, 0x23	; 35
    66ae:	71 f4       	brne	.+28     	; 0x66cc <vfprintf+0xb8>
    66b0:	0b c0       	rjmp	.+22     	; 0x66c8 <vfprintf+0xb4>
    66b2:	8d 32       	cpi	r24, 0x2D	; 45
    66b4:	39 f0       	breq	.+14     	; 0x66c4 <vfprintf+0xb0>
    66b6:	80 33       	cpi	r24, 0x30	; 48
    66b8:	49 f4       	brne	.+18     	; 0x66cc <vfprintf+0xb8>
    66ba:	11 60       	ori	r17, 0x01	; 1
    66bc:	2c c0       	rjmp	.+88     	; 0x6716 <vfprintf+0x102>
    66be:	12 60       	ori	r17, 0x02	; 2
    66c0:	14 60       	ori	r17, 0x04	; 4
    66c2:	29 c0       	rjmp	.+82     	; 0x6716 <vfprintf+0x102>
    66c4:	18 60       	ori	r17, 0x08	; 8
    66c6:	27 c0       	rjmp	.+78     	; 0x6716 <vfprintf+0x102>
    66c8:	10 61       	ori	r17, 0x10	; 16
    66ca:	25 c0       	rjmp	.+74     	; 0x6716 <vfprintf+0x102>
    66cc:	17 fd       	sbrc	r17, 7
    66ce:	2e c0       	rjmp	.+92     	; 0x672c <vfprintf+0x118>
    66d0:	28 2f       	mov	r18, r24
    66d2:	20 53       	subi	r18, 0x30	; 48
    66d4:	2a 30       	cpi	r18, 0x0A	; 10
    66d6:	98 f4       	brcc	.+38     	; 0x66fe <vfprintf+0xea>
    66d8:	16 ff       	sbrs	r17, 6
    66da:	08 c0       	rjmp	.+16     	; 0x66ec <vfprintf+0xd8>
    66dc:	8f 2d       	mov	r24, r15
    66de:	88 0f       	add	r24, r24
    66e0:	f8 2e       	mov	r15, r24
    66e2:	ff 0c       	add	r15, r15
    66e4:	ff 0c       	add	r15, r15
    66e6:	f8 0e       	add	r15, r24
    66e8:	f2 0e       	add	r15, r18
    66ea:	15 c0       	rjmp	.+42     	; 0x6716 <vfprintf+0x102>
    66ec:	8e 2d       	mov	r24, r14
    66ee:	88 0f       	add	r24, r24
    66f0:	e8 2e       	mov	r14, r24
    66f2:	ee 0c       	add	r14, r14
    66f4:	ee 0c       	add	r14, r14
    66f6:	e8 0e       	add	r14, r24
    66f8:	e2 0e       	add	r14, r18
    66fa:	10 62       	ori	r17, 0x20	; 32
    66fc:	0c c0       	rjmp	.+24     	; 0x6716 <vfprintf+0x102>
    66fe:	8e 32       	cpi	r24, 0x2E	; 46
    6700:	21 f4       	brne	.+8      	; 0x670a <vfprintf+0xf6>
    6702:	16 fd       	sbrc	r17, 6
    6704:	6c c1       	rjmp	.+728    	; 0x69de <vfprintf+0x3ca>
    6706:	10 64       	ori	r17, 0x40	; 64
    6708:	06 c0       	rjmp	.+12     	; 0x6716 <vfprintf+0x102>
    670a:	8c 36       	cpi	r24, 0x6C	; 108
    670c:	11 f4       	brne	.+4      	; 0x6712 <vfprintf+0xfe>
    670e:	10 68       	ori	r17, 0x80	; 128
    6710:	02 c0       	rjmp	.+4      	; 0x6716 <vfprintf+0x102>
    6712:	88 36       	cpi	r24, 0x68	; 104
    6714:	59 f4       	brne	.+22     	; 0x672c <vfprintf+0x118>
    6716:	ec 85       	ldd	r30, Y+12	; 0x0c
    6718:	fd 85       	ldd	r31, Y+13	; 0x0d
    671a:	93 fd       	sbrc	r25, 3
    671c:	85 91       	lpm	r24, Z+
    671e:	93 ff       	sbrs	r25, 3
    6720:	81 91       	ld	r24, Z+
    6722:	ec 87       	std	Y+12, r30	; 0x0c
    6724:	fd 87       	std	Y+13, r31	; 0x0d
    6726:	88 23       	and	r24, r24
    6728:	09 f0       	breq	.+2      	; 0x672c <vfprintf+0x118>
    672a:	b8 cf       	rjmp	.-144    	; 0x669c <vfprintf+0x88>
    672c:	98 2f       	mov	r25, r24
    672e:	95 54       	subi	r25, 0x45	; 69
    6730:	93 30       	cpi	r25, 0x03	; 3
    6732:	18 f0       	brcs	.+6      	; 0x673a <vfprintf+0x126>
    6734:	90 52       	subi	r25, 0x20	; 32
    6736:	93 30       	cpi	r25, 0x03	; 3
    6738:	38 f4       	brcc	.+14     	; 0x6748 <vfprintf+0x134>
    673a:	24 e0       	ldi	r18, 0x04	; 4
    673c:	30 e0       	ldi	r19, 0x00	; 0
    673e:	a2 0e       	add	r10, r18
    6740:	b3 1e       	adc	r11, r19
    6742:	3f e3       	ldi	r19, 0x3F	; 63
    6744:	39 83       	std	Y+1, r19	; 0x01
    6746:	0f c0       	rjmp	.+30     	; 0x6766 <vfprintf+0x152>
    6748:	83 36       	cpi	r24, 0x63	; 99
    674a:	31 f0       	breq	.+12     	; 0x6758 <vfprintf+0x144>
    674c:	83 37       	cpi	r24, 0x73	; 115
    674e:	81 f0       	breq	.+32     	; 0x6770 <vfprintf+0x15c>
    6750:	83 35       	cpi	r24, 0x53	; 83
    6752:	09 f0       	breq	.+2      	; 0x6756 <vfprintf+0x142>
    6754:	5a c0       	rjmp	.+180    	; 0x680a <vfprintf+0x1f6>
    6756:	22 c0       	rjmp	.+68     	; 0x679c <vfprintf+0x188>
    6758:	f5 01       	movw	r30, r10
    675a:	80 81       	ld	r24, Z
    675c:	89 83       	std	Y+1, r24	; 0x01
    675e:	22 e0       	ldi	r18, 0x02	; 2
    6760:	30 e0       	ldi	r19, 0x00	; 0
    6762:	a2 0e       	add	r10, r18
    6764:	b3 1e       	adc	r11, r19
    6766:	21 e0       	ldi	r18, 0x01	; 1
    6768:	c2 2e       	mov	r12, r18
    676a:	d1 2c       	mov	r13, r1
    676c:	42 01       	movw	r8, r4
    676e:	14 c0       	rjmp	.+40     	; 0x6798 <vfprintf+0x184>
    6770:	92 e0       	ldi	r25, 0x02	; 2
    6772:	29 2e       	mov	r2, r25
    6774:	31 2c       	mov	r3, r1
    6776:	2a 0c       	add	r2, r10
    6778:	3b 1c       	adc	r3, r11
    677a:	f5 01       	movw	r30, r10
    677c:	80 80       	ld	r8, Z
    677e:	91 80       	ldd	r9, Z+1	; 0x01
    6780:	16 ff       	sbrs	r17, 6
    6782:	03 c0       	rjmp	.+6      	; 0x678a <vfprintf+0x176>
    6784:	6f 2d       	mov	r22, r15
    6786:	70 e0       	ldi	r23, 0x00	; 0
    6788:	02 c0       	rjmp	.+4      	; 0x678e <vfprintf+0x17a>
    678a:	6f ef       	ldi	r22, 0xFF	; 255
    678c:	7f ef       	ldi	r23, 0xFF	; 255
    678e:	c4 01       	movw	r24, r8
    6790:	0e 94 16 35 	call	0x6a2c	; 0x6a2c <strnlen>
    6794:	6c 01       	movw	r12, r24
    6796:	51 01       	movw	r10, r2
    6798:	1f 77       	andi	r17, 0x7F	; 127
    679a:	15 c0       	rjmp	.+42     	; 0x67c6 <vfprintf+0x1b2>
    679c:	82 e0       	ldi	r24, 0x02	; 2
    679e:	28 2e       	mov	r2, r24
    67a0:	31 2c       	mov	r3, r1
    67a2:	2a 0c       	add	r2, r10
    67a4:	3b 1c       	adc	r3, r11
    67a6:	f5 01       	movw	r30, r10
    67a8:	80 80       	ld	r8, Z
    67aa:	91 80       	ldd	r9, Z+1	; 0x01
    67ac:	16 ff       	sbrs	r17, 6
    67ae:	03 c0       	rjmp	.+6      	; 0x67b6 <vfprintf+0x1a2>
    67b0:	6f 2d       	mov	r22, r15
    67b2:	70 e0       	ldi	r23, 0x00	; 0
    67b4:	02 c0       	rjmp	.+4      	; 0x67ba <vfprintf+0x1a6>
    67b6:	6f ef       	ldi	r22, 0xFF	; 255
    67b8:	7f ef       	ldi	r23, 0xFF	; 255
    67ba:	c4 01       	movw	r24, r8
    67bc:	0e 94 0b 35 	call	0x6a16	; 0x6a16 <strnlen_P>
    67c0:	6c 01       	movw	r12, r24
    67c2:	10 68       	ori	r17, 0x80	; 128
    67c4:	51 01       	movw	r10, r2
    67c6:	13 fd       	sbrc	r17, 3
    67c8:	1c c0       	rjmp	.+56     	; 0x6802 <vfprintf+0x1ee>
    67ca:	06 c0       	rjmp	.+12     	; 0x67d8 <vfprintf+0x1c4>
    67cc:	80 e2       	ldi	r24, 0x20	; 32
    67ce:	90 e0       	ldi	r25, 0x00	; 0
    67d0:	b3 01       	movw	r22, r6
    67d2:	0e 94 21 35 	call	0x6a42	; 0x6a42 <fputc>
    67d6:	ea 94       	dec	r14
    67d8:	8e 2d       	mov	r24, r14
    67da:	90 e0       	ldi	r25, 0x00	; 0
    67dc:	c8 16       	cp	r12, r24
    67de:	d9 06       	cpc	r13, r25
    67e0:	a8 f3       	brcs	.-22     	; 0x67cc <vfprintf+0x1b8>
    67e2:	0f c0       	rjmp	.+30     	; 0x6802 <vfprintf+0x1ee>
    67e4:	f4 01       	movw	r30, r8
    67e6:	17 fd       	sbrc	r17, 7
    67e8:	85 91       	lpm	r24, Z+
    67ea:	17 ff       	sbrs	r17, 7
    67ec:	81 91       	ld	r24, Z+
    67ee:	4f 01       	movw	r8, r30
    67f0:	90 e0       	ldi	r25, 0x00	; 0
    67f2:	b3 01       	movw	r22, r6
    67f4:	0e 94 21 35 	call	0x6a42	; 0x6a42 <fputc>
    67f8:	e1 10       	cpse	r14, r1
    67fa:	ea 94       	dec	r14
    67fc:	08 94       	sec
    67fe:	c1 08       	sbc	r12, r1
    6800:	d1 08       	sbc	r13, r1
    6802:	c1 14       	cp	r12, r1
    6804:	d1 04       	cpc	r13, r1
    6806:	71 f7       	brne	.-36     	; 0x67e4 <vfprintf+0x1d0>
    6808:	e7 c0       	rjmp	.+462    	; 0x69d8 <vfprintf+0x3c4>
    680a:	84 36       	cpi	r24, 0x64	; 100
    680c:	11 f0       	breq	.+4      	; 0x6812 <vfprintf+0x1fe>
    680e:	89 36       	cpi	r24, 0x69	; 105
    6810:	51 f5       	brne	.+84     	; 0x6866 <vfprintf+0x252>
    6812:	f5 01       	movw	r30, r10
    6814:	17 ff       	sbrs	r17, 7
    6816:	07 c0       	rjmp	.+14     	; 0x6826 <vfprintf+0x212>
    6818:	80 81       	ld	r24, Z
    681a:	91 81       	ldd	r25, Z+1	; 0x01
    681c:	a2 81       	ldd	r26, Z+2	; 0x02
    681e:	b3 81       	ldd	r27, Z+3	; 0x03
    6820:	24 e0       	ldi	r18, 0x04	; 4
    6822:	30 e0       	ldi	r19, 0x00	; 0
    6824:	08 c0       	rjmp	.+16     	; 0x6836 <vfprintf+0x222>
    6826:	80 81       	ld	r24, Z
    6828:	91 81       	ldd	r25, Z+1	; 0x01
    682a:	aa 27       	eor	r26, r26
    682c:	97 fd       	sbrc	r25, 7
    682e:	a0 95       	com	r26
    6830:	ba 2f       	mov	r27, r26
    6832:	22 e0       	ldi	r18, 0x02	; 2
    6834:	30 e0       	ldi	r19, 0x00	; 0
    6836:	a2 0e       	add	r10, r18
    6838:	b3 1e       	adc	r11, r19
    683a:	01 2f       	mov	r16, r17
    683c:	0f 76       	andi	r16, 0x6F	; 111
    683e:	b7 ff       	sbrs	r27, 7
    6840:	08 c0       	rjmp	.+16     	; 0x6852 <vfprintf+0x23e>
    6842:	b0 95       	com	r27
    6844:	a0 95       	com	r26
    6846:	90 95       	com	r25
    6848:	81 95       	neg	r24
    684a:	9f 4f       	sbci	r25, 0xFF	; 255
    684c:	af 4f       	sbci	r26, 0xFF	; 255
    684e:	bf 4f       	sbci	r27, 0xFF	; 255
    6850:	00 68       	ori	r16, 0x80	; 128
    6852:	bc 01       	movw	r22, r24
    6854:	cd 01       	movw	r24, r26
    6856:	a2 01       	movw	r20, r4
    6858:	2a e0       	ldi	r18, 0x0A	; 10
    685a:	30 e0       	ldi	r19, 0x00	; 0
    685c:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <__ultoa_invert>
    6860:	d8 2e       	mov	r13, r24
    6862:	d4 18       	sub	r13, r4
    6864:	3f c0       	rjmp	.+126    	; 0x68e4 <vfprintf+0x2d0>
    6866:	85 37       	cpi	r24, 0x75	; 117
    6868:	21 f4       	brne	.+8      	; 0x6872 <vfprintf+0x25e>
    686a:	1f 7e       	andi	r17, 0xEF	; 239
    686c:	2a e0       	ldi	r18, 0x0A	; 10
    686e:	30 e0       	ldi	r19, 0x00	; 0
    6870:	20 c0       	rjmp	.+64     	; 0x68b2 <vfprintf+0x29e>
    6872:	19 7f       	andi	r17, 0xF9	; 249
    6874:	8f 36       	cpi	r24, 0x6F	; 111
    6876:	a9 f0       	breq	.+42     	; 0x68a2 <vfprintf+0x28e>
    6878:	80 37       	cpi	r24, 0x70	; 112
    687a:	20 f4       	brcc	.+8      	; 0x6884 <vfprintf+0x270>
    687c:	88 35       	cpi	r24, 0x58	; 88
    687e:	09 f0       	breq	.+2      	; 0x6882 <vfprintf+0x26e>
    6880:	ae c0       	rjmp	.+348    	; 0x69de <vfprintf+0x3ca>
    6882:	0b c0       	rjmp	.+22     	; 0x689a <vfprintf+0x286>
    6884:	80 37       	cpi	r24, 0x70	; 112
    6886:	21 f0       	breq	.+8      	; 0x6890 <vfprintf+0x27c>
    6888:	88 37       	cpi	r24, 0x78	; 120
    688a:	09 f0       	breq	.+2      	; 0x688e <vfprintf+0x27a>
    688c:	a8 c0       	rjmp	.+336    	; 0x69de <vfprintf+0x3ca>
    688e:	01 c0       	rjmp	.+2      	; 0x6892 <vfprintf+0x27e>
    6890:	10 61       	ori	r17, 0x10	; 16
    6892:	14 ff       	sbrs	r17, 4
    6894:	09 c0       	rjmp	.+18     	; 0x68a8 <vfprintf+0x294>
    6896:	14 60       	ori	r17, 0x04	; 4
    6898:	07 c0       	rjmp	.+14     	; 0x68a8 <vfprintf+0x294>
    689a:	14 ff       	sbrs	r17, 4
    689c:	08 c0       	rjmp	.+16     	; 0x68ae <vfprintf+0x29a>
    689e:	16 60       	ori	r17, 0x06	; 6
    68a0:	06 c0       	rjmp	.+12     	; 0x68ae <vfprintf+0x29a>
    68a2:	28 e0       	ldi	r18, 0x08	; 8
    68a4:	30 e0       	ldi	r19, 0x00	; 0
    68a6:	05 c0       	rjmp	.+10     	; 0x68b2 <vfprintf+0x29e>
    68a8:	20 e1       	ldi	r18, 0x10	; 16
    68aa:	30 e0       	ldi	r19, 0x00	; 0
    68ac:	02 c0       	rjmp	.+4      	; 0x68b2 <vfprintf+0x29e>
    68ae:	20 e1       	ldi	r18, 0x10	; 16
    68b0:	32 e0       	ldi	r19, 0x02	; 2
    68b2:	f5 01       	movw	r30, r10
    68b4:	17 ff       	sbrs	r17, 7
    68b6:	07 c0       	rjmp	.+14     	; 0x68c6 <vfprintf+0x2b2>
    68b8:	60 81       	ld	r22, Z
    68ba:	71 81       	ldd	r23, Z+1	; 0x01
    68bc:	82 81       	ldd	r24, Z+2	; 0x02
    68be:	93 81       	ldd	r25, Z+3	; 0x03
    68c0:	44 e0       	ldi	r20, 0x04	; 4
    68c2:	50 e0       	ldi	r21, 0x00	; 0
    68c4:	06 c0       	rjmp	.+12     	; 0x68d2 <vfprintf+0x2be>
    68c6:	60 81       	ld	r22, Z
    68c8:	71 81       	ldd	r23, Z+1	; 0x01
    68ca:	80 e0       	ldi	r24, 0x00	; 0
    68cc:	90 e0       	ldi	r25, 0x00	; 0
    68ce:	42 e0       	ldi	r20, 0x02	; 2
    68d0:	50 e0       	ldi	r21, 0x00	; 0
    68d2:	a4 0e       	add	r10, r20
    68d4:	b5 1e       	adc	r11, r21
    68d6:	a2 01       	movw	r20, r4
    68d8:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <__ultoa_invert>
    68dc:	d8 2e       	mov	r13, r24
    68de:	d4 18       	sub	r13, r4
    68e0:	01 2f       	mov	r16, r17
    68e2:	0f 77       	andi	r16, 0x7F	; 127
    68e4:	06 ff       	sbrs	r16, 6
    68e6:	09 c0       	rjmp	.+18     	; 0x68fa <vfprintf+0x2e6>
    68e8:	0e 7f       	andi	r16, 0xFE	; 254
    68ea:	df 14       	cp	r13, r15
    68ec:	30 f4       	brcc	.+12     	; 0x68fa <vfprintf+0x2e6>
    68ee:	04 ff       	sbrs	r16, 4
    68f0:	06 c0       	rjmp	.+12     	; 0x68fe <vfprintf+0x2ea>
    68f2:	02 fd       	sbrc	r16, 2
    68f4:	04 c0       	rjmp	.+8      	; 0x68fe <vfprintf+0x2ea>
    68f6:	0f 7e       	andi	r16, 0xEF	; 239
    68f8:	02 c0       	rjmp	.+4      	; 0x68fe <vfprintf+0x2ea>
    68fa:	1d 2d       	mov	r17, r13
    68fc:	01 c0       	rjmp	.+2      	; 0x6900 <vfprintf+0x2ec>
    68fe:	1f 2d       	mov	r17, r15
    6900:	80 2f       	mov	r24, r16
    6902:	90 e0       	ldi	r25, 0x00	; 0
    6904:	04 ff       	sbrs	r16, 4
    6906:	0c c0       	rjmp	.+24     	; 0x6920 <vfprintf+0x30c>
    6908:	fe 01       	movw	r30, r28
    690a:	ed 0d       	add	r30, r13
    690c:	f1 1d       	adc	r31, r1
    690e:	20 81       	ld	r18, Z
    6910:	20 33       	cpi	r18, 0x30	; 48
    6912:	11 f4       	brne	.+4      	; 0x6918 <vfprintf+0x304>
    6914:	09 7e       	andi	r16, 0xE9	; 233
    6916:	09 c0       	rjmp	.+18     	; 0x692a <vfprintf+0x316>
    6918:	02 ff       	sbrs	r16, 2
    691a:	06 c0       	rjmp	.+12     	; 0x6928 <vfprintf+0x314>
    691c:	1e 5f       	subi	r17, 0xFE	; 254
    691e:	05 c0       	rjmp	.+10     	; 0x692a <vfprintf+0x316>
    6920:	86 78       	andi	r24, 0x86	; 134
    6922:	90 70       	andi	r25, 0x00	; 0
    6924:	00 97       	sbiw	r24, 0x00	; 0
    6926:	09 f0       	breq	.+2      	; 0x692a <vfprintf+0x316>
    6928:	1f 5f       	subi	r17, 0xFF	; 255
    692a:	80 2e       	mov	r8, r16
    692c:	99 24       	eor	r9, r9
    692e:	03 fd       	sbrc	r16, 3
    6930:	12 c0       	rjmp	.+36     	; 0x6956 <vfprintf+0x342>
    6932:	00 ff       	sbrs	r16, 0
    6934:	0d c0       	rjmp	.+26     	; 0x6950 <vfprintf+0x33c>
    6936:	fd 2c       	mov	r15, r13
    6938:	1e 15       	cp	r17, r14
    693a:	50 f4       	brcc	.+20     	; 0x6950 <vfprintf+0x33c>
    693c:	fe 0c       	add	r15, r14
    693e:	f1 1a       	sub	r15, r17
    6940:	1e 2d       	mov	r17, r14
    6942:	06 c0       	rjmp	.+12     	; 0x6950 <vfprintf+0x33c>
    6944:	80 e2       	ldi	r24, 0x20	; 32
    6946:	90 e0       	ldi	r25, 0x00	; 0
    6948:	b3 01       	movw	r22, r6
    694a:	0e 94 21 35 	call	0x6a42	; 0x6a42 <fputc>
    694e:	1f 5f       	subi	r17, 0xFF	; 255
    6950:	1e 15       	cp	r17, r14
    6952:	c0 f3       	brcs	.-16     	; 0x6944 <vfprintf+0x330>
    6954:	04 c0       	rjmp	.+8      	; 0x695e <vfprintf+0x34a>
    6956:	1e 15       	cp	r17, r14
    6958:	10 f4       	brcc	.+4      	; 0x695e <vfprintf+0x34a>
    695a:	e1 1a       	sub	r14, r17
    695c:	01 c0       	rjmp	.+2      	; 0x6960 <vfprintf+0x34c>
    695e:	ee 24       	eor	r14, r14
    6960:	84 fe       	sbrs	r8, 4
    6962:	0f c0       	rjmp	.+30     	; 0x6982 <vfprintf+0x36e>
    6964:	80 e3       	ldi	r24, 0x30	; 48
    6966:	90 e0       	ldi	r25, 0x00	; 0
    6968:	b3 01       	movw	r22, r6
    696a:	0e 94 21 35 	call	0x6a42	; 0x6a42 <fputc>
    696e:	82 fe       	sbrs	r8, 2
    6970:	1f c0       	rjmp	.+62     	; 0x69b0 <vfprintf+0x39c>
    6972:	81 fe       	sbrs	r8, 1
    6974:	03 c0       	rjmp	.+6      	; 0x697c <vfprintf+0x368>
    6976:	88 e5       	ldi	r24, 0x58	; 88
    6978:	90 e0       	ldi	r25, 0x00	; 0
    697a:	10 c0       	rjmp	.+32     	; 0x699c <vfprintf+0x388>
    697c:	88 e7       	ldi	r24, 0x78	; 120
    697e:	90 e0       	ldi	r25, 0x00	; 0
    6980:	0d c0       	rjmp	.+26     	; 0x699c <vfprintf+0x388>
    6982:	c4 01       	movw	r24, r8
    6984:	86 78       	andi	r24, 0x86	; 134
    6986:	90 70       	andi	r25, 0x00	; 0
    6988:	00 97       	sbiw	r24, 0x00	; 0
    698a:	91 f0       	breq	.+36     	; 0x69b0 <vfprintf+0x39c>
    698c:	81 fc       	sbrc	r8, 1
    698e:	02 c0       	rjmp	.+4      	; 0x6994 <vfprintf+0x380>
    6990:	80 e2       	ldi	r24, 0x20	; 32
    6992:	01 c0       	rjmp	.+2      	; 0x6996 <vfprintf+0x382>
    6994:	8b e2       	ldi	r24, 0x2B	; 43
    6996:	07 fd       	sbrc	r16, 7
    6998:	8d e2       	ldi	r24, 0x2D	; 45
    699a:	90 e0       	ldi	r25, 0x00	; 0
    699c:	b3 01       	movw	r22, r6
    699e:	0e 94 21 35 	call	0x6a42	; 0x6a42 <fputc>
    69a2:	06 c0       	rjmp	.+12     	; 0x69b0 <vfprintf+0x39c>
    69a4:	80 e3       	ldi	r24, 0x30	; 48
    69a6:	90 e0       	ldi	r25, 0x00	; 0
    69a8:	b3 01       	movw	r22, r6
    69aa:	0e 94 21 35 	call	0x6a42	; 0x6a42 <fputc>
    69ae:	fa 94       	dec	r15
    69b0:	df 14       	cp	r13, r15
    69b2:	c0 f3       	brcs	.-16     	; 0x69a4 <vfprintf+0x390>
    69b4:	da 94       	dec	r13
    69b6:	f2 01       	movw	r30, r4
    69b8:	ed 0d       	add	r30, r13
    69ba:	f1 1d       	adc	r31, r1
    69bc:	80 81       	ld	r24, Z
    69be:	90 e0       	ldi	r25, 0x00	; 0
    69c0:	b3 01       	movw	r22, r6
    69c2:	0e 94 21 35 	call	0x6a42	; 0x6a42 <fputc>
    69c6:	dd 20       	and	r13, r13
    69c8:	a9 f7       	brne	.-22     	; 0x69b4 <vfprintf+0x3a0>
    69ca:	06 c0       	rjmp	.+12     	; 0x69d8 <vfprintf+0x3c4>
    69cc:	80 e2       	ldi	r24, 0x20	; 32
    69ce:	90 e0       	ldi	r25, 0x00	; 0
    69d0:	b3 01       	movw	r22, r6
    69d2:	0e 94 21 35 	call	0x6a42	; 0x6a42 <fputc>
    69d6:	ea 94       	dec	r14
    69d8:	ee 20       	and	r14, r14
    69da:	c1 f7       	brne	.-16     	; 0x69cc <vfprintf+0x3b8>
    69dc:	40 ce       	rjmp	.-896    	; 0x665e <vfprintf+0x4a>
    69de:	f3 01       	movw	r30, r6
    69e0:	86 81       	ldd	r24, Z+6	; 0x06
    69e2:	97 81       	ldd	r25, Z+7	; 0x07
    69e4:	02 c0       	rjmp	.+4      	; 0x69ea <vfprintf+0x3d6>
    69e6:	8f ef       	ldi	r24, 0xFF	; 255
    69e8:	9f ef       	ldi	r25, 0xFF	; 255
    69ea:	2d 96       	adiw	r28, 0x0d	; 13
    69ec:	cd bf       	out	0x3d, r28	; 61
    69ee:	de bf       	out	0x3e, r29	; 62
    69f0:	df 91       	pop	r29
    69f2:	cf 91       	pop	r28
    69f4:	1f 91       	pop	r17
    69f6:	0f 91       	pop	r16
    69f8:	ff 90       	pop	r15
    69fa:	ef 90       	pop	r14
    69fc:	df 90       	pop	r13
    69fe:	cf 90       	pop	r12
    6a00:	bf 90       	pop	r11
    6a02:	af 90       	pop	r10
    6a04:	9f 90       	pop	r9
    6a06:	8f 90       	pop	r8
    6a08:	7f 90       	pop	r7
    6a0a:	6f 90       	pop	r6
    6a0c:	5f 90       	pop	r5
    6a0e:	4f 90       	pop	r4
    6a10:	3f 90       	pop	r3
    6a12:	2f 90       	pop	r2
    6a14:	08 95       	ret

00006a16 <strnlen_P>:
    6a16:	fc 01       	movw	r30, r24
    6a18:	05 90       	lpm	r0, Z+
    6a1a:	61 50       	subi	r22, 0x01	; 1
    6a1c:	70 40       	sbci	r23, 0x00	; 0
    6a1e:	01 10       	cpse	r0, r1
    6a20:	d8 f7       	brcc	.-10     	; 0x6a18 <strnlen_P+0x2>
    6a22:	80 95       	com	r24
    6a24:	90 95       	com	r25
    6a26:	8e 0f       	add	r24, r30
    6a28:	9f 1f       	adc	r25, r31
    6a2a:	08 95       	ret

00006a2c <strnlen>:
    6a2c:	fc 01       	movw	r30, r24
    6a2e:	61 50       	subi	r22, 0x01	; 1
    6a30:	70 40       	sbci	r23, 0x00	; 0
    6a32:	01 90       	ld	r0, Z+
    6a34:	01 10       	cpse	r0, r1
    6a36:	d8 f7       	brcc	.-10     	; 0x6a2e <strnlen+0x2>
    6a38:	80 95       	com	r24
    6a3a:	90 95       	com	r25
    6a3c:	8e 0f       	add	r24, r30
    6a3e:	9f 1f       	adc	r25, r31
    6a40:	08 95       	ret

00006a42 <fputc>:
    6a42:	0f 93       	push	r16
    6a44:	1f 93       	push	r17
    6a46:	cf 93       	push	r28
    6a48:	df 93       	push	r29
    6a4a:	8c 01       	movw	r16, r24
    6a4c:	eb 01       	movw	r28, r22
    6a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    6a50:	81 ff       	sbrs	r24, 1
    6a52:	1b c0       	rjmp	.+54     	; 0x6a8a <fputc+0x48>
    6a54:	82 ff       	sbrs	r24, 2
    6a56:	0d c0       	rjmp	.+26     	; 0x6a72 <fputc+0x30>
    6a58:	2e 81       	ldd	r18, Y+6	; 0x06
    6a5a:	3f 81       	ldd	r19, Y+7	; 0x07
    6a5c:	8c 81       	ldd	r24, Y+4	; 0x04
    6a5e:	9d 81       	ldd	r25, Y+5	; 0x05
    6a60:	28 17       	cp	r18, r24
    6a62:	39 07       	cpc	r19, r25
    6a64:	64 f4       	brge	.+24     	; 0x6a7e <fputc+0x3c>
    6a66:	e8 81       	ld	r30, Y
    6a68:	f9 81       	ldd	r31, Y+1	; 0x01
    6a6a:	01 93       	st	Z+, r16
    6a6c:	e8 83       	st	Y, r30
    6a6e:	f9 83       	std	Y+1, r31	; 0x01
    6a70:	06 c0       	rjmp	.+12     	; 0x6a7e <fputc+0x3c>
    6a72:	e8 85       	ldd	r30, Y+8	; 0x08
    6a74:	f9 85       	ldd	r31, Y+9	; 0x09
    6a76:	80 2f       	mov	r24, r16
    6a78:	19 95       	eicall
    6a7a:	00 97       	sbiw	r24, 0x00	; 0
    6a7c:	31 f4       	brne	.+12     	; 0x6a8a <fputc+0x48>
    6a7e:	8e 81       	ldd	r24, Y+6	; 0x06
    6a80:	9f 81       	ldd	r25, Y+7	; 0x07
    6a82:	01 96       	adiw	r24, 0x01	; 1
    6a84:	8e 83       	std	Y+6, r24	; 0x06
    6a86:	9f 83       	std	Y+7, r25	; 0x07
    6a88:	02 c0       	rjmp	.+4      	; 0x6a8e <fputc+0x4c>
    6a8a:	0f ef       	ldi	r16, 0xFF	; 255
    6a8c:	1f ef       	ldi	r17, 0xFF	; 255
    6a8e:	c8 01       	movw	r24, r16
    6a90:	df 91       	pop	r29
    6a92:	cf 91       	pop	r28
    6a94:	1f 91       	pop	r17
    6a96:	0f 91       	pop	r16
    6a98:	08 95       	ret

00006a9a <__ultoa_invert>:
    6a9a:	fa 01       	movw	r30, r20
    6a9c:	aa 27       	eor	r26, r26
    6a9e:	28 30       	cpi	r18, 0x08	; 8
    6aa0:	51 f1       	breq	.+84     	; 0x6af6 <__ultoa_invert+0x5c>
    6aa2:	20 31       	cpi	r18, 0x10	; 16
    6aa4:	81 f1       	breq	.+96     	; 0x6b06 <__ultoa_invert+0x6c>
    6aa6:	e8 94       	clt
    6aa8:	6f 93       	push	r22
    6aaa:	6e 7f       	andi	r22, 0xFE	; 254
    6aac:	6e 5f       	subi	r22, 0xFE	; 254
    6aae:	7f 4f       	sbci	r23, 0xFF	; 255
    6ab0:	8f 4f       	sbci	r24, 0xFF	; 255
    6ab2:	9f 4f       	sbci	r25, 0xFF	; 255
    6ab4:	af 4f       	sbci	r26, 0xFF	; 255
    6ab6:	b1 e0       	ldi	r27, 0x01	; 1
    6ab8:	3e d0       	rcall	.+124    	; 0x6b36 <__ultoa_invert+0x9c>
    6aba:	b4 e0       	ldi	r27, 0x04	; 4
    6abc:	3c d0       	rcall	.+120    	; 0x6b36 <__ultoa_invert+0x9c>
    6abe:	67 0f       	add	r22, r23
    6ac0:	78 1f       	adc	r23, r24
    6ac2:	89 1f       	adc	r24, r25
    6ac4:	9a 1f       	adc	r25, r26
    6ac6:	a1 1d       	adc	r26, r1
    6ac8:	68 0f       	add	r22, r24
    6aca:	79 1f       	adc	r23, r25
    6acc:	8a 1f       	adc	r24, r26
    6ace:	91 1d       	adc	r25, r1
    6ad0:	a1 1d       	adc	r26, r1
    6ad2:	6a 0f       	add	r22, r26
    6ad4:	71 1d       	adc	r23, r1
    6ad6:	81 1d       	adc	r24, r1
    6ad8:	91 1d       	adc	r25, r1
    6ada:	a1 1d       	adc	r26, r1
    6adc:	20 d0       	rcall	.+64     	; 0x6b1e <__ultoa_invert+0x84>
    6ade:	09 f4       	brne	.+2      	; 0x6ae2 <__ultoa_invert+0x48>
    6ae0:	68 94       	set
    6ae2:	3f 91       	pop	r19
    6ae4:	2a e0       	ldi	r18, 0x0A	; 10
    6ae6:	26 9f       	mul	r18, r22
    6ae8:	11 24       	eor	r1, r1
    6aea:	30 19       	sub	r19, r0
    6aec:	30 5d       	subi	r19, 0xD0	; 208
    6aee:	31 93       	st	Z+, r19
    6af0:	de f6       	brtc	.-74     	; 0x6aa8 <__ultoa_invert+0xe>
    6af2:	cf 01       	movw	r24, r30
    6af4:	08 95       	ret
    6af6:	46 2f       	mov	r20, r22
    6af8:	47 70       	andi	r20, 0x07	; 7
    6afa:	40 5d       	subi	r20, 0xD0	; 208
    6afc:	41 93       	st	Z+, r20
    6afe:	b3 e0       	ldi	r27, 0x03	; 3
    6b00:	0f d0       	rcall	.+30     	; 0x6b20 <__ultoa_invert+0x86>
    6b02:	c9 f7       	brne	.-14     	; 0x6af6 <__ultoa_invert+0x5c>
    6b04:	f6 cf       	rjmp	.-20     	; 0x6af2 <__ultoa_invert+0x58>
    6b06:	46 2f       	mov	r20, r22
    6b08:	4f 70       	andi	r20, 0x0F	; 15
    6b0a:	40 5d       	subi	r20, 0xD0	; 208
    6b0c:	4a 33       	cpi	r20, 0x3A	; 58
    6b0e:	18 f0       	brcs	.+6      	; 0x6b16 <__ultoa_invert+0x7c>
    6b10:	49 5d       	subi	r20, 0xD9	; 217
    6b12:	31 fd       	sbrc	r19, 1
    6b14:	40 52       	subi	r20, 0x20	; 32
    6b16:	41 93       	st	Z+, r20
    6b18:	02 d0       	rcall	.+4      	; 0x6b1e <__ultoa_invert+0x84>
    6b1a:	a9 f7       	brne	.-22     	; 0x6b06 <__ultoa_invert+0x6c>
    6b1c:	ea cf       	rjmp	.-44     	; 0x6af2 <__ultoa_invert+0x58>
    6b1e:	b4 e0       	ldi	r27, 0x04	; 4
    6b20:	a6 95       	lsr	r26
    6b22:	97 95       	ror	r25
    6b24:	87 95       	ror	r24
    6b26:	77 95       	ror	r23
    6b28:	67 95       	ror	r22
    6b2a:	ba 95       	dec	r27
    6b2c:	c9 f7       	brne	.-14     	; 0x6b20 <__ultoa_invert+0x86>
    6b2e:	00 97       	sbiw	r24, 0x00	; 0
    6b30:	61 05       	cpc	r22, r1
    6b32:	71 05       	cpc	r23, r1
    6b34:	08 95       	ret
    6b36:	9b 01       	movw	r18, r22
    6b38:	ac 01       	movw	r20, r24
    6b3a:	0a 2e       	mov	r0, r26
    6b3c:	06 94       	lsr	r0
    6b3e:	57 95       	ror	r21
    6b40:	47 95       	ror	r20
    6b42:	37 95       	ror	r19
    6b44:	27 95       	ror	r18
    6b46:	ba 95       	dec	r27
    6b48:	c9 f7       	brne	.-14     	; 0x6b3c <__ultoa_invert+0xa2>
    6b4a:	62 0f       	add	r22, r18
    6b4c:	73 1f       	adc	r23, r19
    6b4e:	84 1f       	adc	r24, r20
    6b50:	95 1f       	adc	r25, r21
    6b52:	a0 1d       	adc	r26, r0
    6b54:	08 95       	ret

00006b56 <__do_global_dtors>:
    6b56:	14 e0       	ldi	r17, 0x04	; 4
    6b58:	c0 e2       	ldi	r28, 0x20	; 32
    6b5a:	d4 e0       	ldi	r29, 0x04	; 4
    6b5c:	00 e0       	ldi	r16, 0x00	; 0
    6b5e:	06 c0       	rjmp	.+12     	; 0x6b6c <__do_global_dtors+0x16>
    6b60:	22 97       	sbiw	r28, 0x02	; 2
    6b62:	01 09       	sbc	r16, r1
    6b64:	fe 01       	movw	r30, r28
    6b66:	0b bf       	out	0x3b, r16	; 59
    6b68:	0e 94 c9 32 	call	0x6592	; 0x6592 <__tablejump_elpm__>
    6b6c:	c2 32       	cpi	r28, 0x22	; 34
    6b6e:	d1 07       	cpc	r29, r17
    6b70:	80 e0       	ldi	r24, 0x00	; 0
    6b72:	08 07       	cpc	r16, r24
    6b74:	a9 f7       	brne	.-22     	; 0x6b60 <__do_global_dtors+0xa>
    6b76:	1b be       	out	0x3b, r1	; 59
    6b78:	f8 94       	cli

00006b7a <__stop_program>:
    6b7a:	ff cf       	rjmp	.-2      	; 0x6b7a <__stop_program>
